
Login_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  000048de  00004972  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800260  00800260  00004b72  2**0
                  ALLOC
  3 .stab         00004284  00000000  00000000  00004b74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002c9e  00000000  00000000  00008df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ba96  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000bc36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000be28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000e233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00010790  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00010950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000115b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__vector_6>
      1c:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__vector_7>
      20:	0c 94 12 1f 	jmp	0x3e24	; 0x3e24 <__vector_8>
      24:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__vector_9>
      28:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__vector_10>
      2c:	0c 94 17 16 	jmp	0x2c2e	; 0x2c2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 20 	call	0x41aa	; 0x41aa <main>
      8a:	0c 94 6d 24 	jmp	0x48da	; 0x48da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 24 	jmp	0x486c	; 0x486c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e3       	ldi	r26, 0x38	; 56
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 24 	jmp	0x486c	; 0x486c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e3       	ldi	r24, 0x38	; 56
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 24 	jmp	0x487c	; 0x487c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 e3       	ldi	r22, 0x38	; 56
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5e 24 	jmp	0x48bc	; 0x48bc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 46 24 	jmp	0x488c	; 0x488c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 62 24 	jmp	0x48c4	; 0x48c4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 3e 24 	jmp	0x487c	; 0x487c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e0 5c       	subi	r30, 0xC0	; 192
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_Disable>:

void GIE_Disable(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_voidSetPinDirection+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_voidSetPinDirection+0x8>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_voidSetPinDirection+0xa>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6b 83       	std	Y+3, r22	; 0x03
     e7a:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3e 83       	std	Y+6, r19	; 0x06
     e84:	2d 83       	std	Y+5, r18	; 0x05
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_voidSetPinDirection+0x2c>
     e90:	51 c0       	rjmp	.+162    	; 0xf34 <DIO_voidSetPinDirection+0xce>
     e92:	2d 81       	ldd	r18, Y+5	; 0x05
     e94:	3e 81       	ldd	r19, Y+6	; 0x06
     e96:	24 30       	cpi	r18, 0x04	; 4
     e98:	31 05       	cpc	r19, r1
     e9a:	7c f4       	brge	.+30     	; 0xeba <DIO_voidSetPinDirection+0x54>
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	71 f1       	breq	.+92     	; 0xf02 <DIO_voidSetPinDirection+0x9c>
     ea6:	2d 81       	ldd	r18, Y+5	; 0x05
     ea8:	3e 81       	ldd	r19, Y+6	; 0x06
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	ac f5       	brge	.+106    	; 0xf1a <DIO_voidSetPinDirection+0xb4>
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	d1 f0       	breq	.+52     	; 0xeec <DIO_voidSetPinDirection+0x86>
     eb8:	81 c0       	rjmp	.+258    	; 0xfbc <DIO_voidSetPinDirection+0x156>
     eba:	2d 81       	ldd	r18, Y+5	; 0x05
     ebc:	3e 81       	ldd	r19, Y+6	; 0x06
     ebe:	25 30       	cpi	r18, 0x05	; 5
     ec0:	31 05       	cpc	r19, r1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <DIO_voidSetPinDirection+0x60>
     ec4:	52 c0       	rjmp	.+164    	; 0xf6a <DIO_voidSetPinDirection+0x104>
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	85 30       	cpi	r24, 0x05	; 5
     ecc:	91 05       	cpc	r25, r1
     ece:	0c f4       	brge	.+2      	; 0xed2 <DIO_voidSetPinDirection+0x6c>
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <DIO_voidSetPinDirection+0xea>
     ed2:	2d 81       	ldd	r18, Y+5	; 0x05
     ed4:	3e 81       	ldd	r19, Y+6	; 0x06
     ed6:	26 30       	cpi	r18, 0x06	; 6
     ed8:	31 05       	cpc	r19, r1
     eda:	09 f4       	brne	.+2      	; 0xede <DIO_voidSetPinDirection+0x78>
     edc:	54 c0       	rjmp	.+168    	; 0xf86 <DIO_voidSetPinDirection+0x120>
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	87 30       	cpi	r24, 0x07	; 7
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <DIO_voidSetPinDirection+0x84>
     ee8:	5d c0       	rjmp	.+186    	; 0xfa4 <DIO_voidSetPinDirection+0x13e>
     eea:	68 c0       	rjmp	.+208    	; 0xfbc <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	98 2f       	mov	r25, r24
     ef6:	91 70       	andi	r25, 0x01	; 1
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	89 2b       	or	r24, r25
     efe:	81 83       	std	Z+1, r24	; 0x01
     f00:	5d c0       	rjmp	.+186    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	81 70       	andi	r24, 0x01	; 1
     f0c:	98 2f       	mov	r25, r24
     f0e:	99 0f       	add	r25, r25
     f10:	81 81       	ldd	r24, Z+1	; 0x01
     f12:	8d 7f       	andi	r24, 0xFD	; 253
     f14:	89 2b       	or	r24, r25
     f16:	81 83       	std	Z+1, r24	; 0x01
     f18:	51 c0       	rjmp	.+162    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	98 2f       	mov	r25, r24
     f26:	99 0f       	add	r25, r25
     f28:	99 0f       	add	r25, r25
     f2a:	81 81       	ldd	r24, Z+1	; 0x01
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	89 2b       	or	r24, r25
     f30:	81 83       	std	Z+1, r24	; 0x01
     f32:	44 c0       	rjmp	.+136    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	98 2f       	mov	r25, r24
     f40:	99 0f       	add	r25, r25
     f42:	99 0f       	add	r25, r25
     f44:	99 0f       	add	r25, r25
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	89 2b       	or	r24, r25
     f4c:	81 83       	std	Z+1, r24	; 0x01
     f4e:	36 c0       	rjmp	.+108    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	81 70       	andi	r24, 0x01	; 1
     f5a:	98 2f       	mov	r25, r24
     f5c:	92 95       	swap	r25
     f5e:	90 7f       	andi	r25, 0xF0	; 240
     f60:	81 81       	ldd	r24, Z+1	; 0x01
     f62:	8f 7e       	andi	r24, 0xEF	; 239
     f64:	89 2b       	or	r24, r25
     f66:	81 83       	std	Z+1, r24	; 0x01
     f68:	29 c0       	rjmp	.+82     	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	81 70       	andi	r24, 0x01	; 1
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	98 2f       	mov	r25, r24
     f76:	92 95       	swap	r25
     f78:	99 0f       	add	r25, r25
     f7a:	90 7e       	andi	r25, 0xE0	; 224
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	8f 7d       	andi	r24, 0xDF	; 223
     f80:	89 2b       	or	r24, r25
     f82:	81 83       	std	Z+1, r24	; 0x01
     f84:	1b c0       	rjmp	.+54     	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	81 70       	andi	r24, 0x01	; 1
     f90:	98 2f       	mov	r25, r24
     f92:	92 95       	swap	r25
     f94:	99 0f       	add	r25, r25
     f96:	99 0f       	add	r25, r25
     f98:	90 7c       	andi	r25, 0xC0	; 192
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	8f 7b       	andi	r24, 0xBF	; 191
     f9e:	89 2b       	or	r24, r25
     fa0:	81 83       	std	Z+1, r24	; 0x01
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	98 2f       	mov	r25, r24
     fae:	97 95       	ror	r25
     fb0:	99 27       	eor	r25, r25
     fb2:	97 95       	ror	r25
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	8f 77       	andi	r24, 0x7F	; 127
     fb8:	89 2b       	or	r24, r25
     fba:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     fbc:	26 96       	adiw	r28, 0x06	; 6
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_voidSetPinValue+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_voidSetPinValue+0x8>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_voidSetPinValue+0xa>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	6b 83       	std	Y+3, r22	; 0x03
     fe2:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3e 83       	std	Y+6, r19	; 0x06
     fec:	2d 83       	std	Y+5, r18	; 0x05
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	91 05       	cpc	r25, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <DIO_voidSetPinValue+0x2c>
     ff8:	51 c0       	rjmp	.+162    	; 0x109c <DIO_voidSetPinValue+0xce>
     ffa:	2d 81       	ldd	r18, Y+5	; 0x05
     ffc:	3e 81       	ldd	r19, Y+6	; 0x06
     ffe:	24 30       	cpi	r18, 0x04	; 4
    1000:	31 05       	cpc	r19, r1
    1002:	7c f4       	brge	.+30     	; 0x1022 <DIO_voidSetPinValue+0x54>
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <DIO_voidSetPinValue+0x9c>
    100e:	2d 81       	ldd	r18, Y+5	; 0x05
    1010:	3e 81       	ldd	r19, Y+6	; 0x06
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	ac f5       	brge	.+106    	; 0x1082 <DIO_voidSetPinValue+0xb4>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	d1 f0       	breq	.+52     	; 0x1054 <DIO_voidSetPinValue+0x86>
    1020:	81 c0       	rjmp	.+258    	; 0x1124 <DIO_voidSetPinValue+0x156>
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	25 30       	cpi	r18, 0x05	; 5
    1028:	31 05       	cpc	r19, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <DIO_voidSetPinValue+0x60>
    102c:	52 c0       	rjmp	.+164    	; 0x10d2 <DIO_voidSetPinValue+0x104>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	91 05       	cpc	r25, r1
    1036:	0c f4       	brge	.+2      	; 0x103a <DIO_voidSetPinValue+0x6c>
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <DIO_voidSetPinValue+0xea>
    103a:	2d 81       	ldd	r18, Y+5	; 0x05
    103c:	3e 81       	ldd	r19, Y+6	; 0x06
    103e:	26 30       	cpi	r18, 0x06	; 6
    1040:	31 05       	cpc	r19, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <DIO_voidSetPinValue+0x78>
    1044:	54 c0       	rjmp	.+168    	; 0x10ee <DIO_voidSetPinValue+0x120>
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	87 30       	cpi	r24, 0x07	; 7
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <DIO_voidSetPinValue+0x84>
    1050:	5d c0       	rjmp	.+186    	; 0x110c <DIO_voidSetPinValue+0x13e>
    1052:	68 c0       	rjmp	.+208    	; 0x1124 <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	81 70       	andi	r24, 0x01	; 1
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	98 2f       	mov	r25, r24
    105e:	91 70       	andi	r25, 0x01	; 1
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	8e 7f       	andi	r24, 0xFE	; 254
    1064:	89 2b       	or	r24, r25
    1066:	82 83       	std	Z+2, r24	; 0x02
    1068:	5d c0       	rjmp	.+186    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	e9 81       	ldd	r30, Y+1	; 0x01
    1070:	fa 81       	ldd	r31, Y+2	; 0x02
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	98 2f       	mov	r25, r24
    1076:	99 0f       	add	r25, r25
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	8d 7f       	andi	r24, 0xFD	; 253
    107c:	89 2b       	or	r24, r25
    107e:	82 83       	std	Z+2, r24	; 0x02
    1080:	51 c0       	rjmp	.+162    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	e9 81       	ldd	r30, Y+1	; 0x01
    1088:	fa 81       	ldd	r31, Y+2	; 0x02
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	98 2f       	mov	r25, r24
    108e:	99 0f       	add	r25, r25
    1090:	99 0f       	add	r25, r25
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	8b 7f       	andi	r24, 0xFB	; 251
    1096:	89 2b       	or	r24, r25
    1098:	82 83       	std	Z+2, r24	; 0x02
    109a:	44 c0       	rjmp	.+136    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	81 70       	andi	r24, 0x01	; 1
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	98 2f       	mov	r25, r24
    10a8:	99 0f       	add	r25, r25
    10aa:	99 0f       	add	r25, r25
    10ac:	99 0f       	add	r25, r25
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	89 2b       	or	r24, r25
    10b4:	82 83       	std	Z+2, r24	; 0x02
    10b6:	36 c0       	rjmp	.+108    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	98 2f       	mov	r25, r24
    10c4:	92 95       	swap	r25
    10c6:	90 7f       	andi	r25, 0xF0	; 240
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	8f 7e       	andi	r24, 0xEF	; 239
    10cc:	89 2b       	or	r24, r25
    10ce:	82 83       	std	Z+2, r24	; 0x02
    10d0:	29 c0       	rjmp	.+82     	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	81 70       	andi	r24, 0x01	; 1
    10d6:	e9 81       	ldd	r30, Y+1	; 0x01
    10d8:	fa 81       	ldd	r31, Y+2	; 0x02
    10da:	81 70       	andi	r24, 0x01	; 1
    10dc:	98 2f       	mov	r25, r24
    10de:	92 95       	swap	r25
    10e0:	99 0f       	add	r25, r25
    10e2:	90 7e       	andi	r25, 0xE0	; 224
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	8f 7d       	andi	r24, 0xDF	; 223
    10e8:	89 2b       	or	r24, r25
    10ea:	82 83       	std	Z+2, r24	; 0x02
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	98 2f       	mov	r25, r24
    10fa:	92 95       	swap	r25
    10fc:	99 0f       	add	r25, r25
    10fe:	99 0f       	add	r25, r25
    1100:	90 7c       	andi	r25, 0xC0	; 192
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	8f 7b       	andi	r24, 0xBF	; 191
    1106:	89 2b       	or	r24, r25
    1108:	82 83       	std	Z+2, r24	; 0x02
    110a:	0c c0       	rjmp	.+24     	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	98 2f       	mov	r25, r24
    1116:	97 95       	ror	r25
    1118:	99 27       	eor	r25, r25
    111a:	97 95       	ror	r25
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	8f 77       	andi	r24, 0x7F	; 127
    1120:	89 2b       	or	r24, r25
    1122:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
    1124:	26 96       	adiw	r28, 0x06	; 6
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_voidGetPinValue+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_voidGetPinValue+0x8>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_voidGetPinValue+0xa>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9b 83       	std	Y+3, r25	; 0x03
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <DIO_voidGetPinValue+0x2a>
    115e:	3e c0       	rjmp	.+124    	; 0x11dc <DIO_voidGetPinValue+0xa6>
    1160:	2d 81       	ldd	r18, Y+5	; 0x05
    1162:	3e 81       	ldd	r19, Y+6	; 0x06
    1164:	24 30       	cpi	r18, 0x04	; 4
    1166:	31 05       	cpc	r19, r1
    1168:	7c f4       	brge	.+30     	; 0x1188 <DIO_voidGetPinValue+0x52>
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	29 f1       	breq	.+74     	; 0x11be <DIO_voidGetPinValue+0x88>
    1174:	2d 81       	ldd	r18, Y+5	; 0x05
    1176:	3e 81       	ldd	r19, Y+6	; 0x06
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	3c f5       	brge	.+78     	; 0x11cc <DIO_voidGetPinValue+0x96>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	b1 f0       	breq	.+44     	; 0x11b2 <DIO_voidGetPinValue+0x7c>
    1186:	55 c0       	rjmp	.+170    	; 0x1232 <DIO_voidGetPinValue+0xfc>
    1188:	2d 81       	ldd	r18, Y+5	; 0x05
    118a:	3e 81       	ldd	r19, Y+6	; 0x06
    118c:	25 30       	cpi	r18, 0x05	; 5
    118e:	31 05       	cpc	r19, r1
    1190:	b1 f1       	breq	.+108    	; 0x11fe <DIO_voidGetPinValue+0xc8>
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	91 05       	cpc	r25, r1
    119a:	4c f1       	brlt	.+82     	; 0x11ee <DIO_voidGetPinValue+0xb8>
    119c:	2d 81       	ldd	r18, Y+5	; 0x05
    119e:	3e 81       	ldd	r19, Y+6	; 0x06
    11a0:	26 30       	cpi	r18, 0x06	; 6
    11a2:	31 05       	cpc	r19, r1
    11a4:	a9 f1       	breq	.+106    	; 0x1210 <DIO_voidGetPinValue+0xda>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	87 30       	cpi	r24, 0x07	; 7
    11ac:	91 05       	cpc	r25, r1
    11ae:	d1 f1       	breq	.+116    	; 0x1224 <DIO_voidGetPinValue+0xee>
    11b0:	40 c0       	rjmp	.+128    	; 0x1232 <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
    11b2:	ea 81       	ldd	r30, Y+2	; 0x02
    11b4:	fb 81       	ldd	r31, Y+3	; 0x03
    11b6:	80 81       	ld	r24, Z
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	3a c0       	rjmp	.+116    	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
    11be:	ea 81       	ldd	r30, Y+2	; 0x02
    11c0:	fb 81       	ldd	r31, Y+3	; 0x03
    11c2:	80 81       	ld	r24, Z
    11c4:	86 95       	lsr	r24
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	33 c0       	rjmp	.+102    	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
    11cc:	ea 81       	ldd	r30, Y+2	; 0x02
    11ce:	fb 81       	ldd	r31, Y+3	; 0x03
    11d0:	80 81       	ld	r24, Z
    11d2:	86 95       	lsr	r24
    11d4:	86 95       	lsr	r24
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	2b c0       	rjmp	.+86     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
    11dc:	ea 81       	ldd	r30, Y+2	; 0x02
    11de:	fb 81       	ldd	r31, Y+3	; 0x03
    11e0:	80 81       	ld	r24, Z
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	86 95       	lsr	r24
    11e8:	81 70       	andi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
    11ee:	ea 81       	ldd	r30, Y+2	; 0x02
    11f0:	fb 81       	ldd	r31, Y+3	; 0x03
    11f2:	80 81       	ld	r24, Z
    11f4:	82 95       	swap	r24
    11f6:	8f 70       	andi	r24, 0x0F	; 15
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	1a c0       	rjmp	.+52     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
    11fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1200:	fb 81       	ldd	r31, Y+3	; 0x03
    1202:	80 81       	ld	r24, Z
    1204:	82 95       	swap	r24
    1206:	86 95       	lsr	r24
    1208:	87 70       	andi	r24, 0x07	; 7
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	11 c0       	rjmp	.+34     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
    1210:	ea 81       	ldd	r30, Y+2	; 0x02
    1212:	fb 81       	ldd	r31, Y+3	; 0x03
    1214:	80 81       	ld	r24, Z
    1216:	82 95       	swap	r24
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	83 70       	andi	r24, 0x03	; 3
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	fb 81       	ldd	r31, Y+3	; 0x03
    1228:	80 81       	ld	r24, Z
    122a:	88 1f       	adc	r24, r24
    122c:	88 27       	eor	r24, r24
    122e:	88 1f       	adc	r24, r24
    1230:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
}
    1234:	26 96       	adiw	r28, 0x06	; 6
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <DIO_voidSetPortDirection+0x6>
    124c:	0f 92       	push	r0
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 83       	std	Z+1, r24	; 0x01
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <DIO_voidSetPortValue+0x6>
    1272:	0f 92       	push	r0
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	82 83       	std	Z+2, r24	; 0x02
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <DIO_voidGetPortValue+0x6>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
    12a0:	e9 81       	ldd	r30, Y+1	; 0x01
    12a2:	fa 81       	ldd	r31, Y+2	; 0x02
    12a4:	80 81       	ld	r24, Z
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <KEYPAD_Init>:
#include "GPIO_Int.h"
#include "avr/delay.h"
#include "KeyPad.h"

void KEYPAD_Init(void)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	/* Rows */
	DIO_voidSetPinDirection(pPORTC, Pin0, output);
    12b8:	80 91 5b 02 	lds	r24, 0x025B
    12bc:	90 91 5c 02 	lds	r25, 0x025C
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin1, output);
    12c8:	80 91 5b 02 	lds	r24, 0x025B
    12cc:	90 91 5c 02 	lds	r25, 0x025C
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin2, output);
    12d8:	80 91 5b 02 	lds	r24, 0x025B
    12dc:	90 91 5c 02 	lds	r25, 0x025C
    12e0:	62 e0       	ldi	r22, 0x02	; 2
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin3, output);
    12e8:	80 91 5b 02 	lds	r24, 0x025B
    12ec:	90 91 5c 02 	lds	r25, 0x025C
    12f0:	63 e0       	ldi	r22, 0x03	; 3
    12f2:	41 e0       	ldi	r20, 0x01	; 1
    12f4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>

	/* Columns */
	DIO_voidSetPinDirection(pPORTC, pin4, input);
    12f8:	80 91 5b 02 	lds	r24, 0x025B
    12fc:	90 91 5c 02 	lds	r25, 0x025C
    1300:	64 e0       	ldi	r22, 0x04	; 4
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin5, input);
    1308:	80 91 5b 02 	lds	r24, 0x025B
    130c:	90 91 5c 02 	lds	r25, 0x025C
    1310:	65 e0       	ldi	r22, 0x05	; 5
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin6, input);
    1318:	80 91 5b 02 	lds	r24, 0x025B
    131c:	90 91 5c 02 	lds	r25, 0x025C
    1320:	66 e0       	ldi	r22, 0x06	; 6
    1322:	40 e0       	ldi	r20, 0x00	; 0
    1324:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin7, input);
    1328:	80 91 5b 02 	lds	r24, 0x025B
    132c:	90 91 5c 02 	lds	r25, 0x025C
    1330:	67 e0       	ldi	r22, 0x07	; 7
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(pPORTC, Pin0, high);
    1338:	80 91 5b 02 	lds	r24, 0x025B
    133c:	90 91 5c 02 	lds	r25, 0x025C
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin1, high);
    1348:	80 91 5b 02 	lds	r24, 0x025B
    134c:	90 91 5c 02 	lds	r25, 0x025C
    1350:	61 e0       	ldi	r22, 0x01	; 1
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin2, high);
    1358:	80 91 5b 02 	lds	r24, 0x025B
    135c:	90 91 5c 02 	lds	r25, 0x025C
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin3, high);
    1368:	80 91 5b 02 	lds	r24, 0x025B
    136c:	90 91 5c 02 	lds	r25, 0x025C
    1370:	63 e0       	ldi	r22, 0x03	; 3
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>

//	DIO_voidSetPinValue(pPORTC, pin4, high);
//	DIO_voidSetPinValue(pPORTC, pin5, high);
//	DIO_voidSetPinValue(pPORTC, pin6, high);
//	DIO_voidSetPinValue(pPORTC, pin7, high);
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <KEYPAD_Get_Pressed_Key>:

u8 KEYPAD_Get_Pressed_Key(void)
{
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	a6 97       	sbiw	r28, 0x26	; 38
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
	u8  i,j;
	u8 rows[]={3,2,1,0};
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	8f 8f       	std	Y+31, r24	; 0x1f
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	88 a3       	std	Y+32, r24	; 0x20
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	89 a3       	std	Y+33, r24	; 0x21
    139e:	1a a2       	std	Y+34, r1	; 0x22
	u8 cols[]={4,5,6,7};
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	8b a3       	std	Y+35, r24	; 0x23
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	8c a3       	std	Y+36, r24	; 0x24
    13a8:	86 e0       	ldi	r24, 0x06	; 6
    13aa:	8d a3       	std	Y+37, r24	; 0x25
    13ac:	87 e0       	ldi	r24, 0x07	; 7
    13ae:	8e a3       	std	Y+38, r24	; 0x26

	while(1)
	{

		for(i = 0; i<SIZE; i++)
    13b0:	1e 8e       	std	Y+30, r1	; 0x1e
    13b2:	4e c1       	rjmp	.+668    	; 0x1650 <KEYPAD_Get_Pressed_Key+0x2d2>
		{
			DIO_voidSetPinValue(pPORTC, rows[i], low);
    13b4:	40 91 5b 02 	lds	r20, 0x025B
    13b8:	50 91 5c 02 	lds	r21, 0x025C
    13bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	ce 01       	movw	r24, r28
    13c4:	4f 96       	adiw	r24, 0x1f	; 31
    13c6:	fc 01       	movw	r30, r24
    13c8:	e2 0f       	add	r30, r18
    13ca:	f3 1f       	adc	r31, r19
    13cc:	20 81       	ld	r18, Z
    13ce:	ca 01       	movw	r24, r20
    13d0:	62 2f       	mov	r22, r18
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>

			for(j = 0; j<SIZE; j++)
    13d8:	1d 8e       	std	Y+29, r1	; 0x1d
    13da:	af c0       	rjmp	.+350    	; 0x153a <KEYPAD_Get_Pressed_Key+0x1bc>
			{
				if(DIO_voidGetPinValue(pPORTC, cols[j]) == low)
    13dc:	40 91 5b 02 	lds	r20, 0x025B
    13e0:	50 91 5c 02 	lds	r21, 0x025C
    13e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	ce 01       	movw	r24, r28
    13ec:	83 96       	adiw	r24, 0x23	; 35
    13ee:	fc 01       	movw	r30, r24
    13f0:	e2 0f       	add	r30, r18
    13f2:	f3 1f       	adc	r31, r19
    13f4:	20 81       	ld	r18, Z
    13f6:	ca 01       	movw	r24, r20
    13f8:	62 2f       	mov	r22, r18
    13fa:	0e 94 9b 08 	call	0x1136	; 0x1136 <DIO_voidGetPinValue>
    13fe:	88 23       	and	r24, r24
    1400:	09 f0       	breq	.+2      	; 0x1404 <KEYPAD_Get_Pressed_Key+0x86>
    1402:	98 c0       	rjmp	.+304    	; 0x1534 <KEYPAD_Get_Pressed_Key+0x1b6>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 ef       	ldi	r26, 0xF0	; 240
    140a:	b1 e4       	ldi	r27, 0x41	; 65
    140c:	89 8f       	std	Y+25, r24	; 0x19
    140e:	9a 8f       	std	Y+26, r25	; 0x1a
    1410:	ab 8f       	std	Y+27, r26	; 0x1b
    1412:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1414:	69 8d       	ldd	r22, Y+25	; 0x19
    1416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a ef       	ldi	r20, 0xFA	; 250
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8d 8b       	std	Y+21, r24	; 0x15
    142e:	9e 8b       	std	Y+22, r25	; 0x16
    1430:	af 8b       	std	Y+23, r26	; 0x17
    1432:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1434:	6d 89       	ldd	r22, Y+21	; 0x15
    1436:	7e 89       	ldd	r23, Y+22	; 0x16
    1438:	8f 89       	ldd	r24, Y+23	; 0x17
    143a:	98 8d       	ldd	r25, Y+24	; 0x18
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	2c f4       	brge	.+10     	; 0x1456 <KEYPAD_Get_Pressed_Key+0xd8>
		__ticks = 1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	3f c0       	rjmp	.+126    	; 0x14d4 <KEYPAD_Get_Pressed_Key+0x156>
	else if (__tmp > 65535)
    1456:	6d 89       	ldd	r22, Y+21	; 0x15
    1458:	7e 89       	ldd	r23, Y+22	; 0x16
    145a:	8f 89       	ldd	r24, Y+23	; 0x17
    145c:	98 8d       	ldd	r25, Y+24	; 0x18
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	3f ef       	ldi	r19, 0xFF	; 255
    1462:	4f e7       	ldi	r20, 0x7F	; 127
    1464:	57 e4       	ldi	r21, 0x47	; 71
    1466:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    146a:	18 16       	cp	r1, r24
    146c:	4c f5       	brge	.+82     	; 0x14c0 <KEYPAD_Get_Pressed_Key+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    146e:	69 8d       	ldd	r22, Y+25	; 0x19
    1470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e2       	ldi	r20, 0x20	; 32
    147c:	51 e4       	ldi	r21, 0x41	; 65
    147e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	bc 01       	movw	r22, r24
    1488:	cd 01       	movw	r24, r26
    148a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148e:	dc 01       	movw	r26, r24
    1490:	cb 01       	movw	r24, r22
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <KEYPAD_Get_Pressed_Key+0x138>
    1498:	88 ec       	ldi	r24, 0xC8	; 200
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9a 8b       	std	Y+18, r25	; 0x12
    149e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a0:	89 89       	ldd	r24, Y+17	; 0x11
    14a2:	9a 89       	ldd	r25, Y+18	; 0x12
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <KEYPAD_Get_Pressed_Key+0x126>
    14a8:	9a 8b       	std	Y+18, r25	; 0x12
    14aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ac:	8b 89       	ldd	r24, Y+19	; 0x13
    14ae:	9c 89       	ldd	r25, Y+20	; 0x14
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	9c 8b       	std	Y+20, r25	; 0x14
    14b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b6:	8b 89       	ldd	r24, Y+19	; 0x13
    14b8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	69 f7       	brne	.-38     	; 0x1498 <KEYPAD_Get_Pressed_Key+0x11a>
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <KEYPAD_Get_Pressed_Key+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c0:	6d 89       	ldd	r22, Y+21	; 0x15
    14c2:	7e 89       	ldd	r23, Y+22	; 0x16
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	98 8d       	ldd	r25, Y+24	; 0x18
    14c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	9c 8b       	std	Y+20, r25	; 0x14
    14d2:	8b 8b       	std	Y+19, r24	; 0x13
    14d4:	8b 89       	ldd	r24, Y+19	; 0x13
    14d6:	9c 89       	ldd	r25, Y+20	; 0x14
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	8f 87       	std	Y+15, r24	; 0x0f
    14dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14de:	98 89       	ldd	r25, Y+16	; 0x10
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <KEYPAD_Get_Pressed_Key+0x162>
    14e4:	98 8b       	std	Y+16, r25	; 0x10
    14e6:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(30);
					if(DIO_voidGetPinValue(pPORTC, cols[j]) == low)
    14e8:	40 91 5b 02 	lds	r20, 0x025B
    14ec:	50 91 5c 02 	lds	r21, 0x025C
    14f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	ce 01       	movw	r24, r28
    14f8:	83 96       	adiw	r24, 0x23	; 35
    14fa:	fc 01       	movw	r30, r24
    14fc:	e2 0f       	add	r30, r18
    14fe:	f3 1f       	adc	r31, r19
    1500:	20 81       	ld	r18, Z
    1502:	ca 01       	movw	r24, r20
    1504:	62 2f       	mov	r22, r18
    1506:	0e 94 9b 08 	call	0x1136	; 0x1136 <DIO_voidGetPinValue>
    150a:	88 23       	and	r24, r24
    150c:	99 f4       	brne	.+38     	; 0x1534 <KEYPAD_Get_Pressed_Key+0x1b6>
					{
						return ((i*SIZE) + (j));
    150e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	98 2f       	mov	r25, r24
    151e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1520:	89 0f       	add	r24, r25
		//		}

	}


}
    1522:	a6 96       	adiw	r28, 0x26	; 38
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

		for(i = 0; i<SIZE; i++)
		{
			DIO_voidSetPinValue(pPORTC, rows[i], low);

			for(j = 0; j<SIZE; j++)
    1534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	8d 8f       	std	Y+29, r24	; 0x1d
    153a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	08 f4       	brcc	.+2      	; 0x1542 <KEYPAD_Get_Pressed_Key+0x1c4>
    1540:	4d cf       	rjmp	.-358    	; 0x13dc <KEYPAD_Get_Pressed_Key+0x5e>
					{
						return ((i*SIZE) + (j));
					}
				}
			}
			DIO_voidSetPinValue(pPORTC, rows[i], high);
    1542:	40 91 5b 02 	lds	r20, 0x025B
    1546:	50 91 5c 02 	lds	r21, 0x025C
    154a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	ce 01       	movw	r24, r28
    1552:	4f 96       	adiw	r24, 0x1f	; 31
    1554:	fc 01       	movw	r30, r24
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	20 81       	ld	r18, Z
    155c:	ca 01       	movw	r24, r20
    155e:	62 2f       	mov	r22, r18
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	a0 ea       	ldi	r26, 0xA0	; 160
    156c:	b0 e4       	ldi	r27, 0x40	; 64
    156e:	8b 87       	std	Y+11, r24	; 0x0b
    1570:	9c 87       	std	Y+12, r25	; 0x0c
    1572:	ad 87       	std	Y+13, r26	; 0x0d
    1574:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1576:	6b 85       	ldd	r22, Y+11	; 0x0b
    1578:	7c 85       	ldd	r23, Y+12	; 0x0c
    157a:	8d 85       	ldd	r24, Y+13	; 0x0d
    157c:	9e 85       	ldd	r25, Y+14	; 0x0e
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a ef       	ldi	r20, 0xFA	; 250
    1584:	54 e4       	ldi	r21, 0x44	; 68
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8f 83       	std	Y+7, r24	; 0x07
    1590:	98 87       	std	Y+8, r25	; 0x08
    1592:	a9 87       	std	Y+9, r26	; 0x09
    1594:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <KEYPAD_Get_Pressed_Key+0x23a>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	3f c0       	rjmp	.+126    	; 0x1636 <KEYPAD_Get_Pressed_Key+0x2b8>
	else if (__tmp > 65535)
    15b8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ba:	78 85       	ldd	r23, Y+8	; 0x08
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	4c f5       	brge	.+82     	; 0x1622 <KEYPAD_Get_Pressed_Key+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e2       	ldi	r20, 0x20	; 32
    15de:	51 e4       	ldi	r21, 0x41	; 65
    15e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <KEYPAD_Get_Pressed_Key+0x29a>
    15fa:	88 ec       	ldi	r24, 0xC8	; 200
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <KEYPAD_Get_Pressed_Key+0x288>
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f7       	brne	.-38     	; 0x15fa <KEYPAD_Get_Pressed_Key+0x27c>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <KEYPAD_Get_Pressed_Key+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1622:	6f 81       	ldd	r22, Y+7	; 0x07
    1624:	78 85       	ldd	r23, Y+8	; 0x08
    1626:	89 85       	ldd	r24, Y+9	; 0x09
    1628:	9a 85       	ldd	r25, Y+10	; 0x0a
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 83       	std	Y+5, r24	; 0x05
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	9a 81       	ldd	r25, Y+2	; 0x02
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <KEYPAD_Get_Pressed_Key+0x2c4>
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01
	u8 cols[]={4,5,6,7};

	while(1)
	{

		for(i = 0; i<SIZE; i++)
    164a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    164c:	8f 5f       	subi	r24, 0xFF	; 255
    164e:	8e 8f       	std	Y+30, r24	; 0x1e
    1650:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1652:	84 30       	cpi	r24, 0x04	; 4
    1654:	08 f4       	brcc	.+2      	; 0x1658 <KEYPAD_Get_Pressed_Key+0x2da>
    1656:	ae ce       	rjmp	.-676    	; 0x13b4 <KEYPAD_Get_Pressed_Key+0x36>
    1658:	ab ce       	rjmp	.-682    	; 0x13b0 <KEYPAD_Get_Pressed_Key+0x32>

0000165a <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2e 97       	sbiw	r28, 0x0e	; 14
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
    166e:	80 91 57 02 	lds	r24, 0x0257
    1672:	90 91 58 02 	lds	r25, 0x0258
    1676:	63 e0       	ldi	r22, 0x03	; 3
    1678:	41 e0       	ldi	r20, 0x01	; 1
    167a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
    167e:	80 91 57 02 	lds	r24, 0x0257
    1682:	90 91 58 02 	lds	r25, 0x0258
    1686:	62 e0       	ldi	r22, 0x02	; 2
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a8 e4       	ldi	r26, 0x48	; 72
    1694:	b2 e4       	ldi	r27, 0x42	; 66
    1696:	8b 87       	std	Y+11, r24	; 0x0b
    1698:	9c 87       	std	Y+12, r25	; 0x0c
    169a:	ad 87       	std	Y+13, r26	; 0x0d
    169c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8f 83       	std	Y+7, r24	; 0x07
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	a9 87       	std	Y+9, r26	; 0x09
    16bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <H_LCD_void_Init+0x86>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	3f c0       	rjmp	.+126    	; 0x175e <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <H_LCD_void_Init+0xe6>
    1722:	88 ec       	ldi	r24, 0xC8	; 200
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <H_LCD_void_Init+0xd4>
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <H_LCD_void_Init+0xc8>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <H_LCD_void_Init+0x110>
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPinDirection(pPORTB, Pin0, output);
    1772:	80 91 59 02 	lds	r24, 0x0259
    1776:	90 91 5a 02 	lds	r25, 0x025A
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin1, output);
    1782:	80 91 59 02 	lds	r24, 0x0259
    1786:	90 91 5a 02 	lds	r25, 0x025A
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	41 e0       	ldi	r20, 0x01	; 1
    178e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin2, output);
    1792:	80 91 59 02 	lds	r24, 0x0259
    1796:	90 91 5a 02 	lds	r25, 0x025A
    179a:	62 e0       	ldi	r22, 0x02	; 2
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin4, output);
    17a2:	80 91 59 02 	lds	r24, 0x0259
    17a6:	90 91 5a 02 	lds	r25, 0x025A
    17aa:	64 e0       	ldi	r22, 0x04	; 4
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    17b2:	80 91 57 02 	lds	r24, 0x0257
    17b6:	90 91 58 02 	lds	r25, 0x0258
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17c2:	82 e3       	ldi	r24, 0x32	; 50
    17c4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17c8:	82 e3       	ldi	r24, 0x32	; 50
    17ca:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    17ce:	88 e2       	ldi	r24, 0x28	; 40
    17d0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    17d4:	8e e0       	ldi	r24, 0x0E	; 14
    17d6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>


	/*
 #endif*/

}
    17e0:	2e 96       	adiw	r28, 0x0e	; 14
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	f8 94       	cli
    17e6:	de bf       	out	0x3e, r29	; 62
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	cd bf       	out	0x3d, r28	; 61
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	6d 97       	sbiw	r28, 0x1d	; 29
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    1808:	80 91 57 02 	lds	r24, 0x0257
    180c:	90 91 58 02 	lds	r25, 0x0258
    1810:	63 e0       	ldi	r22, 0x03	; 3
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	bf e3       	ldi	r27, 0x3F	; 63
    1820:	89 8f       	std	Y+25, r24	; 0x19
    1822:	9a 8f       	std	Y+26, r25	; 0x1a
    1824:	ab 8f       	std	Y+27, r26	; 0x1b
    1826:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1828:	69 8d       	ldd	r22, Y+25	; 0x19
    182a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    182c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    182e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a ef       	ldi	r20, 0xFA	; 250
    1836:	54 e4       	ldi	r21, 0x44	; 68
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8d 8b       	std	Y+21, r24	; 0x15
    1842:	9e 8b       	std	Y+22, r25	; 0x16
    1844:	af 8b       	std	Y+23, r26	; 0x17
    1846:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1848:	6d 89       	ldd	r22, Y+21	; 0x15
    184a:	7e 89       	ldd	r23, Y+22	; 0x16
    184c:	8f 89       	ldd	r24, Y+23	; 0x17
    184e:	98 8d       	ldd	r25, Y+24	; 0x18
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e8       	ldi	r20, 0x80	; 128
    1856:	5f e3       	ldi	r21, 0x3F	; 63
    1858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185c:	88 23       	and	r24, r24
    185e:	2c f4       	brge	.+10     	; 0x186a <H_LCD_void_sendData+0x78>
		__ticks = 1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 8b       	std	Y+20, r25	; 0x14
    1866:	8b 8b       	std	Y+19, r24	; 0x13
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    186a:	6d 89       	ldd	r22, Y+21	; 0x15
    186c:	7e 89       	ldd	r23, Y+22	; 0x16
    186e:	8f 89       	ldd	r24, Y+23	; 0x17
    1870:	98 8d       	ldd	r25, Y+24	; 0x18
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	3f ef       	ldi	r19, 0xFF	; 255
    1876:	4f e7       	ldi	r20, 0x7F	; 127
    1878:	57 e4       	ldi	r21, 0x47	; 71
    187a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187e:	18 16       	cp	r1, r24
    1880:	4c f5       	brge	.+82     	; 0x18d4 <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1882:	69 8d       	ldd	r22, Y+25	; 0x19
    1884:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1886:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1888:	9c 8d       	ldd	r25, Y+28	; 0x1c
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	bc 01       	movw	r22, r24
    189c:	cd 01       	movw	r24, r26
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
    18aa:	0f c0       	rjmp	.+30     	; 0x18ca <H_LCD_void_sendData+0xd8>
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9a 8b       	std	Y+18, r25	; 0x12
    18b2:	89 8b       	std	Y+17, r24	; 0x11
    18b4:	89 89       	ldd	r24, Y+17	; 0x11
    18b6:	9a 89       	ldd	r25, Y+18	; 0x12
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <H_LCD_void_sendData+0xc6>
    18bc:	9a 8b       	std	Y+18, r25	; 0x12
    18be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c0:	8b 89       	ldd	r24, Y+19	; 0x13
    18c2:	9c 89       	ldd	r25, Y+20	; 0x14
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ca:	8b 89       	ldd	r24, Y+19	; 0x13
    18cc:	9c 89       	ldd	r25, Y+20	; 0x14
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	69 f7       	brne	.-38     	; 0x18ac <H_LCD_void_sendData+0xba>
    18d2:	14 c0       	rjmp	.+40     	; 0x18fc <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d4:	6d 89       	ldd	r22, Y+21	; 0x15
    18d6:	7e 89       	ldd	r23, Y+22	; 0x16
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	9c 8b       	std	Y+20, r25	; 0x14
    18e6:	8b 8b       	std	Y+19, r24	; 0x13
    18e8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ea:	9c 89       	ldd	r25, Y+20	; 0x14
    18ec:	98 8b       	std	Y+16, r25	; 0x10
    18ee:	8f 87       	std	Y+15, r24	; 0x0f
    18f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18f2:	98 89       	ldd	r25, Y+16	; 0x10
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <H_LCD_void_sendData+0x102>
    18f8:	98 8b       	std	Y+16, r25	; 0x10
    18fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    18fc:	80 91 57 02 	lds	r24, 0x0257
    1900:	90 91 58 02 	lds	r25, 0x0258
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e8       	ldi	r26, 0x80	; 128
    1912:	bf e3       	ldi	r27, 0x3F	; 63
    1914:	8b 87       	std	Y+11, r24	; 0x0b
    1916:	9c 87       	std	Y+12, r25	; 0x0c
    1918:	ad 87       	std	Y+13, r26	; 0x0d
    191a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6b 85       	ldd	r22, Y+11	; 0x0b
    191e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1920:	8d 85       	ldd	r24, Y+13	; 0x0d
    1922:	9e 85       	ldd	r25, Y+14	; 0x0e
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a ef       	ldi	r20, 0xFA	; 250
    192a:	54 e4       	ldi	r21, 0x44	; 68
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8f 83       	std	Y+7, r24	; 0x07
    1936:	98 87       	std	Y+8, r25	; 0x08
    1938:	a9 87       	std	Y+9, r26	; 0x09
    193a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193c:	6f 81       	ldd	r22, Y+7	; 0x07
    193e:	78 85       	ldd	r23, Y+8	; 0x08
    1940:	89 85       	ldd	r24, Y+9	; 0x09
    1942:	9a 85       	ldd	r25, Y+10	; 0x0a
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	9e 83       	std	Y+6, r25	; 0x06
    195a:	8d 83       	std	Y+5, r24	; 0x05
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    195e:	6f 81       	ldd	r22, Y+7	; 0x07
    1960:	78 85       	ldd	r23, Y+8	; 0x08
    1962:	89 85       	ldd	r24, Y+9	; 0x09
    1964:	9a 85       	ldd	r25, Y+10	; 0x0a
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	9e 83       	std	Y+6, r25	; 0x06
    199c:	8d 83       	std	Y+5, r24	; 0x05
    199e:	0f c0       	rjmp	.+30     	; 0x19be <H_LCD_void_sendData+0x1cc>
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9c 83       	std	Y+4, r25	; 0x04
    19a6:	8b 83       	std	Y+3, r24	; 0x03
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <H_LCD_void_sendData+0x1ba>
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	9e 81       	ldd	r25, Y+6	; 0x06
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	9e 83       	std	Y+6, r25	; 0x06
    19bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8d 81       	ldd	r24, Y+5	; 0x05
    19c0:	9e 81       	ldd	r25, Y+6	; 0x06
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <H_LCD_void_sendData+0x1ae>
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ca:	78 85       	ldd	r23, Y+8	; 0x08
    19cc:	89 85       	ldd	r24, Y+9	; 0x09
    19ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	9a 83       	std	Y+2, r25	; 0x02
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <H_LCD_void_sendData+0x1f6>
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    19f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f2:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <H_LCD_void_latchByte>
}
    19f6:	6d 96       	adiw	r28, 0x1d	; 29
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	6d 97       	sbiw	r28, 0x1d	; 29
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1a1e:	80 91 57 02 	lds	r24, 0x0257
    1a22:	90 91 58 02 	lds	r25, 0x0258
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e8       	ldi	r26, 0x80	; 128
    1a34:	bf e3       	ldi	r27, 0x3F	; 63
    1a36:	89 8f       	std	Y+25, r24	; 0x19
    1a38:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8d 8b       	std	Y+21, r24	; 0x15
    1a58:	9e 8b       	std	Y+22, r25	; 0x16
    1a5a:	af 8b       	std	Y+23, r26	; 0x17
    1a5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    1a80:	6d 89       	ldd	r22, Y+21	; 0x15
    1a82:	7e 89       	ldd	r23, Y+22	; 0x16
    1a84:	8f 89       	ldd	r24, Y+23	; 0x17
    1a86:	98 8d       	ldd	r25, Y+24	; 0x18
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <H_LCD_void_sendCommand+0xd8>
    1ac2:	88 ec       	ldi	r24, 0xC8	; 200
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9a 8b       	std	Y+18, r25	; 0x12
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
    1aca:	89 89       	ldd	r24, Y+17	; 0x11
    1acc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <H_LCD_void_sendCommand+0xc6>
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <H_LCD_void_sendCommand+0xba>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	98 8b       	std	Y+16, r25	; 0x10
    1b04:	8f 87       	std	Y+15, r24	; 0x0f
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	98 89       	ldd	r25, Y+16	; 0x10
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <H_LCD_void_sendCommand+0x102>
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1b12:	80 91 57 02 	lds	r24, 0x0257
    1b16:	90 91 58 02 	lds	r25, 0x0258
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	a0 e8       	ldi	r26, 0x80	; 128
    1b28:	bf e3       	ldi	r27, 0x3F	; 63
    1b2a:	8b 87       	std	Y+11, r24	; 0x0b
    1b2c:	9c 87       	std	Y+12, r25	; 0x0c
    1b2e:	ad 87       	std	Y+13, r26	; 0x0d
    1b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8f 83       	std	Y+7, r24	; 0x07
    1b4c:	98 87       	std	Y+8, r25	; 0x08
    1b4e:	a9 87       	std	Y+9, r26	; 0x09
    1b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9e 83       	std	Y+6, r25	; 0x06
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1b74:	6f 81       	ldd	r22, Y+7	; 0x07
    1b76:	78 85       	ldd	r23, Y+8	; 0x08
    1b78:	89 85       	ldd	r24, Y+9	; 0x09
    1b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9e 83       	std	Y+6, r25	; 0x06
    1bb2:	8d 83       	std	Y+5, r24	; 0x05
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <H_LCD_void_sendCommand+0x1cc>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	9c 83       	std	Y+4, r25	; 0x04
    1bbc:	8b 83       	std	Y+3, r24	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <H_LCD_void_sendCommand+0x1ba>
    1bc6:	9c 83       	std	Y+4, r25	; 0x04
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <H_LCD_void_sendCommand+0x1ae>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6f 81       	ldd	r22, Y+7	; 0x07
    1be0:	78 85       	ldd	r23, Y+8	; 0x08
    1be2:	89 85       	ldd	r24, Y+9	; 0x09
    1be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf6:	9a 83       	std	Y+2, r25	; 0x02
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <H_LCD_void_sendCommand+0x1f6>
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    1c06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c08:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <H_LCD_void_latchByte>
}
    1c0c:	6d 96       	adiw	r28, 0x1d	; 29
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <H_LCD_void_sendString+0x6>
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	9b 83       	std	Y+3, r25	; 0x03
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	28 2f       	mov	r18, r24
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	e2 0f       	add	r30, r18
    1c3e:	f3 1f       	adc	r31, r19
    1c40:	80 81       	ld	r24, Z
    1c42:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
		i++;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 5f       	subi	r24, 0xFF	; 255
    1c4a:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	9b 81       	ldd	r25, Y+3	; 0x03
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 23       	and	r24, r24
    1c60:	39 f7       	brne	.-50     	; 0x1c30 <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	6c 97       	sbiw	r28, 0x1c	; 28
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1c82:	80 91 57 02 	lds	r24, 0x0257
    1c86:	90 91 58 02 	lds	r25, 0x0258
    1c8a:	63 e0       	ldi	r22, 0x03	; 3
    1c8c:	40 e0       	ldi	r20, 0x00	; 0
    1c8e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e8       	ldi	r26, 0x80	; 128
    1c98:	bf e3       	ldi	r27, 0x3F	; 63
    1c9a:	89 8f       	std	Y+25, r24	; 0x19
    1c9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	4a ef       	ldi	r20, 0xFA	; 250
    1cb0:	54 e4       	ldi	r21, 0x44	; 68
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	8d 8b       	std	Y+21, r24	; 0x15
    1cbc:	9e 8b       	std	Y+22, r25	; 0x16
    1cbe:	af 8b       	std	Y+23, r26	; 0x17
    1cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e8       	ldi	r20, 0x80	; 128
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cd6:	88 23       	and	r24, r24
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9c 8b       	std	Y+20, r25	; 0x14
    1ce0:	8b 8b       	std	Y+19, r24	; 0x13
    1ce2:	3f c0       	rjmp	.+126    	; 0x1d62 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    1ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cea:	98 8d       	ldd	r25, Y+24	; 0x18
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	3f ef       	ldi	r19, 0xFF	; 255
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	57 e4       	ldi	r21, 0x47	; 71
    1cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cf8:	18 16       	cp	r1, r24
    1cfa:	4c f5       	brge	.+82     	; 0x1d4e <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e2       	ldi	r20, 0x20	; 32
    1d0a:	51 e4       	ldi	r21, 0x41	; 65
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	9c 8b       	std	Y+20, r25	; 0x14
    1d22:	8b 8b       	std	Y+19, r24	; 0x13
    1d24:	0f c0       	rjmp	.+30     	; 0x1d44 <H_LCD_void_clearDisplay+0xd6>
    1d26:	88 ec       	ldi	r24, 0xC8	; 200
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9a 8b       	std	Y+18, r25	; 0x12
    1d2c:	89 8b       	std	Y+17, r24	; 0x11
    1d2e:	89 89       	ldd	r24, Y+17	; 0x11
    1d30:	9a 89       	ldd	r25, Y+18	; 0x12
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <H_LCD_void_clearDisplay+0xc4>
    1d36:	9a 8b       	std	Y+18, r25	; 0x12
    1d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	9c 8b       	std	Y+20, r25	; 0x14
    1d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d44:	8b 89       	ldd	r24, Y+19	; 0x13
    1d46:	9c 89       	ldd	r25, Y+20	; 0x14
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <H_LCD_void_clearDisplay+0xb8>
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d50:	7e 89       	ldd	r23, Y+22	; 0x16
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	9c 8b       	std	Y+20, r25	; 0x14
    1d60:	8b 8b       	std	Y+19, r24	; 0x13
    1d62:	8b 89       	ldd	r24, Y+19	; 0x13
    1d64:	9c 89       	ldd	r25, Y+20	; 0x14
    1d66:	98 8b       	std	Y+16, r25	; 0x10
    1d68:	8f 87       	std	Y+15, r24	; 0x0f
    1d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6c:	98 89       	ldd	r25, Y+16	; 0x10
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <H_LCD_void_clearDisplay+0x100>
    1d72:	98 8b       	std	Y+16, r25	; 0x10
    1d74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1d76:	80 91 57 02 	lds	r24, 0x0257
    1d7a:	90 91 58 02 	lds	r25, 0x0258
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	40 e0       	ldi	r20, 0x00	; 0
    1d82:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e8       	ldi	r26, 0x80	; 128
    1d8c:	bf e3       	ldi	r27, 0x3F	; 63
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	9c 87       	std	Y+12, r25	; 0x0c
    1d92:	ad 87       	std	Y+13, r26	; 0x0d
    1d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a ef       	ldi	r20, 0xFA	; 250
    1da4:	54 e4       	ldi	r21, 0x44	; 68
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8f 83       	std	Y+7, r24	; 0x07
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	a9 87       	std	Y+9, r26	; 0x09
    1db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <H_LCD_void_clearDisplay+0x1ca>
    1e1a:	88 ec       	ldi	r24, 0xC8	; 200
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <H_LCD_void_clearDisplay+0x1b8>
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <H_LCD_void_clearDisplay+0x1ac>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <H_LCD_void_clearDisplay+0x1f4>
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <H_LCD_void_latchByte>
}
    1e70:	6c 96       	adiw	r28, 0x1c	; 28
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <H_LCD_void_gotoXY+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <H_LCD_void_gotoXY+0x8>
    1e8a:	0f 92       	push	r0
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	8a 83       	std	Y+2, r24	; 0x02
    1e92:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    1e94:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	3d 83       	std	Y+5, r19	; 0x05
    1e9e:	2c 83       	std	Y+4, r18	; 0x04
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	c1 f0       	breq	.+48     	; 0x1eda <H_LCD_void_gotoXY+0x58>
    1eaa:	2c 81       	ldd	r18, Y+4	; 0x04
    1eac:	3d 81       	ldd	r19, Y+5	; 0x05
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	2c f4       	brge	.+10     	; 0x1ebe <H_LCD_void_gotoXY+0x3c>
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	00 97       	sbiw	r24, 0x00	; 0
    1eba:	61 f0       	breq	.+24     	; 0x1ed4 <H_LCD_void_gotoXY+0x52>
    1ebc:	19 c0       	rjmp	.+50     	; 0x1ef0 <H_LCD_void_gotoXY+0x6e>
    1ebe:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	69 f0       	breq	.+26     	; 0x1ee2 <H_LCD_void_gotoXY+0x60>
    1ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ecc:	83 30       	cpi	r24, 0x03	; 3
    1ece:	91 05       	cpc	r25, r1
    1ed0:	61 f0       	breq	.+24     	; 0x1eea <H_LCD_void_gotoXY+0x68>
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	0b c0       	rjmp	.+22     	; 0x1ef0 <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	80 5c       	subi	r24, 0xC0	; 192
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	07 c0       	rjmp	.+14     	; 0x1ef0 <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    1ee2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee4:	80 5f       	subi	r24, 0xF0	; 240
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	80 5b       	subi	r24, 0xB0	; 176
    1eee:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	80 68       	ori	r24, 0x80	; 128
    1ef4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	e9 97       	sbiw	r28, 0x39	; 57
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    1f1e:	20 91 59 02 	lds	r18, 0x0259
    1f22:	30 91 5a 02 	lds	r19, 0x025A
    1f26:	89 ad       	ldd	r24, Y+57	; 0x39
    1f28:	48 2f       	mov	r20, r24
    1f2a:	44 1f       	adc	r20, r20
    1f2c:	44 27       	eor	r20, r20
    1f2e:	44 1f       	adc	r20, r20
    1f30:	c9 01       	movw	r24, r18
    1f32:	64 e0       	ldi	r22, 0x04	; 4
    1f34:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    1f38:	20 91 59 02 	lds	r18, 0x0259
    1f3c:	30 91 5a 02 	lds	r19, 0x025A
    1f40:	89 ad       	ldd	r24, Y+57	; 0x39
    1f42:	82 95       	swap	r24
    1f44:	86 95       	lsr	r24
    1f46:	86 95       	lsr	r24
    1f48:	83 70       	andi	r24, 0x03	; 3
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	41 70       	andi	r20, 0x01	; 1
    1f4e:	c9 01       	movw	r24, r18
    1f50:	62 e0       	ldi	r22, 0x02	; 2
    1f52:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    1f56:	20 91 59 02 	lds	r18, 0x0259
    1f5a:	30 91 5a 02 	lds	r19, 0x025A
    1f5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f60:	82 95       	swap	r24
    1f62:	86 95       	lsr	r24
    1f64:	87 70       	andi	r24, 0x07	; 7
    1f66:	48 2f       	mov	r20, r24
    1f68:	41 70       	andi	r20, 0x01	; 1
    1f6a:	c9 01       	movw	r24, r18
    1f6c:	61 e0       	ldi	r22, 0x01	; 1
    1f6e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    1f72:	20 91 59 02 	lds	r18, 0x0259
    1f76:	30 91 5a 02 	lds	r19, 0x025A
    1f7a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f7c:	82 95       	swap	r24
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	48 2f       	mov	r20, r24
    1f82:	41 70       	andi	r20, 0x01	; 1
    1f84:	c9 01       	movw	r24, r18
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1f8c:	80 91 57 02 	lds	r24, 0x0257
    1f90:	90 91 58 02 	lds	r25, 0x0258
    1f94:	62 e0       	ldi	r22, 0x02	; 2
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e8       	ldi	r26, 0x80	; 128
    1fa2:	bf e3       	ldi	r27, 0x3F	; 63
    1fa4:	8d ab       	std	Y+53, r24	; 0x35
    1fa6:	9e ab       	std	Y+54, r25	; 0x36
    1fa8:	af ab       	std	Y+55, r26	; 0x37
    1faa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	6d a9       	ldd	r22, Y+53	; 0x35
    1fae:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fb4:	20 e0       	ldi	r18, 0x00	; 0
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	4a ef       	ldi	r20, 0xFA	; 250
    1fba:	54 e4       	ldi	r21, 0x44	; 68
    1fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	89 ab       	std	Y+49, r24	; 0x31
    1fc6:	9a ab       	std	Y+50, r25	; 0x32
    1fc8:	ab ab       	std	Y+51, r26	; 0x33
    1fca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fce:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	40 e8       	ldi	r20, 0x80	; 128
    1fda:	5f e3       	ldi	r21, 0x3F	; 63
    1fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	2c f4       	brge	.+10     	; 0x1fee <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	98 ab       	std	Y+48, r25	; 0x30
    1fea:	8f a7       	std	Y+47, r24	; 0x2f
    1fec:	3f c0       	rjmp	.+126    	; 0x206c <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    1fee:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	3f ef       	ldi	r19, 0xFF	; 255
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	57 e4       	ldi	r21, 0x47	; 71
    1ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	4c f5       	brge	.+82     	; 0x2058 <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2006:	6d a9       	ldd	r22, Y+53	; 0x35
    2008:	7e a9       	ldd	r23, Y+54	; 0x36
    200a:	8f a9       	ldd	r24, Y+55	; 0x37
    200c:	98 ad       	ldd	r25, Y+56	; 0x38
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e2       	ldi	r20, 0x20	; 32
    2014:	51 e4       	ldi	r21, 0x41	; 65
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	bc 01       	movw	r22, r24
    2020:	cd 01       	movw	r24, r26
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
    202e:	0f c0       	rjmp	.+30     	; 0x204e <H_LCD_void_latchByte+0x146>
    2030:	88 ec       	ldi	r24, 0xC8	; 200
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9e a7       	std	Y+46, r25	; 0x2e
    2036:	8d a7       	std	Y+45, r24	; 0x2d
    2038:	8d a5       	ldd	r24, Y+45	; 0x2d
    203a:	9e a5       	ldd	r25, Y+46	; 0x2e
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <H_LCD_void_latchByte+0x134>
    2040:	9e a7       	std	Y+46, r25	; 0x2e
    2042:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2044:	8f a5       	ldd	r24, Y+47	; 0x2f
    2046:	98 a9       	ldd	r25, Y+48	; 0x30
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	98 ab       	std	Y+48, r25	; 0x30
    204c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    204e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2050:	98 a9       	ldd	r25, Y+48	; 0x30
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	69 f7       	brne	.-38     	; 0x2030 <H_LCD_void_latchByte+0x128>
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	98 ab       	std	Y+48, r25	; 0x30
    206a:	8f a7       	std	Y+47, r24	; 0x2f
    206c:	8f a5       	ldd	r24, Y+47	; 0x2f
    206e:	98 a9       	ldd	r25, Y+48	; 0x30
    2070:	9c a7       	std	Y+44, r25	; 0x2c
    2072:	8b a7       	std	Y+43, r24	; 0x2b
    2074:	8b a5       	ldd	r24, Y+43	; 0x2b
    2076:	9c a5       	ldd	r25, Y+44	; 0x2c
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <H_LCD_void_latchByte+0x170>
    207c:	9c a7       	std	Y+44, r25	; 0x2c
    207e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    2080:	80 91 57 02 	lds	r24, 0x0257
    2084:	90 91 58 02 	lds	r25, 0x0258
    2088:	62 e0       	ldi	r22, 0x02	; 2
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 ea       	ldi	r26, 0xA0	; 160
    2096:	b0 e4       	ldi	r27, 0x40	; 64
    2098:	8f a3       	std	Y+39, r24	; 0x27
    209a:	98 a7       	std	Y+40, r25	; 0x28
    209c:	a9 a7       	std	Y+41, r26	; 0x29
    209e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	6f a1       	ldd	r22, Y+39	; 0x27
    20a2:	78 a5       	ldd	r23, Y+40	; 0x28
    20a4:	89 a5       	ldd	r24, Y+41	; 0x29
    20a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a ef       	ldi	r20, 0xFA	; 250
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8b a3       	std	Y+35, r24	; 0x23
    20ba:	9c a3       	std	Y+36, r25	; 0x24
    20bc:	ad a3       	std	Y+37, r26	; 0x25
    20be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    20e2:	6b a1       	ldd	r22, Y+35	; 0x23
    20e4:	7c a1       	ldd	r23, Y+36	; 0x24
    20e6:	8d a1       	ldd	r24, Y+37	; 0x25
    20e8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	6f a1       	ldd	r22, Y+39	; 0x27
    20fc:	78 a5       	ldd	r23, Y+40	; 0x28
    20fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2100:	9a a5       	ldd	r25, Y+42	; 0x2a
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9a a3       	std	Y+34, r25	; 0x22
    2120:	89 a3       	std	Y+33, r24	; 0x21
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <H_LCD_void_latchByte+0x23a>
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	98 a3       	std	Y+32, r25	; 0x20
    212a:	8f 8f       	std	Y+31, r24	; 0x1f
    212c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    212e:	98 a1       	ldd	r25, Y+32	; 0x20
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <H_LCD_void_latchByte+0x228>
    2134:	98 a3       	std	Y+32, r25	; 0x20
    2136:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	89 a1       	ldd	r24, Y+33	; 0x21
    213a:	9a a1       	ldd	r25, Y+34	; 0x22
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9a a3       	std	Y+34, r25	; 0x22
    2140:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	89 a1       	ldd	r24, Y+33	; 0x21
    2144:	9a a1       	ldd	r25, Y+34	; 0x22
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <H_LCD_void_latchByte+0x21c>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6b a1       	ldd	r22, Y+35	; 0x23
    214e:	7c a1       	ldd	r23, Y+36	; 0x24
    2150:	8d a1       	ldd	r24, Y+37	; 0x25
    2152:	9e a1       	ldd	r25, Y+38	; 0x26
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9a a3       	std	Y+34, r25	; 0x22
    215e:	89 a3       	std	Y+33, r24	; 0x21
    2160:	89 a1       	ldd	r24, Y+33	; 0x21
    2162:	9a a1       	ldd	r25, Y+34	; 0x22
    2164:	9e 8f       	std	Y+30, r25	; 0x1e
    2166:	8d 8f       	std	Y+29, r24	; 0x1d
    2168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    216a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <H_LCD_void_latchByte+0x264>
    2170:	9e 8f       	std	Y+30, r25	; 0x1e
    2172:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    2174:	20 91 59 02 	lds	r18, 0x0259
    2178:	30 91 5a 02 	lds	r19, 0x025A
    217c:	89 ad       	ldd	r24, Y+57	; 0x39
    217e:	86 95       	lsr	r24
    2180:	86 95       	lsr	r24
    2182:	86 95       	lsr	r24
    2184:	48 2f       	mov	r20, r24
    2186:	41 70       	andi	r20, 0x01	; 1
    2188:	c9 01       	movw	r24, r18
    218a:	64 e0       	ldi	r22, 0x04	; 4
    218c:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    2190:	20 91 59 02 	lds	r18, 0x0259
    2194:	30 91 5a 02 	lds	r19, 0x025A
    2198:	89 ad       	ldd	r24, Y+57	; 0x39
    219a:	86 95       	lsr	r24
    219c:	86 95       	lsr	r24
    219e:	48 2f       	mov	r20, r24
    21a0:	41 70       	andi	r20, 0x01	; 1
    21a2:	c9 01       	movw	r24, r18
    21a4:	62 e0       	ldi	r22, 0x02	; 2
    21a6:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    21aa:	20 91 59 02 	lds	r18, 0x0259
    21ae:	30 91 5a 02 	lds	r19, 0x025A
    21b2:	89 ad       	ldd	r24, Y+57	; 0x39
    21b4:	86 95       	lsr	r24
    21b6:	48 2f       	mov	r20, r24
    21b8:	41 70       	andi	r20, 0x01	; 1
    21ba:	c9 01       	movw	r24, r18
    21bc:	61 e0       	ldi	r22, 0x01	; 1
    21be:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    21c2:	20 91 59 02 	lds	r18, 0x0259
    21c6:	30 91 5a 02 	lds	r19, 0x025A
    21ca:	89 ad       	ldd	r24, Y+57	; 0x39
    21cc:	48 2f       	mov	r20, r24
    21ce:	41 70       	andi	r20, 0x01	; 1
    21d0:	c9 01       	movw	r24, r18
    21d2:	60 e0       	ldi	r22, 0x00	; 0
    21d4:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    21d8:	80 91 57 02 	lds	r24, 0x0257
    21dc:	90 91 58 02 	lds	r25, 0x0258
    21e0:	62 e0       	ldi	r22, 0x02	; 2
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	a0 e8       	ldi	r26, 0x80	; 128
    21ee:	bf e3       	ldi	r27, 0x3F	; 63
    21f0:	89 8f       	std	Y+25, r24	; 0x19
    21f2:	9a 8f       	std	Y+26, r25	; 0x1a
    21f4:	ab 8f       	std	Y+27, r26	; 0x1b
    21f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f8:	69 8d       	ldd	r22, Y+25	; 0x19
    21fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	4a ef       	ldi	r20, 0xFA	; 250
    2206:	54 e4       	ldi	r21, 0x44	; 68
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8d 8b       	std	Y+21, r24	; 0x15
    2212:	9e 8b       	std	Y+22, r25	; 0x16
    2214:	af 8b       	std	Y+23, r26	; 0x17
    2216:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2218:	6d 89       	ldd	r22, Y+21	; 0x15
    221a:	7e 89       	ldd	r23, Y+22	; 0x16
    221c:	8f 89       	ldd	r24, Y+23	; 0x17
    221e:	98 8d       	ldd	r25, Y+24	; 0x18
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e8       	ldi	r20, 0x80	; 128
    2226:	5f e3       	ldi	r21, 0x3F	; 63
    2228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222c:	88 23       	and	r24, r24
    222e:	2c f4       	brge	.+10     	; 0x223a <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	3f c0       	rjmp	.+126    	; 0x22b8 <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    223a:	6d 89       	ldd	r22, Y+21	; 0x15
    223c:	7e 89       	ldd	r23, Y+22	; 0x16
    223e:	8f 89       	ldd	r24, Y+23	; 0x17
    2240:	98 8d       	ldd	r25, Y+24	; 0x18
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	4c f5       	brge	.+82     	; 0x22a4 <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2252:	69 8d       	ldd	r22, Y+25	; 0x19
    2254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e2       	ldi	r20, 0x20	; 32
    2260:	51 e4       	ldi	r21, 0x41	; 65
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	bc 01       	movw	r22, r24
    226c:	cd 01       	movw	r24, r26
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9c 8b       	std	Y+20, r25	; 0x14
    2278:	8b 8b       	std	Y+19, r24	; 0x13
    227a:	0f c0       	rjmp	.+30     	; 0x229a <H_LCD_void_latchByte+0x392>
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
    2284:	89 89       	ldd	r24, Y+17	; 0x11
    2286:	9a 89       	ldd	r25, Y+18	; 0x12
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <H_LCD_void_latchByte+0x380>
    228c:	9a 8b       	std	Y+18, r25	; 0x12
    228e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9c 8b       	std	Y+20, r25	; 0x14
    2298:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	69 f7       	brne	.-38     	; 0x227c <H_LCD_void_latchByte+0x374>
    22a2:	14 c0       	rjmp	.+40     	; 0x22cc <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a4:	6d 89       	ldd	r22, Y+21	; 0x15
    22a6:	7e 89       	ldd	r23, Y+22	; 0x16
    22a8:	8f 89       	ldd	r24, Y+23	; 0x17
    22aa:	98 8d       	ldd	r25, Y+24	; 0x18
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	9c 8b       	std	Y+20, r25	; 0x14
    22b6:	8b 8b       	std	Y+19, r24	; 0x13
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
    22c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c2:	98 89       	ldd	r25, Y+16	; 0x10
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <H_LCD_void_latchByte+0x3bc>
    22c8:	98 8b       	std	Y+16, r25	; 0x10
    22ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    22cc:	80 91 57 02 	lds	r24, 0x0257
    22d0:	90 91 58 02 	lds	r25, 0x0258
    22d4:	62 e0       	ldi	r22, 0x02	; 2
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	a0 ea       	ldi	r26, 0xA0	; 160
    22e2:	b0 e4       	ldi	r27, 0x40	; 64
    22e4:	8b 87       	std	Y+11, r24	; 0x0b
    22e6:	9c 87       	std	Y+12, r25	; 0x0c
    22e8:	ad 87       	std	Y+13, r26	; 0x0d
    22ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	4a ef       	ldi	r20, 0xFA	; 250
    22fa:	54 e4       	ldi	r21, 0x44	; 68
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	8f 83       	std	Y+7, r24	; 0x07
    2306:	98 87       	std	Y+8, r25	; 0x08
    2308:	a9 87       	std	Y+9, r26	; 0x09
    230a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e8       	ldi	r20, 0x80	; 128
    231a:	5f e3       	ldi	r21, 0x3F	; 63
    231c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2320:	88 23       	and	r24, r24
    2322:	2c f4       	brge	.+10     	; 0x232e <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9e 83       	std	Y+6, r25	; 0x06
    232a:	8d 83       	std	Y+5, r24	; 0x05
    232c:	3f c0       	rjmp	.+126    	; 0x23ac <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    232e:	6f 81       	ldd	r22, Y+7	; 0x07
    2330:	78 85       	ldd	r23, Y+8	; 0x08
    2332:	89 85       	ldd	r24, Y+9	; 0x09
    2334:	9a 85       	ldd	r25, Y+10	; 0x0a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	3f ef       	ldi	r19, 0xFF	; 255
    233a:	4f e7       	ldi	r20, 0x7F	; 127
    233c:	57 e4       	ldi	r21, 0x47	; 71
    233e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2342:	18 16       	cp	r1, r24
    2344:	4c f5       	brge	.+82     	; 0x2398 <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2346:	6b 85       	ldd	r22, Y+11	; 0x0b
    2348:	7c 85       	ldd	r23, Y+12	; 0x0c
    234a:	8d 85       	ldd	r24, Y+13	; 0x0d
    234c:	9e 85       	ldd	r25, Y+14	; 0x0e
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e2       	ldi	r20, 0x20	; 32
    2354:	51 e4       	ldi	r21, 0x41	; 65
    2356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	bc 01       	movw	r22, r24
    2360:	cd 01       	movw	r24, r26
    2362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
    236e:	0f c0       	rjmp	.+30     	; 0x238e <H_LCD_void_latchByte+0x486>
    2370:	88 ec       	ldi	r24, 0xC8	; 200
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9c 83       	std	Y+4, r25	; 0x04
    2376:	8b 83       	std	Y+3, r24	; 0x03
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <H_LCD_void_latchByte+0x474>
    2380:	9c 83       	std	Y+4, r25	; 0x04
    2382:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	69 f7       	brne	.-38     	; 0x2370 <H_LCD_void_latchByte+0x468>
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2398:	6f 81       	ldd	r22, Y+7	; 0x07
    239a:	78 85       	ldd	r23, Y+8	; 0x08
    239c:	89 85       	ldd	r24, Y+9	; 0x09
    239e:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9e 83       	std	Y+6, r25	; 0x06
    23aa:	8d 83       	std	Y+5, r24	; 0x05
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <H_LCD_void_latchByte+0x4b0>
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    23c0:	e9 96       	adiw	r28, 0x39	; 57
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <H_LCD_void_creatCustomChar+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <H_LCD_void_creatCustomChar+0x8>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	9b 83       	std	Y+3, r25	; 0x03
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    23e4:	8c 81       	ldd	r24, Y+4	; 0x04
    23e6:	88 30       	cpi	r24, 0x08	; 8
    23e8:	f8 f4       	brcc	.+62     	; 0x2428 <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	08 96       	adiw	r24, 0x08	; 8
    23f2:	88 0f       	add	r24, r24
    23f4:	99 1f       	adc	r25, r25
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    2402:	19 82       	std	Y+1, r1	; 0x01
    2404:	0e c0       	rjmp	.+28     	; 0x2422 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	28 2f       	mov	r18, r24
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	9b 81       	ldd	r25, Y+3	; 0x03
    2410:	fc 01       	movw	r30, r24
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	80 81       	ld	r24, Z
    2418:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	8f 5f       	subi	r24, 0xFF	; 255
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	88 30       	cpi	r24, 0x08	; 8
    2426:	78 f3       	brcs	.-34     	; 0x2406 <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	cf 91       	pop	r28
    2432:	df 91       	pop	r29
    2434:	08 95       	ret

00002436 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	0f 92       	push	r0
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	80 58       	subi	r24, 0x80	; 128
    2446:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>

}
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <H_LCD_void_displayHex+0x6>
    245e:	00 d0       	rcall	.+0      	; 0x2460 <H_LCD_void_displayHex+0x8>
    2460:	00 d0       	rcall	.+0      	; 0x2462 <H_LCD_void_displayHex+0xa>
    2462:	cd b7       	in	r28, 0x3d	; 61
    2464:	de b7       	in	r29, 0x3e	; 62
    2466:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    2468:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    246a:	80 e6       	ldi	r24, 0x60	; 96
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	82 95       	swap	r24
    2476:	8f 70       	andi	r24, 0x0F	; 15
    2478:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    247a:	89 81       	ldd	r24, Y+1	; 0x01
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	3e 83       	std	Y+6, r19	; 0x06
    2482:	2d 83       	std	Y+5, r18	; 0x05
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	8b 30       	cpi	r24, 0x0B	; 11
    248a:	91 05       	cpc	r25, r1
    248c:	69 f1       	breq	.+90     	; 0x24e8 <H_LCD_void_displayHex+0x90>
    248e:	2d 81       	ldd	r18, Y+5	; 0x05
    2490:	3e 81       	ldd	r19, Y+6	; 0x06
    2492:	2c 30       	cpi	r18, 0x0C	; 12
    2494:	31 05       	cpc	r19, r1
    2496:	54 f4       	brge	.+20     	; 0x24ac <H_LCD_void_displayHex+0x54>
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	99 23       	and	r25, r25
    249e:	bc f1       	brlt	.+110    	; 0x250e <H_LCD_void_displayHex+0xb6>
    24a0:	2d 81       	ldd	r18, Y+5	; 0x05
    24a2:	3e 81       	ldd	r19, Y+6	; 0x06
    24a4:	2a 30       	cpi	r18, 0x0A	; 10
    24a6:	31 05       	cpc	r19, r1
    24a8:	b4 f0       	brlt	.+44     	; 0x24d6 <H_LCD_void_displayHex+0x7e>
    24aa:	1a c0       	rjmp	.+52     	; 0x24e0 <H_LCD_void_displayHex+0x88>
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	8d 30       	cpi	r24, 0x0D	; 13
    24b2:	91 05       	cpc	r25, r1
    24b4:	09 f1       	breq	.+66     	; 0x24f8 <H_LCD_void_displayHex+0xa0>
    24b6:	2d 81       	ldd	r18, Y+5	; 0x05
    24b8:	3e 81       	ldd	r19, Y+6	; 0x06
    24ba:	2d 30       	cpi	r18, 0x0D	; 13
    24bc:	31 05       	cpc	r19, r1
    24be:	c4 f0       	brlt	.+48     	; 0x24f0 <H_LCD_void_displayHex+0x98>
    24c0:	8d 81       	ldd	r24, Y+5	; 0x05
    24c2:	9e 81       	ldd	r25, Y+6	; 0x06
    24c4:	8e 30       	cpi	r24, 0x0E	; 14
    24c6:	91 05       	cpc	r25, r1
    24c8:	d9 f0       	breq	.+54     	; 0x2500 <H_LCD_void_displayHex+0xa8>
    24ca:	2d 81       	ldd	r18, Y+5	; 0x05
    24cc:	3e 81       	ldd	r19, Y+6	; 0x06
    24ce:	2f 30       	cpi	r18, 0x0F	; 15
    24d0:	31 05       	cpc	r19, r1
    24d2:	d1 f0       	breq	.+52     	; 0x2508 <H_LCD_void_displayHex+0xb0>
    24d4:	1c c0       	rjmp	.+56     	; 0x250e <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	80 5d       	subi	r24, 0xD0	; 208
    24da:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    24de:	17 c0       	rjmp	.+46     	; 0x250e <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    24e0:	81 e4       	ldi	r24, 0x41	; 65
    24e2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    24e6:	13 c0       	rjmp	.+38     	; 0x250e <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    24e8:	82 e4       	ldi	r24, 0x42	; 66
    24ea:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    24f0:	83 e4       	ldi	r24, 0x43	; 67
    24f2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    24f6:	0b c0       	rjmp	.+22     	; 0x250e <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    24f8:	84 e4       	ldi	r24, 0x44	; 68
    24fa:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    24fe:	07 c0       	rjmp	.+14     	; 0x250e <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    2500:	85 e4       	ldi	r24, 0x45	; 69
    2502:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    2506:	03 c0       	rjmp	.+6      	; 0x250e <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    2508:	86 e4       	ldi	r24, 0x46	; 70
    250a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	8f 70       	andi	r24, 0x0F	; 15
    2512:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3c 83       	std	Y+4, r19	; 0x04
    251c:	2b 83       	std	Y+3, r18	; 0x03
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	8b 30       	cpi	r24, 0x0B	; 11
    2524:	91 05       	cpc	r25, r1
    2526:	69 f1       	breq	.+90     	; 0x2582 <H_LCD_void_displayHex+0x12a>
    2528:	2b 81       	ldd	r18, Y+3	; 0x03
    252a:	3c 81       	ldd	r19, Y+4	; 0x04
    252c:	2c 30       	cpi	r18, 0x0C	; 12
    252e:	31 05       	cpc	r19, r1
    2530:	54 f4       	brge	.+20     	; 0x2546 <H_LCD_void_displayHex+0xee>
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	9c 81       	ldd	r25, Y+4	; 0x04
    2536:	99 23       	and	r25, r25
    2538:	bc f1       	brlt	.+110    	; 0x25a8 <H_LCD_void_displayHex+0x150>
    253a:	2b 81       	ldd	r18, Y+3	; 0x03
    253c:	3c 81       	ldd	r19, Y+4	; 0x04
    253e:	2a 30       	cpi	r18, 0x0A	; 10
    2540:	31 05       	cpc	r19, r1
    2542:	b4 f0       	brlt	.+44     	; 0x2570 <H_LCD_void_displayHex+0x118>
    2544:	1a c0       	rjmp	.+52     	; 0x257a <H_LCD_void_displayHex+0x122>
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	9c 81       	ldd	r25, Y+4	; 0x04
    254a:	8d 30       	cpi	r24, 0x0D	; 13
    254c:	91 05       	cpc	r25, r1
    254e:	09 f1       	breq	.+66     	; 0x2592 <H_LCD_void_displayHex+0x13a>
    2550:	2b 81       	ldd	r18, Y+3	; 0x03
    2552:	3c 81       	ldd	r19, Y+4	; 0x04
    2554:	2d 30       	cpi	r18, 0x0D	; 13
    2556:	31 05       	cpc	r19, r1
    2558:	c4 f0       	brlt	.+48     	; 0x258a <H_LCD_void_displayHex+0x132>
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	9c 81       	ldd	r25, Y+4	; 0x04
    255e:	8e 30       	cpi	r24, 0x0E	; 14
    2560:	91 05       	cpc	r25, r1
    2562:	d9 f0       	breq	.+54     	; 0x259a <H_LCD_void_displayHex+0x142>
    2564:	2b 81       	ldd	r18, Y+3	; 0x03
    2566:	3c 81       	ldd	r19, Y+4	; 0x04
    2568:	2f 30       	cpi	r18, 0x0F	; 15
    256a:	31 05       	cpc	r19, r1
    256c:	d1 f0       	breq	.+52     	; 0x25a2 <H_LCD_void_displayHex+0x14a>
    256e:	1c c0       	rjmp	.+56     	; 0x25a8 <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	80 5d       	subi	r24, 0xD0	; 208
    2574:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    2578:	17 c0       	rjmp	.+46     	; 0x25a8 <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    257a:	81 e4       	ldi	r24, 0x41	; 65
    257c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    2580:	13 c0       	rjmp	.+38     	; 0x25a8 <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    2582:	82 e4       	ldi	r24, 0x42	; 66
    2584:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    258a:	83 e4       	ldi	r24, 0x43	; 67
    258c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    2590:	0b c0       	rjmp	.+22     	; 0x25a8 <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    2592:	84 e4       	ldi	r24, 0x44	; 68
    2594:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    2598:	07 c0       	rjmp	.+14     	; 0x25a8 <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    259a:	85 e4       	ldi	r24, 0x45	; 69
    259c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    25a2:	86 e4       	ldi	r24, 0x46	; 70
    25a4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
		break;
	}
}
    25a8:	26 96       	adiw	r28, 0x06	; 6
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	f8 94       	cli
    25ae:	de bf       	out	0x3e, r29	; 62
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	cd bf       	out	0x3d, r28	; 61
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	08 95       	ret

000025ba <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    25ba:	df 93       	push	r29
    25bc:	cf 93       	push	r28
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <H_LCD_void_displayBinary+0x6>
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    25c6:	83 e6       	ldi	r24, 0x63	; 99
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    25ce:	19 82       	std	Y+1, r1	; 0x01
    25d0:	18 c0       	rjmp	.+48     	; 0x2602 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	48 2f       	mov	r20, r24
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	87 e0       	ldi	r24, 0x07	; 7
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	82 1b       	sub	r24, r18
    25e4:	93 0b       	sbc	r25, r19
    25e6:	9a 01       	movw	r18, r20
    25e8:	02 c0       	rjmp	.+4      	; 0x25ee <H_LCD_void_displayBinary+0x34>
    25ea:	35 95       	asr	r19
    25ec:	27 95       	ror	r18
    25ee:	8a 95       	dec	r24
    25f0:	e2 f7       	brpl	.-8      	; 0x25ea <H_LCD_void_displayBinary+0x30>
    25f2:	c9 01       	movw	r24, r18
    25f4:	81 70       	andi	r24, 0x01	; 1
    25f6:	80 5d       	subi	r24, 0xD0	; 208
    25f8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	88 30       	cpi	r24, 0x08	; 8
    2606:	28 f3       	brcs	.-54     	; 0x25d2 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	2a 97       	sbiw	r28, 0x0a	; 10
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	6f 83       	std	Y+7, r22	; 0x07
    2628:	78 87       	std	Y+8, r23	; 0x08
    262a:	89 87       	std	Y+9, r24	; 0x09
    262c:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    262e:	1e 82       	std	Y+6, r1	; 0x06
    2630:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    2632:	8f 81       	ldd	r24, Y+7	; 0x07
    2634:	98 85       	ldd	r25, Y+8	; 0x08
    2636:	a9 85       	ldd	r26, Y+9	; 0x09
    2638:	ba 85       	ldd	r27, Y+10	; 0x0a
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	ab 83       	std	Y+3, r26	; 0x03
    2640:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	aa 27       	eor	r26, r26
    2654:	97 fd       	sbrc	r25, 7
    2656:	a0 95       	com	r26
    2658:	ba 2f       	mov	r27, r26
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 81 13 	call	0x2702	; 0x2702 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    2662:	8e e2       	ldi	r24, 0x2E	; 46
    2664:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
	if(val < 0)
    2668:	69 81       	ldd	r22, Y+1	; 0x01
    266a:	7a 81       	ldd	r23, Y+2	; 0x02
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e0       	ldi	r20, 0x00	; 0
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	4c f4       	brge	.+18     	; 0x2692 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	ab 81       	ldd	r26, Y+3	; 0x03
    2686:	bc 81       	ldd	r27, Y+4	; 0x04
    2688:	b0 58       	subi	r27, 0x80	; 128
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	ab 83       	std	Y+3, r26	; 0x03
    2690:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    2692:	1e 82       	std	Y+6, r1	; 0x06
    2694:	2a c0       	rjmp	.+84     	; 0x26ea <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    2696:	69 81       	ldd	r22, Y+1	; 0x01
    2698:	7a 81       	ldd	r23, Y+2	; 0x02
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	89 83       	std	Y+1, r24	; 0x01
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	ab 83       	std	Y+3, r26	; 0x03
    26b4:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    26b6:	69 81       	ldd	r22, Y+1	; 0x01
    26b8:	7a 81       	ldd	r23, Y+2	; 0x02
    26ba:	8b 81       	ldd	r24, Y+3	; 0x03
    26bc:	9c 81       	ldd	r25, Y+4	; 0x04
    26be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	2a e0       	ldi	r18, 0x0A	; 10
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	50 e0       	ldi	r21, 0x00	; 0
    26ce:	bc 01       	movw	r22, r24
    26d0:	cd 01       	movw	r24, r26
    26d2:	0e 94 1b 24 	call	0x4836	; 0x4836 <__divmodsi4>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	80 5d       	subi	r24, 0xD0	; 208
    26e0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    26e4:	8e 81       	ldd	r24, Y+6	; 0x06
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	8e 83       	std	Y+6, r24	; 0x06
    26ea:	8e 81       	ldd	r24, Y+6	; 0x06
    26ec:	83 30       	cpi	r24, 0x03	; 3
    26ee:	98 f2       	brcs	.-90     	; 0x2696 <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    26f0:	2a 96       	adiw	r28, 0x0a	; 10
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	6c 97       	sbiw	r28, 0x1c	; 28
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	69 8f       	std	Y+25, r22	; 0x19
    2718:	7a 8f       	std	Y+26, r23	; 0x1a
    271a:	8b 8f       	std	Y+27, r24	; 0x1b
    271c:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    271e:	84 e1       	ldi	r24, 0x14	; 20
    2720:	fe 01       	movw	r30, r28
    2722:	35 96       	adiw	r30, 0x05	; 5
    2724:	df 01       	movw	r26, r30
    2726:	98 2f       	mov	r25, r24
    2728:	1d 92       	st	X+, r1
    272a:	9a 95       	dec	r25
    272c:	e9 f7       	brne	.-6      	; 0x2728 <H_LCD_void_sendIntNum+0x26>
    272e:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    2730:	89 8d       	ldd	r24, Y+25	; 0x19
    2732:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	09 f4       	brne	.+2      	; 0x2742 <H_LCD_void_sendIntNum+0x40>
    2740:	5d c0       	rjmp	.+186    	; 0x27fc <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	99 23       	and	r25, r25
    2748:	c4 f4       	brge	.+48     	; 0x277a <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    274a:	8d e2       	ldi	r24, 0x2D	; 45
    274c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
			val *=-1;
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	9a 81       	ldd	r25, Y+2	; 0x02
    2754:	90 95       	com	r25
    2756:	81 95       	neg	r24
    2758:	9f 4f       	sbci	r25, 0xFF	; 255
    275a:	9a 83       	std	Y+2, r25	; 0x02
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	0d c0       	rjmp	.+26     	; 0x277a <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	8f 5f       	subi	r24, 0xFF	; 255
    2764:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	2a e0       	ldi	r18, 0x0A	; 10
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	b9 01       	movw	r22, r18
    2770:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__divmodhi4>
    2774:	cb 01       	movw	r24, r22
    2776:	9a 83       	std	Y+2, r25	; 0x02
    2778:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	18 16       	cp	r1, r24
    2780:	19 06       	cpc	r1, r25
    2782:	74 f3       	brlt	.-36     	; 0x2760 <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    2784:	89 8d       	ldd	r24, Y+25	; 0x19
    2786:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	9a 81       	ldd	r25, Y+2	; 0x02
    2790:	18 16       	cp	r1, r24
    2792:	19 06       	cpc	r1, r25
    2794:	3c f0       	brlt	.+14     	; 0x27a4 <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	90 95       	com	r25
    279c:	81 95       	neg	r24
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	81 50       	subi	r24, 0x01	; 1
    27a8:	8c 83       	std	Y+4, r24	; 0x04
    27aa:	20 c0       	rjmp	.+64     	; 0x27ec <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    27ac:	8c 81       	ldd	r24, Y+4	; 0x04
    27ae:	e8 2f       	mov	r30, r24
    27b0:	ff 27       	eor	r31, r31
    27b2:	e7 fd       	sbrc	r30, 7
    27b4:	f0 95       	com	r31
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	2a e0       	ldi	r18, 0x0A	; 10
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	b9 01       	movw	r22, r18
    27c0:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__divmodhi4>
    27c4:	80 5d       	subi	r24, 0xD0	; 208
    27c6:	28 2f       	mov	r18, r24
    27c8:	ce 01       	movw	r24, r28
    27ca:	05 96       	adiw	r24, 0x05	; 5
    27cc:	e8 0f       	add	r30, r24
    27ce:	f9 1f       	adc	r31, r25
    27d0:	20 83       	st	Z, r18
			val /= 10;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	2a e0       	ldi	r18, 0x0A	; 10
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	b9 01       	movw	r22, r18
    27dc:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__divmodhi4>
    27e0:	cb 01       	movw	r24, r22
    27e2:	9a 83       	std	Y+2, r25	; 0x02
    27e4:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	81 50       	subi	r24, 0x01	; 1
    27ea:	8c 83       	std	Y+4, r24	; 0x04
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
    27ee:	88 23       	and	r24, r24
    27f0:	ec f6       	brge	.-70     	; 0x27ac <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    27f2:	ce 01       	movw	r24, r28
    27f4:	05 96       	adiw	r24, 0x05	; 5
    27f6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
    27fa:	03 c0       	rjmp	.+6      	; 0x2802 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    27fc:	80 e3       	ldi	r24, 0x30	; 48
    27fe:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    2802:	6c 96       	adiw	r28, 0x1c	; 28
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	de bf       	out	0x3e, r29	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <Timer0_Init>:
u8 remCounter = 0;

void(*ptrCallBack)(void) = NULL_PTR;

void Timer0_Init(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <Timer0_Init+0x6>
    281a:	00 d0       	rcall	.+0      	; 0x281c <Timer0_Init+0x8>
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	9a 83       	std	Y+2, r25	; 0x02
    2822:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	84 81       	ldd	r24, Z+4	; 0x04
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	3c 83       	std	Y+4, r19	; 0x04
    2830:	2b 83       	std	Y+3, r18	; 0x03
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	91 05       	cpc	r25, r1
    283a:	09 f4       	brne	.+2      	; 0x283e <Timer0_Init+0x2a>
    283c:	41 c0       	rjmp	.+130    	; 0x28c0 <Timer0_Init+0xac>
    283e:	2b 81       	ldd	r18, Y+3	; 0x03
    2840:	3c 81       	ldd	r19, Y+4	; 0x04
    2842:	22 30       	cpi	r18, 0x02	; 2
    2844:	31 05       	cpc	r19, r1
    2846:	2c f4       	brge	.+10     	; 0x2852 <Timer0_Init+0x3e>
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	71 f0       	breq	.+28     	; 0x286c <Timer0_Init+0x58>
    2850:	a8 c0       	rjmp	.+336    	; 0x29a2 <Timer0_Init+0x18e>
    2852:	2b 81       	ldd	r18, Y+3	; 0x03
    2854:	3c 81       	ldd	r19, Y+4	; 0x04
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	09 f4       	brne	.+2      	; 0x285e <Timer0_Init+0x4a>
    285c:	55 c0       	rjmp	.+170    	; 0x2908 <Timer0_Init+0xf4>
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	83 30       	cpi	r24, 0x03	; 3
    2864:	91 05       	cpc	r25, r1
    2866:	09 f4       	brne	.+2      	; 0x286a <Timer0_Init+0x56>
    2868:	79 c0       	rjmp	.+242    	; 0x295c <Timer0_Init+0x148>
    286a:	9b c0       	rjmp	.+310    	; 0x29a2 <Timer0_Init+0x18e>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    286c:	e3 e5       	ldi	r30, 0x53	; 83
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	80 81       	ld	r24, Z
    2872:	80 68       	ori	r24, 0x80	; 128
    2874:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2876:	a3 e5       	ldi	r26, 0x53	; 83
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	e9 81       	ldd	r30, Y+1	; 0x01
    287c:	fa 81       	ldd	r31, Y+2	; 0x02
    287e:	80 81       	ld	r24, Z
    2880:	86 95       	lsr	r24
    2882:	81 70       	andi	r24, 0x01	; 1
    2884:	81 70       	andi	r24, 0x01	; 1
    2886:	98 2f       	mov	r25, r24
    2888:	92 95       	swap	r25
    288a:	99 0f       	add	r25, r25
    288c:	90 7e       	andi	r25, 0xE0	; 224
    288e:	8c 91       	ld	r24, X
    2890:	8f 7d       	andi	r24, 0xDF	; 223
    2892:	89 2b       	or	r24, r25
    2894:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2896:	a3 e5       	ldi	r26, 0x53	; 83
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	80 81       	ld	r24, Z
    28a0:	81 70       	andi	r24, 0x01	; 1
    28a2:	81 70       	andi	r24, 0x01	; 1
    28a4:	98 2f       	mov	r25, r24
    28a6:	92 95       	swap	r25
    28a8:	90 7f       	andi	r25, 0xF0	; 240
    28aa:	8c 91       	ld	r24, X
    28ac:	8f 7e       	andi	r24, 0xEF	; 239
    28ae:	89 2b       	or	r24, r25
    28b0:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    28b2:	ac e5       	ldi	r26, 0x5C	; 92
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e9 81       	ldd	r30, Y+1	; 0x01
    28b8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ba:	86 81       	ldd	r24, Z+6	; 0x06
    28bc:	8c 93       	st	X, r24
    28be:	71 c0       	rjmp	.+226    	; 0x29a2 <Timer0_Init+0x18e>
		break;
	case TIMER0_PHASE_CORRECT_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    28c0:	e3 e5       	ldi	r30, 0x53	; 83
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	8f 77       	andi	r24, 0x7F	; 127
    28c8:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    28ca:	a3 e5       	ldi	r26, 0x53	; 83
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e9 81       	ldd	r30, Y+1	; 0x01
    28d0:	fa 81       	ldd	r31, Y+2	; 0x02
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	86 95       	lsr	r24
    28d6:	81 70       	andi	r24, 0x01	; 1
    28d8:	81 70       	andi	r24, 0x01	; 1
    28da:	98 2f       	mov	r25, r24
    28dc:	92 95       	swap	r25
    28de:	99 0f       	add	r25, r25
    28e0:	90 7e       	andi	r25, 0xE0	; 224
    28e2:	8c 91       	ld	r24, X
    28e4:	8f 7d       	andi	r24, 0xDF	; 223
    28e6:	89 2b       	or	r24, r25
    28e8:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    28ea:	a3 e5       	ldi	r26, 0x53	; 83
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e9 81       	ldd	r30, Y+1	; 0x01
    28f0:	fa 81       	ldd	r31, Y+2	; 0x02
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	81 70       	andi	r24, 0x01	; 1
    28f6:	81 70       	andi	r24, 0x01	; 1
    28f8:	98 2f       	mov	r25, r24
    28fa:	92 95       	swap	r25
    28fc:	90 7f       	andi	r25, 0xF0	; 240
    28fe:	8c 91       	ld	r24, X
    2900:	8f 7e       	andi	r24, 0xEF	; 239
    2902:	89 2b       	or	r24, r25
    2904:	8c 93       	st	X, r24
    2906:	4d c0       	rjmp	.+154    	; 0x29a2 <Timer0_Init+0x18e>
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	case TIMER0_CTC_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    2908:	e3 e5       	ldi	r30, 0x53	; 83
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2912:	a3 e5       	ldi	r26, 0x53	; 83
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e9 81       	ldd	r30, Y+1	; 0x01
    2918:	fa 81       	ldd	r31, Y+2	; 0x02
    291a:	80 81       	ld	r24, Z
    291c:	86 95       	lsr	r24
    291e:	81 70       	andi	r24, 0x01	; 1
    2920:	81 70       	andi	r24, 0x01	; 1
    2922:	98 2f       	mov	r25, r24
    2924:	92 95       	swap	r25
    2926:	99 0f       	add	r25, r25
    2928:	90 7e       	andi	r25, 0xE0	; 224
    292a:	8c 91       	ld	r24, X
    292c:	8f 7d       	andi	r24, 0xDF	; 223
    292e:	89 2b       	or	r24, r25
    2930:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2932:	a3 e5       	ldi	r26, 0x53	; 83
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e9 81       	ldd	r30, Y+1	; 0x01
    2938:	fa 81       	ldd	r31, Y+2	; 0x02
    293a:	80 81       	ld	r24, Z
    293c:	81 70       	andi	r24, 0x01	; 1
    293e:	81 70       	andi	r24, 0x01	; 1
    2940:	98 2f       	mov	r25, r24
    2942:	92 95       	swap	r25
    2944:	90 7f       	andi	r25, 0xF0	; 240
    2946:	8c 91       	ld	r24, X
    2948:	8f 7e       	andi	r24, 0xEF	; 239
    294a:	89 2b       	or	r24, r25
    294c:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    294e:	ac e5       	ldi	r26, 0x5C	; 92
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	e9 81       	ldd	r30, Y+1	; 0x01
    2954:	fa 81       	ldd	r31, Y+2	; 0x02
    2956:	86 81       	ldd	r24, Z+6	; 0x06
    2958:	8c 93       	st	X, r24
    295a:	23 c0       	rjmp	.+70     	; 0x29a2 <Timer0_Init+0x18e>
		break;
	case TIMER0_FAST_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    295c:	e3 e5       	ldi	r30, 0x53	; 83
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	8f 77       	andi	r24, 0x7F	; 127
    2964:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2966:	a3 e5       	ldi	r26, 0x53	; 83
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	81 81       	ldd	r24, Z+1	; 0x01
    2970:	86 95       	lsr	r24
    2972:	81 70       	andi	r24, 0x01	; 1
    2974:	81 70       	andi	r24, 0x01	; 1
    2976:	98 2f       	mov	r25, r24
    2978:	92 95       	swap	r25
    297a:	99 0f       	add	r25, r25
    297c:	90 7e       	andi	r25, 0xE0	; 224
    297e:	8c 91       	ld	r24, X
    2980:	8f 7d       	andi	r24, 0xDF	; 223
    2982:	89 2b       	or	r24, r25
    2984:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2986:	a3 e5       	ldi	r26, 0x53	; 83
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e9 81       	ldd	r30, Y+1	; 0x01
    298c:	fa 81       	ldd	r31, Y+2	; 0x02
    298e:	81 81       	ldd	r24, Z+1	; 0x01
    2990:	81 70       	andi	r24, 0x01	; 1
    2992:	81 70       	andi	r24, 0x01	; 1
    2994:	98 2f       	mov	r25, r24
    2996:	92 95       	swap	r25
    2998:	90 7f       	andi	r25, 0xF0	; 240
    299a:	8c 91       	ld	r24, X
    299c:	8f 7e       	andi	r24, 0xEF	; 239
    299e:	89 2b       	or	r24, r25
    29a0:	8c 93       	st	X, r24
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	}
	TCNT0_REG = Config_Ptr->TIMER0_INITIAL_VALUE;
    29a2:	a2 e5       	ldi	r26, 0x52	; 82
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	85 81       	ldd	r24, Z+5	; 0x05
    29ac:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM01_BIT = (Config_Ptr->Mode>>1);
    29ae:	a3 e5       	ldi	r26, 0x53	; 83
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e9 81       	ldd	r30, Y+1	; 0x01
    29b4:	fa 81       	ldd	r31, Y+2	; 0x02
    29b6:	84 81       	ldd	r24, Z+4	; 0x04
    29b8:	86 95       	lsr	r24
    29ba:	81 70       	andi	r24, 0x01	; 1
    29bc:	81 70       	andi	r24, 0x01	; 1
    29be:	98 2f       	mov	r25, r24
    29c0:	99 0f       	add	r25, r25
    29c2:	99 0f       	add	r25, r25
    29c4:	99 0f       	add	r25, r25
    29c6:	8c 91       	ld	r24, X
    29c8:	87 7f       	andi	r24, 0xF7	; 247
    29ca:	89 2b       	or	r24, r25
    29cc:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM00_BIT = (Config_Ptr->Mode>>0);
    29ce:	a3 e5       	ldi	r26, 0x53	; 83
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e9 81       	ldd	r30, Y+1	; 0x01
    29d4:	fa 81       	ldd	r31, Y+2	; 0x02
    29d6:	84 81       	ldd	r24, Z+4	; 0x04
    29d8:	81 70       	andi	r24, 0x01	; 1
    29da:	81 70       	andi	r24, 0x01	; 1
    29dc:	98 2f       	mov	r25, r24
    29de:	92 95       	swap	r25
    29e0:	99 0f       	add	r25, r25
    29e2:	99 0f       	add	r25, r25
    29e4:	90 7c       	andi	r25, 0xC0	; 192
    29e6:	8c 91       	ld	r24, X
    29e8:	8f 7b       	andi	r24, 0xBF	; 191
    29ea:	89 2b       	or	r24, r25
    29ec:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <Timer0_Start>:
void Timer0_Start(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	00 d0       	rcall	.+0      	; 0x2a02 <Timer0_Start+0x6>
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
    2a0a:	a3 e5       	ldi	r26, 0x53	; 83
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e3 e5       	ldi	r30, 0x53	; 83
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	98 2f       	mov	r25, r24
    2a16:	98 7f       	andi	r25, 0xF8	; 248
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	83 81       	ldd	r24, Z+3	; 0x03
    2a1e:	89 2b       	or	r24, r25
    2a20:	8c 93       	st	X, r24
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <Timer0_Stop>:
void Timer0_Stop(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	00 d0       	rcall	.+0      	; 0x2a32 <Timer0_Stop+0x6>
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	9a 83       	std	Y+2, r25	; 0x02
    2a38:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    2a3a:	a3 e5       	ldi	r26, 0x53	; 83
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	e3 e5       	ldi	r30, 0x53	; 83
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	88 7f       	andi	r24, 0xF8	; 248
    2a46:	8c 93       	st	X, r24
}
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	cf 91       	pop	r28
    2a4e:	df 91       	pop	r29
    2a50:	08 95       	ret

00002a52 <Timer0_GetCounts>:
u8 Timer0_GetCounts(void)
{
    2a52:	df 93       	push	r29
    2a54:	cf 93       	push	r28
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    2a5a:	e2 e5       	ldi	r30, 0x52	; 82
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
}
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <Timer0_SetDelayTimeMilliSec>:
void Timer0_SetDelayTimeMilliSec(const TIMER0_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	00 d0       	rcall	.+0      	; 0x2a6c <Timer0_SetDelayTimeMilliSec+0x6>
    2a6c:	00 d0       	rcall	.+0      	; 0x2a6e <Timer0_SetDelayTimeMilliSec+0x8>
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <Timer0_SetDelayTimeMilliSec+0xa>
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	9a 83       	std	Y+2, r25	; 0x02
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	4b 83       	std	Y+3, r20	; 0x03
    2a7a:	5c 83       	std	Y+4, r21	; 0x04
    2a7c:	6d 83       	std	Y+5, r22	; 0x05
    2a7e:	7e 83       	std	Y+6, r23	; 0x06
	/* Assuming we are using 16MHz FCPU and Prescaler 1024  Tick time = 2 Micro seconds */
	switch(Config_Ptr->Mode)
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	84 81       	ldd	r24, Z+4	; 0x04
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	00 97       	sbiw	r24, 0x00	; 0
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <Timer0_SetDelayTimeMilliSec+0x2a>
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <Timer0_SetDelayTimeMilliSec+0xa8>
	{
	case TIMER0_NORMAL_MODE:
		overFlowCounter = (((copy_u32TimeMS * 1000)/TIMER0_TICK_TIME) / TOP_VALUE);
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	ad 81       	ldd	r26, Y+5	; 0x05
    2a96:	be 81       	ldd	r27, Y+6	; 0x06
    2a98:	28 ee       	ldi	r18, 0xE8	; 232
    2a9a:	33 e0       	ldi	r19, 0x03	; 3
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	bc 01       	movw	r22, r24
    2aa2:	cd 01       	movw	r24, r26
    2aa4:	0e 94 b3 23 	call	0x4766	; 0x4766 <__mulsi3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	07 2e       	mov	r0, r23
    2aae:	7f e0       	ldi	r23, 0x0F	; 15
    2ab0:	b6 95       	lsr	r27
    2ab2:	a7 95       	ror	r26
    2ab4:	97 95       	ror	r25
    2ab6:	87 95       	ror	r24
    2ab8:	7a 95       	dec	r23
    2aba:	d1 f7       	brne	.-12     	; 0x2ab0 <Timer0_SetDelayTimeMilliSec+0x4a>
    2abc:	70 2d       	mov	r23, r0
    2abe:	80 93 74 02 	sts	0x0274, r24
    2ac2:	90 93 75 02 	sts	0x0275, r25
    2ac6:	a0 93 76 02 	sts	0x0276, r26
    2aca:	b0 93 77 02 	sts	0x0277, r27
		remCounter = (u8)(((copy_u32TimeMS * 1000)/TIMER0_TICK_TIME) % TOP_VALUE);
    2ace:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad2:	ad 81       	ldd	r26, Y+5	; 0x05
    2ad4:	be 81       	ldd	r27, Y+6	; 0x06
    2ad6:	28 ee       	ldi	r18, 0xE8	; 232
    2ad8:	33 e0       	ldi	r19, 0x03	; 3
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	50 e0       	ldi	r21, 0x00	; 0
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 b3 23 	call	0x4766	; 0x4766 <__mulsi3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	68 94       	set
    2aec:	16 f8       	bld	r1, 6
    2aee:	b6 95       	lsr	r27
    2af0:	a7 95       	ror	r26
    2af2:	97 95       	ror	r25
    2af4:	87 95       	ror	r24
    2af6:	16 94       	lsr	r1
    2af8:	d1 f7       	brne	.-12     	; 0x2aee <Timer0_SetDelayTimeMilliSec+0x88>
    2afa:	80 93 78 02 	sts	0x0278, r24
		Timer0_IntEnable(Config_Ptr);
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	9a 81       	ldd	r25, Y+2	; 0x02
    2b02:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Timer0_IntEnable>
		Timer0_Start(Config_Ptr);
    2b06:	89 81       	ldd	r24, Y+1	; 0x01
    2b08:	9a 81       	ldd	r25, Y+2	; 0x02
    2b0a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <Timer0_Start>
	case TIMER0_CTC_MODE:

		break;

	}
}
    2b0e:	26 96       	adiw	r28, 0x06	; 6
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <Timer0_IntEnable>:
void Timer0_IntEnable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <Timer0_IntEnable+0x6>
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    2b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b30:	fa 81       	ldd	r31, Y+2	; 0x02
    2b32:	84 81       	ldd	r24, Z+4	; 0x04
    2b34:	88 23       	and	r24, r24
    2b36:	31 f4       	brne	.+12     	; 0x2b44 <Timer0_IntEnable+0x24>
	{
		TIMSK_REG->bits.TOIE0_BIT = LOGIC_HIGH;
    2b38:	e9 e5       	ldi	r30, 0x59	; 89
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	81 60       	ori	r24, 0x01	; 1
    2b40:	80 83       	st	Z, r24
    2b42:	0a c0       	rjmp	.+20     	; 0x2b58 <Timer0_IntEnable+0x38>
	}
	else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    2b44:	e9 81       	ldd	r30, Y+1	; 0x01
    2b46:	fa 81       	ldd	r31, Y+2	; 0x02
    2b48:	84 81       	ldd	r24, Z+4	; 0x04
    2b4a:	82 30       	cpi	r24, 0x02	; 2
    2b4c:	29 f4       	brne	.+10     	; 0x2b58 <Timer0_IntEnable+0x38>
	{
		TIMSK_REG->bits.OCIE0_BIT = LOGIC_HIGH;
    2b4e:	e9 e5       	ldi	r30, 0x59	; 89
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	82 60       	ori	r24, 0x02	; 2
    2b56:	80 83       	st	Z, r24
	}
	else
	{
		//return error;
	}
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <Timer0_IntDisable>:
void Timer0_IntDisable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <Timer0_IntDisable+0x6>
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    2b70:	e9 81       	ldd	r30, Y+1	; 0x01
    2b72:	fa 81       	ldd	r31, Y+2	; 0x02
    2b74:	84 81       	ldd	r24, Z+4	; 0x04
    2b76:	88 23       	and	r24, r24
    2b78:	31 f4       	brne	.+12     	; 0x2b86 <Timer0_IntDisable+0x24>
		{
			TIMSK_REG->bits.TOIE0_BIT = LOGIC_LOW;
    2b7a:	e9 e5       	ldi	r30, 0x59	; 89
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	80 81       	ld	r24, Z
    2b80:	8e 7f       	andi	r24, 0xFE	; 254
    2b82:	80 83       	st	Z, r24
    2b84:	0a c0       	rjmp	.+20     	; 0x2b9a <Timer0_IntDisable+0x38>
		}
		else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    2b86:	e9 81       	ldd	r30, Y+1	; 0x01
    2b88:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8a:	84 81       	ldd	r24, Z+4	; 0x04
    2b8c:	82 30       	cpi	r24, 0x02	; 2
    2b8e:	29 f4       	brne	.+10     	; 0x2b9a <Timer0_IntDisable+0x38>
		{
			TIMSK_REG->bits.OCIE0_BIT = LOGIC_LOW;
    2b90:	e9 e5       	ldi	r30, 0x59	; 89
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	8d 7f       	andi	r24, 0xFD	; 253
    2b98:	80 83       	st	Z, r24
		}
		else
		{
			//return error;
		}
}
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <TIMER0_clearTimerValue>:
void TIMER0_clearTimerValue(void)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
	TCNT0_REG = 0;
    2bac:	e2 e5       	ldi	r30, 0x52	; 82
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	10 82       	st	Z, r1
}
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*ptrfn)(void))
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <Timer0_SetCallBack+0x6>
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	90 93 7a 02 	sts	0x027A, r25
    2bce:	80 93 79 02 	sts	0x0279, r24
}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <Timer0_SetFastPWM>:
void Timer0_SetFastPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <Timer0_SetFastPWM+0x6>
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	89 83       	std	Y+1, r24	; 0x01
    2bec:	6b 83       	std	Y+3, r22	; 0x03
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	OCR0_REG = (u8)((duty*255)/100);
    2bee:	ec e5       	ldi	r30, 0x5C	; 92
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	48 2f       	mov	r20, r24
    2bf6:	50 e0       	ldi	r21, 0x00	; 0
    2bf8:	ca 01       	movw	r24, r20
    2bfa:	9c 01       	movw	r18, r24
    2bfc:	22 0f       	add	r18, r18
    2bfe:	33 1f       	adc	r19, r19
    2c00:	c9 01       	movw	r24, r18
    2c02:	96 95       	lsr	r25
    2c04:	98 2f       	mov	r25, r24
    2c06:	88 27       	eor	r24, r24
    2c08:	97 95       	ror	r25
    2c0a:	87 95       	ror	r24
    2c0c:	82 1b       	sub	r24, r18
    2c0e:	93 0b       	sbc	r25, r19
    2c10:	84 0f       	add	r24, r20
    2c12:	95 1f       	adc	r25, r21
    2c14:	24 e6       	ldi	r18, 0x64	; 100
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	b9 01       	movw	r22, r18
    2c1a:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__divmodhi4>
    2c1e:	cb 01       	movw	r24, r22
    2c20:	80 83       	st	Z, r24

}
    2c22:	0f 90       	pop	r0
    2c24:	0f 90       	pop	r0
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <__vector_11>:
void Timer0_SetPhaseCorrectPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty);

ISR(TIMER0_OVF_vect)
{
    2c2e:	1f 92       	push	r1
    2c30:	0f 92       	push	r0
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	0f 92       	push	r0
    2c36:	11 24       	eor	r1, r1
    2c38:	2f 93       	push	r18
    2c3a:	3f 93       	push	r19
    2c3c:	4f 93       	push	r20
    2c3e:	5f 93       	push	r21
    2c40:	6f 93       	push	r22
    2c42:	7f 93       	push	r23
    2c44:	8f 93       	push	r24
    2c46:	9f 93       	push	r25
    2c48:	af 93       	push	r26
    2c4a:	bf 93       	push	r27
    2c4c:	ef 93       	push	r30
    2c4e:	ff 93       	push	r31
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	overFlowCounter--;
    2c58:	80 91 74 02 	lds	r24, 0x0274
    2c5c:	90 91 75 02 	lds	r25, 0x0275
    2c60:	a0 91 76 02 	lds	r26, 0x0276
    2c64:	b0 91 77 02 	lds	r27, 0x0277
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	a1 09       	sbc	r26, r1
    2c6c:	b1 09       	sbc	r27, r1
    2c6e:	80 93 74 02 	sts	0x0274, r24
    2c72:	90 93 75 02 	sts	0x0275, r25
    2c76:	a0 93 76 02 	sts	0x0276, r26
    2c7a:	b0 93 77 02 	sts	0x0277, r27

	if(overFlowCounter == 0)
    2c7e:	80 91 74 02 	lds	r24, 0x0274
    2c82:	90 91 75 02 	lds	r25, 0x0275
    2c86:	a0 91 76 02 	lds	r26, 0x0276
    2c8a:	b0 91 77 02 	lds	r27, 0x0277
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	a1 05       	cpc	r26, r1
    2c92:	b1 05       	cpc	r27, r1
    2c94:	31 f4       	brne	.+12     	; 0x2ca2 <__vector_11+0x74>
	{
		TCNT0_REG = (256 - remCounter);
    2c96:	e2 e5       	ldi	r30, 0x52	; 82
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 91 78 02 	lds	r24, 0x0278
    2c9e:	81 95       	neg	r24
    2ca0:	80 83       	st	Z, r24
	}
	if((ptrCallBack != NULL_PTR) && (overFlowCounter == -1))
    2ca2:	80 91 79 02 	lds	r24, 0x0279
    2ca6:	90 91 7a 02 	lds	r25, 0x027A
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	a9 f0       	breq	.+42     	; 0x2cd8 <__vector_11+0xaa>
    2cae:	80 91 74 02 	lds	r24, 0x0274
    2cb2:	90 91 75 02 	lds	r25, 0x0275
    2cb6:	a0 91 76 02 	lds	r26, 0x0276
    2cba:	b0 91 77 02 	lds	r27, 0x0277
    2cbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc0:	2f ef       	ldi	r18, 0xFF	; 255
    2cc2:	92 07       	cpc	r25, r18
    2cc4:	2f ef       	ldi	r18, 0xFF	; 255
    2cc6:	a2 07       	cpc	r26, r18
    2cc8:	2f ef       	ldi	r18, 0xFF	; 255
    2cca:	b2 07       	cpc	r27, r18
    2ccc:	29 f4       	brne	.+10     	; 0x2cd8 <__vector_11+0xaa>
	{
		(*ptrCallBack)();
    2cce:	e0 91 79 02 	lds	r30, 0x0279
    2cd2:	f0 91 7a 02 	lds	r31, 0x027A
    2cd6:	09 95       	icall
	}
}
    2cd8:	cf 91       	pop	r28
    2cda:	df 91       	pop	r29
    2cdc:	ff 91       	pop	r31
    2cde:	ef 91       	pop	r30
    2ce0:	bf 91       	pop	r27
    2ce2:	af 91       	pop	r26
    2ce4:	9f 91       	pop	r25
    2ce6:	8f 91       	pop	r24
    2ce8:	7f 91       	pop	r23
    2cea:	6f 91       	pop	r22
    2cec:	5f 91       	pop	r21
    2cee:	4f 91       	pop	r20
    2cf0:	3f 91       	pop	r19
    2cf2:	2f 91       	pop	r18
    2cf4:	0f 90       	pop	r0
    2cf6:	0f be       	out	0x3f, r0	; 63
    2cf8:	0f 90       	pop	r0
    2cfa:	1f 90       	pop	r1
    2cfc:	18 95       	reti

00002cfe <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2cfe:	1f 92       	push	r1
    2d00:	0f 92       	push	r0
    2d02:	0f b6       	in	r0, 0x3f	; 63
    2d04:	0f 92       	push	r0
    2d06:	11 24       	eor	r1, r1
    2d08:	2f 93       	push	r18
    2d0a:	3f 93       	push	r19
    2d0c:	4f 93       	push	r20
    2d0e:	5f 93       	push	r21
    2d10:	6f 93       	push	r22
    2d12:	7f 93       	push	r23
    2d14:	8f 93       	push	r24
    2d16:	9f 93       	push	r25
    2d18:	af 93       	push	r26
    2d1a:	bf 93       	push	r27
    2d1c:	ef 93       	push	r30
    2d1e:	ff 93       	push	r31
    2d20:	df 93       	push	r29
    2d22:	cf 93       	push	r28
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
	if(ptrCallBack != NULL_PTR)
    2d28:	80 91 79 02 	lds	r24, 0x0279
    2d2c:	90 91 7a 02 	lds	r25, 0x027A
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	29 f0       	breq	.+10     	; 0x2d3e <__vector_10+0x40>
	{
		(*ptrCallBack)();
    2d34:	e0 91 79 02 	lds	r30, 0x0279
    2d38:	f0 91 7a 02 	lds	r31, 0x027A
    2d3c:	09 95       	icall
	}
}
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	ff 91       	pop	r31
    2d44:	ef 91       	pop	r30
    2d46:	bf 91       	pop	r27
    2d48:	af 91       	pop	r26
    2d4a:	9f 91       	pop	r25
    2d4c:	8f 91       	pop	r24
    2d4e:	7f 91       	pop	r23
    2d50:	6f 91       	pop	r22
    2d52:	5f 91       	pop	r21
    2d54:	4f 91       	pop	r20
    2d56:	3f 91       	pop	r19
    2d58:	2f 91       	pop	r18
    2d5a:	0f 90       	pop	r0
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	0f 90       	pop	r0
    2d60:	1f 90       	pop	r1
    2d62:	18 95       	reti

00002d64 <TIMER1_Init>:
u16 timer1RemCounter = 0;

void(*timer1PtrCallBack)(void) = NULL_PTR;

void TIMER1_Init(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    2d64:	df 93       	push	r29
    2d66:	cf 93       	push	r28
    2d68:	00 d0       	rcall	.+0      	; 0x2d6a <TIMER1_Init+0x6>
    2d6a:	00 d0       	rcall	.+0      	; 0x2d6c <TIMER1_Init+0x8>
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    2d70:	9a 83       	std	Y+2, r25	; 0x02
    2d72:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    2d74:	e9 81       	ldd	r30, Y+1	; 0x01
    2d76:	fa 81       	ldd	r31, Y+2	; 0x02
    2d78:	84 81       	ldd	r24, Z+4	; 0x04
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	3c 83       	std	Y+4, r19	; 0x04
    2d80:	2b 83       	std	Y+3, r18	; 0x03
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	9c 81       	ldd	r25, Y+4	; 0x04
    2d86:	87 30       	cpi	r24, 0x07	; 7
    2d88:	91 05       	cpc	r25, r1
    2d8a:	09 f4       	brne	.+2      	; 0x2d8e <TIMER1_Init+0x2a>
    2d8c:	bd c2       	rjmp	.+1402   	; 0x3308 <TIMER1_Init+0x5a4>
    2d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d90:	3c 81       	ldd	r19, Y+4	; 0x04
    2d92:	28 30       	cpi	r18, 0x08	; 8
    2d94:	31 05       	cpc	r19, r1
    2d96:	4c f5       	brge	.+82     	; 0x2dea <TIMER1_Init+0x86>
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	83 30       	cpi	r24, 0x03	; 3
    2d9e:	91 05       	cpc	r25, r1
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <TIMER1_Init+0x40>
    2da2:	4a c1       	rjmp	.+660    	; 0x3038 <TIMER1_Init+0x2d4>
    2da4:	2b 81       	ldd	r18, Y+3	; 0x03
    2da6:	3c 81       	ldd	r19, Y+4	; 0x04
    2da8:	24 30       	cpi	r18, 0x04	; 4
    2daa:	31 05       	cpc	r19, r1
    2dac:	8c f4       	brge	.+34     	; 0x2dd0 <TIMER1_Init+0x6c>
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	81 30       	cpi	r24, 0x01	; 1
    2db4:	91 05       	cpc	r25, r1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <TIMER1_Init+0x56>
    2db8:	9d c0       	rjmp	.+314    	; 0x2ef4 <TIMER1_Init+0x190>
    2dba:	2b 81       	ldd	r18, Y+3	; 0x03
    2dbc:	3c 81       	ldd	r19, Y+4	; 0x04
    2dbe:	22 30       	cpi	r18, 0x02	; 2
    2dc0:	31 05       	cpc	r19, r1
    2dc2:	0c f0       	brlt	.+2      	; 0x2dc6 <TIMER1_Init+0x62>
    2dc4:	df c0       	rjmp	.+446    	; 0x2f84 <TIMER1_Init+0x220>
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dca:	00 97       	sbiw	r24, 0x00	; 0
    2dcc:	c9 f1       	breq	.+114    	; 0x2e40 <TIMER1_Init+0xdc>
    2dce:	6b c5       	rjmp	.+2774   	; 0x38a6 <TIMER1_Init+0xb42>
    2dd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2dd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2dd4:	25 30       	cpi	r18, 0x05	; 5
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <TIMER1_Init+0x78>
    2dda:	e2 c1       	rjmp	.+964    	; 0x31a0 <TIMER1_Init+0x43c>
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	9c 81       	ldd	r25, Y+4	; 0x04
    2de0:	86 30       	cpi	r24, 0x06	; 6
    2de2:	91 05       	cpc	r25, r1
    2de4:	0c f0       	brlt	.+2      	; 0x2de8 <TIMER1_Init+0x84>
    2de6:	36 c2       	rjmp	.+1132   	; 0x3254 <TIMER1_Init+0x4f0>
    2de8:	81 c1       	rjmp	.+770    	; 0x30ec <TIMER1_Init+0x388>
    2dea:	2b 81       	ldd	r18, Y+3	; 0x03
    2dec:	3c 81       	ldd	r19, Y+4	; 0x04
    2dee:	2b 30       	cpi	r18, 0x0B	; 11
    2df0:	31 05       	cpc	r19, r1
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <TIMER1_Init+0x92>
    2df4:	f1 c3       	rjmp	.+2018   	; 0x35d8 <TIMER1_Init+0x874>
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfa:	8c 30       	cpi	r24, 0x0C	; 12
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	6c f4       	brge	.+26     	; 0x2e1a <TIMER1_Init+0xb6>
    2e00:	2b 81       	ldd	r18, Y+3	; 0x03
    2e02:	3c 81       	ldd	r19, Y+4	; 0x04
    2e04:	29 30       	cpi	r18, 0x09	; 9
    2e06:	31 05       	cpc	r19, r1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <TIMER1_Init+0xa8>
    2e0a:	32 c3       	rjmp	.+1636   	; 0x3470 <TIMER1_Init+0x70c>
    2e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e10:	8a 30       	cpi	r24, 0x0A	; 10
    2e12:	91 05       	cpc	r25, r1
    2e14:	0c f0       	brlt	.+2      	; 0x2e18 <TIMER1_Init+0xb4>
    2e16:	86 c3       	rjmp	.+1804   	; 0x3524 <TIMER1_Init+0x7c0>
    2e18:	d1 c2       	rjmp	.+1442   	; 0x33bc <TIMER1_Init+0x658>
    2e1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e1c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e1e:	2e 30       	cpi	r18, 0x0E	; 14
    2e20:	31 05       	cpc	r19, r1
    2e22:	09 f4       	brne	.+2      	; 0x2e26 <TIMER1_Init+0xc2>
    2e24:	8d c4       	rjmp	.+2330   	; 0x3740 <TIMER1_Init+0x9dc>
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	8f 30       	cpi	r24, 0x0F	; 15
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	09 f4       	brne	.+2      	; 0x2e32 <TIMER1_Init+0xce>
    2e30:	e1 c4       	rjmp	.+2498   	; 0x37f4 <TIMER1_Init+0xa90>
    2e32:	2b 81       	ldd	r18, Y+3	; 0x03
    2e34:	3c 81       	ldd	r19, Y+4	; 0x04
    2e36:	2c 30       	cpi	r18, 0x0C	; 12
    2e38:	31 05       	cpc	r19, r1
    2e3a:	09 f4       	brne	.+2      	; 0x2e3e <TIMER1_Init+0xda>
    2e3c:	27 c4       	rjmp	.+2126   	; 0x368c <TIMER1_Init+0x928>
    2e3e:	33 c5       	rjmp	.+2662   	; 0x38a6 <TIMER1_Init+0xb42>
	{
	case TIMER1_NORMAL_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_HIGH;
    2e40:	ef e4       	ldi	r30, 0x4F	; 79
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	88 60       	ori	r24, 0x08	; 8
    2e48:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_HIGH;
    2e4a:	ef e4       	ldi	r30, 0x4F	; 79
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	84 60       	ori	r24, 0x04	; 4
    2e52:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2e54:	af e4       	ldi	r26, 0x4F	; 79
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e5c:	80 81       	ld	r24, Z
    2e5e:	86 95       	lsr	r24
    2e60:	81 70       	andi	r24, 0x01	; 1
    2e62:	98 2f       	mov	r25, r24
    2e64:	97 95       	ror	r25
    2e66:	99 27       	eor	r25, r25
    2e68:	97 95       	ror	r25
    2e6a:	8c 91       	ld	r24, X
    2e6c:	8f 77       	andi	r24, 0x7F	; 127
    2e6e:	89 2b       	or	r24, r25
    2e70:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2e72:	af e4       	ldi	r26, 0x4F	; 79
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e9 81       	ldd	r30, Y+1	; 0x01
    2e78:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7a:	80 81       	ld	r24, Z
    2e7c:	81 70       	andi	r24, 0x01	; 1
    2e7e:	81 70       	andi	r24, 0x01	; 1
    2e80:	98 2f       	mov	r25, r24
    2e82:	92 95       	swap	r25
    2e84:	99 0f       	add	r25, r25
    2e86:	99 0f       	add	r25, r25
    2e88:	90 7c       	andi	r25, 0xC0	; 192
    2e8a:	8c 91       	ld	r24, X
    2e8c:	8f 7b       	andi	r24, 0xBF	; 191
    2e8e:	89 2b       	or	r24, r25
    2e90:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2e92:	af e4       	ldi	r26, 0x4F	; 79
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e9 81       	ldd	r30, Y+1	; 0x01
    2e98:	fa 81       	ldd	r31, Y+2	; 0x02
    2e9a:	80 81       	ld	r24, Z
    2e9c:	86 95       	lsr	r24
    2e9e:	81 70       	andi	r24, 0x01	; 1
    2ea0:	81 70       	andi	r24, 0x01	; 1
    2ea2:	98 2f       	mov	r25, r24
    2ea4:	92 95       	swap	r25
    2ea6:	99 0f       	add	r25, r25
    2ea8:	90 7e       	andi	r25, 0xE0	; 224
    2eaa:	8c 91       	ld	r24, X
    2eac:	8f 7d       	andi	r24, 0xDF	; 223
    2eae:	89 2b       	or	r24, r25
    2eb0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2eb2:	af e4       	ldi	r26, 0x4F	; 79
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eba:	80 81       	ld	r24, Z
    2ebc:	81 70       	andi	r24, 0x01	; 1
    2ebe:	81 70       	andi	r24, 0x01	; 1
    2ec0:	98 2f       	mov	r25, r24
    2ec2:	92 95       	swap	r25
    2ec4:	90 7f       	andi	r25, 0xF0	; 240
    2ec6:	8c 91       	ld	r24, X
    2ec8:	8f 7e       	andi	r24, 0xEF	; 239
    2eca:	89 2b       	or	r24, r25
    2ecc:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2ece:	aa e4       	ldi	r26, 0x4A	; 74
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed6:	87 81       	ldd	r24, Z+7	; 0x07
    2ed8:	90 85       	ldd	r25, Z+8	; 0x08
    2eda:	11 96       	adiw	r26, 0x01	; 1
    2edc:	9c 93       	st	X, r25
    2ede:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2ee0:	a8 e4       	ldi	r26, 0x48	; 72
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee8:	87 81       	ldd	r24, Z+7	; 0x07
    2eea:	90 85       	ldd	r25, Z+8	; 0x08
    2eec:	11 96       	adiw	r26, 0x01	; 1
    2eee:	9c 93       	st	X, r25
    2ef0:	8e 93       	st	-X, r24
    2ef2:	d9 c4       	rjmp	.+2482   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_8bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2ef4:	ef e4       	ldi	r30, 0x4F	; 79
    2ef6:	f0 e0       	ldi	r31, 0x00	; 0
    2ef8:	80 81       	ld	r24, Z
    2efa:	87 7f       	andi	r24, 0xF7	; 247
    2efc:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2efe:	ef e4       	ldi	r30, 0x4F	; 79
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	8b 7f       	andi	r24, 0xFB	; 251
    2f06:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2f08:	af e4       	ldi	r26, 0x4F	; 79
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0e:	fa 81       	ldd	r31, Y+2	; 0x02
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	86 95       	lsr	r24
    2f14:	81 70       	andi	r24, 0x01	; 1
    2f16:	98 2f       	mov	r25, r24
    2f18:	97 95       	ror	r25
    2f1a:	99 27       	eor	r25, r25
    2f1c:	97 95       	ror	r25
    2f1e:	8c 91       	ld	r24, X
    2f20:	8f 77       	andi	r24, 0x7F	; 127
    2f22:	89 2b       	or	r24, r25
    2f24:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2f26:	af e4       	ldi	r26, 0x4F	; 79
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	81 70       	andi	r24, 0x01	; 1
    2f32:	81 70       	andi	r24, 0x01	; 1
    2f34:	98 2f       	mov	r25, r24
    2f36:	92 95       	swap	r25
    2f38:	99 0f       	add	r25, r25
    2f3a:	99 0f       	add	r25, r25
    2f3c:	90 7c       	andi	r25, 0xC0	; 192
    2f3e:	8c 91       	ld	r24, X
    2f40:	8f 7b       	andi	r24, 0xBF	; 191
    2f42:	89 2b       	or	r24, r25
    2f44:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2f46:	af e4       	ldi	r26, 0x4F	; 79
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	86 95       	lsr	r24
    2f52:	81 70       	andi	r24, 0x01	; 1
    2f54:	81 70       	andi	r24, 0x01	; 1
    2f56:	98 2f       	mov	r25, r24
    2f58:	92 95       	swap	r25
    2f5a:	99 0f       	add	r25, r25
    2f5c:	90 7e       	andi	r25, 0xE0	; 224
    2f5e:	8c 91       	ld	r24, X
    2f60:	8f 7d       	andi	r24, 0xDF	; 223
    2f62:	89 2b       	or	r24, r25
    2f64:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2f66:	af e4       	ldi	r26, 0x4F	; 79
    2f68:	b0 e0       	ldi	r27, 0x00	; 0
    2f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	81 70       	andi	r24, 0x01	; 1
    2f72:	81 70       	andi	r24, 0x01	; 1
    2f74:	98 2f       	mov	r25, r24
    2f76:	92 95       	swap	r25
    2f78:	90 7f       	andi	r25, 0xF0	; 240
    2f7a:	8c 91       	ld	r24, X
    2f7c:	8f 7e       	andi	r24, 0xEF	; 239
    2f7e:	89 2b       	or	r24, r25
    2f80:	8c 93       	st	X, r24
    2f82:	91 c4       	rjmp	.+2338   	; 0x38a6 <TIMER1_Init+0xb42>
		//		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
		//		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
		break;
	case TIMER1_PHASE_CORRECT_PWM_9bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2f84:	ef e4       	ldi	r30, 0x4F	; 79
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	87 7f       	andi	r24, 0xF7	; 247
    2f8c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2f8e:	ef e4       	ldi	r30, 0x4F	; 79
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	8b 7f       	andi	r24, 0xFB	; 251
    2f96:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2f98:	af e4       	ldi	r26, 0x4F	; 79
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	86 95       	lsr	r24
    2fa4:	81 70       	andi	r24, 0x01	; 1
    2fa6:	98 2f       	mov	r25, r24
    2fa8:	97 95       	ror	r25
    2faa:	99 27       	eor	r25, r25
    2fac:	97 95       	ror	r25
    2fae:	8c 91       	ld	r24, X
    2fb0:	8f 77       	andi	r24, 0x7F	; 127
    2fb2:	89 2b       	or	r24, r25
    2fb4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2fb6:	af e4       	ldi	r26, 0x4F	; 79
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbe:	82 81       	ldd	r24, Z+2	; 0x02
    2fc0:	81 70       	andi	r24, 0x01	; 1
    2fc2:	81 70       	andi	r24, 0x01	; 1
    2fc4:	98 2f       	mov	r25, r24
    2fc6:	92 95       	swap	r25
    2fc8:	99 0f       	add	r25, r25
    2fca:	99 0f       	add	r25, r25
    2fcc:	90 7c       	andi	r25, 0xC0	; 192
    2fce:	8c 91       	ld	r24, X
    2fd0:	8f 7b       	andi	r24, 0xBF	; 191
    2fd2:	89 2b       	or	r24, r25
    2fd4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2fd6:	af e4       	ldi	r26, 0x4F	; 79
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e9 81       	ldd	r30, Y+1	; 0x01
    2fdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fde:	82 81       	ldd	r24, Z+2	; 0x02
    2fe0:	86 95       	lsr	r24
    2fe2:	81 70       	andi	r24, 0x01	; 1
    2fe4:	81 70       	andi	r24, 0x01	; 1
    2fe6:	98 2f       	mov	r25, r24
    2fe8:	92 95       	swap	r25
    2fea:	99 0f       	add	r25, r25
    2fec:	90 7e       	andi	r25, 0xE0	; 224
    2fee:	8c 91       	ld	r24, X
    2ff0:	8f 7d       	andi	r24, 0xDF	; 223
    2ff2:	89 2b       	or	r24, r25
    2ff4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2ff6:	af e4       	ldi	r26, 0x4F	; 79
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffe:	82 81       	ldd	r24, Z+2	; 0x02
    3000:	81 70       	andi	r24, 0x01	; 1
    3002:	81 70       	andi	r24, 0x01	; 1
    3004:	98 2f       	mov	r25, r24
    3006:	92 95       	swap	r25
    3008:	90 7f       	andi	r25, 0xF0	; 240
    300a:	8c 91       	ld	r24, X
    300c:	8f 7e       	andi	r24, 0xEF	; 239
    300e:	89 2b       	or	r24, r25
    3010:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3012:	aa e4       	ldi	r26, 0x4A	; 74
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	e9 81       	ldd	r30, Y+1	; 0x01
    3018:	fa 81       	ldd	r31, Y+2	; 0x02
    301a:	87 81       	ldd	r24, Z+7	; 0x07
    301c:	90 85       	ldd	r25, Z+8	; 0x08
    301e:	11 96       	adiw	r26, 0x01	; 1
    3020:	9c 93       	st	X, r25
    3022:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3024:	a8 e4       	ldi	r26, 0x48	; 72
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e9 81       	ldd	r30, Y+1	; 0x01
    302a:	fa 81       	ldd	r31, Y+2	; 0x02
    302c:	87 81       	ldd	r24, Z+7	; 0x07
    302e:	90 85       	ldd	r25, Z+8	; 0x08
    3030:	11 96       	adiw	r26, 0x01	; 1
    3032:	9c 93       	st	X, r25
    3034:	8e 93       	st	-X, r24
    3036:	37 c4       	rjmp	.+2158   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_10bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3038:	ef e4       	ldi	r30, 0x4F	; 79
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	80 81       	ld	r24, Z
    303e:	87 7f       	andi	r24, 0xF7	; 247
    3040:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3042:	ef e4       	ldi	r30, 0x4F	; 79
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	8b 7f       	andi	r24, 0xFB	; 251
    304a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    304c:	af e4       	ldi	r26, 0x4F	; 79
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e9 81       	ldd	r30, Y+1	; 0x01
    3052:	fa 81       	ldd	r31, Y+2	; 0x02
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	86 95       	lsr	r24
    3058:	81 70       	andi	r24, 0x01	; 1
    305a:	98 2f       	mov	r25, r24
    305c:	97 95       	ror	r25
    305e:	99 27       	eor	r25, r25
    3060:	97 95       	ror	r25
    3062:	8c 91       	ld	r24, X
    3064:	8f 77       	andi	r24, 0x7F	; 127
    3066:	89 2b       	or	r24, r25
    3068:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    306a:	af e4       	ldi	r26, 0x4F	; 79
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e9 81       	ldd	r30, Y+1	; 0x01
    3070:	fa 81       	ldd	r31, Y+2	; 0x02
    3072:	82 81       	ldd	r24, Z+2	; 0x02
    3074:	81 70       	andi	r24, 0x01	; 1
    3076:	81 70       	andi	r24, 0x01	; 1
    3078:	98 2f       	mov	r25, r24
    307a:	92 95       	swap	r25
    307c:	99 0f       	add	r25, r25
    307e:	99 0f       	add	r25, r25
    3080:	90 7c       	andi	r25, 0xC0	; 192
    3082:	8c 91       	ld	r24, X
    3084:	8f 7b       	andi	r24, 0xBF	; 191
    3086:	89 2b       	or	r24, r25
    3088:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    308a:	af e4       	ldi	r26, 0x4F	; 79
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	82 81       	ldd	r24, Z+2	; 0x02
    3094:	86 95       	lsr	r24
    3096:	81 70       	andi	r24, 0x01	; 1
    3098:	81 70       	andi	r24, 0x01	; 1
    309a:	98 2f       	mov	r25, r24
    309c:	92 95       	swap	r25
    309e:	99 0f       	add	r25, r25
    30a0:	90 7e       	andi	r25, 0xE0	; 224
    30a2:	8c 91       	ld	r24, X
    30a4:	8f 7d       	andi	r24, 0xDF	; 223
    30a6:	89 2b       	or	r24, r25
    30a8:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    30aa:	af e4       	ldi	r26, 0x4F	; 79
    30ac:	b0 e0       	ldi	r27, 0x00	; 0
    30ae:	e9 81       	ldd	r30, Y+1	; 0x01
    30b0:	fa 81       	ldd	r31, Y+2	; 0x02
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	81 70       	andi	r24, 0x01	; 1
    30b6:	81 70       	andi	r24, 0x01	; 1
    30b8:	98 2f       	mov	r25, r24
    30ba:	92 95       	swap	r25
    30bc:	90 7f       	andi	r25, 0xF0	; 240
    30be:	8c 91       	ld	r24, X
    30c0:	8f 7e       	andi	r24, 0xEF	; 239
    30c2:	89 2b       	or	r24, r25
    30c4:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    30c6:	aa e4       	ldi	r26, 0x4A	; 74
    30c8:	b0 e0       	ldi	r27, 0x00	; 0
    30ca:	e9 81       	ldd	r30, Y+1	; 0x01
    30cc:	fa 81       	ldd	r31, Y+2	; 0x02
    30ce:	87 81       	ldd	r24, Z+7	; 0x07
    30d0:	90 85       	ldd	r25, Z+8	; 0x08
    30d2:	11 96       	adiw	r26, 0x01	; 1
    30d4:	9c 93       	st	X, r25
    30d6:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    30d8:	a8 e4       	ldi	r26, 0x48	; 72
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	e9 81       	ldd	r30, Y+1	; 0x01
    30de:	fa 81       	ldd	r31, Y+2	; 0x02
    30e0:	87 81       	ldd	r24, Z+7	; 0x07
    30e2:	90 85       	ldd	r25, Z+8	; 0x08
    30e4:	11 96       	adiw	r26, 0x01	; 1
    30e6:	9c 93       	st	X, r25
    30e8:	8e 93       	st	-X, r24
    30ea:	dd c3       	rjmp	.+1978   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_CTC_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    30ec:	ef e4       	ldi	r30, 0x4F	; 79
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	87 7f       	andi	r24, 0xF7	; 247
    30f4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    30f6:	ef e4       	ldi	r30, 0x4F	; 79
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	8b 7f       	andi	r24, 0xFB	; 251
    30fe:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    3100:	af e4       	ldi	r26, 0x4F	; 79
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e9 81       	ldd	r30, Y+1	; 0x01
    3106:	fa 81       	ldd	r31, Y+2	; 0x02
    3108:	80 81       	ld	r24, Z
    310a:	86 95       	lsr	r24
    310c:	81 70       	andi	r24, 0x01	; 1
    310e:	98 2f       	mov	r25, r24
    3110:	97 95       	ror	r25
    3112:	99 27       	eor	r25, r25
    3114:	97 95       	ror	r25
    3116:	8c 91       	ld	r24, X
    3118:	8f 77       	andi	r24, 0x7F	; 127
    311a:	89 2b       	or	r24, r25
    311c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    311e:	af e4       	ldi	r26, 0x4F	; 79
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	e9 81       	ldd	r30, Y+1	; 0x01
    3124:	fa 81       	ldd	r31, Y+2	; 0x02
    3126:	80 81       	ld	r24, Z
    3128:	81 70       	andi	r24, 0x01	; 1
    312a:	81 70       	andi	r24, 0x01	; 1
    312c:	98 2f       	mov	r25, r24
    312e:	92 95       	swap	r25
    3130:	99 0f       	add	r25, r25
    3132:	99 0f       	add	r25, r25
    3134:	90 7c       	andi	r25, 0xC0	; 192
    3136:	8c 91       	ld	r24, X
    3138:	8f 7b       	andi	r24, 0xBF	; 191
    313a:	89 2b       	or	r24, r25
    313c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    313e:	af e4       	ldi	r26, 0x4F	; 79
    3140:	b0 e0       	ldi	r27, 0x00	; 0
    3142:	e9 81       	ldd	r30, Y+1	; 0x01
    3144:	fa 81       	ldd	r31, Y+2	; 0x02
    3146:	80 81       	ld	r24, Z
    3148:	86 95       	lsr	r24
    314a:	81 70       	andi	r24, 0x01	; 1
    314c:	81 70       	andi	r24, 0x01	; 1
    314e:	98 2f       	mov	r25, r24
    3150:	92 95       	swap	r25
    3152:	99 0f       	add	r25, r25
    3154:	90 7e       	andi	r25, 0xE0	; 224
    3156:	8c 91       	ld	r24, X
    3158:	8f 7d       	andi	r24, 0xDF	; 223
    315a:	89 2b       	or	r24, r25
    315c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    315e:	af e4       	ldi	r26, 0x4F	; 79
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	e9 81       	ldd	r30, Y+1	; 0x01
    3164:	fa 81       	ldd	r31, Y+2	; 0x02
    3166:	80 81       	ld	r24, Z
    3168:	81 70       	andi	r24, 0x01	; 1
    316a:	81 70       	andi	r24, 0x01	; 1
    316c:	98 2f       	mov	r25, r24
    316e:	92 95       	swap	r25
    3170:	90 7f       	andi	r25, 0xF0	; 240
    3172:	8c 91       	ld	r24, X
    3174:	8f 7e       	andi	r24, 0xEF	; 239
    3176:	89 2b       	or	r24, r25
    3178:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    317a:	aa e4       	ldi	r26, 0x4A	; 74
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	87 81       	ldd	r24, Z+7	; 0x07
    3184:	90 85       	ldd	r25, Z+8	; 0x08
    3186:	11 96       	adiw	r26, 0x01	; 1
    3188:	9c 93       	st	X, r25
    318a:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    318c:	a8 e4       	ldi	r26, 0x48	; 72
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e9 81       	ldd	r30, Y+1	; 0x01
    3192:	fa 81       	ldd	r31, Y+2	; 0x02
    3194:	87 81       	ldd	r24, Z+7	; 0x07
    3196:	90 85       	ldd	r25, Z+8	; 0x08
    3198:	11 96       	adiw	r26, 0x01	; 1
    319a:	9c 93       	st	X, r25
    319c:	8e 93       	st	-X, r24
    319e:	83 c3       	rjmp	.+1798   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_8bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    31a0:	ef e4       	ldi	r30, 0x4F	; 79
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	87 7f       	andi	r24, 0xF7	; 247
    31a8:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    31aa:	ef e4       	ldi	r30, 0x4F	; 79
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8b 7f       	andi	r24, 0xFB	; 251
    31b2:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    31b4:	af e4       	ldi	r26, 0x4F	; 79
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ba:	fa 81       	ldd	r31, Y+2	; 0x02
    31bc:	81 81       	ldd	r24, Z+1	; 0x01
    31be:	86 95       	lsr	r24
    31c0:	81 70       	andi	r24, 0x01	; 1
    31c2:	98 2f       	mov	r25, r24
    31c4:	97 95       	ror	r25
    31c6:	99 27       	eor	r25, r25
    31c8:	97 95       	ror	r25
    31ca:	8c 91       	ld	r24, X
    31cc:	8f 77       	andi	r24, 0x7F	; 127
    31ce:	89 2b       	or	r24, r25
    31d0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    31d2:	af e4       	ldi	r26, 0x4F	; 79
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e9 81       	ldd	r30, Y+1	; 0x01
    31d8:	fa 81       	ldd	r31, Y+2	; 0x02
    31da:	81 81       	ldd	r24, Z+1	; 0x01
    31dc:	81 70       	andi	r24, 0x01	; 1
    31de:	81 70       	andi	r24, 0x01	; 1
    31e0:	98 2f       	mov	r25, r24
    31e2:	92 95       	swap	r25
    31e4:	99 0f       	add	r25, r25
    31e6:	99 0f       	add	r25, r25
    31e8:	90 7c       	andi	r25, 0xC0	; 192
    31ea:	8c 91       	ld	r24, X
    31ec:	8f 7b       	andi	r24, 0xBF	; 191
    31ee:	89 2b       	or	r24, r25
    31f0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    31f2:	af e4       	ldi	r26, 0x4F	; 79
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	e9 81       	ldd	r30, Y+1	; 0x01
    31f8:	fa 81       	ldd	r31, Y+2	; 0x02
    31fa:	81 81       	ldd	r24, Z+1	; 0x01
    31fc:	86 95       	lsr	r24
    31fe:	81 70       	andi	r24, 0x01	; 1
    3200:	81 70       	andi	r24, 0x01	; 1
    3202:	98 2f       	mov	r25, r24
    3204:	92 95       	swap	r25
    3206:	99 0f       	add	r25, r25
    3208:	90 7e       	andi	r25, 0xE0	; 224
    320a:	8c 91       	ld	r24, X
    320c:	8f 7d       	andi	r24, 0xDF	; 223
    320e:	89 2b       	or	r24, r25
    3210:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3212:	af e4       	ldi	r26, 0x4F	; 79
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	e9 81       	ldd	r30, Y+1	; 0x01
    3218:	fa 81       	ldd	r31, Y+2	; 0x02
    321a:	81 81       	ldd	r24, Z+1	; 0x01
    321c:	81 70       	andi	r24, 0x01	; 1
    321e:	81 70       	andi	r24, 0x01	; 1
    3220:	98 2f       	mov	r25, r24
    3222:	92 95       	swap	r25
    3224:	90 7f       	andi	r25, 0xF0	; 240
    3226:	8c 91       	ld	r24, X
    3228:	8f 7e       	andi	r24, 0xEF	; 239
    322a:	89 2b       	or	r24, r25
    322c:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    322e:	aa e4       	ldi	r26, 0x4A	; 74
    3230:	b0 e0       	ldi	r27, 0x00	; 0
    3232:	e9 81       	ldd	r30, Y+1	; 0x01
    3234:	fa 81       	ldd	r31, Y+2	; 0x02
    3236:	87 81       	ldd	r24, Z+7	; 0x07
    3238:	90 85       	ldd	r25, Z+8	; 0x08
    323a:	11 96       	adiw	r26, 0x01	; 1
    323c:	9c 93       	st	X, r25
    323e:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3240:	a8 e4       	ldi	r26, 0x48	; 72
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e9 81       	ldd	r30, Y+1	; 0x01
    3246:	fa 81       	ldd	r31, Y+2	; 0x02
    3248:	87 81       	ldd	r24, Z+7	; 0x07
    324a:	90 85       	ldd	r25, Z+8	; 0x08
    324c:	11 96       	adiw	r26, 0x01	; 1
    324e:	9c 93       	st	X, r25
    3250:	8e 93       	st	-X, r24
    3252:	29 c3       	rjmp	.+1618   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_9bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3254:	ef e4       	ldi	r30, 0x4F	; 79
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	87 7f       	andi	r24, 0xF7	; 247
    325c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    325e:	ef e4       	ldi	r30, 0x4F	; 79
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	8b 7f       	andi	r24, 0xFB	; 251
    3266:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    3268:	af e4       	ldi	r26, 0x4F	; 79
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e9 81       	ldd	r30, Y+1	; 0x01
    326e:	fa 81       	ldd	r31, Y+2	; 0x02
    3270:	81 81       	ldd	r24, Z+1	; 0x01
    3272:	86 95       	lsr	r24
    3274:	81 70       	andi	r24, 0x01	; 1
    3276:	98 2f       	mov	r25, r24
    3278:	97 95       	ror	r25
    327a:	99 27       	eor	r25, r25
    327c:	97 95       	ror	r25
    327e:	8c 91       	ld	r24, X
    3280:	8f 77       	andi	r24, 0x7F	; 127
    3282:	89 2b       	or	r24, r25
    3284:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3286:	af e4       	ldi	r26, 0x4F	; 79
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e9 81       	ldd	r30, Y+1	; 0x01
    328c:	fa 81       	ldd	r31, Y+2	; 0x02
    328e:	81 81       	ldd	r24, Z+1	; 0x01
    3290:	81 70       	andi	r24, 0x01	; 1
    3292:	81 70       	andi	r24, 0x01	; 1
    3294:	98 2f       	mov	r25, r24
    3296:	92 95       	swap	r25
    3298:	99 0f       	add	r25, r25
    329a:	99 0f       	add	r25, r25
    329c:	90 7c       	andi	r25, 0xC0	; 192
    329e:	8c 91       	ld	r24, X
    32a0:	8f 7b       	andi	r24, 0xBF	; 191
    32a2:	89 2b       	or	r24, r25
    32a4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    32a6:	af e4       	ldi	r26, 0x4F	; 79
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e9 81       	ldd	r30, Y+1	; 0x01
    32ac:	fa 81       	ldd	r31, Y+2	; 0x02
    32ae:	81 81       	ldd	r24, Z+1	; 0x01
    32b0:	86 95       	lsr	r24
    32b2:	81 70       	andi	r24, 0x01	; 1
    32b4:	81 70       	andi	r24, 0x01	; 1
    32b6:	98 2f       	mov	r25, r24
    32b8:	92 95       	swap	r25
    32ba:	99 0f       	add	r25, r25
    32bc:	90 7e       	andi	r25, 0xE0	; 224
    32be:	8c 91       	ld	r24, X
    32c0:	8f 7d       	andi	r24, 0xDF	; 223
    32c2:	89 2b       	or	r24, r25
    32c4:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    32c6:	af e4       	ldi	r26, 0x4F	; 79
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e9 81       	ldd	r30, Y+1	; 0x01
    32cc:	fa 81       	ldd	r31, Y+2	; 0x02
    32ce:	81 81       	ldd	r24, Z+1	; 0x01
    32d0:	81 70       	andi	r24, 0x01	; 1
    32d2:	81 70       	andi	r24, 0x01	; 1
    32d4:	98 2f       	mov	r25, r24
    32d6:	92 95       	swap	r25
    32d8:	90 7f       	andi	r25, 0xF0	; 240
    32da:	8c 91       	ld	r24, X
    32dc:	8f 7e       	andi	r24, 0xEF	; 239
    32de:	89 2b       	or	r24, r25
    32e0:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32e2:	aa e4       	ldi	r26, 0x4A	; 74
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e9 81       	ldd	r30, Y+1	; 0x01
    32e8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ea:	87 81       	ldd	r24, Z+7	; 0x07
    32ec:	90 85       	ldd	r25, Z+8	; 0x08
    32ee:	11 96       	adiw	r26, 0x01	; 1
    32f0:	9c 93       	st	X, r25
    32f2:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32f4:	a8 e4       	ldi	r26, 0x48	; 72
    32f6:	b0 e0       	ldi	r27, 0x00	; 0
    32f8:	e9 81       	ldd	r30, Y+1	; 0x01
    32fa:	fa 81       	ldd	r31, Y+2	; 0x02
    32fc:	87 81       	ldd	r24, Z+7	; 0x07
    32fe:	90 85       	ldd	r25, Z+8	; 0x08
    3300:	11 96       	adiw	r26, 0x01	; 1
    3302:	9c 93       	st	X, r25
    3304:	8e 93       	st	-X, r24
    3306:	cf c2       	rjmp	.+1438   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_10bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3308:	ef e4       	ldi	r30, 0x4F	; 79
    330a:	f0 e0       	ldi	r31, 0x00	; 0
    330c:	80 81       	ld	r24, Z
    330e:	87 7f       	andi	r24, 0xF7	; 247
    3310:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3312:	ef e4       	ldi	r30, 0x4F	; 79
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	8b 7f       	andi	r24, 0xFB	; 251
    331a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    331c:	af e4       	ldi	r26, 0x4F	; 79
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e9 81       	ldd	r30, Y+1	; 0x01
    3322:	fa 81       	ldd	r31, Y+2	; 0x02
    3324:	81 81       	ldd	r24, Z+1	; 0x01
    3326:	86 95       	lsr	r24
    3328:	81 70       	andi	r24, 0x01	; 1
    332a:	98 2f       	mov	r25, r24
    332c:	97 95       	ror	r25
    332e:	99 27       	eor	r25, r25
    3330:	97 95       	ror	r25
    3332:	8c 91       	ld	r24, X
    3334:	8f 77       	andi	r24, 0x7F	; 127
    3336:	89 2b       	or	r24, r25
    3338:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    333a:	af e4       	ldi	r26, 0x4F	; 79
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e9 81       	ldd	r30, Y+1	; 0x01
    3340:	fa 81       	ldd	r31, Y+2	; 0x02
    3342:	81 81       	ldd	r24, Z+1	; 0x01
    3344:	81 70       	andi	r24, 0x01	; 1
    3346:	81 70       	andi	r24, 0x01	; 1
    3348:	98 2f       	mov	r25, r24
    334a:	92 95       	swap	r25
    334c:	99 0f       	add	r25, r25
    334e:	99 0f       	add	r25, r25
    3350:	90 7c       	andi	r25, 0xC0	; 192
    3352:	8c 91       	ld	r24, X
    3354:	8f 7b       	andi	r24, 0xBF	; 191
    3356:	89 2b       	or	r24, r25
    3358:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    335a:	af e4       	ldi	r26, 0x4F	; 79
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	e9 81       	ldd	r30, Y+1	; 0x01
    3360:	fa 81       	ldd	r31, Y+2	; 0x02
    3362:	81 81       	ldd	r24, Z+1	; 0x01
    3364:	86 95       	lsr	r24
    3366:	81 70       	andi	r24, 0x01	; 1
    3368:	81 70       	andi	r24, 0x01	; 1
    336a:	98 2f       	mov	r25, r24
    336c:	92 95       	swap	r25
    336e:	99 0f       	add	r25, r25
    3370:	90 7e       	andi	r25, 0xE0	; 224
    3372:	8c 91       	ld	r24, X
    3374:	8f 7d       	andi	r24, 0xDF	; 223
    3376:	89 2b       	or	r24, r25
    3378:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    337a:	af e4       	ldi	r26, 0x4F	; 79
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	e9 81       	ldd	r30, Y+1	; 0x01
    3380:	fa 81       	ldd	r31, Y+2	; 0x02
    3382:	81 81       	ldd	r24, Z+1	; 0x01
    3384:	81 70       	andi	r24, 0x01	; 1
    3386:	81 70       	andi	r24, 0x01	; 1
    3388:	98 2f       	mov	r25, r24
    338a:	92 95       	swap	r25
    338c:	90 7f       	andi	r25, 0xF0	; 240
    338e:	8c 91       	ld	r24, X
    3390:	8f 7e       	andi	r24, 0xEF	; 239
    3392:	89 2b       	or	r24, r25
    3394:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3396:	aa e4       	ldi	r26, 0x4A	; 74
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e9 81       	ldd	r30, Y+1	; 0x01
    339c:	fa 81       	ldd	r31, Y+2	; 0x02
    339e:	87 81       	ldd	r24, Z+7	; 0x07
    33a0:	90 85       	ldd	r25, Z+8	; 0x08
    33a2:	11 96       	adiw	r26, 0x01	; 1
    33a4:	9c 93       	st	X, r25
    33a6:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    33a8:	a8 e4       	ldi	r26, 0x48	; 72
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	e9 81       	ldd	r30, Y+1	; 0x01
    33ae:	fa 81       	ldd	r31, Y+2	; 0x02
    33b0:	87 81       	ldd	r24, Z+7	; 0x07
    33b2:	90 85       	ldd	r25, Z+8	; 0x08
    33b4:	11 96       	adiw	r26, 0x01	; 1
    33b6:	9c 93       	st	X, r25
    33b8:	8e 93       	st	-X, r24
    33ba:	75 c2       	rjmp	.+1258   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    33bc:	ef e4       	ldi	r30, 0x4F	; 79
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	80 81       	ld	r24, Z
    33c2:	87 7f       	andi	r24, 0xF7	; 247
    33c4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    33c6:	ef e4       	ldi	r30, 0x4F	; 79
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	8b 7f       	andi	r24, 0xFB	; 251
    33ce:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    33d0:	af e4       	ldi	r26, 0x4F	; 79
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	e9 81       	ldd	r30, Y+1	; 0x01
    33d6:	fa 81       	ldd	r31, Y+2	; 0x02
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	86 95       	lsr	r24
    33dc:	81 70       	andi	r24, 0x01	; 1
    33de:	98 2f       	mov	r25, r24
    33e0:	97 95       	ror	r25
    33e2:	99 27       	eor	r25, r25
    33e4:	97 95       	ror	r25
    33e6:	8c 91       	ld	r24, X
    33e8:	8f 77       	andi	r24, 0x7F	; 127
    33ea:	89 2b       	or	r24, r25
    33ec:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    33ee:	af e4       	ldi	r26, 0x4F	; 79
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	e9 81       	ldd	r30, Y+1	; 0x01
    33f4:	fa 81       	ldd	r31, Y+2	; 0x02
    33f6:	82 81       	ldd	r24, Z+2	; 0x02
    33f8:	81 70       	andi	r24, 0x01	; 1
    33fa:	81 70       	andi	r24, 0x01	; 1
    33fc:	98 2f       	mov	r25, r24
    33fe:	92 95       	swap	r25
    3400:	99 0f       	add	r25, r25
    3402:	99 0f       	add	r25, r25
    3404:	90 7c       	andi	r25, 0xC0	; 192
    3406:	8c 91       	ld	r24, X
    3408:	8f 7b       	andi	r24, 0xBF	; 191
    340a:	89 2b       	or	r24, r25
    340c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    340e:	af e4       	ldi	r26, 0x4F	; 79
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	e9 81       	ldd	r30, Y+1	; 0x01
    3414:	fa 81       	ldd	r31, Y+2	; 0x02
    3416:	82 81       	ldd	r24, Z+2	; 0x02
    3418:	86 95       	lsr	r24
    341a:	81 70       	andi	r24, 0x01	; 1
    341c:	81 70       	andi	r24, 0x01	; 1
    341e:	98 2f       	mov	r25, r24
    3420:	92 95       	swap	r25
    3422:	99 0f       	add	r25, r25
    3424:	90 7e       	andi	r25, 0xE0	; 224
    3426:	8c 91       	ld	r24, X
    3428:	8f 7d       	andi	r24, 0xDF	; 223
    342a:	89 2b       	or	r24, r25
    342c:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    342e:	af e4       	ldi	r26, 0x4F	; 79
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e9 81       	ldd	r30, Y+1	; 0x01
    3434:	fa 81       	ldd	r31, Y+2	; 0x02
    3436:	82 81       	ldd	r24, Z+2	; 0x02
    3438:	81 70       	andi	r24, 0x01	; 1
    343a:	81 70       	andi	r24, 0x01	; 1
    343c:	98 2f       	mov	r25, r24
    343e:	92 95       	swap	r25
    3440:	90 7f       	andi	r25, 0xF0	; 240
    3442:	8c 91       	ld	r24, X
    3444:	8f 7e       	andi	r24, 0xEF	; 239
    3446:	89 2b       	or	r24, r25
    3448:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    344a:	aa e4       	ldi	r26, 0x4A	; 74
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e9 81       	ldd	r30, Y+1	; 0x01
    3450:	fa 81       	ldd	r31, Y+2	; 0x02
    3452:	87 81       	ldd	r24, Z+7	; 0x07
    3454:	90 85       	ldd	r25, Z+8	; 0x08
    3456:	11 96       	adiw	r26, 0x01	; 1
    3458:	9c 93       	st	X, r25
    345a:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    345c:	a8 e4       	ldi	r26, 0x48	; 72
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e9 81       	ldd	r30, Y+1	; 0x01
    3462:	fa 81       	ldd	r31, Y+2	; 0x02
    3464:	87 81       	ldd	r24, Z+7	; 0x07
    3466:	90 85       	ldd	r25, Z+8	; 0x08
    3468:	11 96       	adiw	r26, 0x01	; 1
    346a:	9c 93       	st	X, r25
    346c:	8e 93       	st	-X, r24
    346e:	1b c2       	rjmp	.+1078   	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3470:	ef e4       	ldi	r30, 0x4F	; 79
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	87 7f       	andi	r24, 0xF7	; 247
    3478:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    347a:	ef e4       	ldi	r30, 0x4F	; 79
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	8b 7f       	andi	r24, 0xFB	; 251
    3482:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    3484:	af e4       	ldi	r26, 0x4F	; 79
    3486:	b0 e0       	ldi	r27, 0x00	; 0
    3488:	e9 81       	ldd	r30, Y+1	; 0x01
    348a:	fa 81       	ldd	r31, Y+2	; 0x02
    348c:	82 81       	ldd	r24, Z+2	; 0x02
    348e:	86 95       	lsr	r24
    3490:	81 70       	andi	r24, 0x01	; 1
    3492:	98 2f       	mov	r25, r24
    3494:	97 95       	ror	r25
    3496:	99 27       	eor	r25, r25
    3498:	97 95       	ror	r25
    349a:	8c 91       	ld	r24, X
    349c:	8f 77       	andi	r24, 0x7F	; 127
    349e:	89 2b       	or	r24, r25
    34a0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    34a2:	af e4       	ldi	r26, 0x4F	; 79
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e9 81       	ldd	r30, Y+1	; 0x01
    34a8:	fa 81       	ldd	r31, Y+2	; 0x02
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	81 70       	andi	r24, 0x01	; 1
    34ae:	81 70       	andi	r24, 0x01	; 1
    34b0:	98 2f       	mov	r25, r24
    34b2:	92 95       	swap	r25
    34b4:	99 0f       	add	r25, r25
    34b6:	99 0f       	add	r25, r25
    34b8:	90 7c       	andi	r25, 0xC0	; 192
    34ba:	8c 91       	ld	r24, X
    34bc:	8f 7b       	andi	r24, 0xBF	; 191
    34be:	89 2b       	or	r24, r25
    34c0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    34c2:	af e4       	ldi	r26, 0x4F	; 79
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	e9 81       	ldd	r30, Y+1	; 0x01
    34c8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ca:	82 81       	ldd	r24, Z+2	; 0x02
    34cc:	86 95       	lsr	r24
    34ce:	81 70       	andi	r24, 0x01	; 1
    34d0:	81 70       	andi	r24, 0x01	; 1
    34d2:	98 2f       	mov	r25, r24
    34d4:	92 95       	swap	r25
    34d6:	99 0f       	add	r25, r25
    34d8:	90 7e       	andi	r25, 0xE0	; 224
    34da:	8c 91       	ld	r24, X
    34dc:	8f 7d       	andi	r24, 0xDF	; 223
    34de:	89 2b       	or	r24, r25
    34e0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    34e2:	af e4       	ldi	r26, 0x4F	; 79
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	e9 81       	ldd	r30, Y+1	; 0x01
    34e8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ea:	82 81       	ldd	r24, Z+2	; 0x02
    34ec:	81 70       	andi	r24, 0x01	; 1
    34ee:	81 70       	andi	r24, 0x01	; 1
    34f0:	98 2f       	mov	r25, r24
    34f2:	92 95       	swap	r25
    34f4:	90 7f       	andi	r25, 0xF0	; 240
    34f6:	8c 91       	ld	r24, X
    34f8:	8f 7e       	andi	r24, 0xEF	; 239
    34fa:	89 2b       	or	r24, r25
    34fc:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    34fe:	aa e4       	ldi	r26, 0x4A	; 74
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	e9 81       	ldd	r30, Y+1	; 0x01
    3504:	fa 81       	ldd	r31, Y+2	; 0x02
    3506:	87 81       	ldd	r24, Z+7	; 0x07
    3508:	90 85       	ldd	r25, Z+8	; 0x08
    350a:	11 96       	adiw	r26, 0x01	; 1
    350c:	9c 93       	st	X, r25
    350e:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3510:	a8 e4       	ldi	r26, 0x48	; 72
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	e9 81       	ldd	r30, Y+1	; 0x01
    3516:	fa 81       	ldd	r31, Y+2	; 0x02
    3518:	87 81       	ldd	r24, Z+7	; 0x07
    351a:	90 85       	ldd	r25, Z+8	; 0x08
    351c:	11 96       	adiw	r26, 0x01	; 1
    351e:	9c 93       	st	X, r25
    3520:	8e 93       	st	-X, r24
    3522:	c1 c1       	rjmp	.+898    	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3524:	ef e4       	ldi	r30, 0x4F	; 79
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	87 7f       	andi	r24, 0xF7	; 247
    352c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    352e:	ef e4       	ldi	r30, 0x4F	; 79
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	8b 7f       	andi	r24, 0xFB	; 251
    3536:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    3538:	af e4       	ldi	r26, 0x4F	; 79
    353a:	b0 e0       	ldi	r27, 0x00	; 0
    353c:	e9 81       	ldd	r30, Y+1	; 0x01
    353e:	fa 81       	ldd	r31, Y+2	; 0x02
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	86 95       	lsr	r24
    3544:	81 70       	andi	r24, 0x01	; 1
    3546:	98 2f       	mov	r25, r24
    3548:	97 95       	ror	r25
    354a:	99 27       	eor	r25, r25
    354c:	97 95       	ror	r25
    354e:	8c 91       	ld	r24, X
    3550:	8f 77       	andi	r24, 0x7F	; 127
    3552:	89 2b       	or	r24, r25
    3554:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    3556:	af e4       	ldi	r26, 0x4F	; 79
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	e9 81       	ldd	r30, Y+1	; 0x01
    355c:	fa 81       	ldd	r31, Y+2	; 0x02
    355e:	82 81       	ldd	r24, Z+2	; 0x02
    3560:	81 70       	andi	r24, 0x01	; 1
    3562:	81 70       	andi	r24, 0x01	; 1
    3564:	98 2f       	mov	r25, r24
    3566:	92 95       	swap	r25
    3568:	99 0f       	add	r25, r25
    356a:	99 0f       	add	r25, r25
    356c:	90 7c       	andi	r25, 0xC0	; 192
    356e:	8c 91       	ld	r24, X
    3570:	8f 7b       	andi	r24, 0xBF	; 191
    3572:	89 2b       	or	r24, r25
    3574:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    3576:	af e4       	ldi	r26, 0x4F	; 79
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	e9 81       	ldd	r30, Y+1	; 0x01
    357c:	fa 81       	ldd	r31, Y+2	; 0x02
    357e:	82 81       	ldd	r24, Z+2	; 0x02
    3580:	86 95       	lsr	r24
    3582:	81 70       	andi	r24, 0x01	; 1
    3584:	81 70       	andi	r24, 0x01	; 1
    3586:	98 2f       	mov	r25, r24
    3588:	92 95       	swap	r25
    358a:	99 0f       	add	r25, r25
    358c:	90 7e       	andi	r25, 0xE0	; 224
    358e:	8c 91       	ld	r24, X
    3590:	8f 7d       	andi	r24, 0xDF	; 223
    3592:	89 2b       	or	r24, r25
    3594:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    3596:	af e4       	ldi	r26, 0x4F	; 79
    3598:	b0 e0       	ldi	r27, 0x00	; 0
    359a:	e9 81       	ldd	r30, Y+1	; 0x01
    359c:	fa 81       	ldd	r31, Y+2	; 0x02
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	81 70       	andi	r24, 0x01	; 1
    35a2:	81 70       	andi	r24, 0x01	; 1
    35a4:	98 2f       	mov	r25, r24
    35a6:	92 95       	swap	r25
    35a8:	90 7f       	andi	r25, 0xF0	; 240
    35aa:	8c 91       	ld	r24, X
    35ac:	8f 7e       	andi	r24, 0xEF	; 239
    35ae:	89 2b       	or	r24, r25
    35b0:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    35b2:	aa e4       	ldi	r26, 0x4A	; 74
    35b4:	b0 e0       	ldi	r27, 0x00	; 0
    35b6:	e9 81       	ldd	r30, Y+1	; 0x01
    35b8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ba:	87 81       	ldd	r24, Z+7	; 0x07
    35bc:	90 85       	ldd	r25, Z+8	; 0x08
    35be:	11 96       	adiw	r26, 0x01	; 1
    35c0:	9c 93       	st	X, r25
    35c2:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    35c4:	a8 e4       	ldi	r26, 0x48	; 72
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e9 81       	ldd	r30, Y+1	; 0x01
    35ca:	fa 81       	ldd	r31, Y+2	; 0x02
    35cc:	87 81       	ldd	r24, Z+7	; 0x07
    35ce:	90 85       	ldd	r25, Z+8	; 0x08
    35d0:	11 96       	adiw	r26, 0x01	; 1
    35d2:	9c 93       	st	X, r25
    35d4:	8e 93       	st	-X, r24
    35d6:	67 c1       	rjmp	.+718    	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_PHASE_CORRECT_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    35d8:	ef e4       	ldi	r30, 0x4F	; 79
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	80 81       	ld	r24, Z
    35de:	87 7f       	andi	r24, 0xF7	; 247
    35e0:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    35e2:	ef e4       	ldi	r30, 0x4F	; 79
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	8b 7f       	andi	r24, 0xFB	; 251
    35ea:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    35ec:	af e4       	ldi	r26, 0x4F	; 79
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e9 81       	ldd	r30, Y+1	; 0x01
    35f2:	fa 81       	ldd	r31, Y+2	; 0x02
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	86 95       	lsr	r24
    35f8:	81 70       	andi	r24, 0x01	; 1
    35fa:	98 2f       	mov	r25, r24
    35fc:	97 95       	ror	r25
    35fe:	99 27       	eor	r25, r25
    3600:	97 95       	ror	r25
    3602:	8c 91       	ld	r24, X
    3604:	8f 77       	andi	r24, 0x7F	; 127
    3606:	89 2b       	or	r24, r25
    3608:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    360a:	af e4       	ldi	r26, 0x4F	; 79
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e9 81       	ldd	r30, Y+1	; 0x01
    3610:	fa 81       	ldd	r31, Y+2	; 0x02
    3612:	82 81       	ldd	r24, Z+2	; 0x02
    3614:	81 70       	andi	r24, 0x01	; 1
    3616:	81 70       	andi	r24, 0x01	; 1
    3618:	98 2f       	mov	r25, r24
    361a:	92 95       	swap	r25
    361c:	99 0f       	add	r25, r25
    361e:	99 0f       	add	r25, r25
    3620:	90 7c       	andi	r25, 0xC0	; 192
    3622:	8c 91       	ld	r24, X
    3624:	8f 7b       	andi	r24, 0xBF	; 191
    3626:	89 2b       	or	r24, r25
    3628:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    362a:	af e4       	ldi	r26, 0x4F	; 79
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e9 81       	ldd	r30, Y+1	; 0x01
    3630:	fa 81       	ldd	r31, Y+2	; 0x02
    3632:	82 81       	ldd	r24, Z+2	; 0x02
    3634:	86 95       	lsr	r24
    3636:	81 70       	andi	r24, 0x01	; 1
    3638:	81 70       	andi	r24, 0x01	; 1
    363a:	98 2f       	mov	r25, r24
    363c:	92 95       	swap	r25
    363e:	99 0f       	add	r25, r25
    3640:	90 7e       	andi	r25, 0xE0	; 224
    3642:	8c 91       	ld	r24, X
    3644:	8f 7d       	andi	r24, 0xDF	; 223
    3646:	89 2b       	or	r24, r25
    3648:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    364a:	af e4       	ldi	r26, 0x4F	; 79
    364c:	b0 e0       	ldi	r27, 0x00	; 0
    364e:	e9 81       	ldd	r30, Y+1	; 0x01
    3650:	fa 81       	ldd	r31, Y+2	; 0x02
    3652:	82 81       	ldd	r24, Z+2	; 0x02
    3654:	81 70       	andi	r24, 0x01	; 1
    3656:	81 70       	andi	r24, 0x01	; 1
    3658:	98 2f       	mov	r25, r24
    365a:	92 95       	swap	r25
    365c:	90 7f       	andi	r25, 0xF0	; 240
    365e:	8c 91       	ld	r24, X
    3660:	8f 7e       	andi	r24, 0xEF	; 239
    3662:	89 2b       	or	r24, r25
    3664:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3666:	aa e4       	ldi	r26, 0x4A	; 74
    3668:	b0 e0       	ldi	r27, 0x00	; 0
    366a:	e9 81       	ldd	r30, Y+1	; 0x01
    366c:	fa 81       	ldd	r31, Y+2	; 0x02
    366e:	87 81       	ldd	r24, Z+7	; 0x07
    3670:	90 85       	ldd	r25, Z+8	; 0x08
    3672:	11 96       	adiw	r26, 0x01	; 1
    3674:	9c 93       	st	X, r25
    3676:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3678:	a8 e4       	ldi	r26, 0x48	; 72
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e9 81       	ldd	r30, Y+1	; 0x01
    367e:	fa 81       	ldd	r31, Y+2	; 0x02
    3680:	87 81       	ldd	r24, Z+7	; 0x07
    3682:	90 85       	ldd	r25, Z+8	; 0x08
    3684:	11 96       	adiw	r26, 0x01	; 1
    3686:	9c 93       	st	X, r25
    3688:	8e 93       	st	-X, r24
    368a:	0d c1       	rjmp	.+538    	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_CTC_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    368c:	ef e4       	ldi	r30, 0x4F	; 79
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	87 7f       	andi	r24, 0xF7	; 247
    3694:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3696:	ef e4       	ldi	r30, 0x4F	; 79
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	80 81       	ld	r24, Z
    369c:	8b 7f       	andi	r24, 0xFB	; 251
    369e:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    36a0:	af e4       	ldi	r26, 0x4F	; 79
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e9 81       	ldd	r30, Y+1	; 0x01
    36a6:	fa 81       	ldd	r31, Y+2	; 0x02
    36a8:	80 81       	ld	r24, Z
    36aa:	86 95       	lsr	r24
    36ac:	81 70       	andi	r24, 0x01	; 1
    36ae:	98 2f       	mov	r25, r24
    36b0:	97 95       	ror	r25
    36b2:	99 27       	eor	r25, r25
    36b4:	97 95       	ror	r25
    36b6:	8c 91       	ld	r24, X
    36b8:	8f 77       	andi	r24, 0x7F	; 127
    36ba:	89 2b       	or	r24, r25
    36bc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    36be:	af e4       	ldi	r26, 0x4F	; 79
    36c0:	b0 e0       	ldi	r27, 0x00	; 0
    36c2:	e9 81       	ldd	r30, Y+1	; 0x01
    36c4:	fa 81       	ldd	r31, Y+2	; 0x02
    36c6:	80 81       	ld	r24, Z
    36c8:	81 70       	andi	r24, 0x01	; 1
    36ca:	81 70       	andi	r24, 0x01	; 1
    36cc:	98 2f       	mov	r25, r24
    36ce:	92 95       	swap	r25
    36d0:	99 0f       	add	r25, r25
    36d2:	99 0f       	add	r25, r25
    36d4:	90 7c       	andi	r25, 0xC0	; 192
    36d6:	8c 91       	ld	r24, X
    36d8:	8f 7b       	andi	r24, 0xBF	; 191
    36da:	89 2b       	or	r24, r25
    36dc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    36de:	af e4       	ldi	r26, 0x4F	; 79
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	e9 81       	ldd	r30, Y+1	; 0x01
    36e4:	fa 81       	ldd	r31, Y+2	; 0x02
    36e6:	80 81       	ld	r24, Z
    36e8:	86 95       	lsr	r24
    36ea:	81 70       	andi	r24, 0x01	; 1
    36ec:	81 70       	andi	r24, 0x01	; 1
    36ee:	98 2f       	mov	r25, r24
    36f0:	92 95       	swap	r25
    36f2:	99 0f       	add	r25, r25
    36f4:	90 7e       	andi	r25, 0xE0	; 224
    36f6:	8c 91       	ld	r24, X
    36f8:	8f 7d       	andi	r24, 0xDF	; 223
    36fa:	89 2b       	or	r24, r25
    36fc:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    36fe:	af e4       	ldi	r26, 0x4F	; 79
    3700:	b0 e0       	ldi	r27, 0x00	; 0
    3702:	e9 81       	ldd	r30, Y+1	; 0x01
    3704:	fa 81       	ldd	r31, Y+2	; 0x02
    3706:	80 81       	ld	r24, Z
    3708:	81 70       	andi	r24, 0x01	; 1
    370a:	81 70       	andi	r24, 0x01	; 1
    370c:	98 2f       	mov	r25, r24
    370e:	92 95       	swap	r25
    3710:	90 7f       	andi	r25, 0xF0	; 240
    3712:	8c 91       	ld	r24, X
    3714:	8f 7e       	andi	r24, 0xEF	; 239
    3716:	89 2b       	or	r24, r25
    3718:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    371a:	aa e4       	ldi	r26, 0x4A	; 74
    371c:	b0 e0       	ldi	r27, 0x00	; 0
    371e:	e9 81       	ldd	r30, Y+1	; 0x01
    3720:	fa 81       	ldd	r31, Y+2	; 0x02
    3722:	87 81       	ldd	r24, Z+7	; 0x07
    3724:	90 85       	ldd	r25, Z+8	; 0x08
    3726:	11 96       	adiw	r26, 0x01	; 1
    3728:	9c 93       	st	X, r25
    372a:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    372c:	a8 e4       	ldi	r26, 0x48	; 72
    372e:	b0 e0       	ldi	r27, 0x00	; 0
    3730:	e9 81       	ldd	r30, Y+1	; 0x01
    3732:	fa 81       	ldd	r31, Y+2	; 0x02
    3734:	87 81       	ldd	r24, Z+7	; 0x07
    3736:	90 85       	ldd	r25, Z+8	; 0x08
    3738:	11 96       	adiw	r26, 0x01	; 1
    373a:	9c 93       	st	X, r25
    373c:	8e 93       	st	-X, r24
    373e:	b3 c0       	rjmp	.+358    	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3740:	ef e4       	ldi	r30, 0x4F	; 79
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	87 7f       	andi	r24, 0xF7	; 247
    3748:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    374a:	ef e4       	ldi	r30, 0x4F	; 79
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	8b 7f       	andi	r24, 0xFB	; 251
    3752:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    3754:	af e4       	ldi	r26, 0x4F	; 79
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	e9 81       	ldd	r30, Y+1	; 0x01
    375a:	fa 81       	ldd	r31, Y+2	; 0x02
    375c:	81 81       	ldd	r24, Z+1	; 0x01
    375e:	86 95       	lsr	r24
    3760:	81 70       	andi	r24, 0x01	; 1
    3762:	98 2f       	mov	r25, r24
    3764:	97 95       	ror	r25
    3766:	99 27       	eor	r25, r25
    3768:	97 95       	ror	r25
    376a:	8c 91       	ld	r24, X
    376c:	8f 77       	andi	r24, 0x7F	; 127
    376e:	89 2b       	or	r24, r25
    3770:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3772:	af e4       	ldi	r26, 0x4F	; 79
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	e9 81       	ldd	r30, Y+1	; 0x01
    3778:	fa 81       	ldd	r31, Y+2	; 0x02
    377a:	81 81       	ldd	r24, Z+1	; 0x01
    377c:	81 70       	andi	r24, 0x01	; 1
    377e:	81 70       	andi	r24, 0x01	; 1
    3780:	98 2f       	mov	r25, r24
    3782:	92 95       	swap	r25
    3784:	99 0f       	add	r25, r25
    3786:	99 0f       	add	r25, r25
    3788:	90 7c       	andi	r25, 0xC0	; 192
    378a:	8c 91       	ld	r24, X
    378c:	8f 7b       	andi	r24, 0xBF	; 191
    378e:	89 2b       	or	r24, r25
    3790:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    3792:	af e4       	ldi	r26, 0x4F	; 79
    3794:	b0 e0       	ldi	r27, 0x00	; 0
    3796:	e9 81       	ldd	r30, Y+1	; 0x01
    3798:	fa 81       	ldd	r31, Y+2	; 0x02
    379a:	81 81       	ldd	r24, Z+1	; 0x01
    379c:	86 95       	lsr	r24
    379e:	81 70       	andi	r24, 0x01	; 1
    37a0:	81 70       	andi	r24, 0x01	; 1
    37a2:	98 2f       	mov	r25, r24
    37a4:	92 95       	swap	r25
    37a6:	99 0f       	add	r25, r25
    37a8:	90 7e       	andi	r25, 0xE0	; 224
    37aa:	8c 91       	ld	r24, X
    37ac:	8f 7d       	andi	r24, 0xDF	; 223
    37ae:	89 2b       	or	r24, r25
    37b0:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    37b2:	af e4       	ldi	r26, 0x4F	; 79
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e9 81       	ldd	r30, Y+1	; 0x01
    37b8:	fa 81       	ldd	r31, Y+2	; 0x02
    37ba:	81 81       	ldd	r24, Z+1	; 0x01
    37bc:	81 70       	andi	r24, 0x01	; 1
    37be:	81 70       	andi	r24, 0x01	; 1
    37c0:	98 2f       	mov	r25, r24
    37c2:	92 95       	swap	r25
    37c4:	90 7f       	andi	r25, 0xF0	; 240
    37c6:	8c 91       	ld	r24, X
    37c8:	8f 7e       	andi	r24, 0xEF	; 239
    37ca:	89 2b       	or	r24, r25
    37cc:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    37ce:	aa e4       	ldi	r26, 0x4A	; 74
    37d0:	b0 e0       	ldi	r27, 0x00	; 0
    37d2:	e9 81       	ldd	r30, Y+1	; 0x01
    37d4:	fa 81       	ldd	r31, Y+2	; 0x02
    37d6:	87 81       	ldd	r24, Z+7	; 0x07
    37d8:	90 85       	ldd	r25, Z+8	; 0x08
    37da:	11 96       	adiw	r26, 0x01	; 1
    37dc:	9c 93       	st	X, r25
    37de:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    37e0:	a8 e4       	ldi	r26, 0x48	; 72
    37e2:	b0 e0       	ldi	r27, 0x00	; 0
    37e4:	e9 81       	ldd	r30, Y+1	; 0x01
    37e6:	fa 81       	ldd	r31, Y+2	; 0x02
    37e8:	87 81       	ldd	r24, Z+7	; 0x07
    37ea:	90 85       	ldd	r25, Z+8	; 0x08
    37ec:	11 96       	adiw	r26, 0x01	; 1
    37ee:	9c 93       	st	X, r25
    37f0:	8e 93       	st	-X, r24
    37f2:	59 c0       	rjmp	.+178    	; 0x38a6 <TIMER1_Init+0xb42>
		break;
	case TIMER1_FAST_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    37f4:	ef e4       	ldi	r30, 0x4F	; 79
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	80 81       	ld	r24, Z
    37fa:	87 7f       	andi	r24, 0xF7	; 247
    37fc:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    37fe:	ef e4       	ldi	r30, 0x4F	; 79
    3800:	f0 e0       	ldi	r31, 0x00	; 0
    3802:	80 81       	ld	r24, Z
    3804:	8b 7f       	andi	r24, 0xFB	; 251
    3806:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    3808:	af e4       	ldi	r26, 0x4F	; 79
    380a:	b0 e0       	ldi	r27, 0x00	; 0
    380c:	e9 81       	ldd	r30, Y+1	; 0x01
    380e:	fa 81       	ldd	r31, Y+2	; 0x02
    3810:	81 81       	ldd	r24, Z+1	; 0x01
    3812:	86 95       	lsr	r24
    3814:	81 70       	andi	r24, 0x01	; 1
    3816:	98 2f       	mov	r25, r24
    3818:	97 95       	ror	r25
    381a:	99 27       	eor	r25, r25
    381c:	97 95       	ror	r25
    381e:	8c 91       	ld	r24, X
    3820:	8f 77       	andi	r24, 0x7F	; 127
    3822:	89 2b       	or	r24, r25
    3824:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3826:	af e4       	ldi	r26, 0x4F	; 79
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	e9 81       	ldd	r30, Y+1	; 0x01
    382c:	fa 81       	ldd	r31, Y+2	; 0x02
    382e:	81 81       	ldd	r24, Z+1	; 0x01
    3830:	81 70       	andi	r24, 0x01	; 1
    3832:	81 70       	andi	r24, 0x01	; 1
    3834:	98 2f       	mov	r25, r24
    3836:	92 95       	swap	r25
    3838:	99 0f       	add	r25, r25
    383a:	99 0f       	add	r25, r25
    383c:	90 7c       	andi	r25, 0xC0	; 192
    383e:	8c 91       	ld	r24, X
    3840:	8f 7b       	andi	r24, 0xBF	; 191
    3842:	89 2b       	or	r24, r25
    3844:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    3846:	af e4       	ldi	r26, 0x4F	; 79
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	81 81       	ldd	r24, Z+1	; 0x01
    3850:	86 95       	lsr	r24
    3852:	81 70       	andi	r24, 0x01	; 1
    3854:	81 70       	andi	r24, 0x01	; 1
    3856:	98 2f       	mov	r25, r24
    3858:	92 95       	swap	r25
    385a:	99 0f       	add	r25, r25
    385c:	90 7e       	andi	r25, 0xE0	; 224
    385e:	8c 91       	ld	r24, X
    3860:	8f 7d       	andi	r24, 0xDF	; 223
    3862:	89 2b       	or	r24, r25
    3864:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3866:	af e4       	ldi	r26, 0x4F	; 79
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	e9 81       	ldd	r30, Y+1	; 0x01
    386c:	fa 81       	ldd	r31, Y+2	; 0x02
    386e:	81 81       	ldd	r24, Z+1	; 0x01
    3870:	81 70       	andi	r24, 0x01	; 1
    3872:	81 70       	andi	r24, 0x01	; 1
    3874:	98 2f       	mov	r25, r24
    3876:	92 95       	swap	r25
    3878:	90 7f       	andi	r25, 0xF0	; 240
    387a:	8c 91       	ld	r24, X
    387c:	8f 7e       	andi	r24, 0xEF	; 239
    387e:	89 2b       	or	r24, r25
    3880:	8c 93       	st	X, r24
		OCR1A_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3882:	aa e4       	ldi	r26, 0x4A	; 74
    3884:	b0 e0       	ldi	r27, 0x00	; 0
    3886:	e9 81       	ldd	r30, Y+1	; 0x01
    3888:	fa 81       	ldd	r31, Y+2	; 0x02
    388a:	87 81       	ldd	r24, Z+7	; 0x07
    388c:	90 85       	ldd	r25, Z+8	; 0x08
    388e:	11 96       	adiw	r26, 0x01	; 1
    3890:	9c 93       	st	X, r25
    3892:	8e 93       	st	-X, r24
		OCR1B_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3894:	a8 e4       	ldi	r26, 0x48	; 72
    3896:	b0 e0       	ldi	r27, 0x00	; 0
    3898:	e9 81       	ldd	r30, Y+1	; 0x01
    389a:	fa 81       	ldd	r31, Y+2	; 0x02
    389c:	87 81       	ldd	r24, Z+7	; 0x07
    389e:	90 85       	ldd	r25, Z+8	; 0x08
    38a0:	11 96       	adiw	r26, 0x01	; 1
    38a2:	9c 93       	st	X, r25
    38a4:	8e 93       	st	-X, r24
		break;
	}
	TCNT1_REG = (Config_Ptr->TIMER1_INITIAL_VALUE);
    38a6:	ac e4       	ldi	r26, 0x4C	; 76
    38a8:	b0 e0       	ldi	r27, 0x00	; 0
    38aa:	e9 81       	ldd	r30, Y+1	; 0x01
    38ac:	fa 81       	ldd	r31, Y+2	; 0x02
    38ae:	85 81       	ldd	r24, Z+5	; 0x05
    38b0:	96 81       	ldd	r25, Z+6	; 0x06
    38b2:	11 96       	adiw	r26, 0x01	; 1
    38b4:	9c 93       	st	X, r25
    38b6:	8e 93       	st	-X, r24
	TCCR1A_REG->bits.WGM10_BIT = (Config_Ptr->Mode);
    38b8:	af e4       	ldi	r26, 0x4F	; 79
    38ba:	b0 e0       	ldi	r27, 0x00	; 0
    38bc:	e9 81       	ldd	r30, Y+1	; 0x01
    38be:	fa 81       	ldd	r31, Y+2	; 0x02
    38c0:	84 81       	ldd	r24, Z+4	; 0x04
    38c2:	81 70       	andi	r24, 0x01	; 1
    38c4:	98 2f       	mov	r25, r24
    38c6:	91 70       	andi	r25, 0x01	; 1
    38c8:	8c 91       	ld	r24, X
    38ca:	8e 7f       	andi	r24, 0xFE	; 254
    38cc:	89 2b       	or	r24, r25
    38ce:	8c 93       	st	X, r24
	TCCR1A_REG->bits.WGM11_BIT = (Config_Ptr->Mode>> 1);
    38d0:	af e4       	ldi	r26, 0x4F	; 79
    38d2:	b0 e0       	ldi	r27, 0x00	; 0
    38d4:	e9 81       	ldd	r30, Y+1	; 0x01
    38d6:	fa 81       	ldd	r31, Y+2	; 0x02
    38d8:	84 81       	ldd	r24, Z+4	; 0x04
    38da:	86 95       	lsr	r24
    38dc:	81 70       	andi	r24, 0x01	; 1
    38de:	81 70       	andi	r24, 0x01	; 1
    38e0:	98 2f       	mov	r25, r24
    38e2:	99 0f       	add	r25, r25
    38e4:	8c 91       	ld	r24, X
    38e6:	8d 7f       	andi	r24, 0xFD	; 253
    38e8:	89 2b       	or	r24, r25
    38ea:	8c 93       	st	X, r24
	TCCR1B_REG->bits.WGM12_BIT = (Config_Ptr->Mode >> 2);
    38ec:	ae e4       	ldi	r26, 0x4E	; 78
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	e9 81       	ldd	r30, Y+1	; 0x01
    38f2:	fa 81       	ldd	r31, Y+2	; 0x02
    38f4:	84 81       	ldd	r24, Z+4	; 0x04
    38f6:	86 95       	lsr	r24
    38f8:	86 95       	lsr	r24
    38fa:	81 70       	andi	r24, 0x01	; 1
    38fc:	81 70       	andi	r24, 0x01	; 1
    38fe:	98 2f       	mov	r25, r24
    3900:	99 0f       	add	r25, r25
    3902:	99 0f       	add	r25, r25
    3904:	99 0f       	add	r25, r25
    3906:	8c 91       	ld	r24, X
    3908:	87 7f       	andi	r24, 0xF7	; 247
    390a:	89 2b       	or	r24, r25
    390c:	8c 93       	st	X, r24
	TCCR1B_REG->bits.WGM13_BIT = (Config_Ptr->Mode >> 3);
    390e:	ae e4       	ldi	r26, 0x4E	; 78
    3910:	b0 e0       	ldi	r27, 0x00	; 0
    3912:	e9 81       	ldd	r30, Y+1	; 0x01
    3914:	fa 81       	ldd	r31, Y+2	; 0x02
    3916:	84 81       	ldd	r24, Z+4	; 0x04
    3918:	86 95       	lsr	r24
    391a:	86 95       	lsr	r24
    391c:	86 95       	lsr	r24
    391e:	81 70       	andi	r24, 0x01	; 1
    3920:	81 70       	andi	r24, 0x01	; 1
    3922:	98 2f       	mov	r25, r24
    3924:	92 95       	swap	r25
    3926:	90 7f       	andi	r25, 0xF0	; 240
    3928:	8c 91       	ld	r24, X
    392a:	8f 7e       	andi	r24, 0xEF	; 239
    392c:	89 2b       	or	r24, r25
    392e:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	cf 91       	pop	r28
    393a:	df 91       	pop	r29
    393c:	08 95       	ret

0000393e <TIMER1_Start>:
void TIMER1_Start(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    393e:	df 93       	push	r29
    3940:	cf 93       	push	r28
    3942:	00 d0       	rcall	.+0      	; 0x3944 <TIMER1_Start+0x6>
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	9a 83       	std	Y+2, r25	; 0x02
    394a:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->FULL_REG = ((TCCR1B_REG->FULL_REG & CLOCK_SELECT_MASK) | ((Config_Ptr->Clock_Select & 0x07)));
    394c:	ae e4       	ldi	r26, 0x4E	; 78
    394e:	b0 e0       	ldi	r27, 0x00	; 0
    3950:	ee e4       	ldi	r30, 0x4E	; 78
    3952:	f0 e0       	ldi	r31, 0x00	; 0
    3954:	80 81       	ld	r24, Z
    3956:	98 2f       	mov	r25, r24
    3958:	98 7f       	andi	r25, 0xF8	; 248
    395a:	e9 81       	ldd	r30, Y+1	; 0x01
    395c:	fa 81       	ldd	r31, Y+2	; 0x02
    395e:	83 81       	ldd	r24, Z+3	; 0x03
    3960:	87 70       	andi	r24, 0x07	; 7
    3962:	89 2b       	or	r24, r25
    3964:	8c 93       	st	X, r24
}
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <TIMER1_Stop>:
void TIMER1_Stop(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	00 d0       	rcall	.+0      	; 0x3976 <TIMER1_Stop+0x6>
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	9a 83       	std	Y+2, r25	; 0x02
    397c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->FULL_REG = ((TCCR1B_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    397e:	ae e4       	ldi	r26, 0x4E	; 78
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	ee e4       	ldi	r30, 0x4E	; 78
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	88 7f       	andi	r24, 0xF8	; 248
    398a:	8c 93       	st	X, r24
}
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <TIMER1_GetCounts>:
u16 TIMER1_GetCounts(void)
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    399e:	ec e4       	ldi	r30, 0x4C	; 76
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
}
    39a6:	cf 91       	pop	r28
    39a8:	df 91       	pop	r29
    39aa:	08 95       	ret

000039ac <TIMER1_SetDelayTimeMilliSec>:
void TIMER1_SetDelayTimeMilliSec(const TIMER1_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    39ac:	df 93       	push	r29
    39ae:	cf 93       	push	r28
    39b0:	00 d0       	rcall	.+0      	; 0x39b2 <TIMER1_SetDelayTimeMilliSec+0x6>
    39b2:	00 d0       	rcall	.+0      	; 0x39b4 <TIMER1_SetDelayTimeMilliSec+0x8>
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <TIMER1_SetDelayTimeMilliSec+0xa>
    39b6:	cd b7       	in	r28, 0x3d	; 61
    39b8:	de b7       	in	r29, 0x3e	; 62
    39ba:	9a 83       	std	Y+2, r25	; 0x02
    39bc:	89 83       	std	Y+1, r24	; 0x01
    39be:	4b 83       	std	Y+3, r20	; 0x03
    39c0:	5c 83       	std	Y+4, r21	; 0x04
    39c2:	6d 83       	std	Y+5, r22	; 0x05
    39c4:	7e 83       	std	Y+6, r23	; 0x06
	switch(Config_Ptr->Mode)
    39c6:	e9 81       	ldd	r30, Y+1	; 0x01
    39c8:	fa 81       	ldd	r31, Y+2	; 0x02
    39ca:	84 81       	ldd	r24, Z+4	; 0x04
    39cc:	88 2f       	mov	r24, r24
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	00 97       	sbiw	r24, 0x00	; 0
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <TIMER1_SetDelayTimeMilliSec+0x2a>
    39d4:	4c c0       	rjmp	.+152    	; 0x3a6e <TIMER1_SetDelayTimeMilliSec+0xc2>
	{
	case TIMER1_NORMAL_MODE:
		timer1OverFlowCounter = (((copy_u32TimeMS * 1000)/TICK_TIME) / TOP_VALUE);
    39d6:	8b 81       	ldd	r24, Y+3	; 0x03
    39d8:	9c 81       	ldd	r25, Y+4	; 0x04
    39da:	ad 81       	ldd	r26, Y+5	; 0x05
    39dc:	be 81       	ldd	r27, Y+6	; 0x06
    39de:	28 ee       	ldi	r18, 0xE8	; 232
    39e0:	33 e0       	ldi	r19, 0x03	; 3
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	50 e0       	ldi	r21, 0x00	; 0
    39e6:	bc 01       	movw	r22, r24
    39e8:	cd 01       	movw	r24, r26
    39ea:	0e 94 b3 23 	call	0x4766	; 0x4766 <__mulsi3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	2c ef       	ldi	r18, 0xFC	; 252
    39f4:	3f ef       	ldi	r19, 0xFF	; 255
    39f6:	43 e0       	ldi	r20, 0x03	; 3
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <__udivmodsi4>
    3a02:	da 01       	movw	r26, r20
    3a04:	c9 01       	movw	r24, r18
    3a06:	80 93 7b 02 	sts	0x027B, r24
    3a0a:	90 93 7c 02 	sts	0x027C, r25
    3a0e:	a0 93 7d 02 	sts	0x027D, r26
    3a12:	b0 93 7e 02 	sts	0x027E, r27
		timer1RemCounter = (u16)(((copy_u32TimeMS * 1000)/TICK_TIME) % TOP_VALUE);
    3a16:	8b 81       	ldd	r24, Y+3	; 0x03
    3a18:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1a:	ad 81       	ldd	r26, Y+5	; 0x05
    3a1c:	be 81       	ldd	r27, Y+6	; 0x06
    3a1e:	28 ee       	ldi	r18, 0xE8	; 232
    3a20:	33 e0       	ldi	r19, 0x03	; 3
    3a22:	40 e0       	ldi	r20, 0x00	; 0
    3a24:	50 e0       	ldi	r21, 0x00	; 0
    3a26:	bc 01       	movw	r22, r24
    3a28:	cd 01       	movw	r24, r26
    3a2a:	0e 94 b3 23 	call	0x4766	; 0x4766 <__mulsi3>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	b6 95       	lsr	r27
    3a34:	a7 95       	ror	r26
    3a36:	97 95       	ror	r25
    3a38:	87 95       	ror	r24
    3a3a:	b6 95       	lsr	r27
    3a3c:	a7 95       	ror	r26
    3a3e:	97 95       	ror	r25
    3a40:	87 95       	ror	r24
    3a42:	2f ef       	ldi	r18, 0xFF	; 255
    3a44:	3f ef       	ldi	r19, 0xFF	; 255
    3a46:	40 e0       	ldi	r20, 0x00	; 0
    3a48:	50 e0       	ldi	r21, 0x00	; 0
    3a4a:	bc 01       	movw	r22, r24
    3a4c:	cd 01       	movw	r24, r26
    3a4e:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <__udivmodsi4>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	90 93 80 02 	sts	0x0280, r25
    3a5a:	80 93 7f 02 	sts	0x027F, r24
		TIMER1_IntEnable(Config_Ptr);
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
    3a60:	9a 81       	ldd	r25, Y+2	; 0x02
    3a62:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <TIMER1_IntEnable>
		TIMER1_Start(Config_Ptr);
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6a:	0e 94 9f 1c 	call	0x393e	; 0x393e <TIMER1_Start>
		break;
	}
}
    3a6e:	26 96       	adiw	r28, 0x06	; 6
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
    3a7a:	cf 91       	pop	r28
    3a7c:	df 91       	pop	r29
    3a7e:	08 95       	ret

00003a80 <TIMER1_IntEnable>:
void TIMER1_IntEnable(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3a80:	df 93       	push	r29
    3a82:	cf 93       	push	r28
    3a84:	00 d0       	rcall	.+0      	; 0x3a86 <TIMER1_IntEnable+0x6>
    3a86:	cd b7       	in	r28, 0x3d	; 61
    3a88:	de b7       	in	r29, 0x3e	; 62
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER1_NORMAL_MODE)
    3a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a90:	fa 81       	ldd	r31, Y+2	; 0x02
    3a92:	84 81       	ldd	r24, Z+4	; 0x04
    3a94:	88 23       	and	r24, r24
    3a96:	29 f4       	brne	.+10     	; 0x3aa2 <TIMER1_IntEnable+0x22>
	{
		TIMSK_REG->bits.TOIE1_BIT = LOGIC_HIGH;
    3a98:	e9 e5       	ldi	r30, 0x59	; 89
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	84 60       	ori	r24, 0x04	; 4
    3aa0:	80 83       	st	Z, r24
	else
	{
		//return error;
	}
	 */
}
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <TIMER1_IntDisable>:
void TIMER1_IntDisable(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	00 d0       	rcall	.+0      	; 0x3ab2 <TIMER1_IntDisable+0x6>
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	9a 83       	std	Y+2, r25	; 0x02
    3ab8:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER1_NORMAL_MODE)
    3aba:	e9 81       	ldd	r30, Y+1	; 0x01
    3abc:	fa 81       	ldd	r31, Y+2	; 0x02
    3abe:	84 81       	ldd	r24, Z+4	; 0x04
    3ac0:	88 23       	and	r24, r24
    3ac2:	29 f4       	brne	.+10     	; 0x3ace <TIMER1_IntDisable+0x22>
	{
		TIMSK_REG->bits.TOIE1_BIT = LOGIC_HIGH;
    3ac4:	e9 e5       	ldi	r30, 0x59	; 89
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	80 81       	ld	r24, Z
    3aca:	84 60       	ori	r24, 0x04	; 4
    3acc:	80 83       	st	Z, r24
	else
	{
		//return error;
	}
	 */
}
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	cf 91       	pop	r28
    3ad4:	df 91       	pop	r29
    3ad6:	08 95       	ret

00003ad8 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void(*ptrfn)(void))
{
    3ad8:	df 93       	push	r29
    3ada:	cf 93       	push	r28
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <TIMER1_SetCallBack+0x6>
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	9a 83       	std	Y+2, r25	; 0x02
    3ae4:	89 83       	std	Y+1, r24	; 0x01
	timer1PtrCallBack = ptrfn;
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aea:	90 93 82 02 	sts	0x0282, r25
    3aee:	80 93 81 02 	sts	0x0281, r24
}
    3af2:	0f 90       	pop	r0
    3af4:	0f 90       	pop	r0
    3af6:	cf 91       	pop	r28
    3af8:	df 91       	pop	r29
    3afa:	08 95       	ret

00003afc <TIMER1_SetFastPWM>:
void TIMER1_SetFastPWM(const TIMER1_INIT_CONFIG* Config_Ptr, u16 duty)
{
    3afc:	df 93       	push	r29
    3afe:	cf 93       	push	r28
    3b00:	00 d0       	rcall	.+0      	; 0x3b02 <TIMER1_SetFastPWM+0x6>
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <TIMER1_SetFastPWM+0x8>
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <TIMER1_SetFastPWM+0xa>
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	9c 83       	std	Y+4, r25	; 0x04
    3b0c:	8b 83       	std	Y+3, r24	; 0x03
    3b0e:	7e 83       	std	Y+6, r23	; 0x06
    3b10:	6d 83       	std	Y+5, r22	; 0x05
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	u16 dutyval = 0;
    3b12:	1a 82       	std	Y+2, r1	; 0x02
    3b14:	19 82       	std	Y+1, r1	; 0x01
	//	dutyval = (u16)((duty*TOP_VALUE)/100);
	dutyval = (u16)((duty*256)/100);
    3b16:	8d 81       	ldd	r24, Y+5	; 0x05
    3b18:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1a:	98 2f       	mov	r25, r24
    3b1c:	88 27       	eor	r24, r24
    3b1e:	24 e6       	ldi	r18, 0x64	; 100
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	b9 01       	movw	r22, r18
    3b24:	0e 94 d2 23 	call	0x47a4	; 0x47a4 <__udivmodhi4>
    3b28:	cb 01       	movw	r24, r22
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01

	OCR1A_REG = dutyval;
    3b2e:	ea e4       	ldi	r30, 0x4A	; 74
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	9a 81       	ldd	r25, Y+2	; 0x02
    3b36:	91 83       	std	Z+1, r25	; 0x01
    3b38:	80 83       	st	Z, r24

	OCR1B_REG = dutyval;
    3b3a:	e8 e4       	ldi	r30, 0x48	; 72
    3b3c:	f0 e0       	ldi	r31, 0x00	; 0
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	9a 81       	ldd	r25, Y+2	; 0x02
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24

}
    3b46:	26 96       	adiw	r28, 0x06	; 6
    3b48:	0f b6       	in	r0, 0x3f	; 63
    3b4a:	f8 94       	cli
    3b4c:	de bf       	out	0x3e, r29	; 62
    3b4e:	0f be       	out	0x3f, r0	; 63
    3b50:	cd bf       	out	0x3d, r28	; 61
    3b52:	cf 91       	pop	r28
    3b54:	df 91       	pop	r29
    3b56:	08 95       	ret

00003b58 <TIMER1_GetEventDuration>:
void TIMER1_SetPhaseCorrectPWM(const TIMER1_INIT_CONFIG* Config_Ptr, u16 duty);

void TIMER1_GetEventDuration(void)
{
    3b58:	df 93       	push	r29
    3b5a:	cf 93       	push	r28
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    3b60:	e6 e4       	ldi	r30, 0x46	; 70
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	11 82       	std	Z+1, r1	; 0x01
    3b66:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3b68:	e9 e5       	ldi	r30, 0x59	; 89
    3b6a:	f0 e0       	ldi	r31, 0x00	; 0
    3b6c:	80 81       	ld	r24, Z
    3b6e:	80 62       	ori	r24, 0x20	; 32
    3b70:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    3b72:	ee e4       	ldi	r30, 0x4E	; 78
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	8f 77       	andi	r24, 0x7F	; 127
    3b7a:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    3b7c:	ee e4       	ldi	r30, 0x4E	; 78
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	80 81       	ld	r24, Z
    3b82:	80 64       	ori	r24, 0x40	; 64
    3b84:	80 83       	st	Z, r24
}
    3b86:	cf 91       	pop	r28
    3b88:	df 91       	pop	r29
    3b8a:	08 95       	ret

00003b8c <TIMER1_GetSignalFrequency>:
void TIMER1_GetSignalFrequency(void)
{
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    3b94:	e6 e4       	ldi	r30, 0x46	; 70
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	11 82       	std	Z+1, r1	; 0x01
    3b9a:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3b9c:	e9 e5       	ldi	r30, 0x59	; 89
    3b9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ba0:	80 81       	ld	r24, Z
    3ba2:	80 62       	ori	r24, 0x20	; 32
    3ba4:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    3ba6:	ee e4       	ldi	r30, 0x4E	; 78
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	80 81       	ld	r24, Z
    3bac:	8f 77       	andi	r24, 0x7F	; 127
    3bae:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    3bb0:	ee e4       	ldi	r30, 0x4E	; 78
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	80 81       	ld	r24, Z
    3bb6:	80 64       	ori	r24, 0x40	; 64
    3bb8:	80 83       	st	Z, r24
}
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <TIMER1_GetSignalDutyCycle>:
void TIMER1_GetSignalDutyCycle(void)
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
	ICR1_REG = 0;
    3bc8:	e6 e4       	ldi	r30, 0x46	; 70
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	11 82       	std	Z+1, r1	; 0x01
    3bce:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3bd0:	e9 e5       	ldi	r30, 0x59	; 89
    3bd2:	f0 e0       	ldi	r31, 0x00	; 0
    3bd4:	80 81       	ld	r24, Z
    3bd6:	80 62       	ori	r24, 0x20	; 32
    3bd8:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    3bda:	ee e4       	ldi	r30, 0x4E	; 78
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	8f 77       	andi	r24, 0x7F	; 127
    3be2:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    3be4:	ee e4       	ldi	r30, 0x4E	; 78
    3be6:	f0 e0       	ldi	r31, 0x00	; 0
    3be8:	80 81       	ld	r24, Z
    3bea:	80 64       	ori	r24, 0x40	; 64
    3bec:	80 83       	st	Z, r24
}
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <TIMER1_GetInputCaptureValue>:

u16 TIMER1_GetInputCaptureValue(void)
{
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    3bfc:	e6 e4       	ldi	r30, 0x46	; 70
    3bfe:	f0 e0       	ldi	r31, 0x00	; 0
    3c00:	80 81       	ld	r24, Z
    3c02:	91 81       	ldd	r25, Z+1	; 0x01
}
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <TIMER1_SetInputCaptureEdgeDetection>:

void TIMER1_SetInputCaptureEdgeDetection(u8 trigger)
{
    3c0a:	df 93       	push	r29
    3c0c:	cf 93       	push	r28
    3c0e:	0f 92       	push	r0
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->bits.ICES1_BIT = trigger;
    3c16:	ee e4       	ldi	r30, 0x4E	; 78
    3c18:	f0 e0       	ldi	r31, 0x00	; 0
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
    3c1c:	81 70       	andi	r24, 0x01	; 1
    3c1e:	81 70       	andi	r24, 0x01	; 1
    3c20:	98 2f       	mov	r25, r24
    3c22:	92 95       	swap	r25
    3c24:	99 0f       	add	r25, r25
    3c26:	99 0f       	add	r25, r25
    3c28:	90 7c       	andi	r25, 0xC0	; 192
    3c2a:	80 81       	ld	r24, Z
    3c2c:	8f 7b       	andi	r24, 0xBF	; 191
    3c2e:	89 2b       	or	r24, r25
    3c30:	80 83       	st	Z, r24
}
    3c32:	0f 90       	pop	r0
    3c34:	cf 91       	pop	r28
    3c36:	df 91       	pop	r29
    3c38:	08 95       	ret

00003c3a <TIMER1_ClearTimerValue>:

void TIMER1_ClearTimerValue(void)
{
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = 0;
    3c42:	ec e4       	ldi	r30, 0x4C	; 76
    3c44:	f0 e0       	ldi	r31, 0x00	; 0
    3c46:	11 82       	std	Z+1, r1	; 0x01
    3c48:	10 82       	st	Z, r1
}
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <TIMER1_DisableICU>:

void TIMER1_DisableICU(void)
{
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG->bits.TICIE1_BIT = 0;
    3c58:	e9 e5       	ldi	r30, 0x59	; 89
    3c5a:	f0 e0       	ldi	r31, 0x00	; 0
    3c5c:	80 81       	ld	r24, Z
    3c5e:	8f 7d       	andi	r24, 0xDF	; 223
    3c60:	80 83       	st	Z, r24
}
    3c62:	cf 91       	pop	r28
    3c64:	df 91       	pop	r29
    3c66:	08 95       	ret

00003c68 <TIMER1_EnableICU>:

void TIMER1_EnableICU(void)
{
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG->bits.TICIE1_BIT = 1;
    3c70:	e9 e5       	ldi	r30, 0x59	; 89
    3c72:	f0 e0       	ldi	r31, 0x00	; 0
    3c74:	80 81       	ld	r24, Z
    3c76:	80 62       	ori	r24, 0x20	; 32
    3c78:	80 83       	st	Z, r24
}
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    3c80:	1f 92       	push	r1
    3c82:	0f 92       	push	r0
    3c84:	0f b6       	in	r0, 0x3f	; 63
    3c86:	0f 92       	push	r0
    3c88:	11 24       	eor	r1, r1
    3c8a:	2f 93       	push	r18
    3c8c:	3f 93       	push	r19
    3c8e:	4f 93       	push	r20
    3c90:	5f 93       	push	r21
    3c92:	6f 93       	push	r22
    3c94:	7f 93       	push	r23
    3c96:	8f 93       	push	r24
    3c98:	9f 93       	push	r25
    3c9a:	af 93       	push	r26
    3c9c:	bf 93       	push	r27
    3c9e:	ef 93       	push	r30
    3ca0:	ff 93       	push	r31
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
	/* For the delay func */

	timer1OverFlowCounter--;
    3caa:	80 91 7b 02 	lds	r24, 0x027B
    3cae:	90 91 7c 02 	lds	r25, 0x027C
    3cb2:	a0 91 7d 02 	lds	r26, 0x027D
    3cb6:	b0 91 7e 02 	lds	r27, 0x027E
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	a1 09       	sbc	r26, r1
    3cbe:	b1 09       	sbc	r27, r1
    3cc0:	80 93 7b 02 	sts	0x027B, r24
    3cc4:	90 93 7c 02 	sts	0x027C, r25
    3cc8:	a0 93 7d 02 	sts	0x027D, r26
    3ccc:	b0 93 7e 02 	sts	0x027E, r27

	if(timer1OverFlowCounter == 0)
    3cd0:	80 91 7b 02 	lds	r24, 0x027B
    3cd4:	90 91 7c 02 	lds	r25, 0x027C
    3cd8:	a0 91 7d 02 	lds	r26, 0x027D
    3cdc:	b0 91 7e 02 	lds	r27, 0x027E
    3ce0:	00 97       	sbiw	r24, 0x00	; 0
    3ce2:	a1 05       	cpc	r26, r1
    3ce4:	b1 05       	cpc	r27, r1
    3ce6:	51 f4       	brne	.+20     	; 0x3cfc <__vector_9+0x7c>
	{
		TCNT1_REG = (TOP_VALUE - timer1RemCounter);
    3ce8:	ec e4       	ldi	r30, 0x4C	; 76
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 91 7f 02 	lds	r24, 0x027F
    3cf0:	90 91 80 02 	lds	r25, 0x0280
    3cf4:	80 95       	com	r24
    3cf6:	90 95       	com	r25
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
	}

	if((timer1PtrCallBack != NULL_PTR) && (timer1OverFlowCounter == -1))
    3cfc:	80 91 81 02 	lds	r24, 0x0281
    3d00:	90 91 82 02 	lds	r25, 0x0282
    3d04:	00 97       	sbiw	r24, 0x00	; 0
    3d06:	a9 f0       	breq	.+42     	; 0x3d32 <__vector_9+0xb2>
    3d08:	80 91 7b 02 	lds	r24, 0x027B
    3d0c:	90 91 7c 02 	lds	r25, 0x027C
    3d10:	a0 91 7d 02 	lds	r26, 0x027D
    3d14:	b0 91 7e 02 	lds	r27, 0x027E
    3d18:	8f 3f       	cpi	r24, 0xFF	; 255
    3d1a:	2f ef       	ldi	r18, 0xFF	; 255
    3d1c:	92 07       	cpc	r25, r18
    3d1e:	2f ef       	ldi	r18, 0xFF	; 255
    3d20:	a2 07       	cpc	r26, r18
    3d22:	2f ef       	ldi	r18, 0xFF	; 255
    3d24:	b2 07       	cpc	r27, r18
    3d26:	29 f4       	brne	.+10     	; 0x3d32 <__vector_9+0xb2>
	{
		(*timer1PtrCallBack)();
    3d28:	e0 91 81 02 	lds	r30, 0x0281
    3d2c:	f0 91 82 02 	lds	r31, 0x0282
    3d30:	09 95       	icall
	}
}
    3d32:	cf 91       	pop	r28
    3d34:	df 91       	pop	r29
    3d36:	ff 91       	pop	r31
    3d38:	ef 91       	pop	r30
    3d3a:	bf 91       	pop	r27
    3d3c:	af 91       	pop	r26
    3d3e:	9f 91       	pop	r25
    3d40:	8f 91       	pop	r24
    3d42:	7f 91       	pop	r23
    3d44:	6f 91       	pop	r22
    3d46:	5f 91       	pop	r21
    3d48:	4f 91       	pop	r20
    3d4a:	3f 91       	pop	r19
    3d4c:	2f 91       	pop	r18
    3d4e:	0f 90       	pop	r0
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	0f 90       	pop	r0
    3d54:	1f 90       	pop	r1
    3d56:	18 95       	reti

00003d58 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    3d58:	1f 92       	push	r1
    3d5a:	0f 92       	push	r0
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	0f 92       	push	r0
    3d60:	11 24       	eor	r1, r1
    3d62:	2f 93       	push	r18
    3d64:	3f 93       	push	r19
    3d66:	4f 93       	push	r20
    3d68:	5f 93       	push	r21
    3d6a:	6f 93       	push	r22
    3d6c:	7f 93       	push	r23
    3d6e:	8f 93       	push	r24
    3d70:	9f 93       	push	r25
    3d72:	af 93       	push	r26
    3d74:	bf 93       	push	r27
    3d76:	ef 93       	push	r30
    3d78:	ff 93       	push	r31
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL_PTR)
    3d82:	80 91 81 02 	lds	r24, 0x0281
    3d86:	90 91 82 02 	lds	r25, 0x0282
    3d8a:	00 97       	sbiw	r24, 0x00	; 0
    3d8c:	29 f0       	breq	.+10     	; 0x3d98 <__vector_6+0x40>
	{
		(*timer1PtrCallBack)();
    3d8e:	e0 91 81 02 	lds	r30, 0x0281
    3d92:	f0 91 82 02 	lds	r31, 0x0282
    3d96:	09 95       	icall
	}
}
    3d98:	cf 91       	pop	r28
    3d9a:	df 91       	pop	r29
    3d9c:	ff 91       	pop	r31
    3d9e:	ef 91       	pop	r30
    3da0:	bf 91       	pop	r27
    3da2:	af 91       	pop	r26
    3da4:	9f 91       	pop	r25
    3da6:	8f 91       	pop	r24
    3da8:	7f 91       	pop	r23
    3daa:	6f 91       	pop	r22
    3dac:	5f 91       	pop	r21
    3dae:	4f 91       	pop	r20
    3db0:	3f 91       	pop	r19
    3db2:	2f 91       	pop	r18
    3db4:	0f 90       	pop	r0
    3db6:	0f be       	out	0x3f, r0	; 63
    3db8:	0f 90       	pop	r0
    3dba:	1f 90       	pop	r1
    3dbc:	18 95       	reti

00003dbe <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3dbe:	1f 92       	push	r1
    3dc0:	0f 92       	push	r0
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	0f 92       	push	r0
    3dc6:	11 24       	eor	r1, r1
    3dc8:	2f 93       	push	r18
    3dca:	3f 93       	push	r19
    3dcc:	4f 93       	push	r20
    3dce:	5f 93       	push	r21
    3dd0:	6f 93       	push	r22
    3dd2:	7f 93       	push	r23
    3dd4:	8f 93       	push	r24
    3dd6:	9f 93       	push	r25
    3dd8:	af 93       	push	r26
    3dda:	bf 93       	push	r27
    3ddc:	ef 93       	push	r30
    3dde:	ff 93       	push	r31
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL_PTR)
    3de8:	80 91 81 02 	lds	r24, 0x0281
    3dec:	90 91 82 02 	lds	r25, 0x0282
    3df0:	00 97       	sbiw	r24, 0x00	; 0
    3df2:	29 f0       	breq	.+10     	; 0x3dfe <__vector_7+0x40>
	{
		(*timer1PtrCallBack)();
    3df4:	e0 91 81 02 	lds	r30, 0x0281
    3df8:	f0 91 82 02 	lds	r31, 0x0282
    3dfc:	09 95       	icall
	}
}
    3dfe:	cf 91       	pop	r28
    3e00:	df 91       	pop	r29
    3e02:	ff 91       	pop	r31
    3e04:	ef 91       	pop	r30
    3e06:	bf 91       	pop	r27
    3e08:	af 91       	pop	r26
    3e0a:	9f 91       	pop	r25
    3e0c:	8f 91       	pop	r24
    3e0e:	7f 91       	pop	r23
    3e10:	6f 91       	pop	r22
    3e12:	5f 91       	pop	r21
    3e14:	4f 91       	pop	r20
    3e16:	3f 91       	pop	r19
    3e18:	2f 91       	pop	r18
    3e1a:	0f 90       	pop	r0
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	0f 90       	pop	r0
    3e20:	1f 90       	pop	r1
    3e22:	18 95       	reti

00003e24 <__vector_8>:


ISR(TIMER1_COMPB_vect)
{
    3e24:	1f 92       	push	r1
    3e26:	0f 92       	push	r0
    3e28:	0f b6       	in	r0, 0x3f	; 63
    3e2a:	0f 92       	push	r0
    3e2c:	11 24       	eor	r1, r1
    3e2e:	2f 93       	push	r18
    3e30:	3f 93       	push	r19
    3e32:	4f 93       	push	r20
    3e34:	5f 93       	push	r21
    3e36:	6f 93       	push	r22
    3e38:	7f 93       	push	r23
    3e3a:	8f 93       	push	r24
    3e3c:	9f 93       	push	r25
    3e3e:	af 93       	push	r26
    3e40:	bf 93       	push	r27
    3e42:	ef 93       	push	r30
    3e44:	ff 93       	push	r31
    3e46:	df 93       	push	r29
    3e48:	cf 93       	push	r28
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL_PTR)
    3e4e:	80 91 81 02 	lds	r24, 0x0281
    3e52:	90 91 82 02 	lds	r25, 0x0282
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	29 f0       	breq	.+10     	; 0x3e64 <__vector_8+0x40>
	{
		(*timer1PtrCallBack)();
    3e5a:	e0 91 81 02 	lds	r30, 0x0281
    3e5e:	f0 91 82 02 	lds	r31, 0x0282
    3e62:	09 95       	icall
	}
}
    3e64:	cf 91       	pop	r28
    3e66:	df 91       	pop	r29
    3e68:	ff 91       	pop	r31
    3e6a:	ef 91       	pop	r30
    3e6c:	bf 91       	pop	r27
    3e6e:	af 91       	pop	r26
    3e70:	9f 91       	pop	r25
    3e72:	8f 91       	pop	r24
    3e74:	7f 91       	pop	r23
    3e76:	6f 91       	pop	r22
    3e78:	5f 91       	pop	r21
    3e7a:	4f 91       	pop	r20
    3e7c:	3f 91       	pop	r19
    3e7e:	2f 91       	pop	r18
    3e80:	0f 90       	pop	r0
    3e82:	0f be       	out	0x3f, r0	; 63
    3e84:	0f 90       	pop	r0
    3e86:	1f 90       	pop	r1
    3e88:	18 95       	reti

00003e8a <Ultrasonic_init>:
• Inputs: None
• Return: None
 */

void Ultrasonic_init(void)
{
    3e8a:	df 93       	push	r29
    3e8c:	cf 93       	push	r28
    3e8e:	cd b7       	in	r28, 0x3d	; 61
    3e90:	de b7       	in	r29, 0x3e	; 62

	TIMER1_Init(&TIMER1_config);
    3e92:	84 e4       	ldi	r24, 0x44	; 68
    3e94:	92 e0       	ldi	r25, 0x02	; 2
    3e96:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <TIMER1_Init>
	TIMER1_GetEventDuration();
    3e9a:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <TIMER1_GetEventDuration>
	TIMER1_SetCallBack(Ultrasonic_edgeProcessing);
    3e9e:	8c e8       	ldi	r24, 0x8C	; 140
    3ea0:	90 e2       	ldi	r25, 0x20	; 32
    3ea2:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <TIMER1_SetCallBack>
	TIMER1_Start(&TIMER1_config);
    3ea6:	84 e4       	ldi	r24, 0x44	; 68
    3ea8:	92 e0       	ldi	r25, 0x02	; 2
    3eaa:	0e 94 9f 1c 	call	0x393e	; 0x393e <TIMER1_Start>

	DIO_voidSetPinDirection(pPORTD, pin6, input);
    3eae:	80 91 5d 02 	lds	r24, 0x025D
    3eb2:	90 91 5e 02 	lds	r25, 0x025E
    3eb6:	66 e0       	ldi	r22, 0x06	; 6
    3eb8:	40 e0       	ldi	r20, 0x00	; 0
    3eba:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ULTRASONIC_TRIGGER_PORTID, ULTRASONIC_TRIGGER_PIN, output);
    3ebe:	80 91 5d 02 	lds	r24, 0x025D
    3ec2:	90 91 5e 02 	lds	r25, 0x025E
    3ec6:	67 e0       	ldi	r22, 0x07	; 7
    3ec8:	41 e0       	ldi	r20, 0x01	; 1
    3eca:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORTID, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    3ece:	80 91 5d 02 	lds	r24, 0x025D
    3ed2:	90 91 5e 02 	lds	r25, 0x025E
    3ed6:	67 e0       	ldi	r22, 0x07	; 7
    3ed8:	40 e0       	ldi	r20, 0x00	; 0
    3eda:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
}
    3ede:	cf 91       	pop	r28
    3ee0:	df 91       	pop	r29
    3ee2:	08 95       	ret

00003ee4 <Ultrasonic_Trigger>:
• Inputs: None
• Return: None
*/

void Ultrasonic_Trigger(void)
{
    3ee4:	df 93       	push	r29
    3ee6:	cf 93       	push	r28
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
    3eec:	68 97       	sbiw	r28, 0x18	; 24
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
    3ef2:	de bf       	out	0x3e, r29	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORTID, ULTRASONIC_TRIGGER_PIN, LOGIC_HIGH);
    3ef8:	80 91 5d 02 	lds	r24, 0x025D
    3efc:	90 91 5e 02 	lds	r25, 0x025E
    3f00:	67 e0       	ldi	r22, 0x07	; 7
    3f02:	41 e0       	ldi	r20, 0x01	; 1
    3f04:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    3f08:	80 e0       	ldi	r24, 0x00	; 0
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	a0 e2       	ldi	r26, 0x20	; 32
    3f0e:	b1 e4       	ldi	r27, 0x41	; 65
    3f10:	8d 8b       	std	Y+21, r24	; 0x15
    3f12:	9e 8b       	std	Y+22, r25	; 0x16
    3f14:	af 8b       	std	Y+23, r26	; 0x17
    3f16:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3f18:	6d 89       	ldd	r22, Y+21	; 0x15
    3f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f20:	2b ea       	ldi	r18, 0xAB	; 171
    3f22:	3a ea       	ldi	r19, 0xAA	; 170
    3f24:	4a e2       	ldi	r20, 0x2A	; 42
    3f26:	50 e4       	ldi	r21, 0x40	; 64
    3f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	89 8b       	std	Y+17, r24	; 0x11
    3f32:	9a 8b       	std	Y+18, r25	; 0x12
    3f34:	ab 8b       	std	Y+19, r26	; 0x13
    3f36:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3f38:	69 89       	ldd	r22, Y+17	; 0x11
    3f3a:	7a 89       	ldd	r23, Y+18	; 0x12
    3f3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3f3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3f40:	20 e0       	ldi	r18, 0x00	; 0
    3f42:	30 e0       	ldi	r19, 0x00	; 0
    3f44:	40 e8       	ldi	r20, 0x80	; 128
    3f46:	5f e3       	ldi	r21, 0x3F	; 63
    3f48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f4c:	88 23       	and	r24, r24
    3f4e:	1c f4       	brge	.+6      	; 0x3f56 <Ultrasonic_Trigger+0x72>
		__ticks = 1;
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	88 8b       	std	Y+16, r24	; 0x10
    3f54:	91 c0       	rjmp	.+290    	; 0x4078 <Ultrasonic_Trigger+0x194>
	else if (__tmp > 255)
    3f56:	69 89       	ldd	r22, Y+17	; 0x11
    3f58:	7a 89       	ldd	r23, Y+18	; 0x12
    3f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	4f e7       	ldi	r20, 0x7F	; 127
    3f64:	53 e4       	ldi	r21, 0x43	; 67
    3f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f6a:	18 16       	cp	r1, r24
    3f6c:	0c f0       	brlt	.+2      	; 0x3f70 <Ultrasonic_Trigger+0x8c>
    3f6e:	7b c0       	rjmp	.+246    	; 0x4066 <Ultrasonic_Trigger+0x182>
	{
		_delay_ms(__us / 1000.0);
    3f70:	6d 89       	ldd	r22, Y+21	; 0x15
    3f72:	7e 89       	ldd	r23, Y+22	; 0x16
    3f74:	8f 89       	ldd	r24, Y+23	; 0x17
    3f76:	98 8d       	ldd	r25, Y+24	; 0x18
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	4a e7       	ldi	r20, 0x7A	; 122
    3f7e:	54 e4       	ldi	r21, 0x44	; 68
    3f80:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3f84:	dc 01       	movw	r26, r24
    3f86:	cb 01       	movw	r24, r22
    3f88:	8c 87       	std	Y+12, r24	; 0x0c
    3f8a:	9d 87       	std	Y+13, r25	; 0x0d
    3f8c:	ae 87       	std	Y+14, r26	; 0x0e
    3f8e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f90:	6c 85       	ldd	r22, Y+12	; 0x0c
    3f92:	7d 85       	ldd	r23, Y+13	; 0x0d
    3f94:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f96:	9f 85       	ldd	r25, Y+15	; 0x0f
    3f98:	20 e0       	ldi	r18, 0x00	; 0
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	4a ef       	ldi	r20, 0xFA	; 250
    3f9e:	54 e4       	ldi	r21, 0x44	; 68
    3fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa4:	dc 01       	movw	r26, r24
    3fa6:	cb 01       	movw	r24, r22
    3fa8:	88 87       	std	Y+8, r24	; 0x08
    3faa:	99 87       	std	Y+9, r25	; 0x09
    3fac:	aa 87       	std	Y+10, r26	; 0x0a
    3fae:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3fb0:	68 85       	ldd	r22, Y+8	; 0x08
    3fb2:	79 85       	ldd	r23, Y+9	; 0x09
    3fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	30 e0       	ldi	r19, 0x00	; 0
    3fbc:	40 e8       	ldi	r20, 0x80	; 128
    3fbe:	5f e3       	ldi	r21, 0x3F	; 63
    3fc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fc4:	88 23       	and	r24, r24
    3fc6:	2c f4       	brge	.+10     	; 0x3fd2 <Ultrasonic_Trigger+0xee>
		__ticks = 1;
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	9f 83       	std	Y+7, r25	; 0x07
    3fce:	8e 83       	std	Y+6, r24	; 0x06
    3fd0:	3f c0       	rjmp	.+126    	; 0x4050 <Ultrasonic_Trigger+0x16c>
	else if (__tmp > 65535)
    3fd2:	68 85       	ldd	r22, Y+8	; 0x08
    3fd4:	79 85       	ldd	r23, Y+9	; 0x09
    3fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	3f ef       	ldi	r19, 0xFF	; 255
    3fde:	4f e7       	ldi	r20, 0x7F	; 127
    3fe0:	57 e4       	ldi	r21, 0x47	; 71
    3fe2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fe6:	18 16       	cp	r1, r24
    3fe8:	4c f5       	brge	.+82     	; 0x403c <Ultrasonic_Trigger+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fea:	6c 85       	ldd	r22, Y+12	; 0x0c
    3fec:	7d 85       	ldd	r23, Y+13	; 0x0d
    3fee:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ff0:	9f 85       	ldd	r25, Y+15	; 0x0f
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e2       	ldi	r20, 0x20	; 32
    3ff8:	51 e4       	ldi	r21, 0x41	; 65
    3ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	bc 01       	movw	r22, r24
    4004:	cd 01       	movw	r24, r26
    4006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    400a:	dc 01       	movw	r26, r24
    400c:	cb 01       	movw	r24, r22
    400e:	9f 83       	std	Y+7, r25	; 0x07
    4010:	8e 83       	std	Y+6, r24	; 0x06
    4012:	0f c0       	rjmp	.+30     	; 0x4032 <Ultrasonic_Trigger+0x14e>
    4014:	88 ec       	ldi	r24, 0xC8	; 200
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	9d 83       	std	Y+5, r25	; 0x05
    401a:	8c 83       	std	Y+4, r24	; 0x04
    401c:	8c 81       	ldd	r24, Y+4	; 0x04
    401e:	9d 81       	ldd	r25, Y+5	; 0x05
    4020:	01 97       	sbiw	r24, 0x01	; 1
    4022:	f1 f7       	brne	.-4      	; 0x4020 <Ultrasonic_Trigger+0x13c>
    4024:	9d 83       	std	Y+5, r25	; 0x05
    4026:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4028:	8e 81       	ldd	r24, Y+6	; 0x06
    402a:	9f 81       	ldd	r25, Y+7	; 0x07
    402c:	01 97       	sbiw	r24, 0x01	; 1
    402e:	9f 83       	std	Y+7, r25	; 0x07
    4030:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4032:	8e 81       	ldd	r24, Y+6	; 0x06
    4034:	9f 81       	ldd	r25, Y+7	; 0x07
    4036:	00 97       	sbiw	r24, 0x00	; 0
    4038:	69 f7       	brne	.-38     	; 0x4014 <Ultrasonic_Trigger+0x130>
    403a:	24 c0       	rjmp	.+72     	; 0x4084 <Ultrasonic_Trigger+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    403c:	68 85       	ldd	r22, Y+8	; 0x08
    403e:	79 85       	ldd	r23, Y+9	; 0x09
    4040:	8a 85       	ldd	r24, Y+10	; 0x0a
    4042:	9b 85       	ldd	r25, Y+11	; 0x0b
    4044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	9f 83       	std	Y+7, r25	; 0x07
    404e:	8e 83       	std	Y+6, r24	; 0x06
    4050:	8e 81       	ldd	r24, Y+6	; 0x06
    4052:	9f 81       	ldd	r25, Y+7	; 0x07
    4054:	9b 83       	std	Y+3, r25	; 0x03
    4056:	8a 83       	std	Y+2, r24	; 0x02
    4058:	8a 81       	ldd	r24, Y+2	; 0x02
    405a:	9b 81       	ldd	r25, Y+3	; 0x03
    405c:	01 97       	sbiw	r24, 0x01	; 1
    405e:	f1 f7       	brne	.-4      	; 0x405c <Ultrasonic_Trigger+0x178>
    4060:	9b 83       	std	Y+3, r25	; 0x03
    4062:	8a 83       	std	Y+2, r24	; 0x02
    4064:	0f c0       	rjmp	.+30     	; 0x4084 <Ultrasonic_Trigger+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    4066:	69 89       	ldd	r22, Y+17	; 0x11
    4068:	7a 89       	ldd	r23, Y+18	; 0x12
    406a:	8b 89       	ldd	r24, Y+19	; 0x13
    406c:	9c 89       	ldd	r25, Y+20	; 0x14
    406e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	88 8b       	std	Y+16, r24	; 0x10
    4078:	88 89       	ldd	r24, Y+16	; 0x10
    407a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	8a 95       	dec	r24
    4080:	f1 f7       	brne	.-4      	; 0x407e <Ultrasonic_Trigger+0x19a>
    4082:	89 83       	std	Y+1, r24	; 0x01
//	TIMER1_SetDelayTimeMilliSec(&TIMER1_config,1);
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_TRIGGER_PORTID, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    4084:	80 91 5d 02 	lds	r24, 0x025D
    4088:	90 91 5e 02 	lds	r25, 0x025E
    408c:	67 e0       	ldi	r22, 0x07	; 7
    408e:	40 e0       	ldi	r20, 0x00	; 0
    4090:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
}
    4094:	68 96       	adiw	r28, 0x18	; 24
    4096:	0f b6       	in	r0, 0x3f	; 63
    4098:	f8 94       	cli
    409a:	de bf       	out	0x3e, r29	; 62
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	cd bf       	out	0x3d, r28	; 61
    40a0:	cf 91       	pop	r28
    40a2:	df 91       	pop	r29
    40a4:	08 95       	ret

000040a6 <Ultrasonic_readDistance>:
• Inputs: None
• Return: The measured distance in Centimeter.
*/

u16  Ultrasonic_readDistance(void)
{
    40a6:	df 93       	push	r29
    40a8:	cf 93       	push	r28
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
	static u16 distance = 0;

	if(g_count == 0)
    40ae:	80 91 83 02 	lds	r24, 0x0283
    40b2:	88 23       	and	r24, r24
    40b4:	19 f4       	brne	.+6      	; 0x40bc <Ultrasonic_readDistance+0x16>
	{
		Ultrasonic_Trigger();	/* sending the triggering signal to the sensor */
    40b6:	0e 94 72 1f 	call	0x3ee4	; 0x3ee4 <Ultrasonic_Trigger>
    40ba:	27 c0       	rjmp	.+78     	; 0x410a <Ultrasonic_readDistance+0x64>
	}
	else if(g_count == 2)
    40bc:	80 91 83 02 	lds	r24, 0x0283
    40c0:	82 30       	cpi	r24, 0x02	; 2
    40c2:	19 f5       	brne	.+70     	; 0x410a <Ultrasonic_readDistance+0x64>
	{
		distance = (g_time / 57.7);
    40c4:	80 91 84 02 	lds	r24, 0x0284
    40c8:	90 91 85 02 	lds	r25, 0x0285
    40cc:	cc 01       	movw	r24, r24
    40ce:	a0 e0       	ldi	r26, 0x00	; 0
    40d0:	b0 e0       	ldi	r27, 0x00	; 0
    40d2:	bc 01       	movw	r22, r24
    40d4:	cd 01       	movw	r24, r26
    40d6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    40da:	dc 01       	movw	r26, r24
    40dc:	cb 01       	movw	r24, r22
    40de:	bc 01       	movw	r22, r24
    40e0:	cd 01       	movw	r24, r26
    40e2:	2d ec       	ldi	r18, 0xCD	; 205
    40e4:	3c ec       	ldi	r19, 0xCC	; 204
    40e6:	46 e6       	ldi	r20, 0x66	; 102
    40e8:	52 e4       	ldi	r21, 0x42	; 66
    40ea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	bc 01       	movw	r22, r24
    40f4:	cd 01       	movw	r24, r26
    40f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	90 93 87 02 	sts	0x0287, r25
    4102:	80 93 86 02 	sts	0x0286, r24
		g_count = 0;
    4106:	10 92 83 02 	sts	0x0283, r1
	}
	return distance;
    410a:	80 91 86 02 	lds	r24, 0x0286
    410e:	90 91 87 02 	lds	r25, 0x0287

}
    4112:	cf 91       	pop	r28
    4114:	df 91       	pop	r29
    4116:	08 95       	ret

00004118 <Ultrasonic_edgeProcessing>:
• Inputs: None
• Return: None
*/

void Ultrasonic_edgeProcessing(void)
{
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
	if(g_count == 0)
    4120:	80 91 83 02 	lds	r24, 0x0283
    4124:	88 23       	and	r24, r24
    4126:	79 f4       	brne	.+30     	; 0x4146 <Ultrasonic_edgeProcessing+0x2e>
	{
		g_time = TIMER1_GetInputCaptureValue();
    4128:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <TIMER1_GetInputCaptureValue>
    412c:	90 93 85 02 	sts	0x0285, r25
    4130:	80 93 84 02 	sts	0x0284, r24
		g_count++;
    4134:	80 91 83 02 	lds	r24, 0x0283
    4138:	8f 5f       	subi	r24, 0xFF	; 255
    413a:	80 93 83 02 	sts	0x0283, r24
		TIMER1_SetInputCaptureEdgeDetection(FALLING_EDGE);
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <TIMER1_SetInputCaptureEdgeDetection>
    4144:	1d c0       	rjmp	.+58     	; 0x4180 <Ultrasonic_edgeProcessing+0x68>
	}
	else if(g_count == 1)
    4146:	80 91 83 02 	lds	r24, 0x0283
    414a:	81 30       	cpi	r24, 0x01	; 1
    414c:	c9 f4       	brne	.+50     	; 0x4180 <Ultrasonic_edgeProcessing+0x68>
	{
		g_time = TIMER1_GetInputCaptureValue() - g_time;
    414e:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <TIMER1_GetInputCaptureValue>
    4152:	9c 01       	movw	r18, r24
    4154:	80 91 84 02 	lds	r24, 0x0284
    4158:	90 91 85 02 	lds	r25, 0x0285
    415c:	a9 01       	movw	r20, r18
    415e:	48 1b       	sub	r20, r24
    4160:	59 0b       	sbc	r21, r25
    4162:	ca 01       	movw	r24, r20
    4164:	90 93 85 02 	sts	0x0285, r25
    4168:	80 93 84 02 	sts	0x0284, r24
		TIMER1_ClearTimerValue();
    416c:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <TIMER1_ClearTimerValue>
		g_count++;
    4170:	80 91 83 02 	lds	r24, 0x0283
    4174:	8f 5f       	subi	r24, 0xFF	; 255
    4176:	80 93 83 02 	sts	0x0283, r24
		TIMER1_SetInputCaptureEdgeDetection(RISING_EDGE);
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <TIMER1_SetInputCaptureEdgeDetection>
	}
}
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	08 95       	ret

00004186 <Ultrasonic_disable>:

void Ultrasonic_disable(void)
{
    4186:	df 93       	push	r29
    4188:	cf 93       	push	r28
    418a:	cd b7       	in	r28, 0x3d	; 61
    418c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_DisableICU();
    418e:	0e 94 28 1e 	call	0x3c50	; 0x3c50 <TIMER1_DisableICU>
}
    4192:	cf 91       	pop	r28
    4194:	df 91       	pop	r29
    4196:	08 95       	ret

00004198 <Ultrasonic_enable>:

void Ultrasonic_enable(void)
{
    4198:	df 93       	push	r29
    419a:	cf 93       	push	r28
    419c:	cd b7       	in	r28, 0x3d	; 61
    419e:	de b7       	in	r29, 0x3e	; 62
	TIMER1_EnableICU();
    41a0:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <TIMER1_EnableICU>
}
    41a4:	cf 91       	pop	r28
    41a6:	df 91       	pop	r29
    41a8:	08 95       	ret

000041aa <main>:
void APP_controlLEDs(void);
void APP_systemLogout(void);


int main()
{
    41aa:	df 93       	push	r29
    41ac:	cf 93       	push	r28
    41ae:	00 d0       	rcall	.+0      	; 0x41b0 <main+0x6>
    41b0:	cd b7       	in	r28, 0x3d	; 61
    41b2:	de b7       	in	r29, 0x3e	; 62

	/* Set relay pin as output */
	DIO_voidSetPinDirection(pPORTC, pin7, output);
    41b4:	80 91 5b 02 	lds	r24, 0x025B
    41b8:	90 91 5c 02 	lds	r25, 0x025C
    41bc:	67 e0       	ldi	r22, 0x07	; 7
    41be:	41 e0       	ldi	r20, 0x01	; 1
    41c0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(pPORTC, pin7, LOGIC_LOW);
    41c4:	80 91 5b 02 	lds	r24, 0x025B
    41c8:	90 91 5c 02 	lds	r25, 0x025C
    41cc:	67 e0       	ldi	r22, 0x07	; 7
    41ce:	40 e0       	ldi	r20, 0x00	; 0
    41d0:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>

	/* LEDs Initialization */
	DIO_voidSetPinDirection(pPORTA, pin4, output); /* Green LED */
    41d4:	80 91 57 02 	lds	r24, 0x0257
    41d8:	90 91 58 02 	lds	r25, 0x0258
    41dc:	64 e0       	ldi	r22, 0x04	; 4
    41de:	41 e0       	ldi	r20, 0x01	; 1
    41e0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, pin5, output); /* Blue LED */
    41e4:	80 91 57 02 	lds	r24, 0x0257
    41e8:	90 91 58 02 	lds	r25, 0x0258
    41ec:	65 e0       	ldi	r22, 0x05	; 5
    41ee:	41 e0       	ldi	r20, 0x01	; 1
    41f0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin7, output); /* RED LED */
    41f4:	80 91 59 02 	lds	r24, 0x0259
    41f8:	90 91 5a 02 	lds	r25, 0x025A
    41fc:	67 e0       	ldi	r22, 0x07	; 7
    41fe:	41 e0       	ldi	r20, 0x01	; 1
    4200:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>

	/* Default state of LEDs is OFF */
	DIO_voidSetPinValue(pPORTA, pin4, LOGIC_LOW);
    4204:	80 91 57 02 	lds	r24, 0x0257
    4208:	90 91 58 02 	lds	r25, 0x0258
    420c:	64 e0       	ldi	r22, 0x04	; 4
    420e:	40 e0       	ldi	r20, 0x00	; 0
    4210:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin5, LOGIC_LOW);
    4214:	80 91 57 02 	lds	r24, 0x0257
    4218:	90 91 58 02 	lds	r25, 0x0258
    421c:	65 e0       	ldi	r22, 0x05	; 5
    421e:	40 e0       	ldi	r20, 0x00	; 0
    4220:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, pin7, LOGIC_LOW);
    4224:	80 91 59 02 	lds	r24, 0x0259
    4228:	90 91 5a 02 	lds	r25, 0x025A
    422c:	67 e0       	ldi	r22, 0x07	; 7
    422e:	40 e0       	ldi	r20, 0x00	; 0
    4230:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>

	/* Component Initialization */
	H_LCD_void_Init();
    4234:	0e 94 2d 0b 	call	0x165a	; 0x165a <H_LCD_void_Init>
	Timer0_Init(&config);
    4238:	8d e4       	ldi	r24, 0x4D	; 77
    423a:	92 e0       	ldi	r25, 0x02	; 2
    423c:	0e 94 0a 14 	call	0x2814	; 0x2814 <Timer0_Init>
	Ultrasonic_init();
    4240:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <Ultrasonic_init>
	KEYPAD_Init();
    4244:	0e 94 58 09 	call	0x12b0	; 0x12b0 <KEYPAD_Init>
	GIE_Enable();
    4248:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_Enable>

	while(1)
	{
		/* Applying state machine mechanism */
		switch(runTask)
    424c:	80 91 88 02 	lds	r24, 0x0288
    4250:	28 2f       	mov	r18, r24
    4252:	30 e0       	ldi	r19, 0x00	; 0
    4254:	3a 83       	std	Y+2, r19	; 0x02
    4256:	29 83       	std	Y+1, r18	; 0x01
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	83 30       	cpi	r24, 0x03	; 3
    425e:	91 05       	cpc	r25, r1
    4260:	69 f1       	breq	.+90     	; 0x42bc <main+0x112>
    4262:	29 81       	ldd	r18, Y+1	; 0x01
    4264:	3a 81       	ldd	r19, Y+2	; 0x02
    4266:	24 30       	cpi	r18, 0x04	; 4
    4268:	31 05       	cpc	r19, r1
    426a:	7c f4       	brge	.+30     	; 0x428a <main+0xe0>
    426c:	89 81       	ldd	r24, Y+1	; 0x01
    426e:	9a 81       	ldd	r25, Y+2	; 0x02
    4270:	81 30       	cpi	r24, 0x01	; 1
    4272:	91 05       	cpc	r25, r1
    4274:	e9 f0       	breq	.+58     	; 0x42b0 <main+0x106>
    4276:	29 81       	ldd	r18, Y+1	; 0x01
    4278:	3a 81       	ldd	r19, Y+2	; 0x02
    427a:	22 30       	cpi	r18, 0x02	; 2
    427c:	31 05       	cpc	r19, r1
    427e:	dc f4       	brge	.+54     	; 0x42b6 <main+0x10c>
    4280:	89 81       	ldd	r24, Y+1	; 0x01
    4282:	9a 81       	ldd	r25, Y+2	; 0x02
    4284:	00 97       	sbiw	r24, 0x00	; 0
    4286:	89 f0       	breq	.+34     	; 0x42aa <main+0x100>
    4288:	e1 cf       	rjmp	.-62     	; 0x424c <main+0xa2>
    428a:	29 81       	ldd	r18, Y+1	; 0x01
    428c:	3a 81       	ldd	r19, Y+2	; 0x02
    428e:	25 30       	cpi	r18, 0x05	; 5
    4290:	31 05       	cpc	r19, r1
    4292:	d1 f0       	breq	.+52     	; 0x42c8 <main+0x11e>
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	9a 81       	ldd	r25, Y+2	; 0x02
    4298:	85 30       	cpi	r24, 0x05	; 5
    429a:	91 05       	cpc	r25, r1
    429c:	94 f0       	brlt	.+36     	; 0x42c2 <main+0x118>
    429e:	29 81       	ldd	r18, Y+1	; 0x01
    42a0:	3a 81       	ldd	r19, Y+2	; 0x02
    42a2:	26 30       	cpi	r18, 0x06	; 6
    42a4:	31 05       	cpc	r19, r1
    42a6:	99 f0       	breq	.+38     	; 0x42ce <main+0x124>
    42a8:	d1 cf       	rjmp	.-94     	; 0x424c <main+0xa2>
		{
		case MONITOR_DISTANCE:
			APP_monitorDistance();
    42aa:	0e 94 9b 21 	call	0x4336	; 0x4336 <APP_monitorDistance>
    42ae:	ce cf       	rjmp	.-100    	; 0x424c <main+0xa2>
			break;
		case GET_PASSWORD:
			APP_getPassword();
    42b0:	0e 94 01 22 	call	0x4402	; 0x4402 <APP_getPassword>
    42b4:	cb cf       	rjmp	.-106    	; 0x424c <main+0xa2>
			break;
		case CHECK_PASSWORD:
			APP_checkPassword();
    42b6:	0e 94 52 22 	call	0x44a4	; 0x44a4 <APP_checkPassword>
    42ba:	c8 cf       	rjmp	.-112    	; 0x424c <main+0xa2>
			break;
		case SYSTEM_BLOCKED:
			APP_systemBlocked();
    42bc:	0e 94 a7 22 	call	0x454e	; 0x454e <APP_systemBlocked>
    42c0:	c5 cf       	rjmp	.-118    	; 0x424c <main+0xa2>
			break;
		case LOGIN_SUCCESSFUL:
			APP_loginSuccessful();
    42c2:	0e 94 ca 22 	call	0x4594	; 0x4594 <APP_loginSuccessful>
    42c6:	c2 cf       	rjmp	.-124    	; 0x424c <main+0xa2>
			break;
		case LED_CONTROL:
			APP_controlLEDs();
    42c8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <APP_controlLEDs>
    42cc:	bf cf       	rjmp	.-130    	; 0x424c <main+0xa2>
			break;
		case SYSTEM_LOGOUT:
			APP_systemLogout();
    42ce:	0e 94 6d 23 	call	0x46da	; 0x46da <APP_systemLogout>
    42d2:	bc cf       	rjmp	.-136    	; 0x424c <main+0xa2>

000042d4 <APP_delayCallBack>:
		}
	}
}
/* Call Back Function for Timer0 */
void APP_delayCallBack(void)
{
    42d4:	df 93       	push	r29
    42d6:	cf 93       	push	r28
    42d8:	cd b7       	in	r28, 0x3d	; 61
    42da:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	80 93 89 02 	sts	0x0289, r24
}
    42e2:	cf 91       	pop	r28
    42e4:	df 91       	pop	r29
    42e6:	08 95       	ret

000042e8 <APP_delay>:
/* Generic function to set delay in ms */
void APP_delay(u32 millisec)
{
    42e8:	df 93       	push	r29
    42ea:	cf 93       	push	r28
    42ec:	00 d0       	rcall	.+0      	; 0x42ee <APP_delay+0x6>
    42ee:	00 d0       	rcall	.+0      	; 0x42f0 <APP_delay+0x8>
    42f0:	cd b7       	in	r28, 0x3d	; 61
    42f2:	de b7       	in	r29, 0x3e	; 62
    42f4:	69 83       	std	Y+1, r22	; 0x01
    42f6:	7a 83       	std	Y+2, r23	; 0x02
    42f8:	8b 83       	std	Y+3, r24	; 0x03
    42fa:	9c 83       	std	Y+4, r25	; 0x04
	Timer0_SetCallBack(APP_delayCallBack);
    42fc:	8a e6       	ldi	r24, 0x6A	; 106
    42fe:	91 e2       	ldi	r25, 0x21	; 33
    4300:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <Timer0_SetCallBack>
	TIMER0_clearTimerValue();
    4304:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <TIMER0_clearTimerValue>
	Timer0_SetDelayTimeMilliSec(&config, millisec);
    4308:	8d e4       	ldi	r24, 0x4D	; 77
    430a:	92 e0       	ldi	r25, 0x02	; 2
    430c:	29 81       	ldd	r18, Y+1	; 0x01
    430e:	3a 81       	ldd	r19, Y+2	; 0x02
    4310:	4b 81       	ldd	r20, Y+3	; 0x03
    4312:	5c 81       	ldd	r21, Y+4	; 0x04
    4314:	ba 01       	movw	r22, r20
    4316:	a9 01       	movw	r20, r18
    4318:	0e 94 33 15 	call	0x2a66	; 0x2a66 <Timer0_SetDelayTimeMilliSec>
	while(flag == 0);	/* wait till flag is set */
    431c:	80 91 89 02 	lds	r24, 0x0289
    4320:	88 23       	and	r24, r24
    4322:	e1 f3       	breq	.-8      	; 0x431c <APP_delay+0x34>
	flag = 0;			/* clear flag */
    4324:	10 92 89 02 	sts	0x0289, r1
}
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	0f 90       	pop	r0
    432e:	0f 90       	pop	r0
    4330:	cf 91       	pop	r28
    4332:	df 91       	pop	r29
    4334:	08 95       	ret

00004336 <APP_monitorDistance>:

void APP_monitorDistance(void)
{
    4336:	df 93       	push	r29
    4338:	cf 93       	push	r28
    433a:	00 d0       	rcall	.+0      	; 0x433c <APP_monitorDistance+0x6>
    433c:	cd b7       	in	r28, 0x3d	; 61
    433e:	de b7       	in	r29, 0x3e	; 62
	u16 distance = 0;
    4340:	1a 82       	std	Y+2, r1	; 0x02
    4342:	19 82       	std	Y+1, r1	; 0x01

	H_LCD_void_clearDisplay();
    4344:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Distance=     cm");
    4350:	86 e6       	ldi	r24, 0x66	; 102
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	do
	{
		distance = Ultrasonic_readDistance();
    4358:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Ultrasonic_readDistance>
    435c:	9a 83       	std	Y+2, r25	; 0x02
    435e:	89 83       	std	Y+1, r24	; 0x01
		/* Reading a 2nd time to ensure it's not just noise */
		APP_delay(1);
    4360:	61 e0       	ldi	r22, 0x01	; 1
    4362:	70 e0       	ldi	r23, 0x00	; 0
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
		distance = Ultrasonic_readDistance();
    436c:	0e 94 53 20 	call	0x40a6	; 0x40a6 <Ultrasonic_readDistance>
    4370:	9a 83       	std	Y+2, r25	; 0x02
    4372:	89 83       	std	Y+1, r24	; 0x01

		if(distance >= 100)
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	9a 81       	ldd	r25, Y+2	; 0x02
    4378:	84 36       	cpi	r24, 0x64	; 100
    437a:	91 05       	cpc	r25, r1
    437c:	70 f0       	brcs	.+28     	; 0x439a <APP_monitorDistance+0x64>
		{
			H_LCD_void_gotoXY(0, 10);
    437e:	80 e0       	ldi	r24, 0x00	; 0
    4380:	6a e0       	ldi	r22, 0x0A	; 10
    4382:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
			H_LCD_void_sendIntNum(distance);
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	9a 81       	ldd	r25, Y+2	; 0x02
    438a:	cc 01       	movw	r24, r24
    438c:	a0 e0       	ldi	r26, 0x00	; 0
    438e:	b0 e0       	ldi	r27, 0x00	; 0
    4390:	bc 01       	movw	r22, r24
    4392:	cd 01       	movw	r24, r26
    4394:	0e 94 81 13 	call	0x2702	; 0x2702 <H_LCD_void_sendIntNum>
    4398:	15 c0       	rjmp	.+42     	; 0x43c4 <APP_monitorDistance+0x8e>
		}
		else if(distance < 100)	/* If the distance falls back under 100 write over the 3rd digit with ' ' */
    439a:	89 81       	ldd	r24, Y+1	; 0x01
    439c:	9a 81       	ldd	r25, Y+2	; 0x02
    439e:	84 36       	cpi	r24, 0x64	; 100
    43a0:	91 05       	cpc	r25, r1
    43a2:	80 f4       	brcc	.+32     	; 0x43c4 <APP_monitorDistance+0x8e>
		{
			H_LCD_void_gotoXY(0, 10);
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	6a e0       	ldi	r22, 0x0A	; 10
    43a8:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
			H_LCD_void_sendIntNum(distance);
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	9a 81       	ldd	r25, Y+2	; 0x02
    43b0:	cc 01       	movw	r24, r24
    43b2:	a0 e0       	ldi	r26, 0x00	; 0
    43b4:	b0 e0       	ldi	r27, 0x00	; 0
    43b6:	bc 01       	movw	r22, r24
    43b8:	cd 01       	movw	r24, r26
    43ba:	0e 94 81 13 	call	0x2702	; 0x2702 <H_LCD_void_sendIntNum>
			H_LCD_void_sendData(' ');
    43be:	80 e2       	ldi	r24, 0x20	; 32
    43c0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
		}
	}while(distance > 15); /* when a user is detected deactivate ultrasonic sensor */
    43c4:	89 81       	ldd	r24, Y+1	; 0x01
    43c6:	9a 81       	ldd	r25, Y+2	; 0x02
    43c8:	80 31       	cpi	r24, 0x10	; 16
    43ca:	91 05       	cpc	r25, r1
    43cc:	28 f6       	brcc	.-118    	; 0x4358 <APP_monitorDistance+0x22>

	Ultrasonic_disable();
    43ce:	0e 94 c3 20 	call	0x4186	; 0x4186 <Ultrasonic_disable>
	H_LCD_void_clearDisplay();
    43d2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	60 e0       	ldi	r22, 0x00	; 0
    43da:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Hello ...");
    43de:	87 e7       	ldi	r24, 0x77	; 119
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	APP_delay(1000);
    43e6:	68 ee       	ldi	r22, 0xE8	; 232
    43e8:	73 e0       	ldi	r23, 0x03	; 3
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
	runTask = GET_PASSWORD;		/* state switching */
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	80 93 88 02 	sts	0x0288, r24
}
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	08 95       	ret

00004402 <APP_getPassword>:
void APP_getPassword(void)
{
    4402:	df 93       	push	r29
    4404:	cf 93       	push	r28
    4406:	00 d0       	rcall	.+0      	; 0x4408 <APP_getPassword+0x6>
    4408:	cd b7       	in	r28, 0x3d	; 61
    440a:	de b7       	in	r29, 0x3e	; 62
	u8 i, digit;

	H_LCD_void_clearDisplay();
    440c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	60 e0       	ldi	r22, 0x00	; 0
    4414:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Please Enter Pass:");
    4418:	81 e8       	ldi	r24, 0x81	; 129
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 0);
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	60 e0       	ldi	r22, 0x00	; 0
    4424:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	newPass = 0;			/* flushing out any old passwords from the buffer */
    4428:	10 92 8b 02 	sts	0x028B, r1
    442c:	10 92 8a 02 	sts	0x028A, r1
	for(i=0 ; i<4 ; i++)
    4430:	1a 82       	std	Y+2, r1	; 0x02
    4432:	27 c0       	rjmp	.+78     	; 0x4482 <APP_getPassword+0x80>
	{
		digit = KEYPAD_Get_Pressed_Key();
    4434:	0e 94 bf 09 	call	0x137e	; 0x137e <KEYPAD_Get_Pressed_Key>
    4438:	89 83       	std	Y+1, r24	; 0x01
		H_LCD_void_sendData(digit+'0');
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	80 5d       	subi	r24, 0xD0	; 208
    443e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <H_LCD_void_sendData>
		newPass = ((newPass*10) + digit);
    4442:	80 91 8a 02 	lds	r24, 0x028A
    4446:	90 91 8b 02 	lds	r25, 0x028B
    444a:	9c 01       	movw	r18, r24
    444c:	22 0f       	add	r18, r18
    444e:	33 1f       	adc	r19, r19
    4450:	c9 01       	movw	r24, r18
    4452:	88 0f       	add	r24, r24
    4454:	99 1f       	adc	r25, r25
    4456:	88 0f       	add	r24, r24
    4458:	99 1f       	adc	r25, r25
    445a:	28 0f       	add	r18, r24
    445c:	39 1f       	adc	r19, r25
    445e:	89 81       	ldd	r24, Y+1	; 0x01
    4460:	88 2f       	mov	r24, r24
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	82 0f       	add	r24, r18
    4466:	93 1f       	adc	r25, r19
    4468:	90 93 8b 02 	sts	0x028B, r25
    446c:	80 93 8a 02 	sts	0x028A, r24
		APP_delay(250);
    4470:	6a ef       	ldi	r22, 0xFA	; 250
    4472:	70 e0       	ldi	r23, 0x00	; 0
    4474:	80 e0       	ldi	r24, 0x00	; 0
    4476:	90 e0       	ldi	r25, 0x00	; 0
    4478:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
	H_LCD_void_clearDisplay();
	H_LCD_void_gotoXY(0, 0);
	H_LCD_void_sendString("Please Enter Pass:");
	H_LCD_void_gotoXY(1, 0);
	newPass = 0;			/* flushing out any old passwords from the buffer */
	for(i=0 ; i<4 ; i++)
    447c:	8a 81       	ldd	r24, Y+2	; 0x02
    447e:	8f 5f       	subi	r24, 0xFF	; 255
    4480:	8a 83       	std	Y+2, r24	; 0x02
    4482:	8a 81       	ldd	r24, Y+2	; 0x02
    4484:	84 30       	cpi	r24, 0x04	; 4
    4486:	b0 f2       	brcs	.-84     	; 0x4434 <APP_getPassword+0x32>
		digit = KEYPAD_Get_Pressed_Key();
		H_LCD_void_sendData(digit+'0');
		newPass = ((newPass*10) + digit);
		APP_delay(250);
	}
	APP_delay(500);
    4488:	64 ef       	ldi	r22, 0xF4	; 244
    448a:	71 e0       	ldi	r23, 0x01	; 1
    448c:	80 e0       	ldi	r24, 0x00	; 0
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
	runTask = CHECK_PASSWORD;	/* state switching */
    4494:	82 e0       	ldi	r24, 0x02	; 2
    4496:	80 93 88 02 	sts	0x0288, r24
}
    449a:	0f 90       	pop	r0
    449c:	0f 90       	pop	r0
    449e:	cf 91       	pop	r28
    44a0:	df 91       	pop	r29
    44a2:	08 95       	ret

000044a4 <APP_checkPassword>:
void APP_checkPassword(void)
{
    44a4:	df 93       	push	r29
    44a6:	cf 93       	push	r28
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
	static u8 trials = 3;

	if(newPass != pass)
    44ac:	20 91 8a 02 	lds	r18, 0x028A
    44b0:	30 91 8b 02 	lds	r19, 0x028B
    44b4:	80 91 54 02 	lds	r24, 0x0254
    44b8:	90 91 55 02 	lds	r25, 0x0255
    44bc:	28 17       	cp	r18, r24
    44be:	39 07       	cpc	r19, r25
    44c0:	91 f1       	breq	.+100    	; 0x4526 <APP_checkPassword+0x82>
	{
		H_LCD_void_clearDisplay();
    44c2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    44c6:	80 e0       	ldi	r24, 0x00	; 0
    44c8:	60 e0       	ldi	r22, 0x00	; 0
    44ca:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
		//	H_LCD_void_sendString("Wrong Password");
		H_LCD_void_sendString("Incorrect Pass");
    44ce:	84 e9       	ldi	r24, 0x94	; 148
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
		APP_delay(500);
    44d6:	64 ef       	ldi	r22, 0xF4	; 244
    44d8:	71 e0       	ldi	r23, 0x01	; 1
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
		trials--;
    44e2:	80 91 56 02 	lds	r24, 0x0256
    44e6:	81 50       	subi	r24, 0x01	; 1
    44e8:	80 93 56 02 	sts	0x0256, r24

		if(trials == 0)
    44ec:	80 91 56 02 	lds	r24, 0x0256
    44f0:	88 23       	and	r24, r24
    44f2:	39 f4       	brne	.+14     	; 0x4502 <APP_checkPassword+0x5e>
		{
			runTask = SYSTEM_BLOCKED;	/* state switching */
    44f4:	83 e0       	ldi	r24, 0x03	; 3
    44f6:	80 93 88 02 	sts	0x0288, r24
			trials = 3;
    44fa:	83 e0       	ldi	r24, 0x03	; 3
    44fc:	80 93 56 02 	sts	0x0256, r24
    4500:	23 c0       	rjmp	.+70     	; 0x4548 <APP_checkPassword+0xa4>
		}
		else
		{
			H_LCD_void_gotoXY(1, 0);
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	60 e0       	ldi	r22, 0x00	; 0
    4506:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("Plz try again: ");
    450a:	83 ea       	ldi	r24, 0xA3	; 163
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
			APP_delay(500);
    4512:	64 ef       	ldi	r22, 0xF4	; 244
    4514:	71 e0       	ldi	r23, 0x01	; 1
    4516:	80 e0       	ldi	r24, 0x00	; 0
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
			runTask = GET_PASSWORD;		/* state switching */
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	80 93 88 02 	sts	0x0288, r24
    4524:	11 c0       	rjmp	.+34     	; 0x4548 <APP_checkPassword+0xa4>
		}
	}
	else if(newPass == pass)
    4526:	20 91 8a 02 	lds	r18, 0x028A
    452a:	30 91 8b 02 	lds	r19, 0x028B
    452e:	80 91 54 02 	lds	r24, 0x0254
    4532:	90 91 55 02 	lds	r25, 0x0255
    4536:	28 17       	cp	r18, r24
    4538:	39 07       	cpc	r19, r25
    453a:	31 f4       	brne	.+12     	; 0x4548 <APP_checkPassword+0xa4>
	{
		runTask = LOGIN_SUCCESSFUL;		/* state switching */
    453c:	84 e0       	ldi	r24, 0x04	; 4
    453e:	80 93 88 02 	sts	0x0288, r24
		trials = 3;
    4542:	83 e0       	ldi	r24, 0x03	; 3
    4544:	80 93 56 02 	sts	0x0256, r24
	}
}
    4548:	cf 91       	pop	r28
    454a:	df 91       	pop	r29
    454c:	08 95       	ret

0000454e <APP_systemBlocked>:
void APP_systemBlocked(void)
{
    454e:	df 93       	push	r29
    4550:	cf 93       	push	r28
    4552:	cd b7       	in	r28, 0x3d	; 61
    4554:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_clearDisplay();
    4556:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    455a:	80 e0       	ldi	r24, 0x00	; 0
    455c:	60 e0       	ldi	r22, 0x00	; 0
    455e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("System Blocked");
    4562:	83 eb       	ldi	r24, 0xB3	; 179
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 0);
    456a:	81 e0       	ldi	r24, 0x01	; 1
    456c:	60 e0       	ldi	r22, 0x00	; 0
    456e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("For 2min");
    4572:	82 ec       	ldi	r24, 0xC2	; 194
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	APP_delay(5000);
    457a:	68 e8       	ldi	r22, 0x88	; 136
    457c:	73 e1       	ldi	r23, 0x13	; 19
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	90 e0       	ldi	r25, 0x00	; 0
    4582:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
	Ultrasonic_enable();
    4586:	0e 94 cc 20 	call	0x4198	; 0x4198 <Ultrasonic_enable>
	runTask = MONITOR_DISTANCE;			/* state switching */
    458a:	10 92 88 02 	sts	0x0288, r1
}
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	08 95       	ret

00004594 <APP_loginSuccessful>:
void APP_loginSuccessful(void)
{
    4594:	df 93       	push	r29
    4596:	cf 93       	push	r28
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_clearDisplay();
    459c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	60 e0       	ldi	r22, 0x00	; 0
    45a4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Welcome Ebram!");
    45a8:	8b ec       	ldi	r24, 0xCB	; 203
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	/* Open Relay */
	DIO_voidSetPinValue(pPORTC, pin7, LOGIC_HIGH);
    45b0:	80 91 5b 02 	lds	r24, 0x025B
    45b4:	90 91 5c 02 	lds	r25, 0x025C
    45b8:	67 e0       	ldi	r22, 0x07	; 7
    45ba:	41 e0       	ldi	r20, 0x01	; 1
    45bc:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	APP_delay(1000);
    45c0:	68 ee       	ldi	r22, 0xE8	; 232
    45c2:	73 e0       	ldi	r23, 0x03	; 3
    45c4:	80 e0       	ldi	r24, 0x00	; 0
    45c6:	90 e0       	ldi	r25, 0x00	; 0
    45c8:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
	runTask = LED_CONTROL;			/* state switching */
    45cc:	85 e0       	ldi	r24, 0x05	; 5
    45ce:	80 93 88 02 	sts	0x0288, r24
}
    45d2:	cf 91       	pop	r28
    45d4:	df 91       	pop	r29
    45d6:	08 95       	ret

000045d8 <APP_controlLEDs>:
void APP_controlLEDs(void)
{
    45d8:	df 93       	push	r29
    45da:	cf 93       	push	r28
    45dc:	0f 92       	push	r0
    45de:	cd b7       	in	r28, 0x3d	; 61
    45e0:	de b7       	in	r29, 0x3e	; 62
	u8 digit = 0;
    45e2:	19 82       	std	Y+1, r1	; 0x01

	H_LCD_void_clearDisplay();
    45e4:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    45e8:	80 e0       	ldi	r24, 0x00	; 0
    45ea:	60 e0       	ldi	r22, 0x00	; 0
    45ec:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("LEDs Status:");
    45f0:	8a ed       	ldi	r24, 0xDA	; 218
    45f2:	90 e0       	ldi	r25, 0x00	; 0
    45f4:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 0);
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	60 e0       	ldi	r22, 0x00	; 0
    45fc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("1- On");
    4600:	87 ee       	ldi	r24, 0xE7	; 231
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 8);
    4608:	81 e0       	ldi	r24, 0x01	; 1
    460a:	68 e0       	ldi	r22, 0x08	; 8
    460c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("2- Off");
    4610:	8d ee       	ldi	r24, 0xED	; 237
    4612:	90 e0       	ldi	r25, 0x00	; 0
    4614:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	do{
		digit = KEYPAD_Get_Pressed_Key();
    4618:	0e 94 bf 09 	call	0x137e	; 0x137e <KEYPAD_Get_Pressed_Key>
    461c:	89 83       	std	Y+1, r24	; 0x01
	}while((digit != 1)&&(digit != 2));
    461e:	89 81       	ldd	r24, Y+1	; 0x01
    4620:	81 30       	cpi	r24, 0x01	; 1
    4622:	19 f0       	breq	.+6      	; 0x462a <APP_controlLEDs+0x52>
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	82 30       	cpi	r24, 0x02	; 2
    4628:	b9 f7       	brne	.-18     	; 0x4618 <APP_controlLEDs+0x40>
	if(digit == 1)
    462a:	89 81       	ldd	r24, Y+1	; 0x01
    462c:	81 30       	cpi	r24, 0x01	; 1
    462e:	19 f5       	brne	.+70     	; 0x4676 <APP_controlLEDs+0x9e>
	{
		H_LCD_void_clearDisplay();
    4630:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    4634:	80 e0       	ldi	r24, 0x00	; 0
    4636:	60 e0       	ldi	r22, 0x00	; 0
    4638:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("LEDs are On");
    463c:	84 ef       	ldi	r24, 0xF4	; 244
    463e:	90 e0       	ldi	r25, 0x00	; 0
    4640:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
		DIO_voidSetPinValue(pPORTA, pin4, LOGIC_HIGH);
    4644:	80 91 57 02 	lds	r24, 0x0257
    4648:	90 91 58 02 	lds	r25, 0x0258
    464c:	64 e0       	ldi	r22, 0x04	; 4
    464e:	41 e0       	ldi	r20, 0x01	; 1
    4650:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(pPORTA, pin5, LOGIC_HIGH);
    4654:	80 91 57 02 	lds	r24, 0x0257
    4658:	90 91 58 02 	lds	r25, 0x0258
    465c:	65 e0       	ldi	r22, 0x05	; 5
    465e:	41 e0       	ldi	r20, 0x01	; 1
    4660:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(pPORTB, pin7, LOGIC_HIGH);
    4664:	80 91 59 02 	lds	r24, 0x0259
    4668:	90 91 5a 02 	lds	r25, 0x025A
    466c:	67 e0       	ldi	r22, 0x07	; 7
    466e:	41 e0       	ldi	r20, 0x01	; 1
    4670:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    4674:	25 c0       	rjmp	.+74     	; 0x46c0 <APP_controlLEDs+0xe8>

	}
	else if(digit == 2)
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	82 30       	cpi	r24, 0x02	; 2
    467a:	11 f5       	brne	.+68     	; 0x46c0 <APP_controlLEDs+0xe8>
	{
		H_LCD_void_clearDisplay();
    467c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    4680:	80 e0       	ldi	r24, 0x00	; 0
    4682:	60 e0       	ldi	r22, 0x00	; 0
    4684:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("LEDs are Off");
    4688:	80 e0       	ldi	r24, 0x00	; 0
    468a:	91 e0       	ldi	r25, 0x01	; 1
    468c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
		DIO_voidSetPinValue(pPORTA, pin4, LOGIC_LOW);
    4690:	80 91 57 02 	lds	r24, 0x0257
    4694:	90 91 58 02 	lds	r25, 0x0258
    4698:	64 e0       	ldi	r22, 0x04	; 4
    469a:	40 e0       	ldi	r20, 0x00	; 0
    469c:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(pPORTA, pin5, LOGIC_LOW);
    46a0:	80 91 57 02 	lds	r24, 0x0257
    46a4:	90 91 58 02 	lds	r25, 0x0258
    46a8:	65 e0       	ldi	r22, 0x05	; 5
    46aa:	40 e0       	ldi	r20, 0x00	; 0
    46ac:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
		DIO_voidSetPinValue(pPORTB, pin7, LOGIC_LOW);
    46b0:	80 91 59 02 	lds	r24, 0x0259
    46b4:	90 91 5a 02 	lds	r25, 0x025A
    46b8:	67 e0       	ldi	r22, 0x07	; 7
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	}
	APP_delay(1000);
    46c0:	68 ee       	ldi	r22, 0xE8	; 232
    46c2:	73 e0       	ldi	r23, 0x03	; 3
    46c4:	80 e0       	ldi	r24, 0x00	; 0
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>

	runTask = SYSTEM_LOGOUT;			/* state switching */
    46cc:	86 e0       	ldi	r24, 0x06	; 6
    46ce:	80 93 88 02 	sts	0x0288, r24
}
    46d2:	0f 90       	pop	r0
    46d4:	cf 91       	pop	r28
    46d6:	df 91       	pop	r29
    46d8:	08 95       	ret

000046da <APP_systemLogout>:

void APP_systemLogout(void)
{
    46da:	df 93       	push	r29
    46dc:	cf 93       	push	r28
    46de:	0f 92       	push	r0
    46e0:	cd b7       	in	r28, 0x3d	; 61
    46e2:	de b7       	in	r29, 0x3e	; 62
	u8 digit = 0;
    46e4:	19 82       	std	Y+1, r1	; 0x01

	H_LCD_void_clearDisplay();
    46e6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	60 e0       	ldi	r22, 0x00	; 0
    46ee:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("To Logout");
    46f2:	8d e0       	ldi	r24, 0x0D	; 13
    46f4:	91 e0       	ldi	r25, 0x01	; 1
    46f6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 6);
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	66 e0       	ldi	r22, 0x06	; 6
    46fe:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Press 1");
    4702:	87 e1       	ldi	r24, 0x17	; 23
    4704:	91 e0       	ldi	r25, 0x01	; 1
    4706:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	do{
		digit = KEYPAD_Get_Pressed_Key();
    470a:	0e 94 bf 09 	call	0x137e	; 0x137e <KEYPAD_Get_Pressed_Key>
    470e:	89 83       	std	Y+1, r24	; 0x01
	}
	while(digit != 1);
    4710:	89 81       	ldd	r24, Y+1	; 0x01
    4712:	81 30       	cpi	r24, 0x01	; 1
    4714:	d1 f7       	brne	.-12     	; 0x470a <APP_systemLogout+0x30>
	H_LCD_void_clearDisplay();
    4716:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <H_LCD_void_clearDisplay>
	H_LCD_void_gotoXY(0, 0);
    471a:	80 e0       	ldi	r24, 0x00	; 0
    471c:	60 e0       	ldi	r22, 0x00	; 0
    471e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("System Locked");
    4722:	8f e1       	ldi	r24, 0x1F	; 31
    4724:	91 e0       	ldi	r25, 0x01	; 1
    4726:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 0);
    472a:	81 e0       	ldi	r24, 0x01	; 1
    472c:	60 e0       	ldi	r22, 0x00	; 0
    472e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("GoodBye...");
    4732:	8d e2       	ldi	r24, 0x2D	; 45
    4734:	91 e0       	ldi	r25, 0x01	; 1
    4736:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <H_LCD_void_sendString>
	APP_delay(1000);
    473a:	68 ee       	ldi	r22, 0xE8	; 232
    473c:	73 e0       	ldi	r23, 0x03	; 3
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	0e 94 74 21 	call	0x42e8	; 0x42e8 <APP_delay>
	/* Close Relay */
	DIO_voidSetPinValue(pPORTC, pin7, LOGIC_LOW);
    4746:	80 91 5b 02 	lds	r24, 0x025B
    474a:	90 91 5c 02 	lds	r25, 0x025C
    474e:	67 e0       	ldi	r22, 0x07	; 7
    4750:	40 e0       	ldi	r20, 0x00	; 0
    4752:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>

	runTask = MONITOR_DISTANCE;		/* state switching */
    4756:	10 92 88 02 	sts	0x0288, r1
	Ultrasonic_enable();	/* Re-enable the ultrasonic before going back to the monitor distance state */
    475a:	0e 94 cc 20 	call	0x4198	; 0x4198 <Ultrasonic_enable>
}
    475e:	0f 90       	pop	r0
    4760:	cf 91       	pop	r28
    4762:	df 91       	pop	r29
    4764:	08 95       	ret

00004766 <__mulsi3>:
    4766:	62 9f       	mul	r22, r18
    4768:	d0 01       	movw	r26, r0
    476a:	73 9f       	mul	r23, r19
    476c:	f0 01       	movw	r30, r0
    476e:	82 9f       	mul	r24, r18
    4770:	e0 0d       	add	r30, r0
    4772:	f1 1d       	adc	r31, r1
    4774:	64 9f       	mul	r22, r20
    4776:	e0 0d       	add	r30, r0
    4778:	f1 1d       	adc	r31, r1
    477a:	92 9f       	mul	r25, r18
    477c:	f0 0d       	add	r31, r0
    477e:	83 9f       	mul	r24, r19
    4780:	f0 0d       	add	r31, r0
    4782:	74 9f       	mul	r23, r20
    4784:	f0 0d       	add	r31, r0
    4786:	65 9f       	mul	r22, r21
    4788:	f0 0d       	add	r31, r0
    478a:	99 27       	eor	r25, r25
    478c:	72 9f       	mul	r23, r18
    478e:	b0 0d       	add	r27, r0
    4790:	e1 1d       	adc	r30, r1
    4792:	f9 1f       	adc	r31, r25
    4794:	63 9f       	mul	r22, r19
    4796:	b0 0d       	add	r27, r0
    4798:	e1 1d       	adc	r30, r1
    479a:	f9 1f       	adc	r31, r25
    479c:	bd 01       	movw	r22, r26
    479e:	cf 01       	movw	r24, r30
    47a0:	11 24       	eor	r1, r1
    47a2:	08 95       	ret

000047a4 <__udivmodhi4>:
    47a4:	aa 1b       	sub	r26, r26
    47a6:	bb 1b       	sub	r27, r27
    47a8:	51 e1       	ldi	r21, 0x11	; 17
    47aa:	07 c0       	rjmp	.+14     	; 0x47ba <__udivmodhi4_ep>

000047ac <__udivmodhi4_loop>:
    47ac:	aa 1f       	adc	r26, r26
    47ae:	bb 1f       	adc	r27, r27
    47b0:	a6 17       	cp	r26, r22
    47b2:	b7 07       	cpc	r27, r23
    47b4:	10 f0       	brcs	.+4      	; 0x47ba <__udivmodhi4_ep>
    47b6:	a6 1b       	sub	r26, r22
    47b8:	b7 0b       	sbc	r27, r23

000047ba <__udivmodhi4_ep>:
    47ba:	88 1f       	adc	r24, r24
    47bc:	99 1f       	adc	r25, r25
    47be:	5a 95       	dec	r21
    47c0:	a9 f7       	brne	.-22     	; 0x47ac <__udivmodhi4_loop>
    47c2:	80 95       	com	r24
    47c4:	90 95       	com	r25
    47c6:	bc 01       	movw	r22, r24
    47c8:	cd 01       	movw	r24, r26
    47ca:	08 95       	ret

000047cc <__divmodhi4>:
    47cc:	97 fb       	bst	r25, 7
    47ce:	09 2e       	mov	r0, r25
    47d0:	07 26       	eor	r0, r23
    47d2:	0a d0       	rcall	.+20     	; 0x47e8 <__divmodhi4_neg1>
    47d4:	77 fd       	sbrc	r23, 7
    47d6:	04 d0       	rcall	.+8      	; 0x47e0 <__divmodhi4_neg2>
    47d8:	e5 df       	rcall	.-54     	; 0x47a4 <__udivmodhi4>
    47da:	06 d0       	rcall	.+12     	; 0x47e8 <__divmodhi4_neg1>
    47dc:	00 20       	and	r0, r0
    47de:	1a f4       	brpl	.+6      	; 0x47e6 <__divmodhi4_exit>

000047e0 <__divmodhi4_neg2>:
    47e0:	70 95       	com	r23
    47e2:	61 95       	neg	r22
    47e4:	7f 4f       	sbci	r23, 0xFF	; 255

000047e6 <__divmodhi4_exit>:
    47e6:	08 95       	ret

000047e8 <__divmodhi4_neg1>:
    47e8:	f6 f7       	brtc	.-4      	; 0x47e6 <__divmodhi4_exit>
    47ea:	90 95       	com	r25
    47ec:	81 95       	neg	r24
    47ee:	9f 4f       	sbci	r25, 0xFF	; 255
    47f0:	08 95       	ret

000047f2 <__udivmodsi4>:
    47f2:	a1 e2       	ldi	r26, 0x21	; 33
    47f4:	1a 2e       	mov	r1, r26
    47f6:	aa 1b       	sub	r26, r26
    47f8:	bb 1b       	sub	r27, r27
    47fa:	fd 01       	movw	r30, r26
    47fc:	0d c0       	rjmp	.+26     	; 0x4818 <__udivmodsi4_ep>

000047fe <__udivmodsi4_loop>:
    47fe:	aa 1f       	adc	r26, r26
    4800:	bb 1f       	adc	r27, r27
    4802:	ee 1f       	adc	r30, r30
    4804:	ff 1f       	adc	r31, r31
    4806:	a2 17       	cp	r26, r18
    4808:	b3 07       	cpc	r27, r19
    480a:	e4 07       	cpc	r30, r20
    480c:	f5 07       	cpc	r31, r21
    480e:	20 f0       	brcs	.+8      	; 0x4818 <__udivmodsi4_ep>
    4810:	a2 1b       	sub	r26, r18
    4812:	b3 0b       	sbc	r27, r19
    4814:	e4 0b       	sbc	r30, r20
    4816:	f5 0b       	sbc	r31, r21

00004818 <__udivmodsi4_ep>:
    4818:	66 1f       	adc	r22, r22
    481a:	77 1f       	adc	r23, r23
    481c:	88 1f       	adc	r24, r24
    481e:	99 1f       	adc	r25, r25
    4820:	1a 94       	dec	r1
    4822:	69 f7       	brne	.-38     	; 0x47fe <__udivmodsi4_loop>
    4824:	60 95       	com	r22
    4826:	70 95       	com	r23
    4828:	80 95       	com	r24
    482a:	90 95       	com	r25
    482c:	9b 01       	movw	r18, r22
    482e:	ac 01       	movw	r20, r24
    4830:	bd 01       	movw	r22, r26
    4832:	cf 01       	movw	r24, r30
    4834:	08 95       	ret

00004836 <__divmodsi4>:
    4836:	97 fb       	bst	r25, 7
    4838:	09 2e       	mov	r0, r25
    483a:	05 26       	eor	r0, r21
    483c:	0e d0       	rcall	.+28     	; 0x485a <__divmodsi4_neg1>
    483e:	57 fd       	sbrc	r21, 7
    4840:	04 d0       	rcall	.+8      	; 0x484a <__divmodsi4_neg2>
    4842:	d7 df       	rcall	.-82     	; 0x47f2 <__udivmodsi4>
    4844:	0a d0       	rcall	.+20     	; 0x485a <__divmodsi4_neg1>
    4846:	00 1c       	adc	r0, r0
    4848:	38 f4       	brcc	.+14     	; 0x4858 <__divmodsi4_exit>

0000484a <__divmodsi4_neg2>:
    484a:	50 95       	com	r21
    484c:	40 95       	com	r20
    484e:	30 95       	com	r19
    4850:	21 95       	neg	r18
    4852:	3f 4f       	sbci	r19, 0xFF	; 255
    4854:	4f 4f       	sbci	r20, 0xFF	; 255
    4856:	5f 4f       	sbci	r21, 0xFF	; 255

00004858 <__divmodsi4_exit>:
    4858:	08 95       	ret

0000485a <__divmodsi4_neg1>:
    485a:	f6 f7       	brtc	.-4      	; 0x4858 <__divmodsi4_exit>
    485c:	90 95       	com	r25
    485e:	80 95       	com	r24
    4860:	70 95       	com	r23
    4862:	61 95       	neg	r22
    4864:	7f 4f       	sbci	r23, 0xFF	; 255
    4866:	8f 4f       	sbci	r24, 0xFF	; 255
    4868:	9f 4f       	sbci	r25, 0xFF	; 255
    486a:	08 95       	ret

0000486c <__prologue_saves__>:
    486c:	2f 92       	push	r2
    486e:	3f 92       	push	r3
    4870:	4f 92       	push	r4
    4872:	5f 92       	push	r5
    4874:	6f 92       	push	r6
    4876:	7f 92       	push	r7
    4878:	8f 92       	push	r8
    487a:	9f 92       	push	r9
    487c:	af 92       	push	r10
    487e:	bf 92       	push	r11
    4880:	cf 92       	push	r12
    4882:	df 92       	push	r13
    4884:	ef 92       	push	r14
    4886:	ff 92       	push	r15
    4888:	0f 93       	push	r16
    488a:	1f 93       	push	r17
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	cd b7       	in	r28, 0x3d	; 61
    4892:	de b7       	in	r29, 0x3e	; 62
    4894:	ca 1b       	sub	r28, r26
    4896:	db 0b       	sbc	r29, r27
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	09 94       	ijmp

000048a4 <__epilogue_restores__>:
    48a4:	2a 88       	ldd	r2, Y+18	; 0x12
    48a6:	39 88       	ldd	r3, Y+17	; 0x11
    48a8:	48 88       	ldd	r4, Y+16	; 0x10
    48aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    48ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    48ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    48b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    48b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    48b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    48b6:	b9 84       	ldd	r11, Y+9	; 0x09
    48b8:	c8 84       	ldd	r12, Y+8	; 0x08
    48ba:	df 80       	ldd	r13, Y+7	; 0x07
    48bc:	ee 80       	ldd	r14, Y+6	; 0x06
    48be:	fd 80       	ldd	r15, Y+5	; 0x05
    48c0:	0c 81       	ldd	r16, Y+4	; 0x04
    48c2:	1b 81       	ldd	r17, Y+3	; 0x03
    48c4:	aa 81       	ldd	r26, Y+2	; 0x02
    48c6:	b9 81       	ldd	r27, Y+1	; 0x01
    48c8:	ce 0f       	add	r28, r30
    48ca:	d1 1d       	adc	r29, r1
    48cc:	0f b6       	in	r0, 0x3f	; 63
    48ce:	f8 94       	cli
    48d0:	de bf       	out	0x3e, r29	; 62
    48d2:	0f be       	out	0x3f, r0	; 63
    48d4:	cd bf       	out	0x3d, r28	; 61
    48d6:	ed 01       	movw	r28, r26
    48d8:	08 95       	ret

000048da <_exit>:
    48da:	f8 94       	cli

000048dc <__stop_program>:
    48dc:	ff cf       	rjmp	.-2      	; 0x48dc <__stop_program>
