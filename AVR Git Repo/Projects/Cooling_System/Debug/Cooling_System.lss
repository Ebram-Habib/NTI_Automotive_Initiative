
Cooling_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00004648  000046dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  008001bc  008001bc  00004838  2**0
                  ALLOC
  3 .stab         00003c90  00000000  00000000  00004838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023d3  00000000  00000000  000084c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a89b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000aa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ac2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d038  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000e3be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f594  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000fa4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__vector_10>
      2c:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 34 08 	jmp	0x1068	; 0x1068 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3d       	cpi	r26, 0xDD	; 221
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <main>
      8a:	0c 94 22 23 	jmp	0x4644	; 0x4644 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e2 22 	jmp	0x45c4	; 0x45c4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 de 22 	jmp	0x45bc	; 0x45bc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 55       	subi	r30, 0x5B	; 91
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_Init>:

static void(*ptrCallBack)(u16) = NULL_PTR;
static u16 value = 0;

void ADC_Init(const ADC_INIT_CONFIG* adc_config)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <ADC_Init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9a 83       	std	Y+2, r25	; 0x02
     e3c:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_REG->FULL_REG = ((ADMUX_REG->FULL_REG & 0x3F)|(adc_config->Volt_Ref << 6));
     e3e:	a7 e2       	ldi	r26, 0x27	; 39
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e7 e2       	ldi	r30, 0x27	; 39
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	28 2f       	mov	r18, r24
     e4a:	2f 73       	andi	r18, 0x3F	; 63
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	80 81       	ld	r24, Z
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	00 24       	eor	r0, r0
     e58:	96 95       	lsr	r25
     e5a:	87 95       	ror	r24
     e5c:	07 94       	ror	r0
     e5e:	96 95       	lsr	r25
     e60:	87 95       	ror	r24
     e62:	07 94       	ror	r0
     e64:	98 2f       	mov	r25, r24
     e66:	80 2d       	mov	r24, r0
     e68:	82 2b       	or	r24, r18
     e6a:	8c 93       	st	X, r24

//	ADMUX_REG->bits.REFS1_BIT = (adc_config->Volt_Ref >> 1);
//	ADMUX_REG->bits.REFS0_BIT = (adc_config->Volt_Ref);
//	ADMUX_REG->bits.ADLAR_BIT = (adc_config->Result_Direction_Adjust);

	ADCSRA_REG->bits.ADEN_BIT = LOGIC_HIGH;
     e6c:	e6 e2       	ldi	r30, 0x26	; 38
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	80 83       	st	Z, r24
	ADCSRA_REG->FULL_REG = ((ADCSRA_REG->FULL_REG & 0xF8)|(adc_config->Prescaler));
     e76:	a6 e2       	ldi	r26, 0x26	; 38
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e6 e2       	ldi	r30, 0x26	; 38
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	98 2f       	mov	r25, r24
     e82:	98 7f       	andi	r25, 0xF8	; 248
     e84:	e9 81       	ldd	r30, Y+1	; 0x01
     e86:	fa 81       	ldd	r31, Y+2	; 0x02
     e88:	82 81       	ldd	r24, Z+2	; 0x02
     e8a:	89 2b       	or	r24, r25
     e8c:	8c 93       	st	X, r24

//	ADCSRA_REG->bits.ADPS0_BIT = (adc_config->Prescaler);
//	ADCSRA_REG->bits.ADPS1_BIT = (adc_config->Prescaler >> 1);
//	ADCSRA_REG->bits.ADPS2_BIT = (adc_config->Prescaler >> 2);

	switch(adc_config->Mode)
     e8e:	e9 81       	ldd	r30, Y+1	; 0x01
     e90:	fa 81       	ldd	r31, Y+2	; 0x02
     e92:	83 81       	ldd	r24, Z+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	3c 83       	std	Y+4, r19	; 0x04
     e9a:	2b 83       	std	Y+3, r18	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	a9 f0       	breq	.+42     	; 0xed0 <ADC_Init+0xa2>
     ea6:	2b 81       	ldd	r18, Y+3	; 0x03
     ea8:	3c 81       	ldd	r19, Y+4	; 0x04
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	2c f4       	brge	.+10     	; 0xeba <ADC_Init+0x8c>
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	91 f0       	breq	.+36     	; 0xedc <ADC_Init+0xae>
     eb8:	1c c0       	rjmp	.+56     	; 0xef2 <ADC_Init+0xc4>
     eba:	2b 81       	ldd	r18, Y+3	; 0x03
     ebc:	3c 81       	ldd	r19, Y+4	; 0x04
     ebe:	22 30       	cpi	r18, 0x02	; 2
     ec0:	31 05       	cpc	r19, r1
     ec2:	b9 f0       	breq	.+46     	; 0xef2 <ADC_Init+0xc4>
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	91 05       	cpc	r25, r1
     ecc:	69 f0       	breq	.+26     	; 0xee8 <ADC_Init+0xba>
     ece:	11 c0       	rjmp	.+34     	; 0xef2 <ADC_Init+0xc4>
	{
	case 	ADC_INT_ENABLE:
		ADCSRA_REG->bits.ADIE_BIT = LOGIC_HIGH;
     ed0:	e6 e2       	ldi	r30, 0x26	; 38
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	88 60       	ori	r24, 0x08	; 8
     ed8:	80 83       	st	Z, r24
     eda:	0b c0       	rjmp	.+22     	; 0xef2 <ADC_Init+0xc4>
		break;
	case	ADC_INT_DISABLE:
		ADCSRA_REG->bits.ADIE_BIT = LOGIC_LOW;
     edc:	e6 e2       	ldi	r30, 0x26	; 38
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	87 7f       	andi	r24, 0xF7	; 247
     ee4:	80 83       	st	Z, r24
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <ADC_Init+0xc4>
		break;
	case 	ADC_FREE_RUNNINC:
		/* adjust SFIOR accordingly */
		break;
	case 	ADC_AUTO_TRIGGER:
		ADCSRA_REG->bits.ADATE_BIT = LOGIC_HIGH;
     ee8:	e6 e2       	ldi	r30, 0x26	; 38
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	80 62       	ori	r24, 0x20	; 32
     ef0:	80 83       	st	Z, r24
		/* adjust SFIOR accordingly */
		break;
	}


}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <ADC_getDigitalValueSynchNonBlocking>:

u16 ADC_getDigitalValueSynchNonBlocking(u8 ADC_SINGLE_ENDED_CHANNELS)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <ADC_getDigitalValueSynchNonBlocking+0x6>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_REG->FULL_REG |= (0x1F & ADC_SINGLE_ENDED_CHANNELS);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	98 2f       	mov	r25, r24
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	8f 71       	andi	r24, 0x1F	; 31
     f1e:	89 2b       	or	r24, r25
     f20:	8c 93       	st	X, r24

	ADCSRA_REG->bits.ADSC_BIT = LOGIC_HIGH;
     f22:	e6 e2       	ldi	r30, 0x26	; 38
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 64       	ori	r24, 0x40	; 64
     f2a:	80 83       	st	Z, r24

	if(ADCSRA_REG->bits.ADIF_BIT == LOGIC_HIGH)
     f2c:	e6 e2       	ldi	r30, 0x26	; 38
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	80 71       	andi	r24, 0x10	; 16
     f34:	88 23       	and	r24, r24
     f36:	09 f4       	brne	.+2      	; 0xf3a <ADC_getDigitalValueSynchNonBlocking+0x3a>
     f38:	60 c0       	rjmp	.+192    	; 0xffa <ADC_getDigitalValueSynchNonBlocking+0xfa>
	{
		if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_LOW)
     f3a:	e7 e2       	ldi	r30, 0x27	; 39
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 72       	andi	r24, 0x20	; 32
     f42:	88 23       	and	r24, r24
     f44:	29 f5       	brne	.+74     	; 0xf90 <ADC_getDigitalValueSynchNonBlocking+0x90>
		{
			value = (0x03 & ADCH);
     f46:	e5 e2       	ldi	r30, 0x25	; 37
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	83 70       	andi	r24, 0x03	; 3
     f52:	90 70       	andi	r25, 0x00	; 0
     f54:	90 93 bf 01 	sts	0x01BF, r25
     f58:	80 93 be 01 	sts	0x01BE, r24
			value = (value << 8);
     f5c:	80 91 be 01 	lds	r24, 0x01BE
     f60:	90 91 bf 01 	lds	r25, 0x01BF
     f64:	98 2f       	mov	r25, r24
     f66:	88 27       	eor	r24, r24
     f68:	90 93 bf 01 	sts	0x01BF, r25
     f6c:	80 93 be 01 	sts	0x01BE, r24
			value |= ADCL;
     f70:	e4 e2       	ldi	r30, 0x24	; 36
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	80 91 be 01 	lds	r24, 0x01BE
     f7e:	90 91 bf 01 	lds	r25, 0x01BF
     f82:	82 2b       	or	r24, r18
     f84:	93 2b       	or	r25, r19
     f86:	90 93 bf 01 	sts	0x01BF, r25
     f8a:	80 93 be 01 	sts	0x01BE, r24
     f8e:	24 c0       	rjmp	.+72     	; 0xfd8 <ADC_getDigitalValueSynchNonBlocking+0xd8>
		}
		else if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_HIGH)
     f90:	e7 e2       	ldi	r30, 0x27	; 39
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	80 72       	andi	r24, 0x20	; 32
     f98:	88 23       	and	r24, r24
     f9a:	f1 f0       	breq	.+60     	; 0xfd8 <ADC_getDigitalValueSynchNonBlocking+0xd8>
		{
			value = ADCH;
     f9c:	e5 e2       	ldi	r30, 0x25	; 37
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 2f       	mov	r24, r24
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	90 93 bf 01 	sts	0x01BF, r25
     faa:	80 93 be 01 	sts	0x01BE, r24
			value = ((ADCL>> 6) | (value << 8));
     fae:	e4 e2       	ldi	r30, 0x24	; 36
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	82 95       	swap	r24
     fb6:	86 95       	lsr	r24
     fb8:	86 95       	lsr	r24
     fba:	83 70       	andi	r24, 0x03	; 3
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	80 91 be 01 	lds	r24, 0x01BE
     fc4:	90 91 bf 01 	lds	r25, 0x01BF
     fc8:	98 2f       	mov	r25, r24
     fca:	88 27       	eor	r24, r24
     fcc:	82 2b       	or	r24, r18
     fce:	93 2b       	or	r25, r19
     fd0:	90 93 bf 01 	sts	0x01BF, r25
     fd4:	80 93 be 01 	sts	0x01BE, r24
		}
		ADCSRA_REG->bits.ADEN_BIT = LOGIC_LOW;
     fd8:	e6 e2       	ldi	r30, 0x26	; 38
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 77       	andi	r24, 0x7F	; 127
     fe0:	80 83       	st	Z, r24
		ADCSRA_REG->bits.ADIF_BIT = LOGIC_HIGH;
     fe2:	e6 e2       	ldi	r30, 0x26	; 38
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 61       	ori	r24, 0x10	; 16
     fea:	80 83       	st	Z, r24

		return value;
     fec:	80 91 be 01 	lds	r24, 0x01BE
     ff0:	90 91 bf 01 	lds	r25, 0x01BF
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <ADC_getDigitalValueSynchNonBlocking+0x106>
	}
	return value;
     ffa:	80 91 be 01 	lds	r24, 0x01BE
     ffe:	90 91 bf 01 	lds	r25, 0x01BF
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	8a 83       	std	Y+2, r24	; 0x02
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <ADC_getDigitalValueAsynchCallBack>:
void ADC_getDigitalValueAsynchCallBack(u8 ADC_SINGLE_ENDED_CHANNELS, void(*ptrfn)(u16))
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <ADC_getDigitalValueAsynchCallBack+0x6>
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	7b 83       	std	Y+3, r23	; 0x03
    1026:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX_REG->FULL_REG |= (0x1F & ADC_SINGLE_ENDED_CHANNELS);
    1028:	a7 e2       	ldi	r26, 0x27	; 39
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e7 e2       	ldi	r30, 0x27	; 39
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	98 2f       	mov	r25, r24
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	8f 71       	andi	r24, 0x1F	; 31
    1038:	89 2b       	or	r24, r25
    103a:	8c 93       	st	X, r24

	ADCSRA_REG->bits.ADIE_BIT = LOGIC_HIGH;
    103c:	e6 e2       	ldi	r30, 0x26	; 38
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 60       	ori	r24, 0x08	; 8
    1044:	80 83       	st	Z, r24
	ptrCallBack = ptrfn;
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	90 93 bd 01 	sts	0x01BD, r25
    104e:	80 93 bc 01 	sts	0x01BC, r24
	ADCSRA_REG->bits.ADSC_BIT = LOGIC_HIGH;
    1052:	e6 e2       	ldi	r30, 0x26	; 38
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 64       	ori	r24, 0x40	; 64
    105a:	80 83       	st	Z, r24
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <__vector_16>:

ISR(ADC_vect)
{
    1068:	1f 92       	push	r1
    106a:	0f 92       	push	r0
    106c:	0f b6       	in	r0, 0x3f	; 63
    106e:	0f 92       	push	r0
    1070:	11 24       	eor	r1, r1
    1072:	2f 93       	push	r18
    1074:	3f 93       	push	r19
    1076:	4f 93       	push	r20
    1078:	5f 93       	push	r21
    107a:	6f 93       	push	r22
    107c:	7f 93       	push	r23
    107e:	8f 93       	push	r24
    1080:	9f 93       	push	r25
    1082:	af 93       	push	r26
    1084:	bf 93       	push	r27
    1086:	ef 93       	push	r30
    1088:	ff 93       	push	r31
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62


	if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_LOW)
    1092:	e7 e2       	ldi	r30, 0x27	; 39
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 72       	andi	r24, 0x20	; 32
    109a:	88 23       	and	r24, r24
    109c:	49 f4       	brne	.+18     	; 0x10b0 <__vector_16+0x48>
	{
//		value = (0x03 & ADCH);
//		value = (value << 8);
//		value |= ADCL;
		value = ADC_REG;
    109e:	e4 e2       	ldi	r30, 0x24	; 36
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	90 93 bf 01 	sts	0x01BF, r25
    10aa:	80 93 be 01 	sts	0x01BE, r24
    10ae:	0e c0       	rjmp	.+28     	; 0x10cc <__vector_16+0x64>
	}
	else if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_HIGH)
    10b0:	e7 e2       	ldi	r30, 0x27	; 39
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	80 72       	andi	r24, 0x20	; 32
    10b8:	88 23       	and	r24, r24
    10ba:	41 f0       	breq	.+16     	; 0x10cc <__vector_16+0x64>
	{
//		value = ADCH;
//		value = ((ADCL>> 6) | (value << 8));
		value = ADC_REG;
    10bc:	e4 e2       	ldi	r30, 0x24	; 36
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	90 93 bf 01 	sts	0x01BF, r25
    10c8:	80 93 be 01 	sts	0x01BE, r24
	}

	if(ptrCallBack != NULL_PTR)
    10cc:	80 91 bc 01 	lds	r24, 0x01BC
    10d0:	90 91 bd 01 	lds	r25, 0x01BD
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	71 f0       	breq	.+28     	; 0x10f4 <__vector_16+0x8c>
	{
		ptrCallBack(value);
    10d8:	e0 91 bc 01 	lds	r30, 0x01BC
    10dc:	f0 91 bd 01 	lds	r31, 0x01BD
    10e0:	80 91 be 01 	lds	r24, 0x01BE
    10e4:	90 91 bf 01 	lds	r25, 0x01BF
    10e8:	09 95       	icall
		ADCSRA_REG->bits.ADSC_BIT = LOGIC_HIGH;
    10ea:	e6 e2       	ldi	r30, 0x26	; 38
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 64       	ori	r24, 0x40	; 64
    10f2:	80 83       	st	Z, r24
	}
}
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <DcMotor_Init>:
/*******************************************************************************
 *                      Functions Definition                                   *
 *******************************************************************************/

void DcMotor_Init(void)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62

	Timer0_Init(&config);
    1122:	85 ea       	ldi	r24, 0xA5	; 165
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 77 14 	call	0x28ee	; 0x28ee <Timer0_Init>

	/* Initializing the motor pins as outputs with 0 as initial value */
	DIO_voidSetPinDirection(DCMOTOR_PIN_1_PORT_ID, DCMOTOR_PIN_1_PIN_ID, output);
    112a:	80 91 b8 01 	lds	r24, 0x01B8
    112e:	90 91 b9 01 	lds	r25, 0x01B9
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DCMOTOR_PIN_2_PORT_ID, DCMOTOR_PIN_2_PIN_ID, output);
    113a:	80 91 b8 01 	lds	r24, 0x01B8
    113e:	90 91 b9 01 	lds	r25, 0x01B9
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	41 e0       	ldi	r20, 0x01	; 1
    1146:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DCMOTOR_PIN_1_PORT_ID, DCMOTOR_PIN_1_PIN_ID, LOGIC_LOW);
    114a:	80 91 b8 01 	lds	r24, 0x01B8
    114e:	90 91 b9 01 	lds	r25, 0x01B9
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PIN_2_PORT_ID, DCMOTOR_PIN_2_PIN_ID, LOGIC_LOW);
    115a:	80 91 b8 01 	lds	r24, 0x01B8
    115e:	90 91 b9 01 	lds	r25, 0x01B9
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	/* Initialize the PWM pin OC0 */
	DIO_voidSetPinDirection(pPORTB, pin3, output);
    116a:	80 91 b6 01 	lds	r24, 0x01B6
    116e:	90 91 b7 01 	lds	r25, 0x01B7
    1172:	63 e0       	ldi	r22, 0x03	; 3
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <DcMotor_ON>:

void DcMotor_ON(u8 speed)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	0f 92       	push	r0
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(DCMOTOR_PIN_1_PORT_ID, DCMOTOR_PIN_1_PIN_ID, LOGIC_LOW);
    118c:	80 91 b8 01 	lds	r24, 0x01B8
    1190:	90 91 b9 01 	lds	r25, 0x01B9
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PIN_2_PORT_ID, DCMOTOR_PIN_2_PIN_ID, LOGIC_HIGH);
    119c:	80 91 b8 01 	lds	r24, 0x01B8
    11a0:	90 91 b9 01 	lds	r25, 0x01B9
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>

	Timer0_Start(&config);
    11ac:	85 ea       	ldi	r24, 0xA5	; 165
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Timer0_Start>
	Timer0_SetFastPWM(&config, speed);
    11b4:	85 ea       	ldi	r24, 0xA5	; 165
    11b6:	91 e0       	ldi	r25, 0x01	; 1
    11b8:	69 81       	ldd	r22, Y+1	; 0x01
    11ba:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Timer0_SetFastPWM>

}
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <DcMotor_OFF>:

void DcMotor_OFF(void)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMOTOR_PIN_1_PORT_ID, DCMOTOR_PIN_1_PIN_ID, LOGIC_LOW);
    11ce:	80 91 b8 01 	lds	r24, 0x01B8
    11d2:	90 91 b9 01 	lds	r25, 0x01B9
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMOTOR_PIN_2_PORT_ID, DCMOTOR_PIN_2_PIN_ID, LOGIC_LOW);
    11de:	80 91 b8 01 	lds	r24, 0x01B8
    11e2:	90 91 b9 01 	lds	r25, 0x01B9
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>

	Timer0_SetFastPWM(&config, 0);
    11ee:	85 ea       	ldi	r24, 0xA5	; 165
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <Timer0_SetFastPWM>
	Timer0_Stop(&config);
    11f8:	85 ea       	ldi	r24, 0xA5	; 165
    11fa:	91 e0       	ldi	r25, 0x01	; 1
    11fc:	0e 94 83 15 	call	0x2b06	; 0x2b06 <Timer0_Stop>
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
    120e:	af e5       	ldi	r26, 0x5F	; 95
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e5       	ldi	r30, 0x5F	; 95
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	8c 93       	st	X, r24
}
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <GIE_Disable>:

void GIE_Disable(void)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
    122a:	af e5       	ldi	r26, 0x5F	; 95
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ef e5       	ldi	r30, 0x5F	; 95
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	8c 93       	st	X, r24
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <DIO_voidSetPinDirection+0x6>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <DIO_voidSetPinDirection+0x8>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_voidSetPinDirection+0xa>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	6b 83       	std	Y+3, r22	; 0x03
    1252:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3e 83       	std	Y+6, r19	; 0x06
    125c:	2d 83       	std	Y+5, r18	; 0x05
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_voidSetPinDirection+0x2c>
    1268:	51 c0       	rjmp	.+162    	; 0x130c <DIO_voidSetPinDirection+0xce>
    126a:	2d 81       	ldd	r18, Y+5	; 0x05
    126c:	3e 81       	ldd	r19, Y+6	; 0x06
    126e:	24 30       	cpi	r18, 0x04	; 4
    1270:	31 05       	cpc	r19, r1
    1272:	7c f4       	brge	.+30     	; 0x1292 <DIO_voidSetPinDirection+0x54>
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	71 f1       	breq	.+92     	; 0x12da <DIO_voidSetPinDirection+0x9c>
    127e:	2d 81       	ldd	r18, Y+5	; 0x05
    1280:	3e 81       	ldd	r19, Y+6	; 0x06
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	ac f5       	brge	.+106    	; 0x12f2 <DIO_voidSetPinDirection+0xb4>
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	d1 f0       	breq	.+52     	; 0x12c4 <DIO_voidSetPinDirection+0x86>
    1290:	81 c0       	rjmp	.+258    	; 0x1394 <DIO_voidSetPinDirection+0x156>
    1292:	2d 81       	ldd	r18, Y+5	; 0x05
    1294:	3e 81       	ldd	r19, Y+6	; 0x06
    1296:	25 30       	cpi	r18, 0x05	; 5
    1298:	31 05       	cpc	r19, r1
    129a:	09 f4       	brne	.+2      	; 0x129e <DIO_voidSetPinDirection+0x60>
    129c:	52 c0       	rjmp	.+164    	; 0x1342 <DIO_voidSetPinDirection+0x104>
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	85 30       	cpi	r24, 0x05	; 5
    12a4:	91 05       	cpc	r25, r1
    12a6:	0c f4       	brge	.+2      	; 0x12aa <DIO_voidSetPinDirection+0x6c>
    12a8:	3f c0       	rjmp	.+126    	; 0x1328 <DIO_voidSetPinDirection+0xea>
    12aa:	2d 81       	ldd	r18, Y+5	; 0x05
    12ac:	3e 81       	ldd	r19, Y+6	; 0x06
    12ae:	26 30       	cpi	r18, 0x06	; 6
    12b0:	31 05       	cpc	r19, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_voidSetPinDirection+0x78>
    12b4:	54 c0       	rjmp	.+168    	; 0x135e <DIO_voidSetPinDirection+0x120>
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    12b8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ba:	87 30       	cpi	r24, 0x07	; 7
    12bc:	91 05       	cpc	r25, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <DIO_voidSetPinDirection+0x84>
    12c0:	5d c0       	rjmp	.+186    	; 0x137c <DIO_voidSetPinDirection+0x13e>
    12c2:	68 c0       	rjmp	.+208    	; 0x1394 <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ca:	fa 81       	ldd	r31, Y+2	; 0x02
    12cc:	98 2f       	mov	r25, r24
    12ce:	91 70       	andi	r25, 0x01	; 1
    12d0:	81 81       	ldd	r24, Z+1	; 0x01
    12d2:	8e 7f       	andi	r24, 0xFE	; 254
    12d4:	89 2b       	or	r24, r25
    12d6:	81 83       	std	Z+1, r24	; 0x01
    12d8:	5d c0       	rjmp	.+186    	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	81 70       	andi	r24, 0x01	; 1
    12de:	e9 81       	ldd	r30, Y+1	; 0x01
    12e0:	fa 81       	ldd	r31, Y+2	; 0x02
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	98 2f       	mov	r25, r24
    12e6:	99 0f       	add	r25, r25
    12e8:	81 81       	ldd	r24, Z+1	; 0x01
    12ea:	8d 7f       	andi	r24, 0xFD	; 253
    12ec:	89 2b       	or	r24, r25
    12ee:	81 83       	std	Z+1, r24	; 0x01
    12f0:	51 c0       	rjmp	.+162    	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	e9 81       	ldd	r30, Y+1	; 0x01
    12f8:	fa 81       	ldd	r31, Y+2	; 0x02
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	98 2f       	mov	r25, r24
    12fe:	99 0f       	add	r25, r25
    1300:	99 0f       	add	r25, r25
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	8b 7f       	andi	r24, 0xFB	; 251
    1306:	89 2b       	or	r24, r25
    1308:	81 83       	std	Z+1, r24	; 0x01
    130a:	44 c0       	rjmp	.+136    	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	98 2f       	mov	r25, r24
    1318:	99 0f       	add	r25, r25
    131a:	99 0f       	add	r25, r25
    131c:	99 0f       	add	r25, r25
    131e:	81 81       	ldd	r24, Z+1	; 0x01
    1320:	87 7f       	andi	r24, 0xF7	; 247
    1322:	89 2b       	or	r24, r25
    1324:	81 83       	std	Z+1, r24	; 0x01
    1326:	36 c0       	rjmp	.+108    	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	98 2f       	mov	r25, r24
    1334:	92 95       	swap	r25
    1336:	90 7f       	andi	r25, 0xF0	; 240
    1338:	81 81       	ldd	r24, Z+1	; 0x01
    133a:	8f 7e       	andi	r24, 0xEF	; 239
    133c:	89 2b       	or	r24, r25
    133e:	81 83       	std	Z+1, r24	; 0x01
    1340:	29 c0       	rjmp	.+82     	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
    1342:	8c 81       	ldd	r24, Y+4	; 0x04
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	e9 81       	ldd	r30, Y+1	; 0x01
    1348:	fa 81       	ldd	r31, Y+2	; 0x02
    134a:	81 70       	andi	r24, 0x01	; 1
    134c:	98 2f       	mov	r25, r24
    134e:	92 95       	swap	r25
    1350:	99 0f       	add	r25, r25
    1352:	90 7e       	andi	r25, 0xE0	; 224
    1354:	81 81       	ldd	r24, Z+1	; 0x01
    1356:	8f 7d       	andi	r24, 0xDF	; 223
    1358:	89 2b       	or	r24, r25
    135a:	81 83       	std	Z+1, r24	; 0x01
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	81 70       	andi	r24, 0x01	; 1
    1362:	e9 81       	ldd	r30, Y+1	; 0x01
    1364:	fa 81       	ldd	r31, Y+2	; 0x02
    1366:	81 70       	andi	r24, 0x01	; 1
    1368:	98 2f       	mov	r25, r24
    136a:	92 95       	swap	r25
    136c:	99 0f       	add	r25, r25
    136e:	99 0f       	add	r25, r25
    1370:	90 7c       	andi	r25, 0xC0	; 192
    1372:	81 81       	ldd	r24, Z+1	; 0x01
    1374:	8f 7b       	andi	r24, 0xBF	; 191
    1376:	89 2b       	or	r24, r25
    1378:	81 83       	std	Z+1, r24	; 0x01
    137a:	0c c0       	rjmp	.+24     	; 0x1394 <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	98 2f       	mov	r25, r24
    1386:	97 95       	ror	r25
    1388:	99 27       	eor	r25, r25
    138a:	97 95       	ror	r25
    138c:	81 81       	ldd	r24, Z+1	; 0x01
    138e:	8f 77       	andi	r24, 0x7F	; 127
    1390:	89 2b       	or	r24, r25
    1392:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
    1394:	26 96       	adiw	r28, 0x06	; 6
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <DIO_voidSetPinValue+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <DIO_voidSetPinValue+0x8>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <DIO_voidSetPinValue+0xa>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	6b 83       	std	Y+3, r22	; 0x03
    13ba:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3e 83       	std	Y+6, r19	; 0x06
    13c4:	2d 83       	std	Y+5, r18	; 0x05
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	91 05       	cpc	r25, r1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <DIO_voidSetPinValue+0x2c>
    13d0:	51 c0       	rjmp	.+162    	; 0x1474 <DIO_voidSetPinValue+0xce>
    13d2:	2d 81       	ldd	r18, Y+5	; 0x05
    13d4:	3e 81       	ldd	r19, Y+6	; 0x06
    13d6:	24 30       	cpi	r18, 0x04	; 4
    13d8:	31 05       	cpc	r19, r1
    13da:	7c f4       	brge	.+30     	; 0x13fa <DIO_voidSetPinValue+0x54>
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	91 05       	cpc	r25, r1
    13e4:	71 f1       	breq	.+92     	; 0x1442 <DIO_voidSetPinValue+0x9c>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	22 30       	cpi	r18, 0x02	; 2
    13ec:	31 05       	cpc	r19, r1
    13ee:	ac f5       	brge	.+106    	; 0x145a <DIO_voidSetPinValue+0xb4>
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	d1 f0       	breq	.+52     	; 0x142c <DIO_voidSetPinValue+0x86>
    13f8:	81 c0       	rjmp	.+258    	; 0x14fc <DIO_voidSetPinValue+0x156>
    13fa:	2d 81       	ldd	r18, Y+5	; 0x05
    13fc:	3e 81       	ldd	r19, Y+6	; 0x06
    13fe:	25 30       	cpi	r18, 0x05	; 5
    1400:	31 05       	cpc	r19, r1
    1402:	09 f4       	brne	.+2      	; 0x1406 <DIO_voidSetPinValue+0x60>
    1404:	52 c0       	rjmp	.+164    	; 0x14aa <DIO_voidSetPinValue+0x104>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	85 30       	cpi	r24, 0x05	; 5
    140c:	91 05       	cpc	r25, r1
    140e:	0c f4       	brge	.+2      	; 0x1412 <DIO_voidSetPinValue+0x6c>
    1410:	3f c0       	rjmp	.+126    	; 0x1490 <DIO_voidSetPinValue+0xea>
    1412:	2d 81       	ldd	r18, Y+5	; 0x05
    1414:	3e 81       	ldd	r19, Y+6	; 0x06
    1416:	26 30       	cpi	r18, 0x06	; 6
    1418:	31 05       	cpc	r19, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <DIO_voidSetPinValue+0x78>
    141c:	54 c0       	rjmp	.+168    	; 0x14c6 <DIO_voidSetPinValue+0x120>
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	87 30       	cpi	r24, 0x07	; 7
    1424:	91 05       	cpc	r25, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <DIO_voidSetPinValue+0x84>
    1428:	5d c0       	rjmp	.+186    	; 0x14e4 <DIO_voidSetPinValue+0x13e>
    142a:	68 c0       	rjmp	.+208    	; 0x14fc <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	e9 81       	ldd	r30, Y+1	; 0x01
    1432:	fa 81       	ldd	r31, Y+2	; 0x02
    1434:	98 2f       	mov	r25, r24
    1436:	91 70       	andi	r25, 0x01	; 1
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	8e 7f       	andi	r24, 0xFE	; 254
    143c:	89 2b       	or	r24, r25
    143e:	82 83       	std	Z+2, r24	; 0x02
    1440:	5d c0       	rjmp	.+186    	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	81 70       	andi	r24, 0x01	; 1
    1446:	e9 81       	ldd	r30, Y+1	; 0x01
    1448:	fa 81       	ldd	r31, Y+2	; 0x02
    144a:	81 70       	andi	r24, 0x01	; 1
    144c:	98 2f       	mov	r25, r24
    144e:	99 0f       	add	r25, r25
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	8d 7f       	andi	r24, 0xFD	; 253
    1454:	89 2b       	or	r24, r25
    1456:	82 83       	std	Z+2, r24	; 0x02
    1458:	51 c0       	rjmp	.+162    	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
    145a:	8c 81       	ldd	r24, Y+4	; 0x04
    145c:	81 70       	andi	r24, 0x01	; 1
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	81 70       	andi	r24, 0x01	; 1
    1464:	98 2f       	mov	r25, r24
    1466:	99 0f       	add	r25, r25
    1468:	99 0f       	add	r25, r25
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	8b 7f       	andi	r24, 0xFB	; 251
    146e:	89 2b       	or	r24, r25
    1470:	82 83       	std	Z+2, r24	; 0x02
    1472:	44 c0       	rjmp	.+136    	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	81 70       	andi	r24, 0x01	; 1
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	81 70       	andi	r24, 0x01	; 1
    147e:	98 2f       	mov	r25, r24
    1480:	99 0f       	add	r25, r25
    1482:	99 0f       	add	r25, r25
    1484:	99 0f       	add	r25, r25
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	89 2b       	or	r24, r25
    148c:	82 83       	std	Z+2, r24	; 0x02
    148e:	36 c0       	rjmp	.+108    	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	98 2f       	mov	r25, r24
    149c:	92 95       	swap	r25
    149e:	90 7f       	andi	r25, 0xF0	; 240
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	8f 7e       	andi	r24, 0xEF	; 239
    14a4:	89 2b       	or	r24, r25
    14a6:	82 83       	std	Z+2, r24	; 0x02
    14a8:	29 c0       	rjmp	.+82     	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	81 70       	andi	r24, 0x01	; 1
    14ae:	e9 81       	ldd	r30, Y+1	; 0x01
    14b0:	fa 81       	ldd	r31, Y+2	; 0x02
    14b2:	81 70       	andi	r24, 0x01	; 1
    14b4:	98 2f       	mov	r25, r24
    14b6:	92 95       	swap	r25
    14b8:	99 0f       	add	r25, r25
    14ba:	90 7e       	andi	r25, 0xE0	; 224
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	8f 7d       	andi	r24, 0xDF	; 223
    14c0:	89 2b       	or	r24, r25
    14c2:	82 83       	std	Z+2, r24	; 0x02
    14c4:	1b c0       	rjmp	.+54     	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	e9 81       	ldd	r30, Y+1	; 0x01
    14cc:	fa 81       	ldd	r31, Y+2	; 0x02
    14ce:	81 70       	andi	r24, 0x01	; 1
    14d0:	98 2f       	mov	r25, r24
    14d2:	92 95       	swap	r25
    14d4:	99 0f       	add	r25, r25
    14d6:	99 0f       	add	r25, r25
    14d8:	90 7c       	andi	r25, 0xC0	; 192
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	8f 7b       	andi	r24, 0xBF	; 191
    14de:	89 2b       	or	r24, r25
    14e0:	82 83       	std	Z+2, r24	; 0x02
    14e2:	0c c0       	rjmp	.+24     	; 0x14fc <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
    14e4:	8c 81       	ldd	r24, Y+4	; 0x04
    14e6:	81 70       	andi	r24, 0x01	; 1
    14e8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ea:	fa 81       	ldd	r31, Y+2	; 0x02
    14ec:	98 2f       	mov	r25, r24
    14ee:	97 95       	ror	r25
    14f0:	99 27       	eor	r25, r25
    14f2:	97 95       	ror	r25
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	8f 77       	andi	r24, 0x7F	; 127
    14f8:	89 2b       	or	r24, r25
    14fa:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
    14fc:	26 96       	adiw	r28, 0x06	; 6
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	00 d0       	rcall	.+0      	; 0x1514 <DIO_voidGetPinValue+0x6>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <DIO_voidGetPinValue+0x8>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <DIO_voidGetPinValue+0xa>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	9b 83       	std	Y+3, r25	; 0x03
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3e 83       	std	Y+6, r19	; 0x06
    152a:	2d 83       	std	Y+5, r18	; 0x05
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	83 30       	cpi	r24, 0x03	; 3
    1532:	91 05       	cpc	r25, r1
    1534:	09 f4       	brne	.+2      	; 0x1538 <DIO_voidGetPinValue+0x2a>
    1536:	3e c0       	rjmp	.+124    	; 0x15b4 <DIO_voidGetPinValue+0xa6>
    1538:	2d 81       	ldd	r18, Y+5	; 0x05
    153a:	3e 81       	ldd	r19, Y+6	; 0x06
    153c:	24 30       	cpi	r18, 0x04	; 4
    153e:	31 05       	cpc	r19, r1
    1540:	7c f4       	brge	.+30     	; 0x1560 <DIO_voidGetPinValue+0x52>
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	29 f1       	breq	.+74     	; 0x1596 <DIO_voidGetPinValue+0x88>
    154c:	2d 81       	ldd	r18, Y+5	; 0x05
    154e:	3e 81       	ldd	r19, Y+6	; 0x06
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	3c f5       	brge	.+78     	; 0x15a4 <DIO_voidGetPinValue+0x96>
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	b1 f0       	breq	.+44     	; 0x158a <DIO_voidGetPinValue+0x7c>
    155e:	55 c0       	rjmp	.+170    	; 0x160a <DIO_voidGetPinValue+0xfc>
    1560:	2d 81       	ldd	r18, Y+5	; 0x05
    1562:	3e 81       	ldd	r19, Y+6	; 0x06
    1564:	25 30       	cpi	r18, 0x05	; 5
    1566:	31 05       	cpc	r19, r1
    1568:	b1 f1       	breq	.+108    	; 0x15d6 <DIO_voidGetPinValue+0xc8>
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	85 30       	cpi	r24, 0x05	; 5
    1570:	91 05       	cpc	r25, r1
    1572:	4c f1       	brlt	.+82     	; 0x15c6 <DIO_voidGetPinValue+0xb8>
    1574:	2d 81       	ldd	r18, Y+5	; 0x05
    1576:	3e 81       	ldd	r19, Y+6	; 0x06
    1578:	26 30       	cpi	r18, 0x06	; 6
    157a:	31 05       	cpc	r19, r1
    157c:	a9 f1       	breq	.+106    	; 0x15e8 <DIO_voidGetPinValue+0xda>
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	87 30       	cpi	r24, 0x07	; 7
    1584:	91 05       	cpc	r25, r1
    1586:	d1 f1       	breq	.+116    	; 0x15fc <DIO_voidGetPinValue+0xee>
    1588:	40 c0       	rjmp	.+128    	; 0x160a <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
    158a:	ea 81       	ldd	r30, Y+2	; 0x02
    158c:	fb 81       	ldd	r31, Y+3	; 0x03
    158e:	80 81       	ld	r24, Z
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	3a c0       	rjmp	.+116    	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
    1596:	ea 81       	ldd	r30, Y+2	; 0x02
    1598:	fb 81       	ldd	r31, Y+3	; 0x03
    159a:	80 81       	ld	r24, Z
    159c:	86 95       	lsr	r24
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	33 c0       	rjmp	.+102    	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
    15a4:	ea 81       	ldd	r30, Y+2	; 0x02
    15a6:	fb 81       	ldd	r31, Y+3	; 0x03
    15a8:	80 81       	ld	r24, Z
    15aa:	86 95       	lsr	r24
    15ac:	86 95       	lsr	r24
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
    15b2:	2b c0       	rjmp	.+86     	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
    15b4:	ea 81       	ldd	r30, Y+2	; 0x02
    15b6:	fb 81       	ldd	r31, Y+3	; 0x03
    15b8:	80 81       	ld	r24, Z
    15ba:	86 95       	lsr	r24
    15bc:	86 95       	lsr	r24
    15be:	86 95       	lsr	r24
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	22 c0       	rjmp	.+68     	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
    15c6:	ea 81       	ldd	r30, Y+2	; 0x02
    15c8:	fb 81       	ldd	r31, Y+3	; 0x03
    15ca:	80 81       	ld	r24, Z
    15cc:	82 95       	swap	r24
    15ce:	8f 70       	andi	r24, 0x0F	; 15
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	1a c0       	rjmp	.+52     	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
    15d6:	ea 81       	ldd	r30, Y+2	; 0x02
    15d8:	fb 81       	ldd	r31, Y+3	; 0x03
    15da:	80 81       	ld	r24, Z
    15dc:	82 95       	swap	r24
    15de:	86 95       	lsr	r24
    15e0:	87 70       	andi	r24, 0x07	; 7
    15e2:	81 70       	andi	r24, 0x01	; 1
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	11 c0       	rjmp	.+34     	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
    15e8:	ea 81       	ldd	r30, Y+2	; 0x02
    15ea:	fb 81       	ldd	r31, Y+3	; 0x03
    15ec:	80 81       	ld	r24, Z
    15ee:	82 95       	swap	r24
    15f0:	86 95       	lsr	r24
    15f2:	86 95       	lsr	r24
    15f4:	83 70       	andi	r24, 0x03	; 3
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
    15fc:	ea 81       	ldd	r30, Y+2	; 0x02
    15fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1600:	80 81       	ld	r24, Z
    1602:	88 1f       	adc	r24, r24
    1604:	88 27       	eor	r24, r24
    1606:	88 1f       	adc	r24, r24
    1608:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
}
    160c:	26 96       	adiw	r28, 0x06	; 6
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <DIO_voidSetPortDirection+0x6>
    1624:	0f 92       	push	r0
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
    1630:	e9 81       	ldd	r30, Y+1	; 0x01
    1632:	fa 81       	ldd	r31, Y+2	; 0x02
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	81 83       	std	Z+1, r24	; 0x01
}
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <DIO_voidSetPortValue+0x6>
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
    1656:	e9 81       	ldd	r30, Y+1	; 0x01
    1658:	fa 81       	ldd	r31, Y+2	; 0x02
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	82 83       	std	Z+2, r24	; 0x02
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <DIO_voidGetPortValue+0x6>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
    1678:	e9 81       	ldd	r30, Y+1	; 0x01
    167a:	fa 81       	ldd	r31, Y+2	; 0x02
    167c:	80 81       	ld	r24, Z
}
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	2e 97       	sbiw	r28, 0x0e	; 14
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
    169c:	80 91 b4 01 	lds	r24, 0x01B4
    16a0:	90 91 b5 01 	lds	r25, 0x01B5
    16a4:	63 e0       	ldi	r22, 0x03	; 3
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
    16ac:	80 91 b4 01 	lds	r24, 0x01B4
    16b0:	90 91 b5 01 	lds	r25, 0x01B5
    16b4:	62 e0       	ldi	r22, 0x02	; 2
    16b6:	41 e0       	ldi	r20, 0x01	; 1
    16b8:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a8 e4       	ldi	r26, 0x48	; 72
    16c2:	b2 e4       	ldi	r27, 0x42	; 66
    16c4:	8b 87       	std	Y+11, r24	; 0x0b
    16c6:	9c 87       	std	Y+12, r25	; 0x0c
    16c8:	ad 87       	std	Y+13, r26	; 0x0d
    16ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4a ef       	ldi	r20, 0xFA	; 250
    16da:	54 e4       	ldi	r21, 0x44	; 68
    16dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	8f 83       	std	Y+7, r24	; 0x07
    16e6:	98 87       	std	Y+8, r25	; 0x08
    16e8:	a9 87       	std	Y+9, r26	; 0x09
    16ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ec:	6f 81       	ldd	r22, Y+7	; 0x07
    16ee:	78 85       	ldd	r23, Y+8	; 0x08
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f e3       	ldi	r21, 0x3F	; 63
    16fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1700:	88 23       	and	r24, r24
    1702:	2c f4       	brge	.+10     	; 0x170e <H_LCD_void_Init+0x86>
		__ticks = 1;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
    170c:	3f c0       	rjmp	.+126    	; 0x178c <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	3f ef       	ldi	r19, 0xFF	; 255
    171a:	4f e7       	ldi	r20, 0x7F	; 127
    171c:	57 e4       	ldi	r21, 0x47	; 71
    171e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1722:	18 16       	cp	r1, r24
    1724:	4c f5       	brge	.+82     	; 0x1778 <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	40 e2       	ldi	r20, 0x20	; 32
    1734:	51 e4       	ldi	r21, 0x41	; 65
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
    174e:	0f c0       	rjmp	.+30     	; 0x176e <H_LCD_void_Init+0xe6>
    1750:	88 ec       	ldi	r24, 0xC8	; 200
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <H_LCD_void_Init+0xd4>
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	69 f7       	brne	.-38     	; 0x1750 <H_LCD_void_Init+0xc8>
    1776:	14 c0       	rjmp	.+40     	; 0x17a0 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1778:	6f 81       	ldd	r22, Y+7	; 0x07
    177a:	78 85       	ldd	r23, Y+8	; 0x08
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	9a 83       	std	Y+2, r25	; 0x02
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	89 81       	ldd	r24, Y+1	; 0x01
    1796:	9a 81       	ldd	r25, Y+2	; 0x02
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <H_LCD_void_Init+0x110>
    179c:	9a 83       	std	Y+2, r25	; 0x02
    179e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPinDirection(pPORTB, Pin0, output);
    17a0:	80 91 b6 01 	lds	r24, 0x01B6
    17a4:	90 91 b7 01 	lds	r25, 0x01B7
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin1, output);
    17b0:	80 91 b6 01 	lds	r24, 0x01B6
    17b4:	90 91 b7 01 	lds	r25, 0x01B7
    17b8:	61 e0       	ldi	r22, 0x01	; 1
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin2, output);
    17c0:	80 91 b6 01 	lds	r24, 0x01B6
    17c4:	90 91 b7 01 	lds	r25, 0x01B7
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin4, output);
    17d0:	80 91 b6 01 	lds	r24, 0x01B6
    17d4:	90 91 b7 01 	lds	r25, 0x01B7
    17d8:	64 e0       	ldi	r22, 0x04	; 4
    17da:	41 e0       	ldi	r20, 0x01	; 1
    17dc:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    17e0:	80 91 b4 01 	lds	r24, 0x01B4
    17e4:	90 91 b5 01 	lds	r25, 0x01B5
    17e8:	62 e0       	ldi	r22, 0x02	; 2
    17ea:	40 e0       	ldi	r20, 0x00	; 0
    17ec:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17f0:	82 e3       	ldi	r24, 0x32	; 50
    17f2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17f6:	82 e3       	ldi	r24, 0x32	; 50
    17f8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    17fc:	88 e2       	ldi	r24, 0x28	; 40
    17fe:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    1802:	8e e0       	ldi	r24, 0x0E	; 14
    1804:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>


	/*
 #endif*/

}
    180e:	2e 96       	adiw	r28, 0x0e	; 14
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	6d 97       	sbiw	r28, 0x1d	; 29
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    1836:	80 91 b4 01 	lds	r24, 0x01B4
    183a:	90 91 b5 01 	lds	r25, 0x01B5
    183e:	63 e0       	ldi	r22, 0x03	; 3
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e8       	ldi	r26, 0x80	; 128
    184c:	bf e3       	ldi	r27, 0x3F	; 63
    184e:	89 8f       	std	Y+25, r24	; 0x19
    1850:	9a 8f       	std	Y+26, r25	; 0x1a
    1852:	ab 8f       	std	Y+27, r26	; 0x1b
    1854:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1856:	69 8d       	ldd	r22, Y+25	; 0x19
    1858:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	4a ef       	ldi	r20, 0xFA	; 250
    1864:	54 e4       	ldi	r21, 0x44	; 68
    1866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	8d 8b       	std	Y+21, r24	; 0x15
    1870:	9e 8b       	std	Y+22, r25	; 0x16
    1872:	af 8b       	std	Y+23, r26	; 0x17
    1874:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1876:	6d 89       	ldd	r22, Y+21	; 0x15
    1878:	7e 89       	ldd	r23, Y+22	; 0x16
    187a:	8f 89       	ldd	r24, Y+23	; 0x17
    187c:	98 8d       	ldd	r25, Y+24	; 0x18
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e8       	ldi	r20, 0x80	; 128
    1884:	5f e3       	ldi	r21, 0x3F	; 63
    1886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188a:	88 23       	and	r24, r24
    188c:	2c f4       	brge	.+10     	; 0x1898 <H_LCD_void_sendData+0x78>
		__ticks = 1;
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 8b       	std	Y+20, r25	; 0x14
    1894:	8b 8b       	std	Y+19, r24	; 0x13
    1896:	3f c0       	rjmp	.+126    	; 0x1916 <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    1898:	6d 89       	ldd	r22, Y+21	; 0x15
    189a:	7e 89       	ldd	r23, Y+22	; 0x16
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	57 e4       	ldi	r21, 0x47	; 71
    18a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ac:	18 16       	cp	r1, r24
    18ae:	4c f5       	brge	.+82     	; 0x1902 <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b0:	69 8d       	ldd	r22, Y+25	; 0x19
    18b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e2       	ldi	r20, 0x20	; 32
    18be:	51 e4       	ldi	r21, 0x41	; 65
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	9c 8b       	std	Y+20, r25	; 0x14
    18d6:	8b 8b       	std	Y+19, r24	; 0x13
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <H_LCD_void_sendData+0xd8>
    18da:	88 ec       	ldi	r24, 0xC8	; 200
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9a 8b       	std	Y+18, r25	; 0x12
    18e0:	89 8b       	std	Y+17, r24	; 0x11
    18e2:	89 89       	ldd	r24, Y+17	; 0x11
    18e4:	9a 89       	ldd	r25, Y+18	; 0x12
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <H_LCD_void_sendData+0xc6>
    18ea:	9a 8b       	std	Y+18, r25	; 0x12
    18ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ee:	8b 89       	ldd	r24, Y+19	; 0x13
    18f0:	9c 89       	ldd	r25, Y+20	; 0x14
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	9c 8b       	std	Y+20, r25	; 0x14
    18f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f8:	8b 89       	ldd	r24, Y+19	; 0x13
    18fa:	9c 89       	ldd	r25, Y+20	; 0x14
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	69 f7       	brne	.-38     	; 0x18da <H_LCD_void_sendData+0xba>
    1900:	14 c0       	rjmp	.+40     	; 0x192a <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1902:	6d 89       	ldd	r22, Y+21	; 0x15
    1904:	7e 89       	ldd	r23, Y+22	; 0x16
    1906:	8f 89       	ldd	r24, Y+23	; 0x17
    1908:	98 8d       	ldd	r25, Y+24	; 0x18
    190a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	9c 8b       	std	Y+20, r25	; 0x14
    1914:	8b 8b       	std	Y+19, r24	; 0x13
    1916:	8b 89       	ldd	r24, Y+19	; 0x13
    1918:	9c 89       	ldd	r25, Y+20	; 0x14
    191a:	98 8b       	std	Y+16, r25	; 0x10
    191c:	8f 87       	std	Y+15, r24	; 0x0f
    191e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1920:	98 89       	ldd	r25, Y+16	; 0x10
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <H_LCD_void_sendData+0x102>
    1926:	98 8b       	std	Y+16, r25	; 0x10
    1928:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    192a:	80 91 b4 01 	lds	r24, 0x01B4
    192e:	90 91 b5 01 	lds	r25, 0x01B5
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	a0 e8       	ldi	r26, 0x80	; 128
    1940:	bf e3       	ldi	r27, 0x3F	; 63
    1942:	8b 87       	std	Y+11, r24	; 0x0b
    1944:	9c 87       	std	Y+12, r25	; 0x0c
    1946:	ad 87       	std	Y+13, r26	; 0x0d
    1948:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194a:	6b 85       	ldd	r22, Y+11	; 0x0b
    194c:	7c 85       	ldd	r23, Y+12	; 0x0c
    194e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1950:	9e 85       	ldd	r25, Y+14	; 0x0e
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a ef       	ldi	r20, 0xFA	; 250
    1958:	54 e4       	ldi	r21, 0x44	; 68
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8f 83       	std	Y+7, r24	; 0x07
    1964:	98 87       	std	Y+8, r25	; 0x08
    1966:	a9 87       	std	Y+9, r26	; 0x09
    1968:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e8       	ldi	r20, 0x80	; 128
    1978:	5f e3       	ldi	r21, 0x3F	; 63
    197a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    197e:	88 23       	and	r24, r24
    1980:	2c f4       	brge	.+10     	; 0x198c <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9e 83       	std	Y+6, r25	; 0x06
    1988:	8d 83       	std	Y+5, r24	; 0x05
    198a:	3f c0       	rjmp	.+126    	; 0x1a0a <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	3f ef       	ldi	r19, 0xFF	; 255
    1998:	4f e7       	ldi	r20, 0x7F	; 127
    199a:	57 e4       	ldi	r21, 0x47	; 71
    199c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	4c f5       	brge	.+82     	; 0x19f6 <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e2       	ldi	r20, 0x20	; 32
    19b2:	51 e4       	ldi	r21, 0x41	; 65
    19b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	cd 01       	movw	r24, r26
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	9e 83       	std	Y+6, r25	; 0x06
    19ca:	8d 83       	std	Y+5, r24	; 0x05
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <H_LCD_void_sendData+0x1cc>
    19ce:	88 ec       	ldi	r24, 0xC8	; 200
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9c 83       	std	Y+4, r25	; 0x04
    19d4:	8b 83       	std	Y+3, r24	; 0x03
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	9c 81       	ldd	r25, Y+4	; 0x04
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <H_LCD_void_sendData+0x1ba>
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f7       	brne	.-38     	; 0x19ce <H_LCD_void_sendData+0x1ae>
    19f4:	14 c0       	rjmp	.+40     	; 0x1a1e <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f6:	6f 81       	ldd	r22, Y+7	; 0x07
    19f8:	78 85       	ldd	r23, Y+8	; 0x08
    19fa:	89 85       	ldd	r24, Y+9	; 0x09
    19fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	f1 f7       	brne	.-4      	; 0x1a16 <H_LCD_void_sendData+0x1f6>
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    1a1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a20:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <H_LCD_void_latchByte>
}
    1a24:	6d 96       	adiw	r28, 0x1d	; 29
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	6d 97       	sbiw	r28, 0x1d	; 29
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1a4c:	80 91 b4 01 	lds	r24, 0x01B4
    1a50:	90 91 b5 01 	lds	r25, 0x01B5
    1a54:	63 e0       	ldi	r22, 0x03	; 3
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e8       	ldi	r26, 0x80	; 128
    1a62:	bf e3       	ldi	r27, 0x3F	; 63
    1a64:	89 8f       	std	Y+25, r24	; 0x19
    1a66:	9a 8f       	std	Y+26, r25	; 0x1a
    1a68:	ab 8f       	std	Y+27, r26	; 0x1b
    1a6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a ef       	ldi	r20, 0xFA	; 250
    1a7a:	54 e4       	ldi	r21, 0x44	; 68
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8d 8b       	std	Y+21, r24	; 0x15
    1a86:	9e 8b       	std	Y+22, r25	; 0x16
    1a88:	af 8b       	std	Y+23, r26	; 0x17
    1a8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a90:	8f 89       	ldd	r24, Y+23	; 0x17
    1a92:	98 8d       	ldd	r25, Y+24	; 0x18
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    1aae:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1acc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9c 8b       	std	Y+20, r25	; 0x14
    1aec:	8b 8b       	std	Y+19, r24	; 0x13
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <H_LCD_void_sendCommand+0xd8>
    1af0:	88 ec       	ldi	r24, 0xC8	; 200
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9a 8b       	std	Y+18, r25	; 0x12
    1af6:	89 8b       	std	Y+17, r24	; 0x11
    1af8:	89 89       	ldd	r24, Y+17	; 0x11
    1afa:	9a 89       	ldd	r25, Y+18	; 0x12
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <H_LCD_void_sendCommand+0xc6>
    1b00:	9a 8b       	std	Y+18, r25	; 0x12
    1b02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	8b 89       	ldd	r24, Y+19	; 0x13
    1b06:	9c 89       	ldd	r25, Y+20	; 0x14
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	9c 8b       	std	Y+20, r25	; 0x14
    1b0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b10:	9c 89       	ldd	r25, Y+20	; 0x14
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <H_LCD_void_sendCommand+0xba>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9c 8b       	std	Y+20, r25	; 0x14
    1b2a:	8b 8b       	std	Y+19, r24	; 0x13
    1b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b30:	98 8b       	std	Y+16, r25	; 0x10
    1b32:	8f 87       	std	Y+15, r24	; 0x0f
    1b34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b36:	98 89       	ldd	r25, Y+16	; 0x10
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <H_LCD_void_sendCommand+0x102>
    1b3c:	98 8b       	std	Y+16, r25	; 0x10
    1b3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1b40:	80 91 b4 01 	lds	r24, 0x01B4
    1b44:	90 91 b5 01 	lds	r25, 0x01B5
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	8b 87       	std	Y+11, r24	; 0x0b
    1b5a:	9c 87       	std	Y+12, r25	; 0x0c
    1b5c:	ad 87       	std	Y+13, r26	; 0x0d
    1b5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8f 83       	std	Y+7, r24	; 0x07
    1b7a:	98 87       	std	Y+8, r25	; 0x08
    1b7c:	a9 87       	std	Y+9, r26	; 0x09
    1b7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b80:	6f 81       	ldd	r22, Y+7	; 0x07
    1b82:	78 85       	ldd	r23, Y+8	; 0x08
    1b84:	89 85       	ldd	r24, Y+9	; 0x09
    1b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1ba2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba4:	78 85       	ldd	r23, Y+8	; 0x08
    1ba6:	89 85       	ldd	r24, Y+9	; 0x09
    1ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9e 83       	std	Y+6, r25	; 0x06
    1be0:	8d 83       	std	Y+5, r24	; 0x05
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <H_LCD_void_sendCommand+0x1cc>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	9c 83       	std	Y+4, r25	; 0x04
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <H_LCD_void_sendCommand+0x1ba>
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	8d 81       	ldd	r24, Y+5	; 0x05
    1c04:	9e 81       	ldd	r25, Y+6	; 0x06
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <H_LCD_void_sendCommand+0x1ae>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	8d 81       	ldd	r24, Y+5	; 0x05
    1c22:	9e 81       	ldd	r25, Y+6	; 0x06
    1c24:	9a 83       	std	Y+2, r25	; 0x02
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <H_LCD_void_sendCommand+0x1f6>
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    1c34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c36:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <H_LCD_void_latchByte>
}
    1c3a:	6d 96       	adiw	r28, 0x1d	; 29
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <H_LCD_void_sendString+0x6>
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	9b 83       	std	Y+3, r25	; 0x03
    1c5a:	8a 83       	std	Y+2, r24	; 0x02
    1c5c:	0e c0       	rjmp	.+28     	; 0x1c7a <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	9b 81       	ldd	r25, Y+3	; 0x03
    1c68:	fc 01       	movw	r30, r24
    1c6a:	e2 0f       	add	r30, r18
    1c6c:	f3 1f       	adc	r31, r19
    1c6e:	80 81       	ld	r24, Z
    1c70:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
		i++;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	8f 5f       	subi	r24, 0xFF	; 255
    1c78:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	9b 81       	ldd	r25, Y+3	; 0x03
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	80 81       	ld	r24, Z
    1c8c:	88 23       	and	r24, r24
    1c8e:	39 f7       	brne	.-50     	; 0x1c5e <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1c90:	0f 90       	pop	r0
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	6c 97       	sbiw	r28, 0x1c	; 28
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1cb0:	80 91 b4 01 	lds	r24, 0x01B4
    1cb4:	90 91 b5 01 	lds	r25, 0x01B5
    1cb8:	63 e0       	ldi	r22, 0x03	; 3
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e8       	ldi	r26, 0x80	; 128
    1cc6:	bf e3       	ldi	r27, 0x3F	; 63
    1cc8:	89 8f       	std	Y+25, r24	; 0x19
    1cca:	9a 8f       	std	Y+26, r25	; 0x1a
    1ccc:	ab 8f       	std	Y+27, r26	; 0x1b
    1cce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	4a ef       	ldi	r20, 0xFA	; 250
    1cde:	54 e4       	ldi	r21, 0x44	; 68
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8d 8b       	std	Y+21, r24	; 0x15
    1cea:	9e 8b       	std	Y+22, r25	; 0x16
    1cec:	af 8b       	std	Y+23, r26	; 0x17
    1cee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf0:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf2:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf4:	8f 89       	ldd	r24, Y+23	; 0x17
    1cf6:	98 8d       	ldd	r25, Y+24	; 0x18
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	2c f4       	brge	.+10     	; 0x1d12 <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	9c 8b       	std	Y+20, r25	; 0x14
    1d0e:	8b 8b       	std	Y+19, r24	; 0x13
    1d10:	3f c0       	rjmp	.+126    	; 0x1d90 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    1d12:	6d 89       	ldd	r22, Y+21	; 0x15
    1d14:	7e 89       	ldd	r23, Y+22	; 0x16
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	4c f5       	brge	.+82     	; 0x1d7c <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e2       	ldi	r20, 0x20	; 32
    1d38:	51 e4       	ldi	r21, 0x41	; 65
    1d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9c 8b       	std	Y+20, r25	; 0x14
    1d50:	8b 8b       	std	Y+19, r24	; 0x13
    1d52:	0f c0       	rjmp	.+30     	; 0x1d72 <H_LCD_void_clearDisplay+0xd6>
    1d54:	88 ec       	ldi	r24, 0xC8	; 200
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	9a 8b       	std	Y+18, r25	; 0x12
    1d5a:	89 8b       	std	Y+17, r24	; 0x11
    1d5c:	89 89       	ldd	r24, Y+17	; 0x11
    1d5e:	9a 89       	ldd	r25, Y+18	; 0x12
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <H_LCD_void_clearDisplay+0xc4>
    1d64:	9a 8b       	std	Y+18, r25	; 0x12
    1d66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d68:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	9c 8b       	std	Y+20, r25	; 0x14
    1d70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	69 f7       	brne	.-38     	; 0x1d54 <H_LCD_void_clearDisplay+0xb8>
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d80:	8f 89       	ldd	r24, Y+23	; 0x17
    1d82:	98 8d       	ldd	r25, Y+24	; 0x18
    1d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9c 8b       	std	Y+20, r25	; 0x14
    1d8e:	8b 8b       	std	Y+19, r24	; 0x13
    1d90:	8b 89       	ldd	r24, Y+19	; 0x13
    1d92:	9c 89       	ldd	r25, Y+20	; 0x14
    1d94:	98 8b       	std	Y+16, r25	; 0x10
    1d96:	8f 87       	std	Y+15, r24	; 0x0f
    1d98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9a:	98 89       	ldd	r25, Y+16	; 0x10
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <H_LCD_void_clearDisplay+0x100>
    1da0:	98 8b       	std	Y+16, r25	; 0x10
    1da2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1da4:	80 91 b4 01 	lds	r24, 0x01B4
    1da8:	90 91 b5 01 	lds	r25, 0x01B5
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf e3       	ldi	r27, 0x3F	; 63
    1dbc:	8b 87       	std	Y+11, r24	; 0x0b
    1dbe:	9c 87       	std	Y+12, r25	; 0x0c
    1dc0:	ad 87       	std	Y+13, r26	; 0x0d
    1dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a ef       	ldi	r20, 0xFA	; 250
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	8f 83       	std	Y+7, r24	; 0x07
    1dde:	98 87       	std	Y+8, r25	; 0x08
    1de0:	a9 87       	std	Y+9, r26	; 0x09
    1de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de4:	6f 81       	ldd	r22, Y+7	; 0x07
    1de6:	78 85       	ldd	r23, Y+8	; 0x08
    1de8:	89 85       	ldd	r24, Y+9	; 0x09
    1dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e 83       	std	Y+6, r25	; 0x06
    1e02:	8d 83       	std	Y+5, r24	; 0x05
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9e 83       	std	Y+6, r25	; 0x06
    1e44:	8d 83       	std	Y+5, r24	; 0x05
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <H_LCD_void_clearDisplay+0x1ca>
    1e48:	88 ec       	ldi	r24, 0xC8	; 200
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9c 83       	std	Y+4, r25	; 0x04
    1e4e:	8b 83       	std	Y+3, r24	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <H_LCD_void_clearDisplay+0x1b8>
    1e58:	9c 83       	std	Y+4, r25	; 0x04
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <H_LCD_void_clearDisplay+0x1ac>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	6f 81       	ldd	r22, Y+7	; 0x07
    1e72:	78 85       	ldd	r23, Y+8	; 0x08
    1e74:	89 85       	ldd	r24, Y+9	; 0x09
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	9a 83       	std	Y+2, r25	; 0x02
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <H_LCD_void_clearDisplay+0x1f4>
    1e94:	9a 83       	std	Y+2, r25	; 0x02
    1e96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <H_LCD_void_latchByte>
}
    1e9e:	6c 96       	adiw	r28, 0x1c	; 28
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <H_LCD_void_gotoXY+0x6>
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <H_LCD_void_gotoXY+0x8>
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
    1ec0:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    1ec2:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	c1 f0       	breq	.+48     	; 0x1f08 <H_LCD_void_gotoXY+0x58>
    1ed8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eda:	3d 81       	ldd	r19, Y+5	; 0x05
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <H_LCD_void_gotoXY+0x3c>
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <H_LCD_void_gotoXY+0x52>
    1eea:	19 c0       	rjmp	.+50     	; 0x1f1e <H_LCD_void_gotoXY+0x6e>
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	69 f0       	breq	.+26     	; 0x1f10 <H_LCD_void_gotoXY+0x60>
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <H_LCD_void_gotoXY+0x68>
    1f00:	0e c0       	rjmp	.+28     	; 0x1f1e <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	0b c0       	rjmp	.+22     	; 0x1f1e <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	80 5c       	subi	r24, 0xC0	; 192
    1f0c:	89 83       	std	Y+1, r24	; 0x01
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	80 5f       	subi	r24, 0xF0	; 240
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	80 5b       	subi	r24, 0xB0	; 176
    1f1c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	80 68       	ori	r24, 0x80	; 128
    1f22:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
}
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	08 95       	ret

00001f36 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1f36:	df 93       	push	r29
    1f38:	cf 93       	push	r28
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	e9 97       	sbiw	r28, 0x39	; 57
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    1f4c:	20 91 b6 01 	lds	r18, 0x01B6
    1f50:	30 91 b7 01 	lds	r19, 0x01B7
    1f54:	89 ad       	ldd	r24, Y+57	; 0x39
    1f56:	48 2f       	mov	r20, r24
    1f58:	44 1f       	adc	r20, r20
    1f5a:	44 27       	eor	r20, r20
    1f5c:	44 1f       	adc	r20, r20
    1f5e:	c9 01       	movw	r24, r18
    1f60:	64 e0       	ldi	r22, 0x04	; 4
    1f62:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    1f66:	20 91 b6 01 	lds	r18, 0x01B6
    1f6a:	30 91 b7 01 	lds	r19, 0x01B7
    1f6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f70:	82 95       	swap	r24
    1f72:	86 95       	lsr	r24
    1f74:	86 95       	lsr	r24
    1f76:	83 70       	andi	r24, 0x03	; 3
    1f78:	48 2f       	mov	r20, r24
    1f7a:	41 70       	andi	r20, 0x01	; 1
    1f7c:	c9 01       	movw	r24, r18
    1f7e:	62 e0       	ldi	r22, 0x02	; 2
    1f80:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    1f84:	20 91 b6 01 	lds	r18, 0x01B6
    1f88:	30 91 b7 01 	lds	r19, 0x01B7
    1f8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f8e:	82 95       	swap	r24
    1f90:	86 95       	lsr	r24
    1f92:	87 70       	andi	r24, 0x07	; 7
    1f94:	48 2f       	mov	r20, r24
    1f96:	41 70       	andi	r20, 0x01	; 1
    1f98:	c9 01       	movw	r24, r18
    1f9a:	61 e0       	ldi	r22, 0x01	; 1
    1f9c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    1fa0:	20 91 b6 01 	lds	r18, 0x01B6
    1fa4:	30 91 b7 01 	lds	r19, 0x01B7
    1fa8:	89 ad       	ldd	r24, Y+57	; 0x39
    1faa:	82 95       	swap	r24
    1fac:	8f 70       	andi	r24, 0x0F	; 15
    1fae:	48 2f       	mov	r20, r24
    1fb0:	41 70       	andi	r20, 0x01	; 1
    1fb2:	c9 01       	movw	r24, r18
    1fb4:	60 e0       	ldi	r22, 0x00	; 0
    1fb6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1fba:	80 91 b4 01 	lds	r24, 0x01B4
    1fbe:	90 91 b5 01 	lds	r25, 0x01B5
    1fc2:	62 e0       	ldi	r22, 0x02	; 2
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e8       	ldi	r26, 0x80	; 128
    1fd0:	bf e3       	ldi	r27, 0x3F	; 63
    1fd2:	8d ab       	std	Y+53, r24	; 0x35
    1fd4:	9e ab       	std	Y+54, r25	; 0x36
    1fd6:	af ab       	std	Y+55, r26	; 0x37
    1fd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	6d a9       	ldd	r22, Y+53	; 0x35
    1fdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fde:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a ef       	ldi	r20, 0xFA	; 250
    1fe8:	54 e4       	ldi	r21, 0x44	; 68
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	89 ab       	std	Y+49, r24	; 0x31
    1ff4:	9a ab       	std	Y+50, r25	; 0x32
    1ff6:	ab ab       	std	Y+51, r26	; 0x33
    1ff8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ffa:	69 a9       	ldd	r22, Y+49	; 0x31
    1ffc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ffe:	8b a9       	ldd	r24, Y+51	; 0x33
    2000:	9c a9       	ldd	r25, Y+52	; 0x34
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	98 ab       	std	Y+48, r25	; 0x30
    2018:	8f a7       	std	Y+47, r24	; 0x2f
    201a:	3f c0       	rjmp	.+126    	; 0x209a <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    201c:	69 a9       	ldd	r22, Y+49	; 0x31
    201e:	7a a9       	ldd	r23, Y+50	; 0x32
    2020:	8b a9       	ldd	r24, Y+51	; 0x33
    2022:	9c a9       	ldd	r25, Y+52	; 0x34
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	6d a9       	ldd	r22, Y+53	; 0x35
    2036:	7e a9       	ldd	r23, Y+54	; 0x36
    2038:	8f a9       	ldd	r24, Y+55	; 0x37
    203a:	98 ad       	ldd	r25, Y+56	; 0x38
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	98 ab       	std	Y+48, r25	; 0x30
    205a:	8f a7       	std	Y+47, r24	; 0x2f
    205c:	0f c0       	rjmp	.+30     	; 0x207c <H_LCD_void_latchByte+0x146>
    205e:	88 ec       	ldi	r24, 0xC8	; 200
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9e a7       	std	Y+46, r25	; 0x2e
    2064:	8d a7       	std	Y+45, r24	; 0x2d
    2066:	8d a5       	ldd	r24, Y+45	; 0x2d
    2068:	9e a5       	ldd	r25, Y+46	; 0x2e
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <H_LCD_void_latchByte+0x134>
    206e:	9e a7       	std	Y+46, r25	; 0x2e
    2070:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8f a5       	ldd	r24, Y+47	; 0x2f
    2074:	98 a9       	ldd	r25, Y+48	; 0x30
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8f a5       	ldd	r24, Y+47	; 0x2f
    207e:	98 a9       	ldd	r25, Y+48	; 0x30
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <H_LCD_void_latchByte+0x128>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	69 a9       	ldd	r22, Y+49	; 0x31
    2088:	7a a9       	ldd	r23, Y+50	; 0x32
    208a:	8b a9       	ldd	r24, Y+51	; 0x33
    208c:	9c a9       	ldd	r25, Y+52	; 0x34
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	98 ab       	std	Y+48, r25	; 0x30
    2098:	8f a7       	std	Y+47, r24	; 0x2f
    209a:	8f a5       	ldd	r24, Y+47	; 0x2f
    209c:	98 a9       	ldd	r25, Y+48	; 0x30
    209e:	9c a7       	std	Y+44, r25	; 0x2c
    20a0:	8b a7       	std	Y+43, r24	; 0x2b
    20a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <H_LCD_void_latchByte+0x170>
    20aa:	9c a7       	std	Y+44, r25	; 0x2c
    20ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    20ae:	80 91 b4 01 	lds	r24, 0x01B4
    20b2:	90 91 b5 01 	lds	r25, 0x01B5
    20b6:	62 e0       	ldi	r22, 0x02	; 2
    20b8:	40 e0       	ldi	r20, 0x00	; 0
    20ba:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 ea       	ldi	r26, 0xA0	; 160
    20c4:	b0 e4       	ldi	r27, 0x40	; 64
    20c6:	8f a3       	std	Y+39, r24	; 0x27
    20c8:	98 a7       	std	Y+40, r25	; 0x28
    20ca:	a9 a7       	std	Y+41, r26	; 0x29
    20cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6f a1       	ldd	r22, Y+39	; 0x27
    20d0:	78 a5       	ldd	r23, Y+40	; 0x28
    20d2:	89 a5       	ldd	r24, Y+41	; 0x29
    20d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8b a3       	std	Y+35, r24	; 0x23
    20e8:	9c a3       	std	Y+36, r25	; 0x24
    20ea:	ad a3       	std	Y+37, r26	; 0x25
    20ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20ee:	6b a1       	ldd	r22, Y+35	; 0x23
    20f0:	7c a1       	ldd	r23, Y+36	; 0x24
    20f2:	8d a1       	ldd	r24, Y+37	; 0x25
    20f4:	9e a1       	ldd	r25, Y+38	; 0x26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9a a3       	std	Y+34, r25	; 0x22
    210c:	89 a3       	std	Y+33, r24	; 0x21
    210e:	3f c0       	rjmp	.+126    	; 0x218e <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    2110:	6b a1       	ldd	r22, Y+35	; 0x23
    2112:	7c a1       	ldd	r23, Y+36	; 0x24
    2114:	8d a1       	ldd	r24, Y+37	; 0x25
    2116:	9e a1       	ldd	r25, Y+38	; 0x26
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6f a1       	ldd	r22, Y+39	; 0x27
    212a:	78 a5       	ldd	r23, Y+40	; 0x28
    212c:	89 a5       	ldd	r24, Y+41	; 0x29
    212e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9a a3       	std	Y+34, r25	; 0x22
    214e:	89 a3       	std	Y+33, r24	; 0x21
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <H_LCD_void_latchByte+0x23a>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	98 a3       	std	Y+32, r25	; 0x20
    2158:	8f 8f       	std	Y+31, r24	; 0x1f
    215a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    215c:	98 a1       	ldd	r25, Y+32	; 0x20
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <H_LCD_void_latchByte+0x228>
    2162:	98 a3       	std	Y+32, r25	; 0x20
    2164:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	89 a1       	ldd	r24, Y+33	; 0x21
    2168:	9a a1       	ldd	r25, Y+34	; 0x22
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <H_LCD_void_latchByte+0x21c>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6b a1       	ldd	r22, Y+35	; 0x23
    217c:	7c a1       	ldd	r23, Y+36	; 0x24
    217e:	8d a1       	ldd	r24, Y+37	; 0x25
    2180:	9e a1       	ldd	r25, Y+38	; 0x26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	89 a1       	ldd	r24, Y+33	; 0x21
    2190:	9a a1       	ldd	r25, Y+34	; 0x22
    2192:	9e 8f       	std	Y+30, r25	; 0x1e
    2194:	8d 8f       	std	Y+29, r24	; 0x1d
    2196:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2198:	9e 8d       	ldd	r25, Y+30	; 0x1e
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <H_LCD_void_latchByte+0x264>
    219e:	9e 8f       	std	Y+30, r25	; 0x1e
    21a0:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    21a2:	20 91 b6 01 	lds	r18, 0x01B6
    21a6:	30 91 b7 01 	lds	r19, 0x01B7
    21aa:	89 ad       	ldd	r24, Y+57	; 0x39
    21ac:	86 95       	lsr	r24
    21ae:	86 95       	lsr	r24
    21b0:	86 95       	lsr	r24
    21b2:	48 2f       	mov	r20, r24
    21b4:	41 70       	andi	r20, 0x01	; 1
    21b6:	c9 01       	movw	r24, r18
    21b8:	64 e0       	ldi	r22, 0x04	; 4
    21ba:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    21be:	20 91 b6 01 	lds	r18, 0x01B6
    21c2:	30 91 b7 01 	lds	r19, 0x01B7
    21c6:	89 ad       	ldd	r24, Y+57	; 0x39
    21c8:	86 95       	lsr	r24
    21ca:	86 95       	lsr	r24
    21cc:	48 2f       	mov	r20, r24
    21ce:	41 70       	andi	r20, 0x01	; 1
    21d0:	c9 01       	movw	r24, r18
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    21d8:	20 91 b6 01 	lds	r18, 0x01B6
    21dc:	30 91 b7 01 	lds	r19, 0x01B7
    21e0:	89 ad       	ldd	r24, Y+57	; 0x39
    21e2:	86 95       	lsr	r24
    21e4:	48 2f       	mov	r20, r24
    21e6:	41 70       	andi	r20, 0x01	; 1
    21e8:	c9 01       	movw	r24, r18
    21ea:	61 e0       	ldi	r22, 0x01	; 1
    21ec:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    21f0:	20 91 b6 01 	lds	r18, 0x01B6
    21f4:	30 91 b7 01 	lds	r19, 0x01B7
    21f8:	89 ad       	ldd	r24, Y+57	; 0x39
    21fa:	48 2f       	mov	r20, r24
    21fc:	41 70       	andi	r20, 0x01	; 1
    21fe:	c9 01       	movw	r24, r18
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    2206:	80 91 b4 01 	lds	r24, 0x01B4
    220a:	90 91 b5 01 	lds	r25, 0x01B5
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    2216:	80 e0       	ldi	r24, 0x00	; 0
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	a0 e8       	ldi	r26, 0x80	; 128
    221c:	bf e3       	ldi	r27, 0x3F	; 63
    221e:	89 8f       	std	Y+25, r24	; 0x19
    2220:	9a 8f       	std	Y+26, r25	; 0x1a
    2222:	ab 8f       	std	Y+27, r26	; 0x1b
    2224:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2226:	69 8d       	ldd	r22, Y+25	; 0x19
    2228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a ef       	ldi	r20, 0xFA	; 250
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8d 8b       	std	Y+21, r24	; 0x15
    2240:	9e 8b       	std	Y+22, r25	; 0x16
    2242:	af 8b       	std	Y+23, r26	; 0x17
    2244:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2246:	6d 89       	ldd	r22, Y+21	; 0x15
    2248:	7e 89       	ldd	r23, Y+22	; 0x16
    224a:	8f 89       	ldd	r24, Y+23	; 0x17
    224c:	98 8d       	ldd	r25, Y+24	; 0x18
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	2c f4       	brge	.+10     	; 0x2268 <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9c 8b       	std	Y+20, r25	; 0x14
    2264:	8b 8b       	std	Y+19, r24	; 0x13
    2266:	3f c0       	rjmp	.+126    	; 0x22e6 <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    2268:	6d 89       	ldd	r22, Y+21	; 0x15
    226a:	7e 89       	ldd	r23, Y+22	; 0x16
    226c:	8f 89       	ldd	r24, Y+23	; 0x17
    226e:	98 8d       	ldd	r25, Y+24	; 0x18
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	3f ef       	ldi	r19, 0xFF	; 255
    2274:	4f e7       	ldi	r20, 0x7F	; 127
    2276:	57 e4       	ldi	r21, 0x47	; 71
    2278:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    227c:	18 16       	cp	r1, r24
    227e:	4c f5       	brge	.+82     	; 0x22d2 <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2280:	69 8d       	ldd	r22, Y+25	; 0x19
    2282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e2       	ldi	r20, 0x20	; 32
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	bc 01       	movw	r22, r24
    229a:	cd 01       	movw	r24, r26
    229c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	9c 8b       	std	Y+20, r25	; 0x14
    22a6:	8b 8b       	std	Y+19, r24	; 0x13
    22a8:	0f c0       	rjmp	.+30     	; 0x22c8 <H_LCD_void_latchByte+0x392>
    22aa:	88 ec       	ldi	r24, 0xC8	; 200
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	9a 8b       	std	Y+18, r25	; 0x12
    22b0:	89 8b       	std	Y+17, r24	; 0x11
    22b2:	89 89       	ldd	r24, Y+17	; 0x11
    22b4:	9a 89       	ldd	r25, Y+18	; 0x12
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <H_LCD_void_latchByte+0x380>
    22ba:	9a 8b       	std	Y+18, r25	; 0x12
    22bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22be:	8b 89       	ldd	r24, Y+19	; 0x13
    22c0:	9c 89       	ldd	r25, Y+20	; 0x14
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	9c 8b       	std	Y+20, r25	; 0x14
    22c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ca:	9c 89       	ldd	r25, Y+20	; 0x14
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	69 f7       	brne	.-38     	; 0x22aa <H_LCD_void_latchByte+0x374>
    22d0:	14 c0       	rjmp	.+40     	; 0x22fa <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	9c 8b       	std	Y+20, r25	; 0x14
    22e4:	8b 8b       	std	Y+19, r24	; 0x13
    22e6:	8b 89       	ldd	r24, Y+19	; 0x13
    22e8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ea:	98 8b       	std	Y+16, r25	; 0x10
    22ec:	8f 87       	std	Y+15, r24	; 0x0f
    22ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f0:	98 89       	ldd	r25, Y+16	; 0x10
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <H_LCD_void_latchByte+0x3bc>
    22f6:	98 8b       	std	Y+16, r25	; 0x10
    22f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    22fa:	80 91 b4 01 	lds	r24, 0x01B4
    22fe:	90 91 b5 01 	lds	r25, 0x01B5
    2302:	62 e0       	ldi	r22, 0x02	; 2
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    230a:	80 e0       	ldi	r24, 0x00	; 0
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a0 ea       	ldi	r26, 0xA0	; 160
    2310:	b0 e4       	ldi	r27, 0x40	; 64
    2312:	8b 87       	std	Y+11, r24	; 0x0b
    2314:	9c 87       	std	Y+12, r25	; 0x0c
    2316:	ad 87       	std	Y+13, r26	; 0x0d
    2318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231a:	6b 85       	ldd	r22, Y+11	; 0x0b
    231c:	7c 85       	ldd	r23, Y+12	; 0x0c
    231e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2320:	9e 85       	ldd	r25, Y+14	; 0x0e
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a ef       	ldi	r20, 0xFA	; 250
    2328:	54 e4       	ldi	r21, 0x44	; 68
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	8f 83       	std	Y+7, r24	; 0x07
    2334:	98 87       	std	Y+8, r25	; 0x08
    2336:	a9 87       	std	Y+9, r26	; 0x09
    2338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233a:	6f 81       	ldd	r22, Y+7	; 0x07
    233c:	78 85       	ldd	r23, Y+8	; 0x08
    233e:	89 85       	ldd	r24, Y+9	; 0x09
    2340:	9a 85       	ldd	r25, Y+10	; 0x0a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e8       	ldi	r20, 0x80	; 128
    2348:	5f e3       	ldi	r21, 0x3F	; 63
    234a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    234e:	88 23       	and	r24, r24
    2350:	2c f4       	brge	.+10     	; 0x235c <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	3f c0       	rjmp	.+126    	; 0x23da <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    235c:	6f 81       	ldd	r22, Y+7	; 0x07
    235e:	78 85       	ldd	r23, Y+8	; 0x08
    2360:	89 85       	ldd	r24, Y+9	; 0x09
    2362:	9a 85       	ldd	r25, Y+10	; 0x0a
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	3f ef       	ldi	r19, 0xFF	; 255
    2368:	4f e7       	ldi	r20, 0x7F	; 127
    236a:	57 e4       	ldi	r21, 0x47	; 71
    236c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2370:	18 16       	cp	r1, r24
    2372:	4c f5       	brge	.+82     	; 0x23c6 <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	bc 01       	movw	r22, r24
    238e:	cd 01       	movw	r24, r26
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	0f c0       	rjmp	.+30     	; 0x23bc <H_LCD_void_latchByte+0x486>
    239e:	88 ec       	ldi	r24, 0xC8	; 200
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	9c 81       	ldd	r25, Y+4	; 0x04
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	f1 f7       	brne	.-4      	; 0x23aa <H_LCD_void_latchByte+0x474>
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b2:	8d 81       	ldd	r24, Y+5	; 0x05
    23b4:	9e 81       	ldd	r25, Y+6	; 0x06
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	9e 83       	std	Y+6, r25	; 0x06
    23ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	69 f7       	brne	.-38     	; 0x239e <H_LCD_void_latchByte+0x468>
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c6:	6f 81       	ldd	r22, Y+7	; 0x07
    23c8:	78 85       	ldd	r23, Y+8	; 0x08
    23ca:	89 85       	ldd	r24, Y+9	; 0x09
    23cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	8d 81       	ldd	r24, Y+5	; 0x05
    23dc:	9e 81       	ldd	r25, Y+6	; 0x06
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <H_LCD_void_latchByte+0x4b0>
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    23ee:	e9 96       	adiw	r28, 0x39	; 57
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <H_LCD_void_creatCustomChar+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <H_LCD_void_creatCustomChar+0x8>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9b 83       	std	Y+3, r25	; 0x03
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	f8 f4       	brcc	.+62     	; 0x2456 <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    2418:	8c 81       	ldd	r24, Y+4	; 0x04
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	08 96       	adiw	r24, 0x08	; 8
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    2430:	19 82       	std	Y+1, r1	; 0x01
    2432:	0e c0       	rjmp	.+28     	; 0x2450 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	9b 81       	ldd	r25, Y+3	; 0x03
    243e:	fc 01       	movw	r30, r24
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	80 81       	ld	r24, Z
    2446:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 30       	cpi	r24, 0x08	; 8
    2454:	78 f3       	brcs	.-34     	; 0x2434 <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	0f 92       	push	r0
    246a:	cd b7       	in	r28, 0x3d	; 61
    246c:	de b7       	in	r29, 0x3e	; 62
    246e:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	80 58       	subi	r24, 0x80	; 128
    2474:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>

}
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <H_LCD_void_displayHex+0x6>
    248c:	00 d0       	rcall	.+0      	; 0x248e <H_LCD_void_displayHex+0x8>
    248e:	00 d0       	rcall	.+0      	; 0x2490 <H_LCD_void_displayHex+0xa>
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    2496:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    2498:	80 e6       	ldi	r24, 0x60	; 96
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	82 95       	swap	r24
    24a4:	8f 70       	andi	r24, 0x0F	; 15
    24a6:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	3e 83       	std	Y+6, r19	; 0x06
    24b0:	2d 83       	std	Y+5, r18	; 0x05
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	8b 30       	cpi	r24, 0x0B	; 11
    24b8:	91 05       	cpc	r25, r1
    24ba:	69 f1       	breq	.+90     	; 0x2516 <H_LCD_void_displayHex+0x90>
    24bc:	2d 81       	ldd	r18, Y+5	; 0x05
    24be:	3e 81       	ldd	r19, Y+6	; 0x06
    24c0:	2c 30       	cpi	r18, 0x0C	; 12
    24c2:	31 05       	cpc	r19, r1
    24c4:	54 f4       	brge	.+20     	; 0x24da <H_LCD_void_displayHex+0x54>
    24c6:	8d 81       	ldd	r24, Y+5	; 0x05
    24c8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ca:	99 23       	and	r25, r25
    24cc:	bc f1       	brlt	.+110    	; 0x253c <H_LCD_void_displayHex+0xb6>
    24ce:	2d 81       	ldd	r18, Y+5	; 0x05
    24d0:	3e 81       	ldd	r19, Y+6	; 0x06
    24d2:	2a 30       	cpi	r18, 0x0A	; 10
    24d4:	31 05       	cpc	r19, r1
    24d6:	b4 f0       	brlt	.+44     	; 0x2504 <H_LCD_void_displayHex+0x7e>
    24d8:	1a c0       	rjmp	.+52     	; 0x250e <H_LCD_void_displayHex+0x88>
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	8d 30       	cpi	r24, 0x0D	; 13
    24e0:	91 05       	cpc	r25, r1
    24e2:	09 f1       	breq	.+66     	; 0x2526 <H_LCD_void_displayHex+0xa0>
    24e4:	2d 81       	ldd	r18, Y+5	; 0x05
    24e6:	3e 81       	ldd	r19, Y+6	; 0x06
    24e8:	2d 30       	cpi	r18, 0x0D	; 13
    24ea:	31 05       	cpc	r19, r1
    24ec:	c4 f0       	brlt	.+48     	; 0x251e <H_LCD_void_displayHex+0x98>
    24ee:	8d 81       	ldd	r24, Y+5	; 0x05
    24f0:	9e 81       	ldd	r25, Y+6	; 0x06
    24f2:	8e 30       	cpi	r24, 0x0E	; 14
    24f4:	91 05       	cpc	r25, r1
    24f6:	d9 f0       	breq	.+54     	; 0x252e <H_LCD_void_displayHex+0xa8>
    24f8:	2d 81       	ldd	r18, Y+5	; 0x05
    24fa:	3e 81       	ldd	r19, Y+6	; 0x06
    24fc:	2f 30       	cpi	r18, 0x0F	; 15
    24fe:	31 05       	cpc	r19, r1
    2500:	d1 f0       	breq	.+52     	; 0x2536 <H_LCD_void_displayHex+0xb0>
    2502:	1c c0       	rjmp	.+56     	; 0x253c <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 5d       	subi	r24, 0xD0	; 208
    2508:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    250c:	17 c0       	rjmp	.+46     	; 0x253c <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    250e:	81 e4       	ldi	r24, 0x41	; 65
    2510:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    2514:	13 c0       	rjmp	.+38     	; 0x253c <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    2516:	82 e4       	ldi	r24, 0x42	; 66
    2518:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    251c:	0f c0       	rjmp	.+30     	; 0x253c <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    251e:	83 e4       	ldi	r24, 0x43	; 67
    2520:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    2524:	0b c0       	rjmp	.+22     	; 0x253c <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    2526:	84 e4       	ldi	r24, 0x44	; 68
    2528:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    252c:	07 c0       	rjmp	.+14     	; 0x253c <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    252e:	85 e4       	ldi	r24, 0x45	; 69
    2530:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    2534:	03 c0       	rjmp	.+6      	; 0x253c <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    2536:	86 e4       	ldi	r24, 0x46	; 70
    2538:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	8f 70       	andi	r24, 0x0F	; 15
    2540:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	3c 83       	std	Y+4, r19	; 0x04
    254a:	2b 83       	std	Y+3, r18	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	8b 30       	cpi	r24, 0x0B	; 11
    2552:	91 05       	cpc	r25, r1
    2554:	69 f1       	breq	.+90     	; 0x25b0 <H_LCD_void_displayHex+0x12a>
    2556:	2b 81       	ldd	r18, Y+3	; 0x03
    2558:	3c 81       	ldd	r19, Y+4	; 0x04
    255a:	2c 30       	cpi	r18, 0x0C	; 12
    255c:	31 05       	cpc	r19, r1
    255e:	54 f4       	brge	.+20     	; 0x2574 <H_LCD_void_displayHex+0xee>
    2560:	8b 81       	ldd	r24, Y+3	; 0x03
    2562:	9c 81       	ldd	r25, Y+4	; 0x04
    2564:	99 23       	and	r25, r25
    2566:	bc f1       	brlt	.+110    	; 0x25d6 <H_LCD_void_displayHex+0x150>
    2568:	2b 81       	ldd	r18, Y+3	; 0x03
    256a:	3c 81       	ldd	r19, Y+4	; 0x04
    256c:	2a 30       	cpi	r18, 0x0A	; 10
    256e:	31 05       	cpc	r19, r1
    2570:	b4 f0       	brlt	.+44     	; 0x259e <H_LCD_void_displayHex+0x118>
    2572:	1a c0       	rjmp	.+52     	; 0x25a8 <H_LCD_void_displayHex+0x122>
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	8d 30       	cpi	r24, 0x0D	; 13
    257a:	91 05       	cpc	r25, r1
    257c:	09 f1       	breq	.+66     	; 0x25c0 <H_LCD_void_displayHex+0x13a>
    257e:	2b 81       	ldd	r18, Y+3	; 0x03
    2580:	3c 81       	ldd	r19, Y+4	; 0x04
    2582:	2d 30       	cpi	r18, 0x0D	; 13
    2584:	31 05       	cpc	r19, r1
    2586:	c4 f0       	brlt	.+48     	; 0x25b8 <H_LCD_void_displayHex+0x132>
    2588:	8b 81       	ldd	r24, Y+3	; 0x03
    258a:	9c 81       	ldd	r25, Y+4	; 0x04
    258c:	8e 30       	cpi	r24, 0x0E	; 14
    258e:	91 05       	cpc	r25, r1
    2590:	d9 f0       	breq	.+54     	; 0x25c8 <H_LCD_void_displayHex+0x142>
    2592:	2b 81       	ldd	r18, Y+3	; 0x03
    2594:	3c 81       	ldd	r19, Y+4	; 0x04
    2596:	2f 30       	cpi	r18, 0x0F	; 15
    2598:	31 05       	cpc	r19, r1
    259a:	d1 f0       	breq	.+52     	; 0x25d0 <H_LCD_void_displayHex+0x14a>
    259c:	1c c0       	rjmp	.+56     	; 0x25d6 <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	80 5d       	subi	r24, 0xD0	; 208
    25a2:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    25a6:	17 c0       	rjmp	.+46     	; 0x25d6 <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    25a8:	81 e4       	ldi	r24, 0x41	; 65
    25aa:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    25ae:	13 c0       	rjmp	.+38     	; 0x25d6 <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    25b0:	82 e4       	ldi	r24, 0x42	; 66
    25b2:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    25b8:	83 e4       	ldi	r24, 0x43	; 67
    25ba:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    25be:	0b c0       	rjmp	.+22     	; 0x25d6 <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    25c0:	84 e4       	ldi	r24, 0x44	; 68
    25c2:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    25c6:	07 c0       	rjmp	.+14     	; 0x25d6 <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    25c8:	85 e4       	ldi	r24, 0x45	; 69
    25ca:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    25d0:	86 e4       	ldi	r24, 0x46	; 70
    25d2:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
		break;
	}
}
    25d6:	26 96       	adiw	r28, 0x06	; 6
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	08 95       	ret

000025e8 <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    25e8:	df 93       	push	r29
    25ea:	cf 93       	push	r28
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <H_LCD_void_displayBinary+0x6>
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    25f4:	83 e6       	ldi	r24, 0x63	; 99
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    25fc:	19 82       	std	Y+1, r1	; 0x01
    25fe:	18 c0       	rjmp	.+48     	; 0x2630 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	48 2f       	mov	r20, r24
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	87 e0       	ldi	r24, 0x07	; 7
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	82 1b       	sub	r24, r18
    2612:	93 0b       	sbc	r25, r19
    2614:	9a 01       	movw	r18, r20
    2616:	02 c0       	rjmp	.+4      	; 0x261c <H_LCD_void_displayBinary+0x34>
    2618:	35 95       	asr	r19
    261a:	27 95       	ror	r18
    261c:	8a 95       	dec	r24
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <H_LCD_void_displayBinary+0x30>
    2620:	c9 01       	movw	r24, r18
    2622:	81 70       	andi	r24, 0x01	; 1
    2624:	80 5d       	subi	r24, 0xD0	; 208
    2626:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	88 30       	cpi	r24, 0x08	; 8
    2634:	28 f3       	brcs	.-54     	; 0x2600 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	2a 97       	sbiw	r28, 0x0a	; 10
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	6f 83       	std	Y+7, r22	; 0x07
    2656:	78 87       	std	Y+8, r23	; 0x08
    2658:	89 87       	std	Y+9, r24	; 0x09
    265a:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    265c:	1e 82       	std	Y+6, r1	; 0x06
    265e:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    2660:	8f 81       	ldd	r24, Y+7	; 0x07
    2662:	98 85       	ldd	r25, Y+8	; 0x08
    2664:	a9 85       	ldd	r26, Y+9	; 0x09
    2666:	ba 85       	ldd	r27, Y+10	; 0x0a
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	ab 83       	std	Y+3, r26	; 0x03
    266e:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	aa 27       	eor	r26, r26
    2682:	97 fd       	sbrc	r25, 7
    2684:	a0 95       	com	r26
    2686:	ba 2f       	mov	r27, r26
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 98 13 	call	0x2730	; 0x2730 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    2690:	8e e2       	ldi	r24, 0x2E	; 46
    2692:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
	if(val < 0)
    2696:	69 81       	ldd	r22, Y+1	; 0x01
    2698:	7a 81       	ldd	r23, Y+2	; 0x02
    269a:	8b 81       	ldd	r24, Y+3	; 0x03
    269c:	9c 81       	ldd	r25, Y+4	; 0x04
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	4c f4       	brge	.+18     	; 0x26c0 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	ab 81       	ldd	r26, Y+3	; 0x03
    26b4:	bc 81       	ldd	r27, Y+4	; 0x04
    26b6:	b0 58       	subi	r27, 0x80	; 128
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	ab 83       	std	Y+3, r26	; 0x03
    26be:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    26c0:	1e 82       	std	Y+6, r1	; 0x06
    26c2:	2a c0       	rjmp	.+84     	; 0x2718 <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    26c4:	69 81       	ldd	r22, Y+1	; 0x01
    26c6:	7a 81       	ldd	r23, Y+2	; 0x02
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	51 e4       	ldi	r21, 0x41	; 65
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	9a 83       	std	Y+2, r25	; 0x02
    26e0:	ab 83       	std	Y+3, r26	; 0x03
    26e2:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    26e4:	69 81       	ldd	r22, Y+1	; 0x01
    26e6:	7a 81       	ldd	r23, Y+2	; 0x02
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	9c 81       	ldd	r25, Y+4	; 0x04
    26ec:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	2a e0       	ldi	r18, 0x0A	; 10
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	50 e0       	ldi	r21, 0x00	; 0
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__divmodsi4>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    270a:	8d 81       	ldd	r24, Y+5	; 0x05
    270c:	80 5d       	subi	r24, 0xD0	; 208
    270e:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    2712:	8e 81       	ldd	r24, Y+6	; 0x06
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	8e 83       	std	Y+6, r24	; 0x06
    2718:	8e 81       	ldd	r24, Y+6	; 0x06
    271a:	83 30       	cpi	r24, 0x03	; 3
    271c:	98 f2       	brcs	.-90     	; 0x26c4 <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    271e:	2a 96       	adiw	r28, 0x0a	; 10
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	6c 97       	sbiw	r28, 0x1c	; 28
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	69 8f       	std	Y+25, r22	; 0x19
    2746:	7a 8f       	std	Y+26, r23	; 0x1a
    2748:	8b 8f       	std	Y+27, r24	; 0x1b
    274a:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    274c:	84 e1       	ldi	r24, 0x14	; 20
    274e:	fe 01       	movw	r30, r28
    2750:	35 96       	adiw	r30, 0x05	; 5
    2752:	df 01       	movw	r26, r30
    2754:	98 2f       	mov	r25, r24
    2756:	1d 92       	st	X+, r1
    2758:	9a 95       	dec	r25
    275a:	e9 f7       	brne	.-6      	; 0x2756 <H_LCD_void_sendIntNum+0x26>
    275c:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    275e:	89 8d       	ldd	r24, Y+25	; 0x19
    2760:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2762:	9a 83       	std	Y+2, r25	; 0x02
    2764:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	9a 81       	ldd	r25, Y+2	; 0x02
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	09 f4       	brne	.+2      	; 0x2770 <H_LCD_void_sendIntNum+0x40>
    276e:	5d c0       	rjmp	.+186    	; 0x282a <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	99 23       	and	r25, r25
    2776:	c4 f4       	brge	.+48     	; 0x27a8 <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    2778:	8d e2       	ldi	r24, 0x2D	; 45
    277a:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
			val *=-1;
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	9a 81       	ldd	r25, Y+2	; 0x02
    2782:	90 95       	com	r25
    2784:	81 95       	neg	r24
    2786:	9f 4f       	sbci	r25, 0xFF	; 255
    2788:	9a 83       	std	Y+2, r25	; 0x02
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	8f 5f       	subi	r24, 0xFF	; 255
    2792:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	9a 81       	ldd	r25, Y+2	; 0x02
    2798:	2a e0       	ldi	r18, 0x0A	; 10
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	b9 01       	movw	r22, r18
    279e:	0e 94 56 22 	call	0x44ac	; 0x44ac <__divmodhi4>
    27a2:	cb 01       	movw	r24, r22
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	18 16       	cp	r1, r24
    27ae:	19 06       	cpc	r1, r25
    27b0:	74 f3       	brlt	.-36     	; 0x278e <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    27b2:	89 8d       	ldd	r24, Y+25	; 0x19
    27b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27b6:	9a 83       	std	Y+2, r25	; 0x02
    27b8:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	9a 81       	ldd	r25, Y+2	; 0x02
    27be:	18 16       	cp	r1, r24
    27c0:	19 06       	cpc	r1, r25
    27c2:	3c f0       	brlt	.+14     	; 0x27d2 <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	90 95       	com	r25
    27ca:	81 95       	neg	r24
    27cc:	9f 4f       	sbci	r25, 0xFF	; 255
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	81 50       	subi	r24, 0x01	; 1
    27d6:	8c 83       	std	Y+4, r24	; 0x04
    27d8:	20 c0       	rjmp	.+64     	; 0x281a <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    27da:	8c 81       	ldd	r24, Y+4	; 0x04
    27dc:	e8 2f       	mov	r30, r24
    27de:	ff 27       	eor	r31, r31
    27e0:	e7 fd       	sbrc	r30, 7
    27e2:	f0 95       	com	r31
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	2a e0       	ldi	r18, 0x0A	; 10
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	b9 01       	movw	r22, r18
    27ee:	0e 94 56 22 	call	0x44ac	; 0x44ac <__divmodhi4>
    27f2:	80 5d       	subi	r24, 0xD0	; 208
    27f4:	28 2f       	mov	r18, r24
    27f6:	ce 01       	movw	r24, r28
    27f8:	05 96       	adiw	r24, 0x05	; 5
    27fa:	e8 0f       	add	r30, r24
    27fc:	f9 1f       	adc	r31, r25
    27fe:	20 83       	st	Z, r18
			val /= 10;
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	9a 81       	ldd	r25, Y+2	; 0x02
    2804:	2a e0       	ldi	r18, 0x0A	; 10
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	b9 01       	movw	r22, r18
    280a:	0e 94 56 22 	call	0x44ac	; 0x44ac <__divmodhi4>
    280e:	cb 01       	movw	r24, r22
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    2814:	8c 81       	ldd	r24, Y+4	; 0x04
    2816:	81 50       	subi	r24, 0x01	; 1
    2818:	8c 83       	std	Y+4, r24	; 0x04
    281a:	8c 81       	ldd	r24, Y+4	; 0x04
    281c:	88 23       	and	r24, r24
    281e:	ec f6       	brge	.-70     	; 0x27da <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    2820:	ce 01       	movw	r24, r28
    2822:	05 96       	adiw	r24, 0x05	; 5
    2824:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <H_LCD_void_sendString>
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    282a:	80 e3       	ldi	r24, 0x30	; 48
    282c:	0e 94 10 0c 	call	0x1820	; 0x1820 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    2830:	6c 96       	adiw	r28, 0x1c	; 28
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <LM35_SENSOR_init>:
u16 adc_value = 0;
ADC_INIT_CONFIG adc_config = {ADC_INT_ENABLE, AVCC, DIVISION_FACTOR_64, RIGHT_ADJUST};

/* Initializing the ADC */
void LM35_SENSOR_init(void)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
	ADC_Init(&adc_config);
    284a:	80 eb       	ldi	r24, 0xB0	; 176
    284c:	91 e0       	ldi	r25, 0x01	; 1
    284e:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_Init>
	/* Read ADC channel where the temperature sensor is connected using callback function */
	ADC_getDigitalValueAsynchCallBack(SENSOR_CHANNEL_ID, valueUpdate);
    2852:	25 e6       	ldi	r18, 0x65	; 101
    2854:	34 e1       	ldi	r19, 0x14	; 20
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	b9 01       	movw	r22, r18
    285a:	0e 94 0b 08 	call	0x1016	; 0x1016 <ADC_getDigitalValueAsynchCallBack>
}
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <LM35_SENSOR_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
u8 LM35_SENSOR_getTemperature(void)
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	0f 92       	push	r0
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
	u8 temp_value = 0;
    286e:	19 82       	std	Y+1, r1	; 0x01


	/* Calculate the temperature from the ADC value*/
	temp_value = (u8)(((u32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2870:	80 91 d4 01 	lds	r24, 0x01D4
    2874:	90 91 d5 01 	lds	r25, 0x01D5
    2878:	cc 01       	movw	r24, r24
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	2e ee       	ldi	r18, 0xEE	; 238
    2880:	32 e0       	ldi	r19, 0x02	; 2
    2882:	40 e0       	ldi	r20, 0x00	; 0
    2884:	50 e0       	ldi	r21, 0x00	; 0
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 37 22 	call	0x446e	; 0x446e <__mulsi3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 ed       	ldi	r19, 0xD0	; 208
    28a6:	4f eb       	ldi	r20, 0xBF	; 191
    28a8:	54 e4       	ldi	r21, 0x44	; 68
    28aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	89 83       	std	Y+1, r24	; 0x01

	return temp_value;
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28c2:	0f 90       	pop	r0
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	08 95       	ret

000028ca <valueUpdate>:

void valueUpdate(u16 val)
{
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <valueUpdate+0x6>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01

	adc_value = val;
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	90 93 d5 01 	sts	0x01D5, r25
    28e0:	80 93 d4 01 	sts	0x01D4, r24
}
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	cf 91       	pop	r28
    28ea:	df 91       	pop	r29
    28ec:	08 95       	ret

000028ee <Timer0_Init>:
u8 remCounter = 0;

void(*ptrCallBack)(void) = NULL_PTR;

void Timer0_Init(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <Timer0_Init+0x6>
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <Timer0_Init+0x8>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    28fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2900:	fa 81       	ldd	r31, Y+2	; 0x02
    2902:	84 81       	ldd	r24, Z+4	; 0x04
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	3c 83       	std	Y+4, r19	; 0x04
    290a:	2b 83       	std	Y+3, r18	; 0x03
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	81 30       	cpi	r24, 0x01	; 1
    2912:	91 05       	cpc	r25, r1
    2914:	09 f4       	brne	.+2      	; 0x2918 <Timer0_Init+0x2a>
    2916:	41 c0       	rjmp	.+130    	; 0x299a <Timer0_Init+0xac>
    2918:	2b 81       	ldd	r18, Y+3	; 0x03
    291a:	3c 81       	ldd	r19, Y+4	; 0x04
    291c:	22 30       	cpi	r18, 0x02	; 2
    291e:	31 05       	cpc	r19, r1
    2920:	2c f4       	brge	.+10     	; 0x292c <Timer0_Init+0x3e>
    2922:	8b 81       	ldd	r24, Y+3	; 0x03
    2924:	9c 81       	ldd	r25, Y+4	; 0x04
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	71 f0       	breq	.+28     	; 0x2946 <Timer0_Init+0x58>
    292a:	a8 c0       	rjmp	.+336    	; 0x2a7c <Timer0_Init+0x18e>
    292c:	2b 81       	ldd	r18, Y+3	; 0x03
    292e:	3c 81       	ldd	r19, Y+4	; 0x04
    2930:	22 30       	cpi	r18, 0x02	; 2
    2932:	31 05       	cpc	r19, r1
    2934:	09 f4       	brne	.+2      	; 0x2938 <Timer0_Init+0x4a>
    2936:	55 c0       	rjmp	.+170    	; 0x29e2 <Timer0_Init+0xf4>
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	83 30       	cpi	r24, 0x03	; 3
    293e:	91 05       	cpc	r25, r1
    2940:	09 f4       	brne	.+2      	; 0x2944 <Timer0_Init+0x56>
    2942:	79 c0       	rjmp	.+242    	; 0x2a36 <Timer0_Init+0x148>
    2944:	9b c0       	rjmp	.+310    	; 0x2a7c <Timer0_Init+0x18e>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    2946:	e3 e5       	ldi	r30, 0x53	; 83
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	80 68       	ori	r24, 0x80	; 128
    294e:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2950:	a3 e5       	ldi	r26, 0x53	; 83
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e9 81       	ldd	r30, Y+1	; 0x01
    2956:	fa 81       	ldd	r31, Y+2	; 0x02
    2958:	80 81       	ld	r24, Z
    295a:	86 95       	lsr	r24
    295c:	81 70       	andi	r24, 0x01	; 1
    295e:	81 70       	andi	r24, 0x01	; 1
    2960:	98 2f       	mov	r25, r24
    2962:	92 95       	swap	r25
    2964:	99 0f       	add	r25, r25
    2966:	90 7e       	andi	r25, 0xE0	; 224
    2968:	8c 91       	ld	r24, X
    296a:	8f 7d       	andi	r24, 0xDF	; 223
    296c:	89 2b       	or	r24, r25
    296e:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2970:	a3 e5       	ldi	r26, 0x53	; 83
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e9 81       	ldd	r30, Y+1	; 0x01
    2976:	fa 81       	ldd	r31, Y+2	; 0x02
    2978:	80 81       	ld	r24, Z
    297a:	81 70       	andi	r24, 0x01	; 1
    297c:	81 70       	andi	r24, 0x01	; 1
    297e:	98 2f       	mov	r25, r24
    2980:	92 95       	swap	r25
    2982:	90 7f       	andi	r25, 0xF0	; 240
    2984:	8c 91       	ld	r24, X
    2986:	8f 7e       	andi	r24, 0xEF	; 239
    2988:	89 2b       	or	r24, r25
    298a:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    298c:	ac e5       	ldi	r26, 0x5C	; 92
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	86 81       	ldd	r24, Z+6	; 0x06
    2996:	8c 93       	st	X, r24
    2998:	71 c0       	rjmp	.+226    	; 0x2a7c <Timer0_Init+0x18e>
		break;
	case TIMER0_PHASE_CORRECT_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    299a:	e3 e5       	ldi	r30, 0x53	; 83
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 77       	andi	r24, 0x7F	; 127
    29a2:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    29a4:	a3 e5       	ldi	r26, 0x53	; 83
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e9 81       	ldd	r30, Y+1	; 0x01
    29aa:	fa 81       	ldd	r31, Y+2	; 0x02
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	86 95       	lsr	r24
    29b0:	81 70       	andi	r24, 0x01	; 1
    29b2:	81 70       	andi	r24, 0x01	; 1
    29b4:	98 2f       	mov	r25, r24
    29b6:	92 95       	swap	r25
    29b8:	99 0f       	add	r25, r25
    29ba:	90 7e       	andi	r25, 0xE0	; 224
    29bc:	8c 91       	ld	r24, X
    29be:	8f 7d       	andi	r24, 0xDF	; 223
    29c0:	89 2b       	or	r24, r25
    29c2:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    29c4:	a3 e5       	ldi	r26, 0x53	; 83
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	81 70       	andi	r24, 0x01	; 1
    29d0:	81 70       	andi	r24, 0x01	; 1
    29d2:	98 2f       	mov	r25, r24
    29d4:	92 95       	swap	r25
    29d6:	90 7f       	andi	r25, 0xF0	; 240
    29d8:	8c 91       	ld	r24, X
    29da:	8f 7e       	andi	r24, 0xEF	; 239
    29dc:	89 2b       	or	r24, r25
    29de:	8c 93       	st	X, r24
    29e0:	4d c0       	rjmp	.+154    	; 0x2a7c <Timer0_Init+0x18e>
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	case TIMER0_CTC_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    29e2:	e3 e5       	ldi	r30, 0x53	; 83
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 68       	ori	r24, 0x80	; 128
    29ea:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    29ec:	a3 e5       	ldi	r26, 0x53	; 83
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	80 81       	ld	r24, Z
    29f6:	86 95       	lsr	r24
    29f8:	81 70       	andi	r24, 0x01	; 1
    29fa:	81 70       	andi	r24, 0x01	; 1
    29fc:	98 2f       	mov	r25, r24
    29fe:	92 95       	swap	r25
    2a00:	99 0f       	add	r25, r25
    2a02:	90 7e       	andi	r25, 0xE0	; 224
    2a04:	8c 91       	ld	r24, X
    2a06:	8f 7d       	andi	r24, 0xDF	; 223
    2a08:	89 2b       	or	r24, r25
    2a0a:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2a0c:	a3 e5       	ldi	r26, 0x53	; 83
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	80 81       	ld	r24, Z
    2a16:	81 70       	andi	r24, 0x01	; 1
    2a18:	81 70       	andi	r24, 0x01	; 1
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	92 95       	swap	r25
    2a1e:	90 7f       	andi	r25, 0xF0	; 240
    2a20:	8c 91       	ld	r24, X
    2a22:	8f 7e       	andi	r24, 0xEF	; 239
    2a24:	89 2b       	or	r24, r25
    2a26:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    2a28:	ac e5       	ldi	r26, 0x5C	; 92
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a30:	86 81       	ldd	r24, Z+6	; 0x06
    2a32:	8c 93       	st	X, r24
    2a34:	23 c0       	rjmp	.+70     	; 0x2a7c <Timer0_Init+0x18e>
		break;
	case TIMER0_FAST_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    2a36:	e3 e5       	ldi	r30, 0x53	; 83
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	8f 77       	andi	r24, 0x7F	; 127
    2a3e:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2a40:	a3 e5       	ldi	r26, 0x53	; 83
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e9 81       	ldd	r30, Y+1	; 0x01
    2a46:	fa 81       	ldd	r31, Y+2	; 0x02
    2a48:	81 81       	ldd	r24, Z+1	; 0x01
    2a4a:	86 95       	lsr	r24
    2a4c:	81 70       	andi	r24, 0x01	; 1
    2a4e:	81 70       	andi	r24, 0x01	; 1
    2a50:	98 2f       	mov	r25, r24
    2a52:	92 95       	swap	r25
    2a54:	99 0f       	add	r25, r25
    2a56:	90 7e       	andi	r25, 0xE0	; 224
    2a58:	8c 91       	ld	r24, X
    2a5a:	8f 7d       	andi	r24, 0xDF	; 223
    2a5c:	89 2b       	or	r24, r25
    2a5e:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2a60:	a3 e5       	ldi	r26, 0x53	; 83
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e9 81       	ldd	r30, Y+1	; 0x01
    2a66:	fa 81       	ldd	r31, Y+2	; 0x02
    2a68:	81 81       	ldd	r24, Z+1	; 0x01
    2a6a:	81 70       	andi	r24, 0x01	; 1
    2a6c:	81 70       	andi	r24, 0x01	; 1
    2a6e:	98 2f       	mov	r25, r24
    2a70:	92 95       	swap	r25
    2a72:	90 7f       	andi	r25, 0xF0	; 240
    2a74:	8c 91       	ld	r24, X
    2a76:	8f 7e       	andi	r24, 0xEF	; 239
    2a78:	89 2b       	or	r24, r25
    2a7a:	8c 93       	st	X, r24
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	}
	TCNT0_REG = Config_Ptr->TIMER0_INITIAL_VALUE;
    2a7c:	a2 e5       	ldi	r26, 0x52	; 82
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e9 81       	ldd	r30, Y+1	; 0x01
    2a82:	fa 81       	ldd	r31, Y+2	; 0x02
    2a84:	85 81       	ldd	r24, Z+5	; 0x05
    2a86:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM01_BIT = (Config_Ptr->Mode>>1);
    2a88:	a3 e5       	ldi	r26, 0x53	; 83
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	84 81       	ldd	r24, Z+4	; 0x04
    2a92:	86 95       	lsr	r24
    2a94:	81 70       	andi	r24, 0x01	; 1
    2a96:	81 70       	andi	r24, 0x01	; 1
    2a98:	98 2f       	mov	r25, r24
    2a9a:	99 0f       	add	r25, r25
    2a9c:	99 0f       	add	r25, r25
    2a9e:	99 0f       	add	r25, r25
    2aa0:	8c 91       	ld	r24, X
    2aa2:	87 7f       	andi	r24, 0xF7	; 247
    2aa4:	89 2b       	or	r24, r25
    2aa6:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM00_BIT = (Config_Ptr->Mode>>0);
    2aa8:	a3 e5       	ldi	r26, 0x53	; 83
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e9 81       	ldd	r30, Y+1	; 0x01
    2aae:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab0:	84 81       	ldd	r24, Z+4	; 0x04
    2ab2:	81 70       	andi	r24, 0x01	; 1
    2ab4:	81 70       	andi	r24, 0x01	; 1
    2ab6:	98 2f       	mov	r25, r24
    2ab8:	92 95       	swap	r25
    2aba:	99 0f       	add	r25, r25
    2abc:	99 0f       	add	r25, r25
    2abe:	90 7c       	andi	r25, 0xC0	; 192
    2ac0:	8c 91       	ld	r24, X
    2ac2:	8f 7b       	andi	r24, 0xBF	; 191
    2ac4:	89 2b       	or	r24, r25
    2ac6:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <Timer0_Start>:
void Timer0_Start(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	00 d0       	rcall	.+0      	; 0x2adc <Timer0_Start+0x6>
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
    2ae4:	a3 e5       	ldi	r26, 0x53	; 83
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e3 e5       	ldi	r30, 0x53	; 83
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	98 2f       	mov	r25, r24
    2af0:	98 7f       	andi	r25, 0xF8	; 248
    2af2:	e9 81       	ldd	r30, Y+1	; 0x01
    2af4:	fa 81       	ldd	r31, Y+2	; 0x02
    2af6:	83 81       	ldd	r24, Z+3	; 0x03
    2af8:	89 2b       	or	r24, r25
    2afa:	8c 93       	st	X, r24
}
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <Timer0_Stop>:
void Timer0_Stop(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <Timer0_Stop+0x6>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	9a 83       	std	Y+2, r25	; 0x02
    2b12:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    2b14:	a3 e5       	ldi	r26, 0x53	; 83
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e3 e5       	ldi	r30, 0x53	; 83
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	88 7f       	andi	r24, 0xF8	; 248
    2b20:	8c 93       	st	X, r24
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <Timer0_GetCounts>:
u8 Timer0_GetCounts(void)
{
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    2b34:	e2 e5       	ldi	r30, 0x52	; 82
    2b36:	f0 e0       	ldi	r31, 0x00	; 0
    2b38:	80 81       	ld	r24, Z
}
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <Timer0_SetDelayTimeMilliSec>:
void Timer0_SetDelayTimeMilliSec(const TIMER0_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <Timer0_SetDelayTimeMilliSec+0x6>
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <Timer0_SetDelayTimeMilliSec+0x8>
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <Timer0_SetDelayTimeMilliSec+0xa>
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	9a 83       	std	Y+2, r25	; 0x02
    2b50:	89 83       	std	Y+1, r24	; 0x01
    2b52:	4b 83       	std	Y+3, r20	; 0x03
    2b54:	5c 83       	std	Y+4, r21	; 0x04
    2b56:	6d 83       	std	Y+5, r22	; 0x05
    2b58:	7e 83       	std	Y+6, r23	; 0x06
	/* Assuming we are using 16MHz FCPU and Prescaler 1024  Tick time = 2 Micro seconds */
	switch(Config_Ptr->Mode)
    2b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5e:	84 81       	ldd	r24, Z+4	; 0x04
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <Timer0_SetDelayTimeMilliSec+0x2a>
    2b68:	3f c0       	rjmp	.+126    	; 0x2be8 <Timer0_SetDelayTimeMilliSec+0xa8>
	{
	case TIMER0_NORMAL_MODE:
		overFlowCounter = (((copy_u32TimeMS * 1000)/TICK_TIME) / TOP_VALUE);
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	ad 81       	ldd	r26, Y+5	; 0x05
    2b70:	be 81       	ldd	r27, Y+6	; 0x06
    2b72:	28 ee       	ldi	r18, 0xE8	; 232
    2b74:	33 e0       	ldi	r19, 0x03	; 3
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	bc 01       	movw	r22, r24
    2b7c:	cd 01       	movw	r24, r26
    2b7e:	0e 94 37 22 	call	0x446e	; 0x446e <__mulsi3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	07 2e       	mov	r0, r23
    2b88:	7e e0       	ldi	r23, 0x0E	; 14
    2b8a:	b6 95       	lsr	r27
    2b8c:	a7 95       	ror	r26
    2b8e:	97 95       	ror	r25
    2b90:	87 95       	ror	r24
    2b92:	7a 95       	dec	r23
    2b94:	d1 f7       	brne	.-12     	; 0x2b8a <Timer0_SetDelayTimeMilliSec+0x4a>
    2b96:	70 2d       	mov	r23, r0
    2b98:	80 93 d6 01 	sts	0x01D6, r24
    2b9c:	90 93 d7 01 	sts	0x01D7, r25
    2ba0:	a0 93 d8 01 	sts	0x01D8, r26
    2ba4:	b0 93 d9 01 	sts	0x01D9, r27
		remCounter = (u8)(((copy_u32TimeMS * 1000)/TICK_TIME) % TOP_VALUE);
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	ad 81       	ldd	r26, Y+5	; 0x05
    2bae:	be 81       	ldd	r27, Y+6	; 0x06
    2bb0:	28 ee       	ldi	r18, 0xE8	; 232
    2bb2:	33 e0       	ldi	r19, 0x03	; 3
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 37 22 	call	0x446e	; 0x446e <__mulsi3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	68 94       	set
    2bc6:	15 f8       	bld	r1, 5
    2bc8:	b6 95       	lsr	r27
    2bca:	a7 95       	ror	r26
    2bcc:	97 95       	ror	r25
    2bce:	87 95       	ror	r24
    2bd0:	16 94       	lsr	r1
    2bd2:	d1 f7       	brne	.-12     	; 0x2bc8 <Timer0_SetDelayTimeMilliSec+0x88>
    2bd4:	80 93 da 01 	sts	0x01DA, r24
		Timer0_IntEnable(Config_Ptr);
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	9a 81       	ldd	r25, Y+2	; 0x02
    2bdc:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <Timer0_IntEnable>
		Timer0_Start(Config_Ptr);
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	9a 81       	ldd	r25, Y+2	; 0x02
    2be4:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <Timer0_Start>
	case TIMER0_CTC_MODE:

		break;

	}
}
    2be8:	26 96       	adiw	r28, 0x06	; 6
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <Timer0_IntEnable>:
void Timer0_IntEnable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <Timer0_IntEnable+0x6>
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	9a 83       	std	Y+2, r25	; 0x02
    2c06:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    2c08:	e9 81       	ldd	r30, Y+1	; 0x01
    2c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c0c:	84 81       	ldd	r24, Z+4	; 0x04
    2c0e:	88 23       	and	r24, r24
    2c10:	31 f4       	brne	.+12     	; 0x2c1e <Timer0_IntEnable+0x24>
	{
		TIMSK_REG->bits.TOIE0_BIT = LOGIC_HIGH;
    2c12:	e9 e5       	ldi	r30, 0x59	; 89
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	81 60       	ori	r24, 0x01	; 1
    2c1a:	80 83       	st	Z, r24
    2c1c:	0a c0       	rjmp	.+20     	; 0x2c32 <Timer0_IntEnable+0x38>
	}
	else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    2c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c20:	fa 81       	ldd	r31, Y+2	; 0x02
    2c22:	84 81       	ldd	r24, Z+4	; 0x04
    2c24:	82 30       	cpi	r24, 0x02	; 2
    2c26:	29 f4       	brne	.+10     	; 0x2c32 <Timer0_IntEnable+0x38>
	{
		TIMSK_REG->bits.OCIE0_BIT = LOGIC_HIGH;
    2c28:	e9 e5       	ldi	r30, 0x59	; 89
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	82 60       	ori	r24, 0x02	; 2
    2c30:	80 83       	st	Z, r24
	}
	else
	{
		//return error;
	}
}
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	cf 91       	pop	r28
    2c38:	df 91       	pop	r29
    2c3a:	08 95       	ret

00002c3c <Timer0_IntDisable>:
void Timer0_IntDisable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	00 d0       	rcall	.+0      	; 0x2c42 <Timer0_IntDisable+0x6>
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	9a 83       	std	Y+2, r25	; 0x02
    2c48:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    2c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4e:	84 81       	ldd	r24, Z+4	; 0x04
    2c50:	88 23       	and	r24, r24
    2c52:	31 f4       	brne	.+12     	; 0x2c60 <Timer0_IntDisable+0x24>
		{
			TIMSK_REG->bits.TOIE0_BIT = LOGIC_LOW;
    2c54:	e9 e5       	ldi	r30, 0x59	; 89
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	8e 7f       	andi	r24, 0xFE	; 254
    2c5c:	80 83       	st	Z, r24
    2c5e:	0a c0       	rjmp	.+20     	; 0x2c74 <Timer0_IntDisable+0x38>
		}
		else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    2c60:	e9 81       	ldd	r30, Y+1	; 0x01
    2c62:	fa 81       	ldd	r31, Y+2	; 0x02
    2c64:	84 81       	ldd	r24, Z+4	; 0x04
    2c66:	82 30       	cpi	r24, 0x02	; 2
    2c68:	29 f4       	brne	.+10     	; 0x2c74 <Timer0_IntDisable+0x38>
		{
			TIMSK_REG->bits.OCIE0_BIT = LOGIC_LOW;
    2c6a:	e9 e5       	ldi	r30, 0x59	; 89
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	8d 7f       	andi	r24, 0xFD	; 253
    2c72:	80 83       	st	Z, r24
		}
		else
		{
			//return error;
		}
}
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	08 95       	ret

00002c7e <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*ptrfn)(void))
{
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <Timer0_SetCallBack+0x6>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c90:	90 93 dc 01 	sts	0x01DC, r25
    2c94:	80 93 db 01 	sts	0x01DB, r24
}
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <Timer0_SetFastPWM>:
void Timer0_SetFastPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty)
{
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <Timer0_SetFastPWM+0x6>
    2ca8:	0f 92       	push	r0
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
    2cb2:	6b 83       	std	Y+3, r22	; 0x03
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	OCR0_REG = (u8)((duty*255)/100);
    2cb4:	ec e5       	ldi	r30, 0x5C	; 92
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	48 2f       	mov	r20, r24
    2cbc:	50 e0       	ldi	r21, 0x00	; 0
    2cbe:	ca 01       	movw	r24, r20
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	22 0f       	add	r18, r18
    2cc4:	33 1f       	adc	r19, r19
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	96 95       	lsr	r25
    2cca:	98 2f       	mov	r25, r24
    2ccc:	88 27       	eor	r24, r24
    2cce:	97 95       	ror	r25
    2cd0:	87 95       	ror	r24
    2cd2:	82 1b       	sub	r24, r18
    2cd4:	93 0b       	sbc	r25, r19
    2cd6:	84 0f       	add	r24, r20
    2cd8:	95 1f       	adc	r25, r21
    2cda:	24 e6       	ldi	r18, 0x64	; 100
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	b9 01       	movw	r22, r18
    2ce0:	0e 94 56 22 	call	0x44ac	; 0x44ac <__divmodhi4>
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	80 83       	st	Z, r24

}
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	0f 90       	pop	r0
    2cee:	cf 91       	pop	r28
    2cf0:	df 91       	pop	r29
    2cf2:	08 95       	ret

00002cf4 <__vector_11>:
void Timer0_SetPhaseCorrectPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty);

ISR(TIMER0_OVF_vect)
{
    2cf4:	1f 92       	push	r1
    2cf6:	0f 92       	push	r0
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	0f 92       	push	r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	2f 93       	push	r18
    2d00:	3f 93       	push	r19
    2d02:	4f 93       	push	r20
    2d04:	5f 93       	push	r21
    2d06:	6f 93       	push	r22
    2d08:	7f 93       	push	r23
    2d0a:	8f 93       	push	r24
    2d0c:	9f 93       	push	r25
    2d0e:	af 93       	push	r26
    2d10:	bf 93       	push	r27
    2d12:	ef 93       	push	r30
    2d14:	ff 93       	push	r31
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
	overFlowCounter--;
    2d1e:	80 91 d6 01 	lds	r24, 0x01D6
    2d22:	90 91 d7 01 	lds	r25, 0x01D7
    2d26:	a0 91 d8 01 	lds	r26, 0x01D8
    2d2a:	b0 91 d9 01 	lds	r27, 0x01D9
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	a1 09       	sbc	r26, r1
    2d32:	b1 09       	sbc	r27, r1
    2d34:	80 93 d6 01 	sts	0x01D6, r24
    2d38:	90 93 d7 01 	sts	0x01D7, r25
    2d3c:	a0 93 d8 01 	sts	0x01D8, r26
    2d40:	b0 93 d9 01 	sts	0x01D9, r27

	if(overFlowCounter == 0)
    2d44:	80 91 d6 01 	lds	r24, 0x01D6
    2d48:	90 91 d7 01 	lds	r25, 0x01D7
    2d4c:	a0 91 d8 01 	lds	r26, 0x01D8
    2d50:	b0 91 d9 01 	lds	r27, 0x01D9
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	a1 05       	cpc	r26, r1
    2d58:	b1 05       	cpc	r27, r1
    2d5a:	31 f4       	brne	.+12     	; 0x2d68 <__vector_11+0x74>
	{
		TCNT0_REG = (256 - remCounter);
    2d5c:	e2 e5       	ldi	r30, 0x52	; 82
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 91 da 01 	lds	r24, 0x01DA
    2d64:	81 95       	neg	r24
    2d66:	80 83       	st	Z, r24
	}
	if((ptrCallBack != NULL_PTR) && (overFlowCounter == -1))
    2d68:	80 91 db 01 	lds	r24, 0x01DB
    2d6c:	90 91 dc 01 	lds	r25, 0x01DC
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	a9 f0       	breq	.+42     	; 0x2d9e <__vector_11+0xaa>
    2d74:	80 91 d6 01 	lds	r24, 0x01D6
    2d78:	90 91 d7 01 	lds	r25, 0x01D7
    2d7c:	a0 91 d8 01 	lds	r26, 0x01D8
    2d80:	b0 91 d9 01 	lds	r27, 0x01D9
    2d84:	8f 3f       	cpi	r24, 0xFF	; 255
    2d86:	2f ef       	ldi	r18, 0xFF	; 255
    2d88:	92 07       	cpc	r25, r18
    2d8a:	2f ef       	ldi	r18, 0xFF	; 255
    2d8c:	a2 07       	cpc	r26, r18
    2d8e:	2f ef       	ldi	r18, 0xFF	; 255
    2d90:	b2 07       	cpc	r27, r18
    2d92:	29 f4       	brne	.+10     	; 0x2d9e <__vector_11+0xaa>
	{
		(*ptrCallBack)();
    2d94:	e0 91 db 01 	lds	r30, 0x01DB
    2d98:	f0 91 dc 01 	lds	r31, 0x01DC
    2d9c:	09 95       	icall
	}
}
    2d9e:	cf 91       	pop	r28
    2da0:	df 91       	pop	r29
    2da2:	ff 91       	pop	r31
    2da4:	ef 91       	pop	r30
    2da6:	bf 91       	pop	r27
    2da8:	af 91       	pop	r26
    2daa:	9f 91       	pop	r25
    2dac:	8f 91       	pop	r24
    2dae:	7f 91       	pop	r23
    2db0:	6f 91       	pop	r22
    2db2:	5f 91       	pop	r21
    2db4:	4f 91       	pop	r20
    2db6:	3f 91       	pop	r19
    2db8:	2f 91       	pop	r18
    2dba:	0f 90       	pop	r0
    2dbc:	0f be       	out	0x3f, r0	; 63
    2dbe:	0f 90       	pop	r0
    2dc0:	1f 90       	pop	r1
    2dc2:	18 95       	reti

00002dc4 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2dc4:	1f 92       	push	r1
    2dc6:	0f 92       	push	r0
    2dc8:	0f b6       	in	r0, 0x3f	; 63
    2dca:	0f 92       	push	r0
    2dcc:	11 24       	eor	r1, r1
    2dce:	2f 93       	push	r18
    2dd0:	3f 93       	push	r19
    2dd2:	4f 93       	push	r20
    2dd4:	5f 93       	push	r21
    2dd6:	6f 93       	push	r22
    2dd8:	7f 93       	push	r23
    2dda:	8f 93       	push	r24
    2ddc:	9f 93       	push	r25
    2dde:	af 93       	push	r26
    2de0:	bf 93       	push	r27
    2de2:	ef 93       	push	r30
    2de4:	ff 93       	push	r31
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
	if(ptrCallBack != NULL_PTR)
    2dee:	80 91 db 01 	lds	r24, 0x01DB
    2df2:	90 91 dc 01 	lds	r25, 0x01DC
    2df6:	00 97       	sbiw	r24, 0x00	; 0
    2df8:	29 f0       	breq	.+10     	; 0x2e04 <__vector_10+0x40>
	{
		(*ptrCallBack)();
    2dfa:	e0 91 db 01 	lds	r30, 0x01DB
    2dfe:	f0 91 dc 01 	lds	r31, 0x01DC
    2e02:	09 95       	icall
	}
}
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	ff 91       	pop	r31
    2e0a:	ef 91       	pop	r30
    2e0c:	bf 91       	pop	r27
    2e0e:	af 91       	pop	r26
    2e10:	9f 91       	pop	r25
    2e12:	8f 91       	pop	r24
    2e14:	7f 91       	pop	r23
    2e16:	6f 91       	pop	r22
    2e18:	5f 91       	pop	r21
    2e1a:	4f 91       	pop	r20
    2e1c:	3f 91       	pop	r19
    2e1e:	2f 91       	pop	r18
    2e20:	0f 90       	pop	r0
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	0f 90       	pop	r0
    2e26:	1f 90       	pop	r1
    2e28:	18 95       	reti

00002e2a <main>:
#include "LM35_SENSOR_int.h"
//#include "LCD_int.h"
#include "lcd.h"

int main()
{
    2e2a:	df 93       	push	r29
    2e2c:	cf 93       	push	r28
    2e2e:	0f 92       	push	r0
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
	u8 temp = 0;
    2e34:	19 82       	std	Y+1, r1	; 0x01

	DcMotor_Init();			/* initialize DCMotor driver */
    2e36:	0e 94 8d 08 	call	0x111a	; 0x111a <DcMotor_Init>
//	H_LCD_void_Init();		/* initialize LCD driver */
	LCD_init();
    2e3a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <LCD_init>
	LM35_SENSOR_init();		/* initialize LM35 Temperature sensor driver */
    2e3e:	0e 94 21 14 	call	0x2842	; 0x2842 <LM35_SENSOR_init>

	GIE_Enable();			/* Enabling the globe interrupts to use it with ADC function */
    2e42:	0e 94 03 09 	call	0x1206	; 0x1206 <GIE_Enable>

	/* Display this string "Temp =   C" only once on LCD at the second row */
	LCD_moveCursor(1,3);
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	63 e0       	ldi	r22, 0x03	; 3
    2e4a:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_moveCursor>
	LCD_displayString("Temp =    C");
    2e4e:	86 e6       	ldi	r24, 0x66	; 102
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0e 94 86 21 	call	0x430c	; 0x430c <LCD_displayString>

	while(1)
	{

		temp = LM35_SENSOR_getTemperature();
    2e56:	0e 94 32 14 	call	0x2864	; 0x2864 <LM35_SENSOR_getTemperature>
    2e5a:	89 83       	std	Y+1, r24	; 0x01

		/* Display the temperature value every time at same position */
		LCD_moveCursor(1,10);
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	6a e0       	ldi	r22, 0x0A	; 10
    2e60:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_moveCursor>
		if(temp >= 100)
    2e64:	89 81       	ldd	r24, Y+1	; 0x01
    2e66:	84 36       	cpi	r24, 0x64	; 100
    2e68:	30 f0       	brcs	.+12     	; 0x2e76 <main+0x4c>
		{
			LCD_intgerToString(temp);
    2e6a:	89 81       	ldd	r24, Y+1	; 0x01
    2e6c:	88 2f       	mov	r24, r24
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 0a 22 	call	0x4414	; 0x4414 <LCD_intgerToString>
    2e74:	08 c0       	rjmp	.+16     	; 0x2e86 <main+0x5c>
		}
		else
		{
			LCD_intgerToString(temp);
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	88 2f       	mov	r24, r24
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 0a 22 	call	0x4414	; 0x4414 <LCD_intgerToString>
			/* In case the digital value is two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    2e80:	80 e2       	ldi	r24, 0x20	; 32
    2e82:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_displayCharacter>
		}

		if(temp < 20)
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	84 31       	cpi	r24, 0x14	; 20
    2e8a:	58 f4       	brcc	.+22     	; 0x2ea2 <main+0x78>
		{
			LCD_moveCursor(0,3);
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	63 e0       	ldi	r22, 0x03	; 3
    2e90:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_moveCursor>
			LCD_displayString("Fan is OFF    ");
    2e94:	82 e7       	ldi	r24, 0x72	; 114
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 86 21 	call	0x430c	; 0x430c <LCD_displayString>
			DcMotor_OFF();
    2e9c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <DcMotor_OFF>
    2ea0:	da cf       	rjmp	.-76     	; 0x2e56 <main+0x2c>
		}
		else if((temp >= 25) && (temp <= 35))
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	89 31       	cpi	r24, 0x19	; 25
    2ea6:	78 f0       	brcs	.+30     	; 0x2ec6 <main+0x9c>
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	84 32       	cpi	r24, 0x24	; 36
    2eac:	60 f4       	brcc	.+24     	; 0x2ec6 <main+0x9c>
		{
			LCD_moveCursor(0,3);
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	63 e0       	ldi	r22, 0x03	; 3
    2eb2:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_moveCursor>
			LCD_displayString("Fan is ON 50%");
    2eb6:	81 e8       	ldi	r24, 0x81	; 129
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	0e 94 86 21 	call	0x430c	; 0x430c <LCD_displayString>
			DcMotor_ON(50);		/* Let the motor rotate with 50% duty cycle */
    2ebe:	82 e3       	ldi	r24, 0x32	; 50
    2ec0:	0e 94 c0 08 	call	0x1180	; 0x1180 <DcMotor_ON>
    2ec4:	c8 cf       	rjmp	.-112    	; 0x2e56 <main+0x2c>
		}
		else if(temp > 35)
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
    2ec8:	84 32       	cpi	r24, 0x24	; 36
    2eca:	28 f2       	brcs	.-118    	; 0x2e56 <main+0x2c>
		{
			LCD_moveCursor(0,3);
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	63 e0       	ldi	r22, 0x03	; 3
    2ed0:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_moveCursor>
			LCD_displayString("Fan is ON 80%");
    2ed4:	8f e8       	ldi	r24, 0x8F	; 143
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 86 21 	call	0x430c	; 0x430c <LCD_displayString>
			DcMotor_ON(80);		/* Let the motor rotate with 80% duty cycle */
    2edc:	80 e5       	ldi	r24, 0x50	; 80
    2ede:	0e 94 c0 08 	call	0x1180	; 0x1180 <DcMotor_ON>
    2ee2:	b9 cf       	rjmp	.-142    	; 0x2e56 <main+0x2c>

00002ee4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	2e 97       	sbiw	r28, 0x0e	; 14
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	DIO_voidSetPinDirection(pPORTB, Pin0, output);
    2ef8:	80 91 b6 01 	lds	r24, 0x01B6
    2efc:	90 91 b7 01 	lds	r25, 0x01B7
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin1, output);
    2f08:	80 91 b6 01 	lds	r24, 0x01B6
    2f0c:	90 91 b7 01 	lds	r25, 0x01B7
    2f10:	61 e0       	ldi	r22, 0x01	; 1
    2f12:	41 e0       	ldi	r20, 0x01	; 1
    2f14:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	a0 ea       	ldi	r26, 0xA0	; 160
    2f1e:	b1 e4       	ldi	r27, 0x41	; 65
    2f20:	8b 87       	std	Y+11, r24	; 0x0b
    2f22:	9c 87       	std	Y+12, r25	; 0x0c
    2f24:	ad 87       	std	Y+13, r26	; 0x0d
    2f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	4a ef       	ldi	r20, 0xFA	; 250
    2f36:	54 e4       	ldi	r21, 0x44	; 68
    2f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	8f 83       	std	Y+7, r24	; 0x07
    2f42:	98 87       	std	Y+8, r25	; 0x08
    2f44:	a9 87       	std	Y+9, r26	; 0x09
    2f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f48:	6f 81       	ldd	r22, Y+7	; 0x07
    2f4a:	78 85       	ldd	r23, Y+8	; 0x08
    2f4c:	89 85       	ldd	r24, Y+9	; 0x09
    2f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e8       	ldi	r20, 0x80	; 128
    2f56:	5f e3       	ldi	r21, 0x3F	; 63
    2f58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f5c:	88 23       	and	r24, r24
    2f5e:	2c f4       	brge	.+10     	; 0x2f6a <LCD_init+0x86>
		__ticks = 1;
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	9e 83       	std	Y+6, r25	; 0x06
    2f66:	8d 83       	std	Y+5, r24	; 0x05
    2f68:	3f c0       	rjmp	.+126    	; 0x2fe8 <LCD_init+0x104>
	else if (__tmp > 65535)
    2f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f6c:	78 85       	ldd	r23, Y+8	; 0x08
    2f6e:	89 85       	ldd	r24, Y+9	; 0x09
    2f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	3f ef       	ldi	r19, 0xFF	; 255
    2f76:	4f e7       	ldi	r20, 0x7F	; 127
    2f78:	57 e4       	ldi	r21, 0x47	; 71
    2f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	4c f5       	brge	.+82     	; 0x2fd4 <LCD_init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e2       	ldi	r20, 0x20	; 32
    2f90:	51 e4       	ldi	r21, 0x41	; 65
    2f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	bc 01       	movw	r22, r24
    2f9c:	cd 01       	movw	r24, r26
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	9e 83       	std	Y+6, r25	; 0x06
    2fa8:	8d 83       	std	Y+5, r24	; 0x05
    2faa:	0f c0       	rjmp	.+30     	; 0x2fca <LCD_init+0xe6>
    2fac:	88 ec       	ldi	r24, 0xC8	; 200
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	9c 83       	std	Y+4, r25	; 0x04
    2fb2:	8b 83       	std	Y+3, r24	; 0x03
    2fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb8:	01 97       	sbiw	r24, 0x01	; 1
    2fba:	f1 f7       	brne	.-4      	; 0x2fb8 <LCD_init+0xd4>
    2fbc:	9c 83       	std	Y+4, r25	; 0x04
    2fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	9e 83       	std	Y+6, r25	; 0x06
    2fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fca:	8d 81       	ldd	r24, Y+5	; 0x05
    2fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	69 f7       	brne	.-38     	; 0x2fac <LCD_init+0xc8>
    2fd2:	14 c0       	rjmp	.+40     	; 0x2ffc <LCD_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd6:	78 85       	ldd	r23, Y+8	; 0x08
    2fd8:	89 85       	ldd	r24, Y+9	; 0x09
    2fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	9e 83       	std	Y+6, r25	; 0x06
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fea:	9e 81       	ldd	r25, Y+6	; 0x06
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	01 97       	sbiw	r24, 0x01	; 1
    2ff6:	f1 f7       	brne	.-4      	; 0x2ff4 <LCD_init+0x110>
    2ff8:	9a 83       	std	Y+2, r25	; 0x02
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */

	DIO_voidSetPinDirection(pPORTA, pin3, output);
    2ffc:	80 91 b4 01 	lds	r24, 0x01B4
    3000:	90 91 b5 01 	lds	r25, 0x01B5
    3004:	63 e0       	ldi	r22, 0x03	; 3
    3006:	41 e0       	ldi	r20, 0x01	; 1
    3008:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, pin4, output);
    300c:	80 91 b4 01 	lds	r24, 0x01B4
    3010:	90 91 b5 01 	lds	r25, 0x01B5
    3014:	64 e0       	ldi	r22, 0x04	; 4
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, pin5, output);
    301c:	80 91 b4 01 	lds	r24, 0x01B4
    3020:	90 91 b5 01 	lds	r25, 0x01B5
    3024:	65 e0       	ldi	r22, 0x05	; 5
    3026:	41 e0       	ldi	r20, 0x01	; 1
    3028:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, pin6, output);
    302c:	80 91 b4 01 	lds	r24, 0x01B4
    3030:	90 91 b5 01 	lds	r25, 0x01B5
    3034:	66 e0       	ldi	r22, 0x06	; 6
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 1f 09 	call	0x123e	; 0x123e <DIO_voidSetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    303c:	83 e3       	ldi	r24, 0x33	; 51
    303e:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3042:	82 e3       	ldi	r24, 0x32	; 50
    3044:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    3048:	88 e2       	ldi	r24, 0x28	; 40
    304a:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    304e:	8c e0       	ldi	r24, 0x0C	; 12
    3050:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>
}
    305a:	2e 96       	adiw	r28, 0x0e	; 14
    305c:	0f b6       	in	r0, 0x3f	; 63
    305e:	f8 94       	cli
    3060:	de bf       	out	0x3e, r29	; 62
    3062:	0f be       	out	0x3f, r0	; 63
    3064:	cd bf       	out	0x3d, r28	; 61
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(u8 command)
{
    306c:	0f 93       	push	r16
    306e:	1f 93       	push	r17
    3070:	df 93       	push	r29
    3072:	cf 93       	push	r28
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	c3 56       	subi	r28, 0x63	; 99
    307a:	d0 40       	sbci	r29, 0x00	; 0
    307c:	0f b6       	in	r0, 0x3f	; 63
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	fe 01       	movw	r30, r28
    3088:	ed 59       	subi	r30, 0x9D	; 157
    308a:	ff 4f       	sbci	r31, 0xFF	; 255
    308c:	80 83       	st	Z, r24
	/* Instruction Mode RS=0 */
	DIO_voidSetPinValue(pPORTB, Pin0, LOGIC_LOW);
    308e:	80 91 b6 01 	lds	r24, 0x01B6
    3092:	90 91 b7 01 	lds	r25, 0x01B7
    3096:	60 e0       	ldi	r22, 0x00	; 0
    3098:	40 e0       	ldi	r20, 0x00	; 0
    309a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    309e:	fe 01       	movw	r30, r28
    30a0:	e1 5a       	subi	r30, 0xA1	; 161
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	a0 e8       	ldi	r26, 0x80	; 128
    30aa:	bf e3       	ldi	r27, 0x3F	; 63
    30ac:	80 83       	st	Z, r24
    30ae:	91 83       	std	Z+1, r25	; 0x01
    30b0:	a2 83       	std	Z+2, r26	; 0x02
    30b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b4:	8e 01       	movw	r16, r28
    30b6:	05 5a       	subi	r16, 0xA5	; 165
    30b8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ba:	fe 01       	movw	r30, r28
    30bc:	e1 5a       	subi	r30, 0xA1	; 161
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	60 81       	ld	r22, Z
    30c2:	71 81       	ldd	r23, Z+1	; 0x01
    30c4:	82 81       	ldd	r24, Z+2	; 0x02
    30c6:	93 81       	ldd	r25, Z+3	; 0x03
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	4a ef       	ldi	r20, 0xFA	; 250
    30ce:	54 e4       	ldi	r21, 0x44	; 68
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	f8 01       	movw	r30, r16
    30da:	80 83       	st	Z, r24
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	a2 83       	std	Z+2, r26	; 0x02
    30e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30e2:	fe 01       	movw	r30, r28
    30e4:	e5 5a       	subi	r30, 0xA5	; 165
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	93 81       	ldd	r25, Z+3	; 0x03
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	40 e8       	ldi	r20, 0x80	; 128
    30f6:	5f e3       	ldi	r21, 0x3F	; 63
    30f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30fc:	88 23       	and	r24, r24
    30fe:	44 f4       	brge	.+16     	; 0x3110 <LCD_sendCommand+0xa4>
		__ticks = 1;
    3100:	fe 01       	movw	r30, r28
    3102:	e7 5a       	subi	r30, 0xA7	; 167
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
    310e:	64 c0       	rjmp	.+200    	; 0x31d8 <LCD_sendCommand+0x16c>
	else if (__tmp > 65535)
    3110:	fe 01       	movw	r30, r28
    3112:	e5 5a       	subi	r30, 0xA5	; 165
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	60 81       	ld	r22, Z
    3118:	71 81       	ldd	r23, Z+1	; 0x01
    311a:	82 81       	ldd	r24, Z+2	; 0x02
    311c:	93 81       	ldd	r25, Z+3	; 0x03
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	4f e7       	ldi	r20, 0x7F	; 127
    3124:	57 e4       	ldi	r21, 0x47	; 71
    3126:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    312a:	18 16       	cp	r1, r24
    312c:	0c f0       	brlt	.+2      	; 0x3130 <LCD_sendCommand+0xc4>
    312e:	43 c0       	rjmp	.+134    	; 0x31b6 <LCD_sendCommand+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3130:	fe 01       	movw	r30, r28
    3132:	e1 5a       	subi	r30, 0xA1	; 161
    3134:	ff 4f       	sbci	r31, 0xFF	; 255
    3136:	60 81       	ld	r22, Z
    3138:	71 81       	ldd	r23, Z+1	; 0x01
    313a:	82 81       	ldd	r24, Z+2	; 0x02
    313c:	93 81       	ldd	r25, Z+3	; 0x03
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	40 e2       	ldi	r20, 0x20	; 32
    3144:	51 e4       	ldi	r21, 0x41	; 65
    3146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	8e 01       	movw	r16, r28
    3150:	07 5a       	subi	r16, 0xA7	; 167
    3152:	1f 4f       	sbci	r17, 0xFF	; 255
    3154:	bc 01       	movw	r22, r24
    3156:	cd 01       	movw	r24, r26
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	f8 01       	movw	r30, r16
    3162:	91 83       	std	Z+1, r25	; 0x01
    3164:	80 83       	st	Z, r24
    3166:	1f c0       	rjmp	.+62     	; 0x31a6 <LCD_sendCommand+0x13a>
    3168:	fe 01       	movw	r30, r28
    316a:	e9 5a       	subi	r30, 0xA9	; 169
    316c:	ff 4f       	sbci	r31, 0xFF	; 255
    316e:	88 ec       	ldi	r24, 0xC8	; 200
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	80 83       	st	Z, r24
    3176:	fe 01       	movw	r30, r28
    3178:	e9 5a       	subi	r30, 0xA9	; 169
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <LCD_sendCommand+0x114>
    3184:	fe 01       	movw	r30, r28
    3186:	e9 5a       	subi	r30, 0xA9	; 169
    3188:	ff 4f       	sbci	r31, 0xFF	; 255
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318e:	de 01       	movw	r26, r28
    3190:	a7 5a       	subi	r26, 0xA7	; 167
    3192:	bf 4f       	sbci	r27, 0xFF	; 255
    3194:	fe 01       	movw	r30, r28
    3196:	e7 5a       	subi	r30, 0xA7	; 167
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	80 81       	ld	r24, Z
    319c:	91 81       	ldd	r25, Z+1	; 0x01
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	11 96       	adiw	r26, 0x01	; 1
    31a2:	9c 93       	st	X, r25
    31a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31a6:	fe 01       	movw	r30, r28
    31a8:	e7 5a       	subi	r30, 0xA7	; 167
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	91 81       	ldd	r25, Z+1	; 0x01
    31b0:	00 97       	sbiw	r24, 0x00	; 0
    31b2:	d1 f6       	brne	.-76     	; 0x3168 <LCD_sendCommand+0xfc>
    31b4:	27 c0       	rjmp	.+78     	; 0x3204 <LCD_sendCommand+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b6:	8e 01       	movw	r16, r28
    31b8:	07 5a       	subi	r16, 0xA7	; 167
    31ba:	1f 4f       	sbci	r17, 0xFF	; 255
    31bc:	fe 01       	movw	r30, r28
    31be:	e5 5a       	subi	r30, 0xA5	; 165
    31c0:	ff 4f       	sbci	r31, 0xFF	; 255
    31c2:	60 81       	ld	r22, Z
    31c4:	71 81       	ldd	r23, Z+1	; 0x01
    31c6:	82 81       	ldd	r24, Z+2	; 0x02
    31c8:	93 81       	ldd	r25, Z+3	; 0x03
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	f8 01       	movw	r30, r16
    31d4:	91 83       	std	Z+1, r25	; 0x01
    31d6:	80 83       	st	Z, r24
    31d8:	de 01       	movw	r26, r28
    31da:	ab 5a       	subi	r26, 0xAB	; 171
    31dc:	bf 4f       	sbci	r27, 0xFF	; 255
    31de:	fe 01       	movw	r30, r28
    31e0:	e7 5a       	subi	r30, 0xA7	; 167
    31e2:	ff 4f       	sbci	r31, 0xFF	; 255
    31e4:	80 81       	ld	r24, Z
    31e6:	91 81       	ldd	r25, Z+1	; 0x01
    31e8:	8d 93       	st	X+, r24
    31ea:	9c 93       	st	X, r25
    31ec:	fe 01       	movw	r30, r28
    31ee:	eb 5a       	subi	r30, 0xAB	; 171
    31f0:	ff 4f       	sbci	r31, 0xFF	; 255
    31f2:	80 81       	ld	r24, Z
    31f4:	91 81       	ldd	r25, Z+1	; 0x01
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	f1 f7       	brne	.-4      	; 0x31f6 <LCD_sendCommand+0x18a>
    31fa:	fe 01       	movw	r30, r28
    31fc:	eb 5a       	subi	r30, 0xAB	; 171
    31fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3200:	91 83       	std	Z+1, r25	; 0x01
    3202:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_HIGH); /* Enable LCD E=1 */
    3204:	80 91 b6 01 	lds	r24, 0x01B6
    3208:	90 91 b7 01 	lds	r25, 0x01B7
    320c:	61 e0       	ldi	r22, 0x01	; 1
    320e:	41 e0       	ldi	r20, 0x01	; 1
    3210:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3214:	fe 01       	movw	r30, r28
    3216:	ef 5a       	subi	r30, 0xAF	; 175
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a0 e8       	ldi	r26, 0x80	; 128
    3220:	bf e3       	ldi	r27, 0x3F	; 63
    3222:	80 83       	st	Z, r24
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	a2 83       	std	Z+2, r26	; 0x02
    3228:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322a:	8e 01       	movw	r16, r28
    322c:	03 5b       	subi	r16, 0xB3	; 179
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	fe 01       	movw	r30, r28
    3232:	ef 5a       	subi	r30, 0xAF	; 175
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	4a ef       	ldi	r20, 0xFA	; 250
    3244:	54 e4       	ldi	r21, 0x44	; 68
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	f8 01       	movw	r30, r16
    3250:	80 83       	st	Z, r24
    3252:	91 83       	std	Z+1, r25	; 0x01
    3254:	a2 83       	std	Z+2, r26	; 0x02
    3256:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3258:	fe 01       	movw	r30, r28
    325a:	e3 5b       	subi	r30, 0xB3	; 179
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	60 81       	ld	r22, Z
    3260:	71 81       	ldd	r23, Z+1	; 0x01
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e8       	ldi	r20, 0x80	; 128
    326c:	5f e3       	ldi	r21, 0x3F	; 63
    326e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3272:	88 23       	and	r24, r24
    3274:	44 f4       	brge	.+16     	; 0x3286 <LCD_sendCommand+0x21a>
		__ticks = 1;
    3276:	fe 01       	movw	r30, r28
    3278:	e5 5b       	subi	r30, 0xB5	; 181
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	91 83       	std	Z+1, r25	; 0x01
    3282:	80 83       	st	Z, r24
    3284:	64 c0       	rjmp	.+200    	; 0x334e <LCD_sendCommand+0x2e2>
	else if (__tmp > 65535)
    3286:	fe 01       	movw	r30, r28
    3288:	e3 5b       	subi	r30, 0xB3	; 179
    328a:	ff 4f       	sbci	r31, 0xFF	; 255
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	20 e0       	ldi	r18, 0x00	; 0
    3296:	3f ef       	ldi	r19, 0xFF	; 255
    3298:	4f e7       	ldi	r20, 0x7F	; 127
    329a:	57 e4       	ldi	r21, 0x47	; 71
    329c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32a0:	18 16       	cp	r1, r24
    32a2:	0c f0       	brlt	.+2      	; 0x32a6 <LCD_sendCommand+0x23a>
    32a4:	43 c0       	rjmp	.+134    	; 0x332c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a6:	fe 01       	movw	r30, r28
    32a8:	ef 5a       	subi	r30, 0xAF	; 175
    32aa:	ff 4f       	sbci	r31, 0xFF	; 255
    32ac:	60 81       	ld	r22, Z
    32ae:	71 81       	ldd	r23, Z+1	; 0x01
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	40 e2       	ldi	r20, 0x20	; 32
    32ba:	51 e4       	ldi	r21, 0x41	; 65
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8e 01       	movw	r16, r28
    32c6:	05 5b       	subi	r16, 0xB5	; 181
    32c8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ca:	bc 01       	movw	r22, r24
    32cc:	cd 01       	movw	r24, r26
    32ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	f8 01       	movw	r30, r16
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	80 83       	st	Z, r24
    32dc:	1f c0       	rjmp	.+62     	; 0x331c <LCD_sendCommand+0x2b0>
    32de:	fe 01       	movw	r30, r28
    32e0:	e7 5b       	subi	r30, 0xB7	; 183
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	88 ec       	ldi	r24, 0xC8	; 200
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
    32ec:	fe 01       	movw	r30, r28
    32ee:	e7 5b       	subi	r30, 0xB7	; 183
    32f0:	ff 4f       	sbci	r31, 0xFF	; 255
    32f2:	80 81       	ld	r24, Z
    32f4:	91 81       	ldd	r25, Z+1	; 0x01
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <LCD_sendCommand+0x28a>
    32fa:	fe 01       	movw	r30, r28
    32fc:	e7 5b       	subi	r30, 0xB7	; 183
    32fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3300:	91 83       	std	Z+1, r25	; 0x01
    3302:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3304:	de 01       	movw	r26, r28
    3306:	a5 5b       	subi	r26, 0xB5	; 181
    3308:	bf 4f       	sbci	r27, 0xFF	; 255
    330a:	fe 01       	movw	r30, r28
    330c:	e5 5b       	subi	r30, 0xB5	; 181
    330e:	ff 4f       	sbci	r31, 0xFF	; 255
    3310:	80 81       	ld	r24, Z
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	11 96       	adiw	r26, 0x01	; 1
    3318:	9c 93       	st	X, r25
    331a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    331c:	fe 01       	movw	r30, r28
    331e:	e5 5b       	subi	r30, 0xB5	; 181
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	80 81       	ld	r24, Z
    3324:	91 81       	ldd	r25, Z+1	; 0x01
    3326:	00 97       	sbiw	r24, 0x00	; 0
    3328:	d1 f6       	brne	.-76     	; 0x32de <LCD_sendCommand+0x272>
    332a:	27 c0       	rjmp	.+78     	; 0x337a <LCD_sendCommand+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332c:	8e 01       	movw	r16, r28
    332e:	05 5b       	subi	r16, 0xB5	; 181
    3330:	1f 4f       	sbci	r17, 0xFF	; 255
    3332:	fe 01       	movw	r30, r28
    3334:	e3 5b       	subi	r30, 0xB3	; 179
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	60 81       	ld	r22, Z
    333a:	71 81       	ldd	r23, Z+1	; 0x01
    333c:	82 81       	ldd	r24, Z+2	; 0x02
    333e:	93 81       	ldd	r25, Z+3	; 0x03
    3340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3344:	dc 01       	movw	r26, r24
    3346:	cb 01       	movw	r24, r22
    3348:	f8 01       	movw	r30, r16
    334a:	91 83       	std	Z+1, r25	; 0x01
    334c:	80 83       	st	Z, r24
    334e:	de 01       	movw	r26, r28
    3350:	a9 5b       	subi	r26, 0xB9	; 185
    3352:	bf 4f       	sbci	r27, 0xFF	; 255
    3354:	fe 01       	movw	r30, r28
    3356:	e5 5b       	subi	r30, 0xB5	; 181
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	8d 93       	st	X+, r24
    3360:	9c 93       	st	X, r25
    3362:	fe 01       	movw	r30, r28
    3364:	e9 5b       	subi	r30, 0xB9	; 185
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	80 81       	ld	r24, Z
    336a:	91 81       	ldd	r25, Z+1	; 0x01
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	f1 f7       	brne	.-4      	; 0x336c <LCD_sendCommand+0x300>
    3370:	fe 01       	movw	r30, r28
    3372:	e9 5b       	subi	r30, 0xB9	; 185
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	91 83       	std	Z+1, r25	; 0x01
    3378:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_voidSetPinValue(pPORTA, pin3, GET_BIT(command,4));
    337a:	40 91 b4 01 	lds	r20, 0x01B4
    337e:	50 91 b5 01 	lds	r21, 0x01B5
    3382:	fe 01       	movw	r30, r28
    3384:	ed 59       	subi	r30, 0x9D	; 157
    3386:	ff 4f       	sbci	r31, 0xFF	; 255
    3388:	80 81       	ld	r24, Z
    338a:	88 2f       	mov	r24, r24
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	80 71       	andi	r24, 0x10	; 16
    3390:	90 70       	andi	r25, 0x00	; 0
    3392:	95 95       	asr	r25
    3394:	87 95       	ror	r24
    3396:	95 95       	asr	r25
    3398:	87 95       	ror	r24
    339a:	95 95       	asr	r25
    339c:	87 95       	ror	r24
    339e:	95 95       	asr	r25
    33a0:	87 95       	ror	r24
    33a2:	28 2f       	mov	r18, r24
    33a4:	ca 01       	movw	r24, r20
    33a6:	63 e0       	ldi	r22, 0x03	; 3
    33a8:	42 2f       	mov	r20, r18
    33aa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin4, GET_BIT(command,5));
    33ae:	40 91 b4 01 	lds	r20, 0x01B4
    33b2:	50 91 b5 01 	lds	r21, 0x01B5
    33b6:	fe 01       	movw	r30, r28
    33b8:	ed 59       	subi	r30, 0x9D	; 157
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 81       	ld	r24, Z
    33be:	88 2f       	mov	r24, r24
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	80 72       	andi	r24, 0x20	; 32
    33c4:	90 70       	andi	r25, 0x00	; 0
    33c6:	95 95       	asr	r25
    33c8:	87 95       	ror	r24
    33ca:	95 95       	asr	r25
    33cc:	87 95       	ror	r24
    33ce:	95 95       	asr	r25
    33d0:	87 95       	ror	r24
    33d2:	95 95       	asr	r25
    33d4:	87 95       	ror	r24
    33d6:	95 95       	asr	r25
    33d8:	87 95       	ror	r24
    33da:	28 2f       	mov	r18, r24
    33dc:	ca 01       	movw	r24, r20
    33de:	64 e0       	ldi	r22, 0x04	; 4
    33e0:	42 2f       	mov	r20, r18
    33e2:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin5, GET_BIT(command,6));
    33e6:	40 91 b4 01 	lds	r20, 0x01B4
    33ea:	50 91 b5 01 	lds	r21, 0x01B5
    33ee:	fe 01       	movw	r30, r28
    33f0:	ed 59       	subi	r30, 0x9D	; 157
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	80 74       	andi	r24, 0x40	; 64
    33fc:	90 70       	andi	r25, 0x00	; 0
    33fe:	08 2e       	mov	r0, r24
    3400:	89 2f       	mov	r24, r25
    3402:	00 0c       	add	r0, r0
    3404:	88 1f       	adc	r24, r24
    3406:	99 0b       	sbc	r25, r25
    3408:	00 0c       	add	r0, r0
    340a:	88 1f       	adc	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	28 2f       	mov	r18, r24
    3410:	ca 01       	movw	r24, r20
    3412:	65 e0       	ldi	r22, 0x05	; 5
    3414:	42 2f       	mov	r20, r18
    3416:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin6, GET_BIT(command,7));
    341a:	20 91 b4 01 	lds	r18, 0x01B4
    341e:	30 91 b5 01 	lds	r19, 0x01B5
    3422:	fe 01       	movw	r30, r28
    3424:	ed 59       	subi	r30, 0x9D	; 157
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 81       	ld	r24, Z
    342a:	48 2f       	mov	r20, r24
    342c:	44 1f       	adc	r20, r20
    342e:	44 27       	eor	r20, r20
    3430:	44 1f       	adc	r20, r20
    3432:	c9 01       	movw	r24, r18
    3434:	66 e0       	ldi	r22, 0x06	; 6
    3436:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    343a:	fe 01       	movw	r30, r28
    343c:	ed 5b       	subi	r30, 0xBD	; 189
    343e:	ff 4f       	sbci	r31, 0xFF	; 255
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	a0 e8       	ldi	r26, 0x80	; 128
    3446:	bf e3       	ldi	r27, 0x3F	; 63
    3448:	80 83       	st	Z, r24
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	a2 83       	std	Z+2, r26	; 0x02
    344e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3450:	8e 01       	movw	r16, r28
    3452:	01 5c       	subi	r16, 0xC1	; 193
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	fe 01       	movw	r30, r28
    3458:	ed 5b       	subi	r30, 0xBD	; 189
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	4a ef       	ldi	r20, 0xFA	; 250
    346a:	54 e4       	ldi	r21, 0x44	; 68
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	f8 01       	movw	r30, r16
    3476:	80 83       	st	Z, r24
    3478:	91 83       	std	Z+1, r25	; 0x01
    347a:	a2 83       	std	Z+2, r26	; 0x02
    347c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    347e:	fe 01       	movw	r30, r28
    3480:	ff 96       	adiw	r30, 0x3f	; 63
    3482:	60 81       	ld	r22, Z
    3484:	71 81       	ldd	r23, Z+1	; 0x01
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	30 e0       	ldi	r19, 0x00	; 0
    348e:	40 e8       	ldi	r20, 0x80	; 128
    3490:	5f e3       	ldi	r21, 0x3F	; 63
    3492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3496:	88 23       	and	r24, r24
    3498:	2c f4       	brge	.+10     	; 0x34a4 <LCD_sendCommand+0x438>
		__ticks = 1;
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	9e af       	std	Y+62, r25	; 0x3e
    34a0:	8d af       	std	Y+61, r24	; 0x3d
    34a2:	46 c0       	rjmp	.+140    	; 0x3530 <LCD_sendCommand+0x4c4>
	else if (__tmp > 65535)
    34a4:	fe 01       	movw	r30, r28
    34a6:	ff 96       	adiw	r30, 0x3f	; 63
    34a8:	60 81       	ld	r22, Z
    34aa:	71 81       	ldd	r23, Z+1	; 0x01
    34ac:	82 81       	ldd	r24, Z+2	; 0x02
    34ae:	93 81       	ldd	r25, Z+3	; 0x03
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	3f ef       	ldi	r19, 0xFF	; 255
    34b4:	4f e7       	ldi	r20, 0x7F	; 127
    34b6:	57 e4       	ldi	r21, 0x47	; 71
    34b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34bc:	18 16       	cp	r1, r24
    34be:	64 f5       	brge	.+88     	; 0x3518 <LCD_sendCommand+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c0:	fe 01       	movw	r30, r28
    34c2:	ed 5b       	subi	r30, 0xBD	; 189
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	60 81       	ld	r22, Z
    34c8:	71 81       	ldd	r23, Z+1	; 0x01
    34ca:	82 81       	ldd	r24, Z+2	; 0x02
    34cc:	93 81       	ldd	r25, Z+3	; 0x03
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e2       	ldi	r20, 0x20	; 32
    34d4:	51 e4       	ldi	r21, 0x41	; 65
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	bc 01       	movw	r22, r24
    34e0:	cd 01       	movw	r24, r26
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9e af       	std	Y+62, r25	; 0x3e
    34ec:	8d af       	std	Y+61, r24	; 0x3d
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <LCD_sendCommand+0x4a2>
    34f0:	88 ec       	ldi	r24, 0xC8	; 200
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	9c af       	std	Y+60, r25	; 0x3c
    34f6:	8b af       	std	Y+59, r24	; 0x3b
    34f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    34fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <LCD_sendCommand+0x490>
    3500:	9c af       	std	Y+60, r25	; 0x3c
    3502:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3504:	8d ad       	ldd	r24, Y+61	; 0x3d
    3506:	9e ad       	ldd	r25, Y+62	; 0x3e
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	9e af       	std	Y+62, r25	; 0x3e
    350c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3510:	9e ad       	ldd	r25, Y+62	; 0x3e
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	69 f7       	brne	.-38     	; 0x34f0 <LCD_sendCommand+0x484>
    3516:	16 c0       	rjmp	.+44     	; 0x3544 <LCD_sendCommand+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3518:	fe 01       	movw	r30, r28
    351a:	ff 96       	adiw	r30, 0x3f	; 63
    351c:	60 81       	ld	r22, Z
    351e:	71 81       	ldd	r23, Z+1	; 0x01
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	93 81       	ldd	r25, Z+3	; 0x03
    3524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	9e af       	std	Y+62, r25	; 0x3e
    352e:	8d af       	std	Y+61, r24	; 0x3d
    3530:	8d ad       	ldd	r24, Y+61	; 0x3d
    3532:	9e ad       	ldd	r25, Y+62	; 0x3e
    3534:	9a af       	std	Y+58, r25	; 0x3a
    3536:	89 af       	std	Y+57, r24	; 0x39
    3538:	89 ad       	ldd	r24, Y+57	; 0x39
    353a:	9a ad       	ldd	r25, Y+58	; 0x3a
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <LCD_sendCommand+0x4d0>
    3540:	9a af       	std	Y+58, r25	; 0x3a
    3542:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_LOW); /* Disable LCD E=0 */
    3544:	80 91 b6 01 	lds	r24, 0x01B6
    3548:	90 91 b7 01 	lds	r25, 0x01B7
    354c:	61 e0       	ldi	r22, 0x01	; 1
    354e:	40 e0       	ldi	r20, 0x00	; 0
    3550:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	a0 e8       	ldi	r26, 0x80	; 128
    355a:	bf e3       	ldi	r27, 0x3F	; 63
    355c:	8d ab       	std	Y+53, r24	; 0x35
    355e:	9e ab       	std	Y+54, r25	; 0x36
    3560:	af ab       	std	Y+55, r26	; 0x37
    3562:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3564:	6d a9       	ldd	r22, Y+53	; 0x35
    3566:	7e a9       	ldd	r23, Y+54	; 0x36
    3568:	8f a9       	ldd	r24, Y+55	; 0x37
    356a:	98 ad       	ldd	r25, Y+56	; 0x38
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	4a ef       	ldi	r20, 0xFA	; 250
    3572:	54 e4       	ldi	r21, 0x44	; 68
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	89 ab       	std	Y+49, r24	; 0x31
    357e:	9a ab       	std	Y+50, r25	; 0x32
    3580:	ab ab       	std	Y+51, r26	; 0x33
    3582:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3584:	69 a9       	ldd	r22, Y+49	; 0x31
    3586:	7a a9       	ldd	r23, Y+50	; 0x32
    3588:	8b a9       	ldd	r24, Y+51	; 0x33
    358a:	9c a9       	ldd	r25, Y+52	; 0x34
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e8       	ldi	r20, 0x80	; 128
    3592:	5f e3       	ldi	r21, 0x3F	; 63
    3594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3598:	88 23       	and	r24, r24
    359a:	2c f4       	brge	.+10     	; 0x35a6 <LCD_sendCommand+0x53a>
		__ticks = 1;
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	98 ab       	std	Y+48, r25	; 0x30
    35a2:	8f a7       	std	Y+47, r24	; 0x2f
    35a4:	3f c0       	rjmp	.+126    	; 0x3624 <LCD_sendCommand+0x5b8>
	else if (__tmp > 65535)
    35a6:	69 a9       	ldd	r22, Y+49	; 0x31
    35a8:	7a a9       	ldd	r23, Y+50	; 0x32
    35aa:	8b a9       	ldd	r24, Y+51	; 0x33
    35ac:	9c a9       	ldd	r25, Y+52	; 0x34
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	3f ef       	ldi	r19, 0xFF	; 255
    35b2:	4f e7       	ldi	r20, 0x7F	; 127
    35b4:	57 e4       	ldi	r21, 0x47	; 71
    35b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ba:	18 16       	cp	r1, r24
    35bc:	4c f5       	brge	.+82     	; 0x3610 <LCD_sendCommand+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35be:	6d a9       	ldd	r22, Y+53	; 0x35
    35c0:	7e a9       	ldd	r23, Y+54	; 0x36
    35c2:	8f a9       	ldd	r24, Y+55	; 0x37
    35c4:	98 ad       	ldd	r25, Y+56	; 0x38
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	40 e2       	ldi	r20, 0x20	; 32
    35cc:	51 e4       	ldi	r21, 0x41	; 65
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	bc 01       	movw	r22, r24
    35d8:	cd 01       	movw	r24, r26
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	98 ab       	std	Y+48, r25	; 0x30
    35e4:	8f a7       	std	Y+47, r24	; 0x2f
    35e6:	0f c0       	rjmp	.+30     	; 0x3606 <LCD_sendCommand+0x59a>
    35e8:	88 ec       	ldi	r24, 0xC8	; 200
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	9e a7       	std	Y+46, r25	; 0x2e
    35ee:	8d a7       	std	Y+45, r24	; 0x2d
    35f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    35f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <LCD_sendCommand+0x588>
    35f8:	9e a7       	std	Y+46, r25	; 0x2e
    35fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	98 ab       	std	Y+48, r25	; 0x30
    3604:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3606:	8f a5       	ldd	r24, Y+47	; 0x2f
    3608:	98 a9       	ldd	r25, Y+48	; 0x30
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	69 f7       	brne	.-38     	; 0x35e8 <LCD_sendCommand+0x57c>
    360e:	14 c0       	rjmp	.+40     	; 0x3638 <LCD_sendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3610:	69 a9       	ldd	r22, Y+49	; 0x31
    3612:	7a a9       	ldd	r23, Y+50	; 0x32
    3614:	8b a9       	ldd	r24, Y+51	; 0x33
    3616:	9c a9       	ldd	r25, Y+52	; 0x34
    3618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	98 ab       	std	Y+48, r25	; 0x30
    3622:	8f a7       	std	Y+47, r24	; 0x2f
    3624:	8f a5       	ldd	r24, Y+47	; 0x2f
    3626:	98 a9       	ldd	r25, Y+48	; 0x30
    3628:	9c a7       	std	Y+44, r25	; 0x2c
    362a:	8b a7       	std	Y+43, r24	; 0x2b
    362c:	8b a5       	ldd	r24, Y+43	; 0x2b
    362e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3630:	01 97       	sbiw	r24, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <LCD_sendCommand+0x5c4>
    3634:	9c a7       	std	Y+44, r25	; 0x2c
    3636:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_HIGH); /* Enable LCD E=1 */
    3638:	80 91 b6 01 	lds	r24, 0x01B6
    363c:	90 91 b7 01 	lds	r25, 0x01B7
    3640:	61 e0       	ldi	r22, 0x01	; 1
    3642:	41 e0       	ldi	r20, 0x01	; 1
    3644:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	a0 e8       	ldi	r26, 0x80	; 128
    364e:	bf e3       	ldi	r27, 0x3F	; 63
    3650:	8f a3       	std	Y+39, r24	; 0x27
    3652:	98 a7       	std	Y+40, r25	; 0x28
    3654:	a9 a7       	std	Y+41, r26	; 0x29
    3656:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3658:	6f a1       	ldd	r22, Y+39	; 0x27
    365a:	78 a5       	ldd	r23, Y+40	; 0x28
    365c:	89 a5       	ldd	r24, Y+41	; 0x29
    365e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	4a ef       	ldi	r20, 0xFA	; 250
    3666:	54 e4       	ldi	r21, 0x44	; 68
    3668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	8b a3       	std	Y+35, r24	; 0x23
    3672:	9c a3       	std	Y+36, r25	; 0x24
    3674:	ad a3       	std	Y+37, r26	; 0x25
    3676:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3678:	6b a1       	ldd	r22, Y+35	; 0x23
    367a:	7c a1       	ldd	r23, Y+36	; 0x24
    367c:	8d a1       	ldd	r24, Y+37	; 0x25
    367e:	9e a1       	ldd	r25, Y+38	; 0x26
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	40 e8       	ldi	r20, 0x80	; 128
    3686:	5f e3       	ldi	r21, 0x3F	; 63
    3688:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    368c:	88 23       	and	r24, r24
    368e:	2c f4       	brge	.+10     	; 0x369a <LCD_sendCommand+0x62e>
		__ticks = 1;
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	9a a3       	std	Y+34, r25	; 0x22
    3696:	89 a3       	std	Y+33, r24	; 0x21
    3698:	3f c0       	rjmp	.+126    	; 0x3718 <LCD_sendCommand+0x6ac>
	else if (__tmp > 65535)
    369a:	6b a1       	ldd	r22, Y+35	; 0x23
    369c:	7c a1       	ldd	r23, Y+36	; 0x24
    369e:	8d a1       	ldd	r24, Y+37	; 0x25
    36a0:	9e a1       	ldd	r25, Y+38	; 0x26
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	3f ef       	ldi	r19, 0xFF	; 255
    36a6:	4f e7       	ldi	r20, 0x7F	; 127
    36a8:	57 e4       	ldi	r21, 0x47	; 71
    36aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ae:	18 16       	cp	r1, r24
    36b0:	4c f5       	brge	.+82     	; 0x3704 <LCD_sendCommand+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b2:	6f a1       	ldd	r22, Y+39	; 0x27
    36b4:	78 a5       	ldd	r23, Y+40	; 0x28
    36b6:	89 a5       	ldd	r24, Y+41	; 0x29
    36b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	40 e2       	ldi	r20, 0x20	; 32
    36c0:	51 e4       	ldi	r21, 0x41	; 65
    36c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	bc 01       	movw	r22, r24
    36cc:	cd 01       	movw	r24, r26
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9a a3       	std	Y+34, r25	; 0x22
    36d8:	89 a3       	std	Y+33, r24	; 0x21
    36da:	0f c0       	rjmp	.+30     	; 0x36fa <LCD_sendCommand+0x68e>
    36dc:	88 ec       	ldi	r24, 0xC8	; 200
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	98 a3       	std	Y+32, r25	; 0x20
    36e2:	8f 8f       	std	Y+31, r24	; 0x1f
    36e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36e6:	98 a1       	ldd	r25, Y+32	; 0x20
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <LCD_sendCommand+0x67c>
    36ec:	98 a3       	std	Y+32, r25	; 0x20
    36ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f0:	89 a1       	ldd	r24, Y+33	; 0x21
    36f2:	9a a1       	ldd	r25, Y+34	; 0x22
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	9a a3       	std	Y+34, r25	; 0x22
    36f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36fa:	89 a1       	ldd	r24, Y+33	; 0x21
    36fc:	9a a1       	ldd	r25, Y+34	; 0x22
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	69 f7       	brne	.-38     	; 0x36dc <LCD_sendCommand+0x670>
    3702:	14 c0       	rjmp	.+40     	; 0x372c <LCD_sendCommand+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3704:	6b a1       	ldd	r22, Y+35	; 0x23
    3706:	7c a1       	ldd	r23, Y+36	; 0x24
    3708:	8d a1       	ldd	r24, Y+37	; 0x25
    370a:	9e a1       	ldd	r25, Y+38	; 0x26
    370c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	9a a3       	std	Y+34, r25	; 0x22
    3716:	89 a3       	std	Y+33, r24	; 0x21
    3718:	89 a1       	ldd	r24, Y+33	; 0x21
    371a:	9a a1       	ldd	r25, Y+34	; 0x22
    371c:	9e 8f       	std	Y+30, r25	; 0x1e
    371e:	8d 8f       	std	Y+29, r24	; 0x1d
    3720:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3722:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <LCD_sendCommand+0x6b8>
    3728:	9e 8f       	std	Y+30, r25	; 0x1e
    372a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_voidSetPinValue(pPORTA, pin3, GET_BIT(command,0));
    372c:	20 91 b4 01 	lds	r18, 0x01B4
    3730:	30 91 b5 01 	lds	r19, 0x01B5
    3734:	fe 01       	movw	r30, r28
    3736:	ed 59       	subi	r30, 0x9D	; 157
    3738:	ff 4f       	sbci	r31, 0xFF	; 255
    373a:	80 81       	ld	r24, Z
    373c:	48 2f       	mov	r20, r24
    373e:	41 70       	andi	r20, 0x01	; 1
    3740:	c9 01       	movw	r24, r18
    3742:	63 e0       	ldi	r22, 0x03	; 3
    3744:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin4, GET_BIT(command,1));
    3748:	40 91 b4 01 	lds	r20, 0x01B4
    374c:	50 91 b5 01 	lds	r21, 0x01B5
    3750:	fe 01       	movw	r30, r28
    3752:	ed 59       	subi	r30, 0x9D	; 157
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	88 2f       	mov	r24, r24
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	82 70       	andi	r24, 0x02	; 2
    375e:	90 70       	andi	r25, 0x00	; 0
    3760:	95 95       	asr	r25
    3762:	87 95       	ror	r24
    3764:	28 2f       	mov	r18, r24
    3766:	ca 01       	movw	r24, r20
    3768:	64 e0       	ldi	r22, 0x04	; 4
    376a:	42 2f       	mov	r20, r18
    376c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin5, GET_BIT(command,2));
    3770:	40 91 b4 01 	lds	r20, 0x01B4
    3774:	50 91 b5 01 	lds	r21, 0x01B5
    3778:	fe 01       	movw	r30, r28
    377a:	ed 59       	subi	r30, 0x9D	; 157
    377c:	ff 4f       	sbci	r31, 0xFF	; 255
    377e:	80 81       	ld	r24, Z
    3780:	88 2f       	mov	r24, r24
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	84 70       	andi	r24, 0x04	; 4
    3786:	90 70       	andi	r25, 0x00	; 0
    3788:	95 95       	asr	r25
    378a:	87 95       	ror	r24
    378c:	95 95       	asr	r25
    378e:	87 95       	ror	r24
    3790:	28 2f       	mov	r18, r24
    3792:	ca 01       	movw	r24, r20
    3794:	65 e0       	ldi	r22, 0x05	; 5
    3796:	42 2f       	mov	r20, r18
    3798:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin6, GET_BIT(command,3));
    379c:	40 91 b4 01 	lds	r20, 0x01B4
    37a0:	50 91 b5 01 	lds	r21, 0x01B5
    37a4:	fe 01       	movw	r30, r28
    37a6:	ed 59       	subi	r30, 0x9D	; 157
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	80 81       	ld	r24, Z
    37ac:	88 2f       	mov	r24, r24
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	88 70       	andi	r24, 0x08	; 8
    37b2:	90 70       	andi	r25, 0x00	; 0
    37b4:	95 95       	asr	r25
    37b6:	87 95       	ror	r24
    37b8:	95 95       	asr	r25
    37ba:	87 95       	ror	r24
    37bc:	95 95       	asr	r25
    37be:	87 95       	ror	r24
    37c0:	28 2f       	mov	r18, r24
    37c2:	ca 01       	movw	r24, r20
    37c4:	66 e0       	ldi	r22, 0x06	; 6
    37c6:	42 2f       	mov	r20, r18
    37c8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e8       	ldi	r26, 0x80	; 128
    37d2:	bf e3       	ldi	r27, 0x3F	; 63
    37d4:	89 8f       	std	Y+25, r24	; 0x19
    37d6:	9a 8f       	std	Y+26, r25	; 0x1a
    37d8:	ab 8f       	std	Y+27, r26	; 0x1b
    37da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	69 8d       	ldd	r22, Y+25	; 0x19
    37de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8d 8b       	std	Y+21, r24	; 0x15
    37f6:	9e 8b       	std	Y+22, r25	; 0x16
    37f8:	af 8b       	std	Y+23, r26	; 0x17
    37fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37fc:	6d 89       	ldd	r22, Y+21	; 0x15
    37fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3800:	8f 89       	ldd	r24, Y+23	; 0x17
    3802:	98 8d       	ldd	r25, Y+24	; 0x18
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <LCD_sendCommand+0x7b2>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9c 8b       	std	Y+20, r25	; 0x14
    381a:	8b 8b       	std	Y+19, r24	; 0x13
    381c:	3f c0       	rjmp	.+126    	; 0x389c <LCD_sendCommand+0x830>
	else if (__tmp > 65535)
    381e:	6d 89       	ldd	r22, Y+21	; 0x15
    3820:	7e 89       	ldd	r23, Y+22	; 0x16
    3822:	8f 89       	ldd	r24, Y+23	; 0x17
    3824:	98 8d       	ldd	r25, Y+24	; 0x18
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <LCD_sendCommand+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	69 8d       	ldd	r22, Y+25	; 0x19
    3838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    383a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    383c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9c 8b       	std	Y+20, r25	; 0x14
    385c:	8b 8b       	std	Y+19, r24	; 0x13
    385e:	0f c0       	rjmp	.+30     	; 0x387e <LCD_sendCommand+0x812>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	9a 8b       	std	Y+18, r25	; 0x12
    3866:	89 8b       	std	Y+17, r24	; 0x11
    3868:	89 89       	ldd	r24, Y+17	; 0x11
    386a:	9a 89       	ldd	r25, Y+18	; 0x12
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <LCD_sendCommand+0x800>
    3870:	9a 8b       	std	Y+18, r25	; 0x12
    3872:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	8b 89       	ldd	r24, Y+19	; 0x13
    3876:	9c 89       	ldd	r25, Y+20	; 0x14
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9c 8b       	std	Y+20, r25	; 0x14
    387c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	8b 89       	ldd	r24, Y+19	; 0x13
    3880:	9c 89       	ldd	r25, Y+20	; 0x14
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <LCD_sendCommand+0x7f4>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <LCD_sendCommand+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6d 89       	ldd	r22, Y+21	; 0x15
    388a:	7e 89       	ldd	r23, Y+22	; 0x16
    388c:	8f 89       	ldd	r24, Y+23	; 0x17
    388e:	98 8d       	ldd	r25, Y+24	; 0x18
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9c 8b       	std	Y+20, r25	; 0x14
    389a:	8b 8b       	std	Y+19, r24	; 0x13
    389c:	8b 89       	ldd	r24, Y+19	; 0x13
    389e:	9c 89       	ldd	r25, Y+20	; 0x14
    38a0:	98 8b       	std	Y+16, r25	; 0x10
    38a2:	8f 87       	std	Y+15, r24	; 0x0f
    38a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a6:	98 89       	ldd	r25, Y+16	; 0x10
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <LCD_sendCommand+0x83c>
    38ac:	98 8b       	std	Y+16, r25	; 0x10
    38ae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_LOW); /* Disable LCD E=0 */
    38b0:	80 91 b6 01 	lds	r24, 0x01B6
    38b4:	90 91 b7 01 	lds	r25, 0x01B7
    38b8:	61 e0       	ldi	r22, 0x01	; 1
    38ba:	40 e0       	ldi	r20, 0x00	; 0
    38bc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    38c0:	80 e0       	ldi	r24, 0x00	; 0
    38c2:	90 e0       	ldi	r25, 0x00	; 0
    38c4:	a0 e8       	ldi	r26, 0x80	; 128
    38c6:	bf e3       	ldi	r27, 0x3F	; 63
    38c8:	8b 87       	std	Y+11, r24	; 0x0b
    38ca:	9c 87       	std	Y+12, r25	; 0x0c
    38cc:	ad 87       	std	Y+13, r26	; 0x0d
    38ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    38d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    38d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    38d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	4a ef       	ldi	r20, 0xFA	; 250
    38de:	54 e4       	ldi	r21, 0x44	; 68
    38e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	8f 83       	std	Y+7, r24	; 0x07
    38ea:	98 87       	std	Y+8, r25	; 0x08
    38ec:	a9 87       	std	Y+9, r26	; 0x09
    38ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38f0:	6f 81       	ldd	r22, Y+7	; 0x07
    38f2:	78 85       	ldd	r23, Y+8	; 0x08
    38f4:	89 85       	ldd	r24, Y+9	; 0x09
    38f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	40 e8       	ldi	r20, 0x80	; 128
    38fe:	5f e3       	ldi	r21, 0x3F	; 63
    3900:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3904:	88 23       	and	r24, r24
    3906:	2c f4       	brge	.+10     	; 0x3912 <LCD_sendCommand+0x8a6>
		__ticks = 1;
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	90 e0       	ldi	r25, 0x00	; 0
    390c:	9e 83       	std	Y+6, r25	; 0x06
    390e:	8d 83       	std	Y+5, r24	; 0x05
    3910:	3f c0       	rjmp	.+126    	; 0x3990 <LCD_sendCommand+0x924>
	else if (__tmp > 65535)
    3912:	6f 81       	ldd	r22, Y+7	; 0x07
    3914:	78 85       	ldd	r23, Y+8	; 0x08
    3916:	89 85       	ldd	r24, Y+9	; 0x09
    3918:	9a 85       	ldd	r25, Y+10	; 0x0a
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	3f ef       	ldi	r19, 0xFF	; 255
    391e:	4f e7       	ldi	r20, 0x7F	; 127
    3920:	57 e4       	ldi	r21, 0x47	; 71
    3922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3926:	18 16       	cp	r1, r24
    3928:	4c f5       	brge	.+82     	; 0x397c <LCD_sendCommand+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    392a:	6b 85       	ldd	r22, Y+11	; 0x0b
    392c:	7c 85       	ldd	r23, Y+12	; 0x0c
    392e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3930:	9e 85       	ldd	r25, Y+14	; 0x0e
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e2       	ldi	r20, 0x20	; 32
    3938:	51 e4       	ldi	r21, 0x41	; 65
    393a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	9e 83       	std	Y+6, r25	; 0x06
    3950:	8d 83       	std	Y+5, r24	; 0x05
    3952:	0f c0       	rjmp	.+30     	; 0x3972 <LCD_sendCommand+0x906>
    3954:	88 ec       	ldi	r24, 0xC8	; 200
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	9c 83       	std	Y+4, r25	; 0x04
    395a:	8b 83       	std	Y+3, r24	; 0x03
    395c:	8b 81       	ldd	r24, Y+3	; 0x03
    395e:	9c 81       	ldd	r25, Y+4	; 0x04
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <LCD_sendCommand+0x8f4>
    3964:	9c 83       	std	Y+4, r25	; 0x04
    3966:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3968:	8d 81       	ldd	r24, Y+5	; 0x05
    396a:	9e 81       	ldd	r25, Y+6	; 0x06
    396c:	01 97       	sbiw	r24, 0x01	; 1
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	9e 81       	ldd	r25, Y+6	; 0x06
    3976:	00 97       	sbiw	r24, 0x00	; 0
    3978:	69 f7       	brne	.-38     	; 0x3954 <LCD_sendCommand+0x8e8>
    397a:	14 c0       	rjmp	.+40     	; 0x39a4 <LCD_sendCommand+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    397c:	6f 81       	ldd	r22, Y+7	; 0x07
    397e:	78 85       	ldd	r23, Y+8	; 0x08
    3980:	89 85       	ldd	r24, Y+9	; 0x09
    3982:	9a 85       	ldd	r25, Y+10	; 0x0a
    3984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	9e 83       	std	Y+6, r25	; 0x06
    398e:	8d 83       	std	Y+5, r24	; 0x05
    3990:	8d 81       	ldd	r24, Y+5	; 0x05
    3992:	9e 81       	ldd	r25, Y+6	; 0x06
    3994:	9a 83       	std	Y+2, r25	; 0x02
    3996:	89 83       	std	Y+1, r24	; 0x01
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	9a 81       	ldd	r25, Y+2	; 0x02
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	f1 f7       	brne	.-4      	; 0x399c <LCD_sendCommand+0x930>
    39a0:	9a 83       	std	Y+2, r25	; 0x02
    39a2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    39a4:	cd 59       	subi	r28, 0x9D	; 157
    39a6:	df 4f       	sbci	r29, 0xFF	; 255
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	f8 94       	cli
    39ac:	de bf       	out	0x3e, r29	; 62
    39ae:	0f be       	out	0x3f, r0	; 63
    39b0:	cd bf       	out	0x3d, r28	; 61
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	08 95       	ret

000039bc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(u8 data)
{
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	cd b7       	in	r28, 0x3d	; 61
    39c6:	de b7       	in	r29, 0x3e	; 62
    39c8:	c3 56       	subi	r28, 0x63	; 99
    39ca:	d0 40       	sbci	r29, 0x00	; 0
    39cc:	0f b6       	in	r0, 0x3f	; 63
    39ce:	f8 94       	cli
    39d0:	de bf       	out	0x3e, r29	; 62
    39d2:	0f be       	out	0x3f, r0	; 63
    39d4:	cd bf       	out	0x3d, r28	; 61
    39d6:	fe 01       	movw	r30, r28
    39d8:	ed 59       	subi	r30, 0x9D	; 157
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 83       	st	Z, r24
	DIO_voidSetPinValue(pPORTB, Pin0, LOGIC_HIGH); /* Data Mode RS=1 */
    39de:	80 91 b6 01 	lds	r24, 0x01B6
    39e2:	90 91 b7 01 	lds	r25, 0x01B7
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	41 e0       	ldi	r20, 0x01	; 1
    39ea:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    39ee:	fe 01       	movw	r30, r28
    39f0:	e1 5a       	subi	r30, 0xA1	; 161
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 e8       	ldi	r26, 0x80	; 128
    39fa:	bf e3       	ldi	r27, 0x3F	; 63
    39fc:	80 83       	st	Z, r24
    39fe:	91 83       	std	Z+1, r25	; 0x01
    3a00:	a2 83       	std	Z+2, r26	; 0x02
    3a02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	8e 01       	movw	r16, r28
    3a06:	05 5a       	subi	r16, 0xA5	; 165
    3a08:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	e1 5a       	subi	r30, 0xA1	; 161
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	82 81       	ldd	r24, Z+2	; 0x02
    3a16:	93 81       	ldd	r25, Z+3	; 0x03
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	4a ef       	ldi	r20, 0xFA	; 250
    3a1e:	54 e4       	ldi	r21, 0x44	; 68
    3a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a24:	dc 01       	movw	r26, r24
    3a26:	cb 01       	movw	r24, r22
    3a28:	f8 01       	movw	r30, r16
    3a2a:	80 83       	st	Z, r24
    3a2c:	91 83       	std	Z+1, r25	; 0x01
    3a2e:	a2 83       	std	Z+2, r26	; 0x02
    3a30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a32:	fe 01       	movw	r30, r28
    3a34:	e5 5a       	subi	r30, 0xA5	; 165
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	60 81       	ld	r22, Z
    3a3a:	71 81       	ldd	r23, Z+1	; 0x01
    3a3c:	82 81       	ldd	r24, Z+2	; 0x02
    3a3e:	93 81       	ldd	r25, Z+3	; 0x03
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	44 f4       	brge	.+16     	; 0x3a60 <LCD_displayCharacter+0xa4>
		__ticks = 1;
    3a50:	fe 01       	movw	r30, r28
    3a52:	e7 5a       	subi	r30, 0xA7	; 167
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	64 c0       	rjmp	.+200    	; 0x3b28 <LCD_displayCharacter+0x16c>
	else if (__tmp > 65535)
    3a60:	fe 01       	movw	r30, r28
    3a62:	e5 5a       	subi	r30, 0xA5	; 165
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	60 81       	ld	r22, Z
    3a68:	71 81       	ldd	r23, Z+1	; 0x01
    3a6a:	82 81       	ldd	r24, Z+2	; 0x02
    3a6c:	93 81       	ldd	r25, Z+3	; 0x03
    3a6e:	20 e0       	ldi	r18, 0x00	; 0
    3a70:	3f ef       	ldi	r19, 0xFF	; 255
    3a72:	4f e7       	ldi	r20, 0x7F	; 127
    3a74:	57 e4       	ldi	r21, 0x47	; 71
    3a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a7a:	18 16       	cp	r1, r24
    3a7c:	0c f0       	brlt	.+2      	; 0x3a80 <LCD_displayCharacter+0xc4>
    3a7e:	43 c0       	rjmp	.+134    	; 0x3b06 <LCD_displayCharacter+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	fe 01       	movw	r30, r28
    3a82:	e1 5a       	subi	r30, 0xA1	; 161
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	60 81       	ld	r22, Z
    3a88:	71 81       	ldd	r23, Z+1	; 0x01
    3a8a:	82 81       	ldd	r24, Z+2	; 0x02
    3a8c:	93 81       	ldd	r25, Z+3	; 0x03
    3a8e:	20 e0       	ldi	r18, 0x00	; 0
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	40 e2       	ldi	r20, 0x20	; 32
    3a94:	51 e4       	ldi	r21, 0x41	; 65
    3a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	8e 01       	movw	r16, r28
    3aa0:	07 5a       	subi	r16, 0xA7	; 167
    3aa2:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	f8 01       	movw	r30, r16
    3ab2:	91 83       	std	Z+1, r25	; 0x01
    3ab4:	80 83       	st	Z, r24
    3ab6:	1f c0       	rjmp	.+62     	; 0x3af6 <LCD_displayCharacter+0x13a>
    3ab8:	fe 01       	movw	r30, r28
    3aba:	e9 5a       	subi	r30, 0xA9	; 169
    3abc:	ff 4f       	sbci	r31, 0xFF	; 255
    3abe:	88 ec       	ldi	r24, 0xC8	; 200
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	91 83       	std	Z+1, r25	; 0x01
    3ac4:	80 83       	st	Z, r24
    3ac6:	fe 01       	movw	r30, r28
    3ac8:	e9 5a       	subi	r30, 0xA9	; 169
    3aca:	ff 4f       	sbci	r31, 0xFF	; 255
    3acc:	80 81       	ld	r24, Z
    3ace:	91 81       	ldd	r25, Z+1	; 0x01
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <LCD_displayCharacter+0x114>
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	e9 5a       	subi	r30, 0xA9	; 169
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	91 83       	std	Z+1, r25	; 0x01
    3adc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ade:	de 01       	movw	r26, r28
    3ae0:	a7 5a       	subi	r26, 0xA7	; 167
    3ae2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	e7 5a       	subi	r30, 0xA7	; 167
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	11 96       	adiw	r26, 0x01	; 1
    3af2:	9c 93       	st	X, r25
    3af4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af6:	fe 01       	movw	r30, r28
    3af8:	e7 5a       	subi	r30, 0xA7	; 167
    3afa:	ff 4f       	sbci	r31, 0xFF	; 255
    3afc:	80 81       	ld	r24, Z
    3afe:	91 81       	ldd	r25, Z+1	; 0x01
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	d1 f6       	brne	.-76     	; 0x3ab8 <LCD_displayCharacter+0xfc>
    3b04:	27 c0       	rjmp	.+78     	; 0x3b54 <LCD_displayCharacter+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b06:	8e 01       	movw	r16, r28
    3b08:	07 5a       	subi	r16, 0xA7	; 167
    3b0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e5 5a       	subi	r30, 0xA5	; 165
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	60 81       	ld	r22, Z
    3b14:	71 81       	ldd	r23, Z+1	; 0x01
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	93 81       	ldd	r25, Z+3	; 0x03
    3b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	f8 01       	movw	r30, r16
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	80 83       	st	Z, r24
    3b28:	de 01       	movw	r26, r28
    3b2a:	ab 5a       	subi	r26, 0xAB	; 171
    3b2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e7 5a       	subi	r30, 0xA7	; 167
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	80 81       	ld	r24, Z
    3b36:	91 81       	ldd	r25, Z+1	; 0x01
    3b38:	8d 93       	st	X+, r24
    3b3a:	9c 93       	st	X, r25
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	eb 5a       	subi	r30, 0xAB	; 171
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	91 81       	ldd	r25, Z+1	; 0x01
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	f1 f7       	brne	.-4      	; 0x3b46 <LCD_displayCharacter+0x18a>
    3b4a:	fe 01       	movw	r30, r28
    3b4c:	eb 5a       	subi	r30, 0xAB	; 171
    3b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b50:	91 83       	std	Z+1, r25	; 0x01
    3b52:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_HIGH); /* Enable LCD E=1 */
    3b54:	80 91 b6 01 	lds	r24, 0x01B6
    3b58:	90 91 b7 01 	lds	r25, 0x01B7
    3b5c:	61 e0       	ldi	r22, 0x01	; 1
    3b5e:	41 e0       	ldi	r20, 0x01	; 1
    3b60:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3b64:	fe 01       	movw	r30, r28
    3b66:	ef 5a       	subi	r30, 0xAF	; 175
    3b68:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	a0 e8       	ldi	r26, 0x80	; 128
    3b70:	bf e3       	ldi	r27, 0x3F	; 63
    3b72:	80 83       	st	Z, r24
    3b74:	91 83       	std	Z+1, r25	; 0x01
    3b76:	a2 83       	std	Z+2, r26	; 0x02
    3b78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7a:	8e 01       	movw	r16, r28
    3b7c:	03 5b       	subi	r16, 0xB3	; 179
    3b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b80:	fe 01       	movw	r30, r28
    3b82:	ef 5a       	subi	r30, 0xAF	; 175
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	60 81       	ld	r22, Z
    3b88:	71 81       	ldd	r23, Z+1	; 0x01
    3b8a:	82 81       	ldd	r24, Z+2	; 0x02
    3b8c:	93 81       	ldd	r25, Z+3	; 0x03
    3b8e:	20 e0       	ldi	r18, 0x00	; 0
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	4a ef       	ldi	r20, 0xFA	; 250
    3b94:	54 e4       	ldi	r21, 0x44	; 68
    3b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	f8 01       	movw	r30, r16
    3ba0:	80 83       	st	Z, r24
    3ba2:	91 83       	std	Z+1, r25	; 0x01
    3ba4:	a2 83       	std	Z+2, r26	; 0x02
    3ba6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ba8:	fe 01       	movw	r30, r28
    3baa:	e3 5b       	subi	r30, 0xB3	; 179
    3bac:	ff 4f       	sbci	r31, 0xFF	; 255
    3bae:	60 81       	ld	r22, Z
    3bb0:	71 81       	ldd	r23, Z+1	; 0x01
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e8       	ldi	r20, 0x80	; 128
    3bbc:	5f e3       	ldi	r21, 0x3F	; 63
    3bbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bc2:	88 23       	and	r24, r24
    3bc4:	44 f4       	brge	.+16     	; 0x3bd6 <LCD_displayCharacter+0x21a>
		__ticks = 1;
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	e5 5b       	subi	r30, 0xB5	; 181
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	91 83       	std	Z+1, r25	; 0x01
    3bd2:	80 83       	st	Z, r24
    3bd4:	64 c0       	rjmp	.+200    	; 0x3c9e <LCD_displayCharacter+0x2e2>
	else if (__tmp > 65535)
    3bd6:	fe 01       	movw	r30, r28
    3bd8:	e3 5b       	subi	r30, 0xB3	; 179
    3bda:	ff 4f       	sbci	r31, 0xFF	; 255
    3bdc:	60 81       	ld	r22, Z
    3bde:	71 81       	ldd	r23, Z+1	; 0x01
    3be0:	82 81       	ldd	r24, Z+2	; 0x02
    3be2:	93 81       	ldd	r25, Z+3	; 0x03
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	3f ef       	ldi	r19, 0xFF	; 255
    3be8:	4f e7       	ldi	r20, 0x7F	; 127
    3bea:	57 e4       	ldi	r21, 0x47	; 71
    3bec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bf0:	18 16       	cp	r1, r24
    3bf2:	0c f0       	brlt	.+2      	; 0x3bf6 <LCD_displayCharacter+0x23a>
    3bf4:	43 c0       	rjmp	.+134    	; 0x3c7c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf6:	fe 01       	movw	r30, r28
    3bf8:	ef 5a       	subi	r30, 0xAF	; 175
    3bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfc:	60 81       	ld	r22, Z
    3bfe:	71 81       	ldd	r23, Z+1	; 0x01
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	93 81       	ldd	r25, Z+3	; 0x03
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e2       	ldi	r20, 0x20	; 32
    3c0a:	51 e4       	ldi	r21, 0x41	; 65
    3c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c10:	dc 01       	movw	r26, r24
    3c12:	cb 01       	movw	r24, r22
    3c14:	8e 01       	movw	r16, r28
    3c16:	05 5b       	subi	r16, 0xB5	; 181
    3c18:	1f 4f       	sbci	r17, 0xFF	; 255
    3c1a:	bc 01       	movw	r22, r24
    3c1c:	cd 01       	movw	r24, r26
    3c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	f8 01       	movw	r30, r16
    3c28:	91 83       	std	Z+1, r25	; 0x01
    3c2a:	80 83       	st	Z, r24
    3c2c:	1f c0       	rjmp	.+62     	; 0x3c6c <LCD_displayCharacter+0x2b0>
    3c2e:	fe 01       	movw	r30, r28
    3c30:	e7 5b       	subi	r30, 0xB7	; 183
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	88 ec       	ldi	r24, 0xC8	; 200
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
    3c3c:	fe 01       	movw	r30, r28
    3c3e:	e7 5b       	subi	r30, 0xB7	; 183
    3c40:	ff 4f       	sbci	r31, 0xFF	; 255
    3c42:	80 81       	ld	r24, Z
    3c44:	91 81       	ldd	r25, Z+1	; 0x01
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f1 f7       	brne	.-4      	; 0x3c46 <LCD_displayCharacter+0x28a>
    3c4a:	fe 01       	movw	r30, r28
    3c4c:	e7 5b       	subi	r30, 0xB7	; 183
    3c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c50:	91 83       	std	Z+1, r25	; 0x01
    3c52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c54:	de 01       	movw	r26, r28
    3c56:	a5 5b       	subi	r26, 0xB5	; 181
    3c58:	bf 4f       	sbci	r27, 0xFF	; 255
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e5 5b       	subi	r30, 0xB5	; 181
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	11 96       	adiw	r26, 0x01	; 1
    3c68:	9c 93       	st	X, r25
    3c6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	e5 5b       	subi	r30, 0xB5	; 181
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	00 97       	sbiw	r24, 0x00	; 0
    3c78:	d1 f6       	brne	.-76     	; 0x3c2e <LCD_displayCharacter+0x272>
    3c7a:	27 c0       	rjmp	.+78     	; 0x3cca <LCD_displayCharacter+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c7c:	8e 01       	movw	r16, r28
    3c7e:	05 5b       	subi	r16, 0xB5	; 181
    3c80:	1f 4f       	sbci	r17, 0xFF	; 255
    3c82:	fe 01       	movw	r30, r28
    3c84:	e3 5b       	subi	r30, 0xB3	; 179
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c94:	dc 01       	movw	r26, r24
    3c96:	cb 01       	movw	r24, r22
    3c98:	f8 01       	movw	r30, r16
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	80 83       	st	Z, r24
    3c9e:	de 01       	movw	r26, r28
    3ca0:	a9 5b       	subi	r26, 0xB9	; 185
    3ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	e5 5b       	subi	r30, 0xB5	; 181
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	80 81       	ld	r24, Z
    3cac:	91 81       	ldd	r25, Z+1	; 0x01
    3cae:	8d 93       	st	X+, r24
    3cb0:	9c 93       	st	X, r25
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e9 5b       	subi	r30, 0xB9	; 185
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	80 81       	ld	r24, Z
    3cba:	91 81       	ldd	r25, Z+1	; 0x01
    3cbc:	01 97       	sbiw	r24, 0x01	; 1
    3cbe:	f1 f7       	brne	.-4      	; 0x3cbc <LCD_displayCharacter+0x300>
    3cc0:	fe 01       	movw	r30, r28
    3cc2:	e9 5b       	subi	r30, 0xB9	; 185
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	91 83       	std	Z+1, r25	; 0x01
    3cc8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	DIO_voidSetPinValue(pPORTA, pin3, GET_BIT(data,4));
    3cca:	40 91 b4 01 	lds	r20, 0x01B4
    3cce:	50 91 b5 01 	lds	r21, 0x01B5
    3cd2:	fe 01       	movw	r30, r28
    3cd4:	ed 59       	subi	r30, 0x9D	; 157
    3cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd8:	80 81       	ld	r24, Z
    3cda:	88 2f       	mov	r24, r24
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	80 71       	andi	r24, 0x10	; 16
    3ce0:	90 70       	andi	r25, 0x00	; 0
    3ce2:	95 95       	asr	r25
    3ce4:	87 95       	ror	r24
    3ce6:	95 95       	asr	r25
    3ce8:	87 95       	ror	r24
    3cea:	95 95       	asr	r25
    3cec:	87 95       	ror	r24
    3cee:	95 95       	asr	r25
    3cf0:	87 95       	ror	r24
    3cf2:	28 2f       	mov	r18, r24
    3cf4:	ca 01       	movw	r24, r20
    3cf6:	63 e0       	ldi	r22, 0x03	; 3
    3cf8:	42 2f       	mov	r20, r18
    3cfa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin4, GET_BIT(data,5));
    3cfe:	40 91 b4 01 	lds	r20, 0x01B4
    3d02:	50 91 b5 01 	lds	r21, 0x01B5
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 59       	subi	r30, 0x9D	; 157
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	80 72       	andi	r24, 0x20	; 32
    3d14:	90 70       	andi	r25, 0x00	; 0
    3d16:	95 95       	asr	r25
    3d18:	87 95       	ror	r24
    3d1a:	95 95       	asr	r25
    3d1c:	87 95       	ror	r24
    3d1e:	95 95       	asr	r25
    3d20:	87 95       	ror	r24
    3d22:	95 95       	asr	r25
    3d24:	87 95       	ror	r24
    3d26:	95 95       	asr	r25
    3d28:	87 95       	ror	r24
    3d2a:	28 2f       	mov	r18, r24
    3d2c:	ca 01       	movw	r24, r20
    3d2e:	64 e0       	ldi	r22, 0x04	; 4
    3d30:	42 2f       	mov	r20, r18
    3d32:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin5, GET_BIT(data,6));
    3d36:	40 91 b4 01 	lds	r20, 0x01B4
    3d3a:	50 91 b5 01 	lds	r21, 0x01B5
    3d3e:	fe 01       	movw	r30, r28
    3d40:	ed 59       	subi	r30, 0x9D	; 157
    3d42:	ff 4f       	sbci	r31, 0xFF	; 255
    3d44:	80 81       	ld	r24, Z
    3d46:	88 2f       	mov	r24, r24
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	80 74       	andi	r24, 0x40	; 64
    3d4c:	90 70       	andi	r25, 0x00	; 0
    3d4e:	08 2e       	mov	r0, r24
    3d50:	89 2f       	mov	r24, r25
    3d52:	00 0c       	add	r0, r0
    3d54:	88 1f       	adc	r24, r24
    3d56:	99 0b       	sbc	r25, r25
    3d58:	00 0c       	add	r0, r0
    3d5a:	88 1f       	adc	r24, r24
    3d5c:	99 1f       	adc	r25, r25
    3d5e:	28 2f       	mov	r18, r24
    3d60:	ca 01       	movw	r24, r20
    3d62:	65 e0       	ldi	r22, 0x05	; 5
    3d64:	42 2f       	mov	r20, r18
    3d66:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin6, GET_BIT(data,7));
    3d6a:	20 91 b4 01 	lds	r18, 0x01B4
    3d6e:	30 91 b5 01 	lds	r19, 0x01B5
    3d72:	fe 01       	movw	r30, r28
    3d74:	ed 59       	subi	r30, 0x9D	; 157
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	48 2f       	mov	r20, r24
    3d7c:	44 1f       	adc	r20, r20
    3d7e:	44 27       	eor	r20, r20
    3d80:	44 1f       	adc	r20, r20
    3d82:	c9 01       	movw	r24, r18
    3d84:	66 e0       	ldi	r22, 0x06	; 6
    3d86:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	ed 5b       	subi	r30, 0xBD	; 189
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	a0 e8       	ldi	r26, 0x80	; 128
    3d96:	bf e3       	ldi	r27, 0x3F	; 63
    3d98:	80 83       	st	Z, r24
    3d9a:	91 83       	std	Z+1, r25	; 0x01
    3d9c:	a2 83       	std	Z+2, r26	; 0x02
    3d9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3da0:	8e 01       	movw	r16, r28
    3da2:	01 5c       	subi	r16, 0xC1	; 193
    3da4:	1f 4f       	sbci	r17, 0xFF	; 255
    3da6:	fe 01       	movw	r30, r28
    3da8:	ed 5b       	subi	r30, 0xBD	; 189
    3daa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dac:	60 81       	ld	r22, Z
    3dae:	71 81       	ldd	r23, Z+1	; 0x01
    3db0:	82 81       	ldd	r24, Z+2	; 0x02
    3db2:	93 81       	ldd	r25, Z+3	; 0x03
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	4a ef       	ldi	r20, 0xFA	; 250
    3dba:	54 e4       	ldi	r21, 0x44	; 68
    3dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	80 83       	st	Z, r24
    3dc8:	91 83       	std	Z+1, r25	; 0x01
    3dca:	a2 83       	std	Z+2, r26	; 0x02
    3dcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dce:	fe 01       	movw	r30, r28
    3dd0:	ff 96       	adiw	r30, 0x3f	; 63
    3dd2:	60 81       	ld	r22, Z
    3dd4:	71 81       	ldd	r23, Z+1	; 0x01
    3dd6:	82 81       	ldd	r24, Z+2	; 0x02
    3dd8:	93 81       	ldd	r25, Z+3	; 0x03
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e8       	ldi	r20, 0x80	; 128
    3de0:	5f e3       	ldi	r21, 0x3F	; 63
    3de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de6:	88 23       	and	r24, r24
    3de8:	2c f4       	brge	.+10     	; 0x3df4 <LCD_displayCharacter+0x438>
		__ticks = 1;
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	9e af       	std	Y+62, r25	; 0x3e
    3df0:	8d af       	std	Y+61, r24	; 0x3d
    3df2:	46 c0       	rjmp	.+140    	; 0x3e80 <LCD_displayCharacter+0x4c4>
	else if (__tmp > 65535)
    3df4:	fe 01       	movw	r30, r28
    3df6:	ff 96       	adiw	r30, 0x3f	; 63
    3df8:	60 81       	ld	r22, Z
    3dfa:	71 81       	ldd	r23, Z+1	; 0x01
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
    3dfe:	93 81       	ldd	r25, Z+3	; 0x03
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	3f ef       	ldi	r19, 0xFF	; 255
    3e04:	4f e7       	ldi	r20, 0x7F	; 127
    3e06:	57 e4       	ldi	r21, 0x47	; 71
    3e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e0c:	18 16       	cp	r1, r24
    3e0e:	64 f5       	brge	.+88     	; 0x3e68 <LCD_displayCharacter+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e10:	fe 01       	movw	r30, r28
    3e12:	ed 5b       	subi	r30, 0xBD	; 189
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	60 81       	ld	r22, Z
    3e18:	71 81       	ldd	r23, Z+1	; 0x01
    3e1a:	82 81       	ldd	r24, Z+2	; 0x02
    3e1c:	93 81       	ldd	r25, Z+3	; 0x03
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	40 e2       	ldi	r20, 0x20	; 32
    3e24:	51 e4       	ldi	r21, 0x41	; 65
    3e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	bc 01       	movw	r22, r24
    3e30:	cd 01       	movw	r24, r26
    3e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	9e af       	std	Y+62, r25	; 0x3e
    3e3c:	8d af       	std	Y+61, r24	; 0x3d
    3e3e:	0f c0       	rjmp	.+30     	; 0x3e5e <LCD_displayCharacter+0x4a2>
    3e40:	88 ec       	ldi	r24, 0xC8	; 200
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	9c af       	std	Y+60, r25	; 0x3c
    3e46:	8b af       	std	Y+59, r24	; 0x3b
    3e48:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e4c:	01 97       	sbiw	r24, 0x01	; 1
    3e4e:	f1 f7       	brne	.-4      	; 0x3e4c <LCD_displayCharacter+0x490>
    3e50:	9c af       	std	Y+60, r25	; 0x3c
    3e52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e54:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e56:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e58:	01 97       	sbiw	r24, 0x01	; 1
    3e5a:	9e af       	std	Y+62, r25	; 0x3e
    3e5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e60:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e62:	00 97       	sbiw	r24, 0x00	; 0
    3e64:	69 f7       	brne	.-38     	; 0x3e40 <LCD_displayCharacter+0x484>
    3e66:	16 c0       	rjmp	.+44     	; 0x3e94 <LCD_displayCharacter+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ff 96       	adiw	r30, 0x3f	; 63
    3e6c:	60 81       	ld	r22, Z
    3e6e:	71 81       	ldd	r23, Z+1	; 0x01
    3e70:	82 81       	ldd	r24, Z+2	; 0x02
    3e72:	93 81       	ldd	r25, Z+3	; 0x03
    3e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	9e af       	std	Y+62, r25	; 0x3e
    3e7e:	8d af       	std	Y+61, r24	; 0x3d
    3e80:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e82:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e84:	9a af       	std	Y+58, r25	; 0x3a
    3e86:	89 af       	std	Y+57, r24	; 0x39
    3e88:	89 ad       	ldd	r24, Y+57	; 0x39
    3e8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e8c:	01 97       	sbiw	r24, 0x01	; 1
    3e8e:	f1 f7       	brne	.-4      	; 0x3e8c <LCD_displayCharacter+0x4d0>
    3e90:	9a af       	std	Y+58, r25	; 0x3a
    3e92:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_LOW); /* Disable LCD E=0 */
    3e94:	80 91 b6 01 	lds	r24, 0x01B6
    3e98:	90 91 b7 01 	lds	r25, 0x01B7
    3e9c:	61 e0       	ldi	r22, 0x01	; 1
    3e9e:	40 e0       	ldi	r20, 0x00	; 0
    3ea0:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	a0 e8       	ldi	r26, 0x80	; 128
    3eaa:	bf e3       	ldi	r27, 0x3F	; 63
    3eac:	8d ab       	std	Y+53, r24	; 0x35
    3eae:	9e ab       	std	Y+54, r25	; 0x36
    3eb0:	af ab       	std	Y+55, r26	; 0x37
    3eb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb4:	6d a9       	ldd	r22, Y+53	; 0x35
    3eb6:	7e a9       	ldd	r23, Y+54	; 0x36
    3eb8:	8f a9       	ldd	r24, Y+55	; 0x37
    3eba:	98 ad       	ldd	r25, Y+56	; 0x38
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	4a ef       	ldi	r20, 0xFA	; 250
    3ec2:	54 e4       	ldi	r21, 0x44	; 68
    3ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	89 ab       	std	Y+49, r24	; 0x31
    3ece:	9a ab       	std	Y+50, r25	; 0x32
    3ed0:	ab ab       	std	Y+51, r26	; 0x33
    3ed2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ed4:	69 a9       	ldd	r22, Y+49	; 0x31
    3ed6:	7a a9       	ldd	r23, Y+50	; 0x32
    3ed8:	8b a9       	ldd	r24, Y+51	; 0x33
    3eda:	9c a9       	ldd	r25, Y+52	; 0x34
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	5f e3       	ldi	r21, 0x3F	; 63
    3ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ee8:	88 23       	and	r24, r24
    3eea:	2c f4       	brge	.+10     	; 0x3ef6 <LCD_displayCharacter+0x53a>
		__ticks = 1;
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	98 ab       	std	Y+48, r25	; 0x30
    3ef2:	8f a7       	std	Y+47, r24	; 0x2f
    3ef4:	3f c0       	rjmp	.+126    	; 0x3f74 <LCD_displayCharacter+0x5b8>
	else if (__tmp > 65535)
    3ef6:	69 a9       	ldd	r22, Y+49	; 0x31
    3ef8:	7a a9       	ldd	r23, Y+50	; 0x32
    3efa:	8b a9       	ldd	r24, Y+51	; 0x33
    3efc:	9c a9       	ldd	r25, Y+52	; 0x34
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	3f ef       	ldi	r19, 0xFF	; 255
    3f02:	4f e7       	ldi	r20, 0x7F	; 127
    3f04:	57 e4       	ldi	r21, 0x47	; 71
    3f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f0a:	18 16       	cp	r1, r24
    3f0c:	4c f5       	brge	.+82     	; 0x3f60 <LCD_displayCharacter+0x5a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f0e:	6d a9       	ldd	r22, Y+53	; 0x35
    3f10:	7e a9       	ldd	r23, Y+54	; 0x36
    3f12:	8f a9       	ldd	r24, Y+55	; 0x37
    3f14:	98 ad       	ldd	r25, Y+56	; 0x38
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e2       	ldi	r20, 0x20	; 32
    3f1c:	51 e4       	ldi	r21, 0x41	; 65
    3f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	bc 01       	movw	r22, r24
    3f28:	cd 01       	movw	r24, r26
    3f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	98 ab       	std	Y+48, r25	; 0x30
    3f34:	8f a7       	std	Y+47, r24	; 0x2f
    3f36:	0f c0       	rjmp	.+30     	; 0x3f56 <LCD_displayCharacter+0x59a>
    3f38:	88 ec       	ldi	r24, 0xC8	; 200
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	9e a7       	std	Y+46, r25	; 0x2e
    3f3e:	8d a7       	std	Y+45, r24	; 0x2d
    3f40:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f42:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <LCD_displayCharacter+0x588>
    3f48:	9e a7       	std	Y+46, r25	; 0x2e
    3f4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f4e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	98 ab       	std	Y+48, r25	; 0x30
    3f54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f56:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f58:	98 a9       	ldd	r25, Y+48	; 0x30
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	69 f7       	brne	.-38     	; 0x3f38 <LCD_displayCharacter+0x57c>
    3f5e:	14 c0       	rjmp	.+40     	; 0x3f88 <LCD_displayCharacter+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f60:	69 a9       	ldd	r22, Y+49	; 0x31
    3f62:	7a a9       	ldd	r23, Y+50	; 0x32
    3f64:	8b a9       	ldd	r24, Y+51	; 0x33
    3f66:	9c a9       	ldd	r25, Y+52	; 0x34
    3f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	98 ab       	std	Y+48, r25	; 0x30
    3f72:	8f a7       	std	Y+47, r24	; 0x2f
    3f74:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f76:	98 a9       	ldd	r25, Y+48	; 0x30
    3f78:	9c a7       	std	Y+44, r25	; 0x2c
    3f7a:	8b a7       	std	Y+43, r24	; 0x2b
    3f7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	f1 f7       	brne	.-4      	; 0x3f80 <LCD_displayCharacter+0x5c4>
    3f84:	9c a7       	std	Y+44, r25	; 0x2c
    3f86:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_HIGH); /* Enable LCD E=1 */
    3f88:	80 91 b6 01 	lds	r24, 0x01B6
    3f8c:	90 91 b7 01 	lds	r25, 0x01B7
    3f90:	61 e0       	ldi	r22, 0x01	; 1
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    3f98:	80 e0       	ldi	r24, 0x00	; 0
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	a0 e8       	ldi	r26, 0x80	; 128
    3f9e:	bf e3       	ldi	r27, 0x3F	; 63
    3fa0:	8f a3       	std	Y+39, r24	; 0x27
    3fa2:	98 a7       	std	Y+40, r25	; 0x28
    3fa4:	a9 a7       	std	Y+41, r26	; 0x29
    3fa6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa8:	6f a1       	ldd	r22, Y+39	; 0x27
    3faa:	78 a5       	ldd	r23, Y+40	; 0x28
    3fac:	89 a5       	ldd	r24, Y+41	; 0x29
    3fae:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	4a ef       	ldi	r20, 0xFA	; 250
    3fb6:	54 e4       	ldi	r21, 0x44	; 68
    3fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	8b a3       	std	Y+35, r24	; 0x23
    3fc2:	9c a3       	std	Y+36, r25	; 0x24
    3fc4:	ad a3       	std	Y+37, r26	; 0x25
    3fc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fc8:	6b a1       	ldd	r22, Y+35	; 0x23
    3fca:	7c a1       	ldd	r23, Y+36	; 0x24
    3fcc:	8d a1       	ldd	r24, Y+37	; 0x25
    3fce:	9e a1       	ldd	r25, Y+38	; 0x26
    3fd0:	20 e0       	ldi	r18, 0x00	; 0
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	40 e8       	ldi	r20, 0x80	; 128
    3fd6:	5f e3       	ldi	r21, 0x3F	; 63
    3fd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fdc:	88 23       	and	r24, r24
    3fde:	2c f4       	brge	.+10     	; 0x3fea <LCD_displayCharacter+0x62e>
		__ticks = 1;
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	9a a3       	std	Y+34, r25	; 0x22
    3fe6:	89 a3       	std	Y+33, r24	; 0x21
    3fe8:	3f c0       	rjmp	.+126    	; 0x4068 <LCD_displayCharacter+0x6ac>
	else if (__tmp > 65535)
    3fea:	6b a1       	ldd	r22, Y+35	; 0x23
    3fec:	7c a1       	ldd	r23, Y+36	; 0x24
    3fee:	8d a1       	ldd	r24, Y+37	; 0x25
    3ff0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ffe:	18 16       	cp	r1, r24
    4000:	4c f5       	brge	.+82     	; 0x4054 <LCD_displayCharacter+0x698>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4002:	6f a1       	ldd	r22, Y+39	; 0x27
    4004:	78 a5       	ldd	r23, Y+40	; 0x28
    4006:	89 a5       	ldd	r24, Y+41	; 0x29
    4008:	9a a5       	ldd	r25, Y+42	; 0x2a
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e2       	ldi	r20, 0x20	; 32
    4010:	51 e4       	ldi	r21, 0x41	; 65
    4012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	bc 01       	movw	r22, r24
    401c:	cd 01       	movw	r24, r26
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	9a a3       	std	Y+34, r25	; 0x22
    4028:	89 a3       	std	Y+33, r24	; 0x21
    402a:	0f c0       	rjmp	.+30     	; 0x404a <LCD_displayCharacter+0x68e>
    402c:	88 ec       	ldi	r24, 0xC8	; 200
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	98 a3       	std	Y+32, r25	; 0x20
    4032:	8f 8f       	std	Y+31, r24	; 0x1f
    4034:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4036:	98 a1       	ldd	r25, Y+32	; 0x20
    4038:	01 97       	sbiw	r24, 0x01	; 1
    403a:	f1 f7       	brne	.-4      	; 0x4038 <LCD_displayCharacter+0x67c>
    403c:	98 a3       	std	Y+32, r25	; 0x20
    403e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4040:	89 a1       	ldd	r24, Y+33	; 0x21
    4042:	9a a1       	ldd	r25, Y+34	; 0x22
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	9a a3       	std	Y+34, r25	; 0x22
    4048:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    404a:	89 a1       	ldd	r24, Y+33	; 0x21
    404c:	9a a1       	ldd	r25, Y+34	; 0x22
    404e:	00 97       	sbiw	r24, 0x00	; 0
    4050:	69 f7       	brne	.-38     	; 0x402c <LCD_displayCharacter+0x670>
    4052:	14 c0       	rjmp	.+40     	; 0x407c <LCD_displayCharacter+0x6c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4054:	6b a1       	ldd	r22, Y+35	; 0x23
    4056:	7c a1       	ldd	r23, Y+36	; 0x24
    4058:	8d a1       	ldd	r24, Y+37	; 0x25
    405a:	9e a1       	ldd	r25, Y+38	; 0x26
    405c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	9a a3       	std	Y+34, r25	; 0x22
    4066:	89 a3       	std	Y+33, r24	; 0x21
    4068:	89 a1       	ldd	r24, Y+33	; 0x21
    406a:	9a a1       	ldd	r25, Y+34	; 0x22
    406c:	9e 8f       	std	Y+30, r25	; 0x1e
    406e:	8d 8f       	std	Y+29, r24	; 0x1d
    4070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4072:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	f1 f7       	brne	.-4      	; 0x4074 <LCD_displayCharacter+0x6b8>
    4078:	9e 8f       	std	Y+30, r25	; 0x1e
    407a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	DIO_voidSetPinValue(pPORTA, pin3, GET_BIT(data,0));
    407c:	20 91 b4 01 	lds	r18, 0x01B4
    4080:	30 91 b5 01 	lds	r19, 0x01B5
    4084:	fe 01       	movw	r30, r28
    4086:	ed 59       	subi	r30, 0x9D	; 157
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	80 81       	ld	r24, Z
    408c:	48 2f       	mov	r20, r24
    408e:	41 70       	andi	r20, 0x01	; 1
    4090:	c9 01       	movw	r24, r18
    4092:	63 e0       	ldi	r22, 0x03	; 3
    4094:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin4, GET_BIT(data,1));
    4098:	40 91 b4 01 	lds	r20, 0x01B4
    409c:	50 91 b5 01 	lds	r21, 0x01B5
    40a0:	fe 01       	movw	r30, r28
    40a2:	ed 59       	subi	r30, 0x9D	; 157
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	80 81       	ld	r24, Z
    40a8:	88 2f       	mov	r24, r24
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	82 70       	andi	r24, 0x02	; 2
    40ae:	90 70       	andi	r25, 0x00	; 0
    40b0:	95 95       	asr	r25
    40b2:	87 95       	ror	r24
    40b4:	28 2f       	mov	r18, r24
    40b6:	ca 01       	movw	r24, r20
    40b8:	64 e0       	ldi	r22, 0x04	; 4
    40ba:	42 2f       	mov	r20, r18
    40bc:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin5, GET_BIT(data,2));
    40c0:	40 91 b4 01 	lds	r20, 0x01B4
    40c4:	50 91 b5 01 	lds	r21, 0x01B5
    40c8:	fe 01       	movw	r30, r28
    40ca:	ed 59       	subi	r30, 0x9D	; 157
    40cc:	ff 4f       	sbci	r31, 0xFF	; 255
    40ce:	80 81       	ld	r24, Z
    40d0:	88 2f       	mov	r24, r24
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	84 70       	andi	r24, 0x04	; 4
    40d6:	90 70       	andi	r25, 0x00	; 0
    40d8:	95 95       	asr	r25
    40da:	87 95       	ror	r24
    40dc:	95 95       	asr	r25
    40de:	87 95       	ror	r24
    40e0:	28 2f       	mov	r18, r24
    40e2:	ca 01       	movw	r24, r20
    40e4:	65 e0       	ldi	r22, 0x05	; 5
    40e6:	42 2f       	mov	r20, r18
    40e8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTA, pin6, GET_BIT(data,3));
    40ec:	40 91 b4 01 	lds	r20, 0x01B4
    40f0:	50 91 b5 01 	lds	r21, 0x01B5
    40f4:	fe 01       	movw	r30, r28
    40f6:	ed 59       	subi	r30, 0x9D	; 157
    40f8:	ff 4f       	sbci	r31, 0xFF	; 255
    40fa:	80 81       	ld	r24, Z
    40fc:	88 2f       	mov	r24, r24
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	88 70       	andi	r24, 0x08	; 8
    4102:	90 70       	andi	r25, 0x00	; 0
    4104:	95 95       	asr	r25
    4106:	87 95       	ror	r24
    4108:	95 95       	asr	r25
    410a:	87 95       	ror	r24
    410c:	95 95       	asr	r25
    410e:	87 95       	ror	r24
    4110:	28 2f       	mov	r18, r24
    4112:	ca 01       	movw	r24, r20
    4114:	66 e0       	ldi	r22, 0x06	; 6
    4116:	42 2f       	mov	r20, r18
    4118:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    411c:	80 e0       	ldi	r24, 0x00	; 0
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	a0 e8       	ldi	r26, 0x80	; 128
    4122:	bf e3       	ldi	r27, 0x3F	; 63
    4124:	89 8f       	std	Y+25, r24	; 0x19
    4126:	9a 8f       	std	Y+26, r25	; 0x1a
    4128:	ab 8f       	std	Y+27, r26	; 0x1b
    412a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    412c:	69 8d       	ldd	r22, Y+25	; 0x19
    412e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	4a ef       	ldi	r20, 0xFA	; 250
    413a:	54 e4       	ldi	r21, 0x44	; 68
    413c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4140:	dc 01       	movw	r26, r24
    4142:	cb 01       	movw	r24, r22
    4144:	8d 8b       	std	Y+21, r24	; 0x15
    4146:	9e 8b       	std	Y+22, r25	; 0x16
    4148:	af 8b       	std	Y+23, r26	; 0x17
    414a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    414c:	6d 89       	ldd	r22, Y+21	; 0x15
    414e:	7e 89       	ldd	r23, Y+22	; 0x16
    4150:	8f 89       	ldd	r24, Y+23	; 0x17
    4152:	98 8d       	ldd	r25, Y+24	; 0x18
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	40 e8       	ldi	r20, 0x80	; 128
    415a:	5f e3       	ldi	r21, 0x3F	; 63
    415c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4160:	88 23       	and	r24, r24
    4162:	2c f4       	brge	.+10     	; 0x416e <LCD_displayCharacter+0x7b2>
		__ticks = 1;
    4164:	81 e0       	ldi	r24, 0x01	; 1
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	9c 8b       	std	Y+20, r25	; 0x14
    416a:	8b 8b       	std	Y+19, r24	; 0x13
    416c:	3f c0       	rjmp	.+126    	; 0x41ec <LCD_displayCharacter+0x830>
	else if (__tmp > 65535)
    416e:	6d 89       	ldd	r22, Y+21	; 0x15
    4170:	7e 89       	ldd	r23, Y+22	; 0x16
    4172:	8f 89       	ldd	r24, Y+23	; 0x17
    4174:	98 8d       	ldd	r25, Y+24	; 0x18
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	3f ef       	ldi	r19, 0xFF	; 255
    417a:	4f e7       	ldi	r20, 0x7F	; 127
    417c:	57 e4       	ldi	r21, 0x47	; 71
    417e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4182:	18 16       	cp	r1, r24
    4184:	4c f5       	brge	.+82     	; 0x41d8 <LCD_displayCharacter+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4186:	69 8d       	ldd	r22, Y+25	; 0x19
    4188:	7a 8d       	ldd	r23, Y+26	; 0x1a
    418a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    418c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9c 8b       	std	Y+20, r25	; 0x14
    41ac:	8b 8b       	std	Y+19, r24	; 0x13
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <LCD_displayCharacter+0x812>
    41b0:	88 ec       	ldi	r24, 0xC8	; 200
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	9a 8b       	std	Y+18, r25	; 0x12
    41b6:	89 8b       	std	Y+17, r24	; 0x11
    41b8:	89 89       	ldd	r24, Y+17	; 0x11
    41ba:	9a 89       	ldd	r25, Y+18	; 0x12
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <LCD_displayCharacter+0x800>
    41c0:	9a 8b       	std	Y+18, r25	; 0x12
    41c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c4:	8b 89       	ldd	r24, Y+19	; 0x13
    41c6:	9c 89       	ldd	r25, Y+20	; 0x14
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9c 8b       	std	Y+20, r25	; 0x14
    41cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ce:	8b 89       	ldd	r24, Y+19	; 0x13
    41d0:	9c 89       	ldd	r25, Y+20	; 0x14
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <LCD_displayCharacter+0x7f4>
    41d6:	14 c0       	rjmp	.+40     	; 0x4200 <LCD_displayCharacter+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	6d 89       	ldd	r22, Y+21	; 0x15
    41da:	7e 89       	ldd	r23, Y+22	; 0x16
    41dc:	8f 89       	ldd	r24, Y+23	; 0x17
    41de:	98 8d       	ldd	r25, Y+24	; 0x18
    41e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	9c 8b       	std	Y+20, r25	; 0x14
    41ea:	8b 8b       	std	Y+19, r24	; 0x13
    41ec:	8b 89       	ldd	r24, Y+19	; 0x13
    41ee:	9c 89       	ldd	r25, Y+20	; 0x14
    41f0:	98 8b       	std	Y+16, r25	; 0x10
    41f2:	8f 87       	std	Y+15, r24	; 0x0f
    41f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    41f6:	98 89       	ldd	r25, Y+16	; 0x10
    41f8:	01 97       	sbiw	r24, 0x01	; 1
    41fa:	f1 f7       	brne	.-4      	; 0x41f8 <LCD_displayCharacter+0x83c>
    41fc:	98 8b       	std	Y+16, r25	; 0x10
    41fe:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	DIO_voidSetPinValue(pPORTB, pin1, LOGIC_LOW);/* Disable LCD E=0 */
    4200:	80 91 b6 01 	lds	r24, 0x01B6
    4204:	90 91 b7 01 	lds	r25, 0x01B7
    4208:	61 e0       	ldi	r22, 0x01	; 1
    420a:	40 e0       	ldi	r20, 0x00	; 0
    420c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <DIO_voidSetPinValue>
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	a0 e8       	ldi	r26, 0x80	; 128
    4216:	bf e3       	ldi	r27, 0x3F	; 63
    4218:	8b 87       	std	Y+11, r24	; 0x0b
    421a:	9c 87       	std	Y+12, r25	; 0x0c
    421c:	ad 87       	std	Y+13, r26	; 0x0d
    421e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4220:	6b 85       	ldd	r22, Y+11	; 0x0b
    4222:	7c 85       	ldd	r23, Y+12	; 0x0c
    4224:	8d 85       	ldd	r24, Y+13	; 0x0d
    4226:	9e 85       	ldd	r25, Y+14	; 0x0e
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	4a ef       	ldi	r20, 0xFA	; 250
    422e:	54 e4       	ldi	r21, 0x44	; 68
    4230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	8f 83       	std	Y+7, r24	; 0x07
    423a:	98 87       	std	Y+8, r25	; 0x08
    423c:	a9 87       	std	Y+9, r26	; 0x09
    423e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4240:	6f 81       	ldd	r22, Y+7	; 0x07
    4242:	78 85       	ldd	r23, Y+8	; 0x08
    4244:	89 85       	ldd	r24, Y+9	; 0x09
    4246:	9a 85       	ldd	r25, Y+10	; 0x0a
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	40 e8       	ldi	r20, 0x80	; 128
    424e:	5f e3       	ldi	r21, 0x3F	; 63
    4250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4254:	88 23       	and	r24, r24
    4256:	2c f4       	brge	.+10     	; 0x4262 <LCD_displayCharacter+0x8a6>
		__ticks = 1;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	9e 83       	std	Y+6, r25	; 0x06
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	3f c0       	rjmp	.+126    	; 0x42e0 <LCD_displayCharacter+0x924>
	else if (__tmp > 65535)
    4262:	6f 81       	ldd	r22, Y+7	; 0x07
    4264:	78 85       	ldd	r23, Y+8	; 0x08
    4266:	89 85       	ldd	r24, Y+9	; 0x09
    4268:	9a 85       	ldd	r25, Y+10	; 0x0a
    426a:	20 e0       	ldi	r18, 0x00	; 0
    426c:	3f ef       	ldi	r19, 0xFF	; 255
    426e:	4f e7       	ldi	r20, 0x7F	; 127
    4270:	57 e4       	ldi	r21, 0x47	; 71
    4272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4276:	18 16       	cp	r1, r24
    4278:	4c f5       	brge	.+82     	; 0x42cc <LCD_displayCharacter+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    427a:	6b 85       	ldd	r22, Y+11	; 0x0b
    427c:	7c 85       	ldd	r23, Y+12	; 0x0c
    427e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4280:	9e 85       	ldd	r25, Y+14	; 0x0e
    4282:	20 e0       	ldi	r18, 0x00	; 0
    4284:	30 e0       	ldi	r19, 0x00	; 0
    4286:	40 e2       	ldi	r20, 0x20	; 32
    4288:	51 e4       	ldi	r21, 0x41	; 65
    428a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    428e:	dc 01       	movw	r26, r24
    4290:	cb 01       	movw	r24, r22
    4292:	bc 01       	movw	r22, r24
    4294:	cd 01       	movw	r24, r26
    4296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429a:	dc 01       	movw	r26, r24
    429c:	cb 01       	movw	r24, r22
    429e:	9e 83       	std	Y+6, r25	; 0x06
    42a0:	8d 83       	std	Y+5, r24	; 0x05
    42a2:	0f c0       	rjmp	.+30     	; 0x42c2 <LCD_displayCharacter+0x906>
    42a4:	88 ec       	ldi	r24, 0xC8	; 200
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	9c 83       	std	Y+4, r25	; 0x04
    42aa:	8b 83       	std	Y+3, r24	; 0x03
    42ac:	8b 81       	ldd	r24, Y+3	; 0x03
    42ae:	9c 81       	ldd	r25, Y+4	; 0x04
    42b0:	01 97       	sbiw	r24, 0x01	; 1
    42b2:	f1 f7       	brne	.-4      	; 0x42b0 <LCD_displayCharacter+0x8f4>
    42b4:	9c 83       	std	Y+4, r25	; 0x04
    42b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ba:	9e 81       	ldd	r25, Y+6	; 0x06
    42bc:	01 97       	sbiw	r24, 0x01	; 1
    42be:	9e 83       	std	Y+6, r25	; 0x06
    42c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	69 f7       	brne	.-38     	; 0x42a4 <LCD_displayCharacter+0x8e8>
    42ca:	14 c0       	rjmp	.+40     	; 0x42f4 <LCD_displayCharacter+0x938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42cc:	6f 81       	ldd	r22, Y+7	; 0x07
    42ce:	78 85       	ldd	r23, Y+8	; 0x08
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	9e 83       	std	Y+6, r25	; 0x06
    42de:	8d 83       	std	Y+5, r24	; 0x05
    42e0:	8d 81       	ldd	r24, Y+5	; 0x05
    42e2:	9e 81       	ldd	r25, Y+6	; 0x06
    42e4:	9a 83       	std	Y+2, r25	; 0x02
    42e6:	89 83       	std	Y+1, r24	; 0x01
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	9a 81       	ldd	r25, Y+2	; 0x02
    42ec:	01 97       	sbiw	r24, 0x01	; 1
    42ee:	f1 f7       	brne	.-4      	; 0x42ec <LCD_displayCharacter+0x930>
    42f0:	9a 83       	std	Y+2, r25	; 0x02
    42f2:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    42f4:	cd 59       	subi	r28, 0x9D	; 157
    42f6:	df 4f       	sbci	r29, 0xFF	; 255
    42f8:	0f b6       	in	r0, 0x3f	; 63
    42fa:	f8 94       	cli
    42fc:	de bf       	out	0x3e, r29	; 62
    42fe:	0f be       	out	0x3f, r0	; 63
    4300:	cd bf       	out	0x3d, r28	; 61
    4302:	cf 91       	pop	r28
    4304:	df 91       	pop	r29
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	08 95       	ret

0000430c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    430c:	df 93       	push	r29
    430e:	cf 93       	push	r28
    4310:	00 d0       	rcall	.+0      	; 0x4312 <LCD_displayString+0x6>
    4312:	0f 92       	push	r0
    4314:	cd b7       	in	r28, 0x3d	; 61
    4316:	de b7       	in	r29, 0x3e	; 62
    4318:	9b 83       	std	Y+3, r25	; 0x03
    431a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    431c:	19 82       	std	Y+1, r1	; 0x01
    431e:	0e c0       	rjmp	.+28     	; 0x433c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4320:	89 81       	ldd	r24, Y+1	; 0x01
    4322:	28 2f       	mov	r18, r24
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	9b 81       	ldd	r25, Y+3	; 0x03
    432a:	fc 01       	movw	r30, r24
    432c:	e2 0f       	add	r30, r18
    432e:	f3 1f       	adc	r31, r19
    4330:	80 81       	ld	r24, Z
    4332:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_displayCharacter>
		i++;
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	8f 5f       	subi	r24, 0xFF	; 255
    433a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
    433c:	89 81       	ldd	r24, Y+1	; 0x01
    433e:	28 2f       	mov	r18, r24
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	8a 81       	ldd	r24, Y+2	; 0x02
    4344:	9b 81       	ldd	r25, Y+3	; 0x03
    4346:	fc 01       	movw	r30, r24
    4348:	e2 0f       	add	r30, r18
    434a:	f3 1f       	adc	r31, r19
    434c:	80 81       	ld	r24, Z
    434e:	88 23       	and	r24, r24
    4350:	39 f7       	brne	.-50     	; 0x4320 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	 *********************************************************/
}
    4352:	0f 90       	pop	r0
    4354:	0f 90       	pop	r0
    4356:	0f 90       	pop	r0
    4358:	cf 91       	pop	r28
    435a:	df 91       	pop	r29
    435c:	08 95       	ret

0000435e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(u8 row,u8 col)
{
    435e:	df 93       	push	r29
    4360:	cf 93       	push	r28
    4362:	00 d0       	rcall	.+0      	; 0x4364 <LCD_moveCursor+0x6>
    4364:	00 d0       	rcall	.+0      	; 0x4366 <LCD_moveCursor+0x8>
    4366:	0f 92       	push	r0
    4368:	cd b7       	in	r28, 0x3d	; 61
    436a:	de b7       	in	r29, 0x3e	; 62
    436c:	8a 83       	std	Y+2, r24	; 0x02
    436e:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4370:	8a 81       	ldd	r24, Y+2	; 0x02
    4372:	28 2f       	mov	r18, r24
    4374:	30 e0       	ldi	r19, 0x00	; 0
    4376:	3d 83       	std	Y+5, r19	; 0x05
    4378:	2c 83       	std	Y+4, r18	; 0x04
    437a:	8c 81       	ldd	r24, Y+4	; 0x04
    437c:	9d 81       	ldd	r25, Y+5	; 0x05
    437e:	81 30       	cpi	r24, 0x01	; 1
    4380:	91 05       	cpc	r25, r1
    4382:	c1 f0       	breq	.+48     	; 0x43b4 <LCD_moveCursor+0x56>
    4384:	2c 81       	ldd	r18, Y+4	; 0x04
    4386:	3d 81       	ldd	r19, Y+5	; 0x05
    4388:	22 30       	cpi	r18, 0x02	; 2
    438a:	31 05       	cpc	r19, r1
    438c:	2c f4       	brge	.+10     	; 0x4398 <LCD_moveCursor+0x3a>
    438e:	8c 81       	ldd	r24, Y+4	; 0x04
    4390:	9d 81       	ldd	r25, Y+5	; 0x05
    4392:	00 97       	sbiw	r24, 0x00	; 0
    4394:	61 f0       	breq	.+24     	; 0x43ae <LCD_moveCursor+0x50>
    4396:	19 c0       	rjmp	.+50     	; 0x43ca <LCD_moveCursor+0x6c>
    4398:	2c 81       	ldd	r18, Y+4	; 0x04
    439a:	3d 81       	ldd	r19, Y+5	; 0x05
    439c:	22 30       	cpi	r18, 0x02	; 2
    439e:	31 05       	cpc	r19, r1
    43a0:	69 f0       	breq	.+26     	; 0x43bc <LCD_moveCursor+0x5e>
    43a2:	8c 81       	ldd	r24, Y+4	; 0x04
    43a4:	9d 81       	ldd	r25, Y+5	; 0x05
    43a6:	83 30       	cpi	r24, 0x03	; 3
    43a8:	91 05       	cpc	r25, r1
    43aa:	61 f0       	breq	.+24     	; 0x43c4 <LCD_moveCursor+0x66>
    43ac:	0e c0       	rjmp	.+28     	; 0x43ca <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    43ae:	8b 81       	ldd	r24, Y+3	; 0x03
    43b0:	89 83       	std	Y+1, r24	; 0x01
    43b2:	0b c0       	rjmp	.+22     	; 0x43ca <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    43b4:	8b 81       	ldd	r24, Y+3	; 0x03
    43b6:	80 5c       	subi	r24, 0xC0	; 192
    43b8:	89 83       	std	Y+1, r24	; 0x01
    43ba:	07 c0       	rjmp	.+14     	; 0x43ca <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    43bc:	8b 81       	ldd	r24, Y+3	; 0x03
    43be:	80 5f       	subi	r24, 0xF0	; 240
    43c0:	89 83       	std	Y+1, r24	; 0x01
    43c2:	03 c0       	rjmp	.+6      	; 0x43ca <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    43c4:	8b 81       	ldd	r24, Y+3	; 0x03
    43c6:	80 5b       	subi	r24, 0xB0	; 176
    43c8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
    43cc:	80 68       	ori	r24, 0x80	; 128
    43ce:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>
}
    43d2:	0f 90       	pop	r0
    43d4:	0f 90       	pop	r0
    43d6:	0f 90       	pop	r0
    43d8:	0f 90       	pop	r0
    43da:	0f 90       	pop	r0
    43dc:	cf 91       	pop	r28
    43de:	df 91       	pop	r29
    43e0:	08 95       	ret

000043e2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(u8 row,u8 col,const char *Str)
{
    43e2:	df 93       	push	r29
    43e4:	cf 93       	push	r28
    43e6:	00 d0       	rcall	.+0      	; 0x43e8 <LCD_displayStringRowColumn+0x6>
    43e8:	00 d0       	rcall	.+0      	; 0x43ea <LCD_displayStringRowColumn+0x8>
    43ea:	cd b7       	in	r28, 0x3d	; 61
    43ec:	de b7       	in	r29, 0x3e	; 62
    43ee:	89 83       	std	Y+1, r24	; 0x01
    43f0:	6a 83       	std	Y+2, r22	; 0x02
    43f2:	5c 83       	std	Y+4, r21	; 0x04
    43f4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	6a 81       	ldd	r22, Y+2	; 0x02
    43fa:	0e 94 af 21 	call	0x435e	; 0x435e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    43fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4400:	9c 81       	ldd	r25, Y+4	; 0x04
    4402:	0e 94 86 21 	call	0x430c	; 0x430c <LCD_displayString>
}
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	cf 91       	pop	r28
    4410:	df 91       	pop	r29
    4412:	08 95       	ret

00004414 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    4414:	df 93       	push	r29
    4416:	cf 93       	push	r28
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	62 97       	sbiw	r28, 0x12	; 18
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	f8 94       	cli
    4422:	de bf       	out	0x3e, r29	; 62
    4424:	0f be       	out	0x3f, r0	; 63
    4426:	cd bf       	out	0x3d, r28	; 61
    4428:	9a 8b       	std	Y+18, r25	; 0x12
    442a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    442c:	89 89       	ldd	r24, Y+17	; 0x11
    442e:	9a 89       	ldd	r25, Y+18	; 0x12
    4430:	9e 01       	movw	r18, r28
    4432:	2f 5f       	subi	r18, 0xFF	; 255
    4434:	3f 4f       	sbci	r19, 0xFF	; 255
    4436:	b9 01       	movw	r22, r18
    4438:	4a e0       	ldi	r20, 0x0A	; 10
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <itoa>
	LCD_displayString(buff); /* Display the string */
    4440:	ce 01       	movw	r24, r28
    4442:	01 96       	adiw	r24, 0x01	; 1
    4444:	0e 94 86 21 	call	0x430c	; 0x430c <LCD_displayString>
}
    4448:	62 96       	adiw	r28, 0x12	; 18
    444a:	0f b6       	in	r0, 0x3f	; 63
    444c:	f8 94       	cli
    444e:	de bf       	out	0x3e, r29	; 62
    4450:	0f be       	out	0x3f, r0	; 63
    4452:	cd bf       	out	0x3d, r28	; 61
    4454:	cf 91       	pop	r28
    4456:	df 91       	pop	r29
    4458:	08 95       	ret

0000445a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    445a:	df 93       	push	r29
    445c:	cf 93       	push	r28
    445e:	cd b7       	in	r28, 0x3d	; 61
    4460:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	0e 94 36 18 	call	0x306c	; 0x306c <LCD_sendCommand>
}
    4468:	cf 91       	pop	r28
    446a:	df 91       	pop	r29
    446c:	08 95       	ret

0000446e <__mulsi3>:
    446e:	62 9f       	mul	r22, r18
    4470:	d0 01       	movw	r26, r0
    4472:	73 9f       	mul	r23, r19
    4474:	f0 01       	movw	r30, r0
    4476:	82 9f       	mul	r24, r18
    4478:	e0 0d       	add	r30, r0
    447a:	f1 1d       	adc	r31, r1
    447c:	64 9f       	mul	r22, r20
    447e:	e0 0d       	add	r30, r0
    4480:	f1 1d       	adc	r31, r1
    4482:	92 9f       	mul	r25, r18
    4484:	f0 0d       	add	r31, r0
    4486:	83 9f       	mul	r24, r19
    4488:	f0 0d       	add	r31, r0
    448a:	74 9f       	mul	r23, r20
    448c:	f0 0d       	add	r31, r0
    448e:	65 9f       	mul	r22, r21
    4490:	f0 0d       	add	r31, r0
    4492:	99 27       	eor	r25, r25
    4494:	72 9f       	mul	r23, r18
    4496:	b0 0d       	add	r27, r0
    4498:	e1 1d       	adc	r30, r1
    449a:	f9 1f       	adc	r31, r25
    449c:	63 9f       	mul	r22, r19
    449e:	b0 0d       	add	r27, r0
    44a0:	e1 1d       	adc	r30, r1
    44a2:	f9 1f       	adc	r31, r25
    44a4:	bd 01       	movw	r22, r26
    44a6:	cf 01       	movw	r24, r30
    44a8:	11 24       	eor	r1, r1
    44aa:	08 95       	ret

000044ac <__divmodhi4>:
    44ac:	97 fb       	bst	r25, 7
    44ae:	09 2e       	mov	r0, r25
    44b0:	07 26       	eor	r0, r23
    44b2:	0a d0       	rcall	.+20     	; 0x44c8 <__divmodhi4_neg1>
    44b4:	77 fd       	sbrc	r23, 7
    44b6:	04 d0       	rcall	.+8      	; 0x44c0 <__divmodhi4_neg2>
    44b8:	27 d0       	rcall	.+78     	; 0x4508 <__udivmodhi4>
    44ba:	06 d0       	rcall	.+12     	; 0x44c8 <__divmodhi4_neg1>
    44bc:	00 20       	and	r0, r0
    44be:	1a f4       	brpl	.+6      	; 0x44c6 <__divmodhi4_exit>

000044c0 <__divmodhi4_neg2>:
    44c0:	70 95       	com	r23
    44c2:	61 95       	neg	r22
    44c4:	7f 4f       	sbci	r23, 0xFF	; 255

000044c6 <__divmodhi4_exit>:
    44c6:	08 95       	ret

000044c8 <__divmodhi4_neg1>:
    44c8:	f6 f7       	brtc	.-4      	; 0x44c6 <__divmodhi4_exit>
    44ca:	90 95       	com	r25
    44cc:	81 95       	neg	r24
    44ce:	9f 4f       	sbci	r25, 0xFF	; 255
    44d0:	08 95       	ret

000044d2 <__divmodsi4>:
    44d2:	97 fb       	bst	r25, 7
    44d4:	09 2e       	mov	r0, r25
    44d6:	05 26       	eor	r0, r21
    44d8:	0e d0       	rcall	.+28     	; 0x44f6 <__divmodsi4_neg1>
    44da:	57 fd       	sbrc	r21, 7
    44dc:	04 d0       	rcall	.+8      	; 0x44e6 <__divmodsi4_neg2>
    44de:	28 d0       	rcall	.+80     	; 0x4530 <__udivmodsi4>
    44e0:	0a d0       	rcall	.+20     	; 0x44f6 <__divmodsi4_neg1>
    44e2:	00 1c       	adc	r0, r0
    44e4:	38 f4       	brcc	.+14     	; 0x44f4 <__divmodsi4_exit>

000044e6 <__divmodsi4_neg2>:
    44e6:	50 95       	com	r21
    44e8:	40 95       	com	r20
    44ea:	30 95       	com	r19
    44ec:	21 95       	neg	r18
    44ee:	3f 4f       	sbci	r19, 0xFF	; 255
    44f0:	4f 4f       	sbci	r20, 0xFF	; 255
    44f2:	5f 4f       	sbci	r21, 0xFF	; 255

000044f4 <__divmodsi4_exit>:
    44f4:	08 95       	ret

000044f6 <__divmodsi4_neg1>:
    44f6:	f6 f7       	brtc	.-4      	; 0x44f4 <__divmodsi4_exit>
    44f8:	90 95       	com	r25
    44fa:	80 95       	com	r24
    44fc:	70 95       	com	r23
    44fe:	61 95       	neg	r22
    4500:	7f 4f       	sbci	r23, 0xFF	; 255
    4502:	8f 4f       	sbci	r24, 0xFF	; 255
    4504:	9f 4f       	sbci	r25, 0xFF	; 255
    4506:	08 95       	ret

00004508 <__udivmodhi4>:
    4508:	aa 1b       	sub	r26, r26
    450a:	bb 1b       	sub	r27, r27
    450c:	51 e1       	ldi	r21, 0x11	; 17
    450e:	07 c0       	rjmp	.+14     	; 0x451e <__udivmodhi4_ep>

00004510 <__udivmodhi4_loop>:
    4510:	aa 1f       	adc	r26, r26
    4512:	bb 1f       	adc	r27, r27
    4514:	a6 17       	cp	r26, r22
    4516:	b7 07       	cpc	r27, r23
    4518:	10 f0       	brcs	.+4      	; 0x451e <__udivmodhi4_ep>
    451a:	a6 1b       	sub	r26, r22
    451c:	b7 0b       	sbc	r27, r23

0000451e <__udivmodhi4_ep>:
    451e:	88 1f       	adc	r24, r24
    4520:	99 1f       	adc	r25, r25
    4522:	5a 95       	dec	r21
    4524:	a9 f7       	brne	.-22     	; 0x4510 <__udivmodhi4_loop>
    4526:	80 95       	com	r24
    4528:	90 95       	com	r25
    452a:	bc 01       	movw	r22, r24
    452c:	cd 01       	movw	r24, r26
    452e:	08 95       	ret

00004530 <__udivmodsi4>:
    4530:	a1 e2       	ldi	r26, 0x21	; 33
    4532:	1a 2e       	mov	r1, r26
    4534:	aa 1b       	sub	r26, r26
    4536:	bb 1b       	sub	r27, r27
    4538:	fd 01       	movw	r30, r26
    453a:	0d c0       	rjmp	.+26     	; 0x4556 <__udivmodsi4_ep>

0000453c <__udivmodsi4_loop>:
    453c:	aa 1f       	adc	r26, r26
    453e:	bb 1f       	adc	r27, r27
    4540:	ee 1f       	adc	r30, r30
    4542:	ff 1f       	adc	r31, r31
    4544:	a2 17       	cp	r26, r18
    4546:	b3 07       	cpc	r27, r19
    4548:	e4 07       	cpc	r30, r20
    454a:	f5 07       	cpc	r31, r21
    454c:	20 f0       	brcs	.+8      	; 0x4556 <__udivmodsi4_ep>
    454e:	a2 1b       	sub	r26, r18
    4550:	b3 0b       	sbc	r27, r19
    4552:	e4 0b       	sbc	r30, r20
    4554:	f5 0b       	sbc	r31, r21

00004556 <__udivmodsi4_ep>:
    4556:	66 1f       	adc	r22, r22
    4558:	77 1f       	adc	r23, r23
    455a:	88 1f       	adc	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	1a 94       	dec	r1
    4560:	69 f7       	brne	.-38     	; 0x453c <__udivmodsi4_loop>
    4562:	60 95       	com	r22
    4564:	70 95       	com	r23
    4566:	80 95       	com	r24
    4568:	90 95       	com	r25
    456a:	9b 01       	movw	r18, r22
    456c:	ac 01       	movw	r20, r24
    456e:	bd 01       	movw	r22, r26
    4570:	cf 01       	movw	r24, r30
    4572:	08 95       	ret

00004574 <__prologue_saves__>:
    4574:	2f 92       	push	r2
    4576:	3f 92       	push	r3
    4578:	4f 92       	push	r4
    457a:	5f 92       	push	r5
    457c:	6f 92       	push	r6
    457e:	7f 92       	push	r7
    4580:	8f 92       	push	r8
    4582:	9f 92       	push	r9
    4584:	af 92       	push	r10
    4586:	bf 92       	push	r11
    4588:	cf 92       	push	r12
    458a:	df 92       	push	r13
    458c:	ef 92       	push	r14
    458e:	ff 92       	push	r15
    4590:	0f 93       	push	r16
    4592:	1f 93       	push	r17
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
    459c:	ca 1b       	sub	r28, r26
    459e:	db 0b       	sbc	r29, r27
    45a0:	0f b6       	in	r0, 0x3f	; 63
    45a2:	f8 94       	cli
    45a4:	de bf       	out	0x3e, r29	; 62
    45a6:	0f be       	out	0x3f, r0	; 63
    45a8:	cd bf       	out	0x3d, r28	; 61
    45aa:	09 94       	ijmp

000045ac <__epilogue_restores__>:
    45ac:	2a 88       	ldd	r2, Y+18	; 0x12
    45ae:	39 88       	ldd	r3, Y+17	; 0x11
    45b0:	48 88       	ldd	r4, Y+16	; 0x10
    45b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    45b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    45b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    45b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    45ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    45bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    45be:	b9 84       	ldd	r11, Y+9	; 0x09
    45c0:	c8 84       	ldd	r12, Y+8	; 0x08
    45c2:	df 80       	ldd	r13, Y+7	; 0x07
    45c4:	ee 80       	ldd	r14, Y+6	; 0x06
    45c6:	fd 80       	ldd	r15, Y+5	; 0x05
    45c8:	0c 81       	ldd	r16, Y+4	; 0x04
    45ca:	1b 81       	ldd	r17, Y+3	; 0x03
    45cc:	aa 81       	ldd	r26, Y+2	; 0x02
    45ce:	b9 81       	ldd	r27, Y+1	; 0x01
    45d0:	ce 0f       	add	r28, r30
    45d2:	d1 1d       	adc	r29, r1
    45d4:	0f b6       	in	r0, 0x3f	; 63
    45d6:	f8 94       	cli
    45d8:	de bf       	out	0x3e, r29	; 62
    45da:	0f be       	out	0x3f, r0	; 63
    45dc:	cd bf       	out	0x3d, r28	; 61
    45de:	ed 01       	movw	r28, r26
    45e0:	08 95       	ret

000045e2 <itoa>:
    45e2:	fb 01       	movw	r30, r22
    45e4:	9f 01       	movw	r18, r30
    45e6:	e8 94       	clt
    45e8:	42 30       	cpi	r20, 0x02	; 2
    45ea:	c4 f0       	brlt	.+48     	; 0x461c <itoa+0x3a>
    45ec:	45 32       	cpi	r20, 0x25	; 37
    45ee:	b4 f4       	brge	.+44     	; 0x461c <itoa+0x3a>
    45f0:	4a 30       	cpi	r20, 0x0A	; 10
    45f2:	29 f4       	brne	.+10     	; 0x45fe <itoa+0x1c>
    45f4:	97 fb       	bst	r25, 7
    45f6:	1e f4       	brtc	.+6      	; 0x45fe <itoa+0x1c>
    45f8:	90 95       	com	r25
    45fa:	81 95       	neg	r24
    45fc:	9f 4f       	sbci	r25, 0xFF	; 255
    45fe:	64 2f       	mov	r22, r20
    4600:	77 27       	eor	r23, r23
    4602:	0e 94 84 22 	call	0x4508	; 0x4508 <__udivmodhi4>
    4606:	80 5d       	subi	r24, 0xD0	; 208
    4608:	8a 33       	cpi	r24, 0x3A	; 58
    460a:	0c f0       	brlt	.+2      	; 0x460e <itoa+0x2c>
    460c:	89 5d       	subi	r24, 0xD9	; 217
    460e:	81 93       	st	Z+, r24
    4610:	cb 01       	movw	r24, r22
    4612:	00 97       	sbiw	r24, 0x00	; 0
    4614:	a1 f7       	brne	.-24     	; 0x45fe <itoa+0x1c>
    4616:	16 f4       	brtc	.+4      	; 0x461c <itoa+0x3a>
    4618:	5d e2       	ldi	r21, 0x2D	; 45
    461a:	51 93       	st	Z+, r21
    461c:	10 82       	st	Z, r1
    461e:	c9 01       	movw	r24, r18
    4620:	0c 94 12 23 	jmp	0x4624	; 0x4624 <strrev>

00004624 <strrev>:
    4624:	dc 01       	movw	r26, r24
    4626:	fc 01       	movw	r30, r24
    4628:	67 2f       	mov	r22, r23
    462a:	71 91       	ld	r23, Z+
    462c:	77 23       	and	r23, r23
    462e:	e1 f7       	brne	.-8      	; 0x4628 <strrev+0x4>
    4630:	32 97       	sbiw	r30, 0x02	; 2
    4632:	04 c0       	rjmp	.+8      	; 0x463c <strrev+0x18>
    4634:	7c 91       	ld	r23, X
    4636:	6d 93       	st	X+, r22
    4638:	70 83       	st	Z, r23
    463a:	62 91       	ld	r22, -Z
    463c:	ae 17       	cp	r26, r30
    463e:	bf 07       	cpc	r27, r31
    4640:	c8 f3       	brcs	.-14     	; 0x4634 <strrev+0x10>
    4642:	08 95       	ret

00004644 <_exit>:
    4644:	f8 94       	cli

00004646 <__stop_program>:
    4646:	ff cf       	rjmp	.-2      	; 0x4646 <__stop_program>
