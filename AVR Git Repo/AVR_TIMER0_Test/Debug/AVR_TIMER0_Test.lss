
AVR_TIMER0_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000b88  00000c1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800070  00800070  00000c2c  2**0
                  ALLOC
  3 .stab         00001188  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ab  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__vector_10>
  2c:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 05 	call	0xa50	; 0xa50 <main>
  8a:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <GIE_Disable>:

void GIE_Disable(void)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
  b6:	af e5       	ldi	r26, 0x5F	; 95
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	ef e5       	ldi	r30, 0x5F	; 95
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	00 d0       	rcall	.+0      	; 0xd0 <DIO_voidSetPinDirection+0x6>
  d0:	00 d0       	rcall	.+0      	; 0xd2 <DIO_voidSetPinDirection+0x8>
  d2:	00 d0       	rcall	.+0      	; 0xd4 <DIO_voidSetPinDirection+0xa>
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	9a 83       	std	Y+2, r25	; 0x02
  da:	89 83       	std	Y+1, r24	; 0x01
  dc:	6b 83       	std	Y+3, r22	; 0x03
  de:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	28 2f       	mov	r18, r24
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	3e 83       	std	Y+6, r19	; 0x06
  e8:	2d 83       	std	Y+5, r18	; 0x05
  ea:	8d 81       	ldd	r24, Y+5	; 0x05
  ec:	9e 81       	ldd	r25, Y+6	; 0x06
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	91 05       	cpc	r25, r1
  f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_voidSetPinDirection+0x2c>
  f4:	51 c0       	rjmp	.+162    	; 0x198 <DIO_voidSetPinDirection+0xce>
  f6:	2d 81       	ldd	r18, Y+5	; 0x05
  f8:	3e 81       	ldd	r19, Y+6	; 0x06
  fa:	24 30       	cpi	r18, 0x04	; 4
  fc:	31 05       	cpc	r19, r1
  fe:	7c f4       	brge	.+30     	; 0x11e <DIO_voidSetPinDirection+0x54>
 100:	8d 81       	ldd	r24, Y+5	; 0x05
 102:	9e 81       	ldd	r25, Y+6	; 0x06
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	91 05       	cpc	r25, r1
 108:	71 f1       	breq	.+92     	; 0x166 <DIO_voidSetPinDirection+0x9c>
 10a:	2d 81       	ldd	r18, Y+5	; 0x05
 10c:	3e 81       	ldd	r19, Y+6	; 0x06
 10e:	22 30       	cpi	r18, 0x02	; 2
 110:	31 05       	cpc	r19, r1
 112:	ac f5       	brge	.+106    	; 0x17e <DIO_voidSetPinDirection+0xb4>
 114:	8d 81       	ldd	r24, Y+5	; 0x05
 116:	9e 81       	ldd	r25, Y+6	; 0x06
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	d1 f0       	breq	.+52     	; 0x150 <DIO_voidSetPinDirection+0x86>
 11c:	81 c0       	rjmp	.+258    	; 0x220 <DIO_voidSetPinDirection+0x156>
 11e:	2d 81       	ldd	r18, Y+5	; 0x05
 120:	3e 81       	ldd	r19, Y+6	; 0x06
 122:	25 30       	cpi	r18, 0x05	; 5
 124:	31 05       	cpc	r19, r1
 126:	09 f4       	brne	.+2      	; 0x12a <DIO_voidSetPinDirection+0x60>
 128:	52 c0       	rjmp	.+164    	; 0x1ce <DIO_voidSetPinDirection+0x104>
 12a:	8d 81       	ldd	r24, Y+5	; 0x05
 12c:	9e 81       	ldd	r25, Y+6	; 0x06
 12e:	85 30       	cpi	r24, 0x05	; 5
 130:	91 05       	cpc	r25, r1
 132:	0c f4       	brge	.+2      	; 0x136 <DIO_voidSetPinDirection+0x6c>
 134:	3f c0       	rjmp	.+126    	; 0x1b4 <DIO_voidSetPinDirection+0xea>
 136:	2d 81       	ldd	r18, Y+5	; 0x05
 138:	3e 81       	ldd	r19, Y+6	; 0x06
 13a:	26 30       	cpi	r18, 0x06	; 6
 13c:	31 05       	cpc	r19, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <DIO_voidSetPinDirection+0x78>
 140:	54 c0       	rjmp	.+168    	; 0x1ea <DIO_voidSetPinDirection+0x120>
 142:	8d 81       	ldd	r24, Y+5	; 0x05
 144:	9e 81       	ldd	r25, Y+6	; 0x06
 146:	87 30       	cpi	r24, 0x07	; 7
 148:	91 05       	cpc	r25, r1
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_voidSetPinDirection+0x84>
 14c:	5d c0       	rjmp	.+186    	; 0x208 <DIO_voidSetPinDirection+0x13e>
 14e:	68 c0       	rjmp	.+208    	; 0x220 <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
 150:	8c 81       	ldd	r24, Y+4	; 0x04
 152:	81 70       	andi	r24, 0x01	; 1
 154:	e9 81       	ldd	r30, Y+1	; 0x01
 156:	fa 81       	ldd	r31, Y+2	; 0x02
 158:	98 2f       	mov	r25, r24
 15a:	91 70       	andi	r25, 0x01	; 1
 15c:	81 81       	ldd	r24, Z+1	; 0x01
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	89 2b       	or	r24, r25
 162:	81 83       	std	Z+1, r24	; 0x01
 164:	5d c0       	rjmp	.+186    	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
 166:	8c 81       	ldd	r24, Y+4	; 0x04
 168:	81 70       	andi	r24, 0x01	; 1
 16a:	e9 81       	ldd	r30, Y+1	; 0x01
 16c:	fa 81       	ldd	r31, Y+2	; 0x02
 16e:	81 70       	andi	r24, 0x01	; 1
 170:	98 2f       	mov	r25, r24
 172:	99 0f       	add	r25, r25
 174:	81 81       	ldd	r24, Z+1	; 0x01
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	89 2b       	or	r24, r25
 17a:	81 83       	std	Z+1, r24	; 0x01
 17c:	51 c0       	rjmp	.+162    	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	81 70       	andi	r24, 0x01	; 1
 182:	e9 81       	ldd	r30, Y+1	; 0x01
 184:	fa 81       	ldd	r31, Y+2	; 0x02
 186:	81 70       	andi	r24, 0x01	; 1
 188:	98 2f       	mov	r25, r24
 18a:	99 0f       	add	r25, r25
 18c:	99 0f       	add	r25, r25
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	89 2b       	or	r24, r25
 194:	81 83       	std	Z+1, r24	; 0x01
 196:	44 c0       	rjmp	.+136    	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	e9 81       	ldd	r30, Y+1	; 0x01
 19e:	fa 81       	ldd	r31, Y+2	; 0x02
 1a0:	81 70       	andi	r24, 0x01	; 1
 1a2:	98 2f       	mov	r25, r24
 1a4:	99 0f       	add	r25, r25
 1a6:	99 0f       	add	r25, r25
 1a8:	99 0f       	add	r25, r25
 1aa:	81 81       	ldd	r24, Z+1	; 0x01
 1ac:	87 7f       	andi	r24, 0xF7	; 247
 1ae:	89 2b       	or	r24, r25
 1b0:	81 83       	std	Z+1, r24	; 0x01
 1b2:	36 c0       	rjmp	.+108    	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
 1b6:	81 70       	andi	r24, 0x01	; 1
 1b8:	e9 81       	ldd	r30, Y+1	; 0x01
 1ba:	fa 81       	ldd	r31, Y+2	; 0x02
 1bc:	81 70       	andi	r24, 0x01	; 1
 1be:	98 2f       	mov	r25, r24
 1c0:	92 95       	swap	r25
 1c2:	90 7f       	andi	r25, 0xF0	; 240
 1c4:	81 81       	ldd	r24, Z+1	; 0x01
 1c6:	8f 7e       	andi	r24, 0xEF	; 239
 1c8:	89 2b       	or	r24, r25
 1ca:	81 83       	std	Z+1, r24	; 0x01
 1cc:	29 c0       	rjmp	.+82     	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
 1ce:	8c 81       	ldd	r24, Y+4	; 0x04
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	e9 81       	ldd	r30, Y+1	; 0x01
 1d4:	fa 81       	ldd	r31, Y+2	; 0x02
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	98 2f       	mov	r25, r24
 1da:	92 95       	swap	r25
 1dc:	99 0f       	add	r25, r25
 1de:	90 7e       	andi	r25, 0xE0	; 224
 1e0:	81 81       	ldd	r24, Z+1	; 0x01
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	89 2b       	or	r24, r25
 1e6:	81 83       	std	Z+1, r24	; 0x01
 1e8:	1b c0       	rjmp	.+54     	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
 1ea:	8c 81       	ldd	r24, Y+4	; 0x04
 1ec:	81 70       	andi	r24, 0x01	; 1
 1ee:	e9 81       	ldd	r30, Y+1	; 0x01
 1f0:	fa 81       	ldd	r31, Y+2	; 0x02
 1f2:	81 70       	andi	r24, 0x01	; 1
 1f4:	98 2f       	mov	r25, r24
 1f6:	92 95       	swap	r25
 1f8:	99 0f       	add	r25, r25
 1fa:	99 0f       	add	r25, r25
 1fc:	90 7c       	andi	r25, 0xC0	; 192
 1fe:	81 81       	ldd	r24, Z+1	; 0x01
 200:	8f 7b       	andi	r24, 0xBF	; 191
 202:	89 2b       	or	r24, r25
 204:	81 83       	std	Z+1, r24	; 0x01
 206:	0c c0       	rjmp	.+24     	; 0x220 <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
 208:	8c 81       	ldd	r24, Y+4	; 0x04
 20a:	81 70       	andi	r24, 0x01	; 1
 20c:	e9 81       	ldd	r30, Y+1	; 0x01
 20e:	fa 81       	ldd	r31, Y+2	; 0x02
 210:	98 2f       	mov	r25, r24
 212:	97 95       	ror	r25
 214:	99 27       	eor	r25, r25
 216:	97 95       	ror	r25
 218:	81 81       	ldd	r24, Z+1	; 0x01
 21a:	8f 77       	andi	r24, 0x7F	; 127
 21c:	89 2b       	or	r24, r25
 21e:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
 220:	26 96       	adiw	r28, 0x06	; 6
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	cf 91       	pop	r28
 22e:	df 91       	pop	r29
 230:	08 95       	ret

00000232 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	00 d0       	rcall	.+0      	; 0x238 <DIO_voidSetPinValue+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <DIO_voidSetPinValue+0x8>
 23a:	00 d0       	rcall	.+0      	; 0x23c <DIO_voidSetPinValue+0xa>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	9a 83       	std	Y+2, r25	; 0x02
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	6b 83       	std	Y+3, r22	; 0x03
 246:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
 248:	8b 81       	ldd	r24, Y+3	; 0x03
 24a:	28 2f       	mov	r18, r24
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	3e 83       	std	Y+6, r19	; 0x06
 250:	2d 83       	std	Y+5, r18	; 0x05
 252:	8d 81       	ldd	r24, Y+5	; 0x05
 254:	9e 81       	ldd	r25, Y+6	; 0x06
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	91 05       	cpc	r25, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <DIO_voidSetPinValue+0x2c>
 25c:	51 c0       	rjmp	.+162    	; 0x300 <DIO_voidSetPinValue+0xce>
 25e:	2d 81       	ldd	r18, Y+5	; 0x05
 260:	3e 81       	ldd	r19, Y+6	; 0x06
 262:	24 30       	cpi	r18, 0x04	; 4
 264:	31 05       	cpc	r19, r1
 266:	7c f4       	brge	.+30     	; 0x286 <DIO_voidSetPinValue+0x54>
 268:	8d 81       	ldd	r24, Y+5	; 0x05
 26a:	9e 81       	ldd	r25, Y+6	; 0x06
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 05       	cpc	r25, r1
 270:	71 f1       	breq	.+92     	; 0x2ce <DIO_voidSetPinValue+0x9c>
 272:	2d 81       	ldd	r18, Y+5	; 0x05
 274:	3e 81       	ldd	r19, Y+6	; 0x06
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	31 05       	cpc	r19, r1
 27a:	ac f5       	brge	.+106    	; 0x2e6 <DIO_voidSetPinValue+0xb4>
 27c:	8d 81       	ldd	r24, Y+5	; 0x05
 27e:	9e 81       	ldd	r25, Y+6	; 0x06
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	d1 f0       	breq	.+52     	; 0x2b8 <DIO_voidSetPinValue+0x86>
 284:	81 c0       	rjmp	.+258    	; 0x388 <DIO_voidSetPinValue+0x156>
 286:	2d 81       	ldd	r18, Y+5	; 0x05
 288:	3e 81       	ldd	r19, Y+6	; 0x06
 28a:	25 30       	cpi	r18, 0x05	; 5
 28c:	31 05       	cpc	r19, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <DIO_voidSetPinValue+0x60>
 290:	52 c0       	rjmp	.+164    	; 0x336 <DIO_voidSetPinValue+0x104>
 292:	8d 81       	ldd	r24, Y+5	; 0x05
 294:	9e 81       	ldd	r25, Y+6	; 0x06
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	91 05       	cpc	r25, r1
 29a:	0c f4       	brge	.+2      	; 0x29e <DIO_voidSetPinValue+0x6c>
 29c:	3f c0       	rjmp	.+126    	; 0x31c <DIO_voidSetPinValue+0xea>
 29e:	2d 81       	ldd	r18, Y+5	; 0x05
 2a0:	3e 81       	ldd	r19, Y+6	; 0x06
 2a2:	26 30       	cpi	r18, 0x06	; 6
 2a4:	31 05       	cpc	r19, r1
 2a6:	09 f4       	brne	.+2      	; 0x2aa <DIO_voidSetPinValue+0x78>
 2a8:	54 c0       	rjmp	.+168    	; 0x352 <DIO_voidSetPinValue+0x120>
 2aa:	8d 81       	ldd	r24, Y+5	; 0x05
 2ac:	9e 81       	ldd	r25, Y+6	; 0x06
 2ae:	87 30       	cpi	r24, 0x07	; 7
 2b0:	91 05       	cpc	r25, r1
 2b2:	09 f4       	brne	.+2      	; 0x2b6 <DIO_voidSetPinValue+0x84>
 2b4:	5d c0       	rjmp	.+186    	; 0x370 <DIO_voidSetPinValue+0x13e>
 2b6:	68 c0       	rjmp	.+208    	; 0x388 <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	81 70       	andi	r24, 0x01	; 1
 2bc:	e9 81       	ldd	r30, Y+1	; 0x01
 2be:	fa 81       	ldd	r31, Y+2	; 0x02
 2c0:	98 2f       	mov	r25, r24
 2c2:	91 70       	andi	r25, 0x01	; 1
 2c4:	82 81       	ldd	r24, Z+2	; 0x02
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	89 2b       	or	r24, r25
 2ca:	82 83       	std	Z+2, r24	; 0x02
 2cc:	5d c0       	rjmp	.+186    	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
 2ce:	8c 81       	ldd	r24, Y+4	; 0x04
 2d0:	81 70       	andi	r24, 0x01	; 1
 2d2:	e9 81       	ldd	r30, Y+1	; 0x01
 2d4:	fa 81       	ldd	r31, Y+2	; 0x02
 2d6:	81 70       	andi	r24, 0x01	; 1
 2d8:	98 2f       	mov	r25, r24
 2da:	99 0f       	add	r25, r25
 2dc:	82 81       	ldd	r24, Z+2	; 0x02
 2de:	8d 7f       	andi	r24, 0xFD	; 253
 2e0:	89 2b       	or	r24, r25
 2e2:	82 83       	std	Z+2, r24	; 0x02
 2e4:	51 c0       	rjmp	.+162    	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	81 70       	andi	r24, 0x01	; 1
 2ea:	e9 81       	ldd	r30, Y+1	; 0x01
 2ec:	fa 81       	ldd	r31, Y+2	; 0x02
 2ee:	81 70       	andi	r24, 0x01	; 1
 2f0:	98 2f       	mov	r25, r24
 2f2:	99 0f       	add	r25, r25
 2f4:	99 0f       	add	r25, r25
 2f6:	82 81       	ldd	r24, Z+2	; 0x02
 2f8:	8b 7f       	andi	r24, 0xFB	; 251
 2fa:	89 2b       	or	r24, r25
 2fc:	82 83       	std	Z+2, r24	; 0x02
 2fe:	44 c0       	rjmp	.+136    	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
 300:	8c 81       	ldd	r24, Y+4	; 0x04
 302:	81 70       	andi	r24, 0x01	; 1
 304:	e9 81       	ldd	r30, Y+1	; 0x01
 306:	fa 81       	ldd	r31, Y+2	; 0x02
 308:	81 70       	andi	r24, 0x01	; 1
 30a:	98 2f       	mov	r25, r24
 30c:	99 0f       	add	r25, r25
 30e:	99 0f       	add	r25, r25
 310:	99 0f       	add	r25, r25
 312:	82 81       	ldd	r24, Z+2	; 0x02
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	89 2b       	or	r24, r25
 318:	82 83       	std	Z+2, r24	; 0x02
 31a:	36 c0       	rjmp	.+108    	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	81 70       	andi	r24, 0x01	; 1
 320:	e9 81       	ldd	r30, Y+1	; 0x01
 322:	fa 81       	ldd	r31, Y+2	; 0x02
 324:	81 70       	andi	r24, 0x01	; 1
 326:	98 2f       	mov	r25, r24
 328:	92 95       	swap	r25
 32a:	90 7f       	andi	r25, 0xF0	; 240
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	8f 7e       	andi	r24, 0xEF	; 239
 330:	89 2b       	or	r24, r25
 332:	82 83       	std	Z+2, r24	; 0x02
 334:	29 c0       	rjmp	.+82     	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
 336:	8c 81       	ldd	r24, Y+4	; 0x04
 338:	81 70       	andi	r24, 0x01	; 1
 33a:	e9 81       	ldd	r30, Y+1	; 0x01
 33c:	fa 81       	ldd	r31, Y+2	; 0x02
 33e:	81 70       	andi	r24, 0x01	; 1
 340:	98 2f       	mov	r25, r24
 342:	92 95       	swap	r25
 344:	99 0f       	add	r25, r25
 346:	90 7e       	andi	r25, 0xE0	; 224
 348:	82 81       	ldd	r24, Z+2	; 0x02
 34a:	8f 7d       	andi	r24, 0xDF	; 223
 34c:	89 2b       	or	r24, r25
 34e:	82 83       	std	Z+2, r24	; 0x02
 350:	1b c0       	rjmp	.+54     	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
 352:	8c 81       	ldd	r24, Y+4	; 0x04
 354:	81 70       	andi	r24, 0x01	; 1
 356:	e9 81       	ldd	r30, Y+1	; 0x01
 358:	fa 81       	ldd	r31, Y+2	; 0x02
 35a:	81 70       	andi	r24, 0x01	; 1
 35c:	98 2f       	mov	r25, r24
 35e:	92 95       	swap	r25
 360:	99 0f       	add	r25, r25
 362:	99 0f       	add	r25, r25
 364:	90 7c       	andi	r25, 0xC0	; 192
 366:	82 81       	ldd	r24, Z+2	; 0x02
 368:	8f 7b       	andi	r24, 0xBF	; 191
 36a:	89 2b       	or	r24, r25
 36c:	82 83       	std	Z+2, r24	; 0x02
 36e:	0c c0       	rjmp	.+24     	; 0x388 <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
 370:	8c 81       	ldd	r24, Y+4	; 0x04
 372:	81 70       	andi	r24, 0x01	; 1
 374:	e9 81       	ldd	r30, Y+1	; 0x01
 376:	fa 81       	ldd	r31, Y+2	; 0x02
 378:	98 2f       	mov	r25, r24
 37a:	97 95       	ror	r25
 37c:	99 27       	eor	r25, r25
 37e:	97 95       	ror	r25
 380:	82 81       	ldd	r24, Z+2	; 0x02
 382:	8f 77       	andi	r24, 0x7F	; 127
 384:	89 2b       	or	r24, r25
 386:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
 388:	26 96       	adiw	r28, 0x06	; 6
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <DIO_voidGetPinValue+0x6>
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <DIO_voidGetPinValue+0x8>
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <DIO_voidGetPinValue+0xa>
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	9b 83       	std	Y+3, r25	; 0x03
 3aa:	8a 83       	std	Y+2, r24	; 0x02
 3ac:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
 3ae:	8c 81       	ldd	r24, Y+4	; 0x04
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	3e 83       	std	Y+6, r19	; 0x06
 3b6:	2d 83       	std	Y+5, r18	; 0x05
 3b8:	8d 81       	ldd	r24, Y+5	; 0x05
 3ba:	9e 81       	ldd	r25, Y+6	; 0x06
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	91 05       	cpc	r25, r1
 3c0:	09 f4       	brne	.+2      	; 0x3c4 <DIO_voidGetPinValue+0x2a>
 3c2:	3e c0       	rjmp	.+124    	; 0x440 <DIO_voidGetPinValue+0xa6>
 3c4:	2d 81       	ldd	r18, Y+5	; 0x05
 3c6:	3e 81       	ldd	r19, Y+6	; 0x06
 3c8:	24 30       	cpi	r18, 0x04	; 4
 3ca:	31 05       	cpc	r19, r1
 3cc:	7c f4       	brge	.+30     	; 0x3ec <DIO_voidGetPinValue+0x52>
 3ce:	8d 81       	ldd	r24, Y+5	; 0x05
 3d0:	9e 81       	ldd	r25, Y+6	; 0x06
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	91 05       	cpc	r25, r1
 3d6:	29 f1       	breq	.+74     	; 0x422 <DIO_voidGetPinValue+0x88>
 3d8:	2d 81       	ldd	r18, Y+5	; 0x05
 3da:	3e 81       	ldd	r19, Y+6	; 0x06
 3dc:	22 30       	cpi	r18, 0x02	; 2
 3de:	31 05       	cpc	r19, r1
 3e0:	3c f5       	brge	.+78     	; 0x430 <DIO_voidGetPinValue+0x96>
 3e2:	8d 81       	ldd	r24, Y+5	; 0x05
 3e4:	9e 81       	ldd	r25, Y+6	; 0x06
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	b1 f0       	breq	.+44     	; 0x416 <DIO_voidGetPinValue+0x7c>
 3ea:	55 c0       	rjmp	.+170    	; 0x496 <DIO_voidGetPinValue+0xfc>
 3ec:	2d 81       	ldd	r18, Y+5	; 0x05
 3ee:	3e 81       	ldd	r19, Y+6	; 0x06
 3f0:	25 30       	cpi	r18, 0x05	; 5
 3f2:	31 05       	cpc	r19, r1
 3f4:	b1 f1       	breq	.+108    	; 0x462 <DIO_voidGetPinValue+0xc8>
 3f6:	8d 81       	ldd	r24, Y+5	; 0x05
 3f8:	9e 81       	ldd	r25, Y+6	; 0x06
 3fa:	85 30       	cpi	r24, 0x05	; 5
 3fc:	91 05       	cpc	r25, r1
 3fe:	4c f1       	brlt	.+82     	; 0x452 <DIO_voidGetPinValue+0xb8>
 400:	2d 81       	ldd	r18, Y+5	; 0x05
 402:	3e 81       	ldd	r19, Y+6	; 0x06
 404:	26 30       	cpi	r18, 0x06	; 6
 406:	31 05       	cpc	r19, r1
 408:	a9 f1       	breq	.+106    	; 0x474 <DIO_voidGetPinValue+0xda>
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	9e 81       	ldd	r25, Y+6	; 0x06
 40e:	87 30       	cpi	r24, 0x07	; 7
 410:	91 05       	cpc	r25, r1
 412:	d1 f1       	breq	.+116    	; 0x488 <DIO_voidGetPinValue+0xee>
 414:	40 c0       	rjmp	.+128    	; 0x496 <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
 416:	ea 81       	ldd	r30, Y+2	; 0x02
 418:	fb 81       	ldd	r31, Y+3	; 0x03
 41a:	80 81       	ld	r24, Z
 41c:	81 70       	andi	r24, 0x01	; 1
 41e:	89 83       	std	Y+1, r24	; 0x01
 420:	3a c0       	rjmp	.+116    	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
 422:	ea 81       	ldd	r30, Y+2	; 0x02
 424:	fb 81       	ldd	r31, Y+3	; 0x03
 426:	80 81       	ld	r24, Z
 428:	86 95       	lsr	r24
 42a:	81 70       	andi	r24, 0x01	; 1
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	33 c0       	rjmp	.+102    	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
 430:	ea 81       	ldd	r30, Y+2	; 0x02
 432:	fb 81       	ldd	r31, Y+3	; 0x03
 434:	80 81       	ld	r24, Z
 436:	86 95       	lsr	r24
 438:	86 95       	lsr	r24
 43a:	81 70       	andi	r24, 0x01	; 1
 43c:	89 83       	std	Y+1, r24	; 0x01
 43e:	2b c0       	rjmp	.+86     	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
 440:	ea 81       	ldd	r30, Y+2	; 0x02
 442:	fb 81       	ldd	r31, Y+3	; 0x03
 444:	80 81       	ld	r24, Z
 446:	86 95       	lsr	r24
 448:	86 95       	lsr	r24
 44a:	86 95       	lsr	r24
 44c:	81 70       	andi	r24, 0x01	; 1
 44e:	89 83       	std	Y+1, r24	; 0x01
 450:	22 c0       	rjmp	.+68     	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
 452:	ea 81       	ldd	r30, Y+2	; 0x02
 454:	fb 81       	ldd	r31, Y+3	; 0x03
 456:	80 81       	ld	r24, Z
 458:	82 95       	swap	r24
 45a:	8f 70       	andi	r24, 0x0F	; 15
 45c:	81 70       	andi	r24, 0x01	; 1
 45e:	89 83       	std	Y+1, r24	; 0x01
 460:	1a c0       	rjmp	.+52     	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
 462:	ea 81       	ldd	r30, Y+2	; 0x02
 464:	fb 81       	ldd	r31, Y+3	; 0x03
 466:	80 81       	ld	r24, Z
 468:	82 95       	swap	r24
 46a:	86 95       	lsr	r24
 46c:	87 70       	andi	r24, 0x07	; 7
 46e:	81 70       	andi	r24, 0x01	; 1
 470:	89 83       	std	Y+1, r24	; 0x01
 472:	11 c0       	rjmp	.+34     	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
 474:	ea 81       	ldd	r30, Y+2	; 0x02
 476:	fb 81       	ldd	r31, Y+3	; 0x03
 478:	80 81       	ld	r24, Z
 47a:	82 95       	swap	r24
 47c:	86 95       	lsr	r24
 47e:	86 95       	lsr	r24
 480:	83 70       	andi	r24, 0x03	; 3
 482:	81 70       	andi	r24, 0x01	; 1
 484:	89 83       	std	Y+1, r24	; 0x01
 486:	07 c0       	rjmp	.+14     	; 0x496 <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
 488:	ea 81       	ldd	r30, Y+2	; 0x02
 48a:	fb 81       	ldd	r31, Y+3	; 0x03
 48c:	80 81       	ld	r24, Z
 48e:	88 1f       	adc	r24, r24
 490:	88 27       	eor	r24, r24
 492:	88 1f       	adc	r24, r24
 494:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
 496:	89 81       	ldd	r24, Y+1	; 0x01
}
 498:	26 96       	adiw	r28, 0x06	; 6
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	f8 94       	cli
 49e:	de bf       	out	0x3e, r29	; 62
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	cd bf       	out	0x3d, r28	; 61
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <DIO_voidSetPortDirection+0x6>
 4b0:	0f 92       	push	r0
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	9a 83       	std	Y+2, r25	; 0x02
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
 4bc:	e9 81       	ldd	r30, Y+1	; 0x01
 4be:	fa 81       	ldd	r31, Y+2	; 0x02
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	81 83       	std	Z+1, r24	; 0x01
}
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	cf 91       	pop	r28
 4cc:	df 91       	pop	r29
 4ce:	08 95       	ret

000004d0 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
 4d0:	df 93       	push	r29
 4d2:	cf 93       	push	r28
 4d4:	00 d0       	rcall	.+0      	; 0x4d6 <DIO_voidSetPortValue+0x6>
 4d6:	0f 92       	push	r0
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	9a 83       	std	Y+2, r25	; 0x02
 4de:	89 83       	std	Y+1, r24	; 0x01
 4e0:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
 4e2:	e9 81       	ldd	r30, Y+1	; 0x01
 4e4:	fa 81       	ldd	r31, Y+2	; 0x02
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	82 83       	std	Z+2, r24	; 0x02
}
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	cf 91       	pop	r28
 4f2:	df 91       	pop	r29
 4f4:	08 95       	ret

000004f6 <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	00 d0       	rcall	.+0      	; 0x4fc <DIO_voidGetPortValue+0x6>
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
 500:	9a 83       	std	Y+2, r25	; 0x02
 502:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
 504:	e9 81       	ldd	r30, Y+1	; 0x01
 506:	fa 81       	ldd	r31, Y+2	; 0x02
 508:	80 81       	ld	r24, Z
}
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	cf 91       	pop	r28
 510:	df 91       	pop	r29
 512:	08 95       	ret

00000514 <Timer0_Init>:
u8 remCounter = 0;

void(*ptrCallBack)(void) = NULL_PTR;

void Timer0_Init(const TIMER0_INIT_CONFIG* Config_Ptr)
{
 514:	df 93       	push	r29
 516:	cf 93       	push	r28
 518:	00 d0       	rcall	.+0      	; 0x51a <Timer0_Init+0x6>
 51a:	00 d0       	rcall	.+0      	; 0x51c <Timer0_Init+0x8>
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
 520:	9a 83       	std	Y+2, r25	; 0x02
 522:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
 524:	e9 81       	ldd	r30, Y+1	; 0x01
 526:	fa 81       	ldd	r31, Y+2	; 0x02
 528:	84 81       	ldd	r24, Z+4	; 0x04
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	3c 83       	std	Y+4, r19	; 0x04
 530:	2b 83       	std	Y+3, r18	; 0x03
 532:	8b 81       	ldd	r24, Y+3	; 0x03
 534:	9c 81       	ldd	r25, Y+4	; 0x04
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	91 05       	cpc	r25, r1
 53a:	09 f4       	brne	.+2      	; 0x53e <Timer0_Init+0x2a>
 53c:	41 c0       	rjmp	.+130    	; 0x5c0 <Timer0_Init+0xac>
 53e:	2b 81       	ldd	r18, Y+3	; 0x03
 540:	3c 81       	ldd	r19, Y+4	; 0x04
 542:	22 30       	cpi	r18, 0x02	; 2
 544:	31 05       	cpc	r19, r1
 546:	2c f4       	brge	.+10     	; 0x552 <Timer0_Init+0x3e>
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	9c 81       	ldd	r25, Y+4	; 0x04
 54c:	00 97       	sbiw	r24, 0x00	; 0
 54e:	71 f0       	breq	.+28     	; 0x56c <Timer0_Init+0x58>
 550:	b4 c0       	rjmp	.+360    	; 0x6ba <Timer0_Init+0x1a6>
 552:	2b 81       	ldd	r18, Y+3	; 0x03
 554:	3c 81       	ldd	r19, Y+4	; 0x04
 556:	22 30       	cpi	r18, 0x02	; 2
 558:	31 05       	cpc	r19, r1
 55a:	09 f4       	brne	.+2      	; 0x55e <Timer0_Init+0x4a>
 55c:	5b c0       	rjmp	.+182    	; 0x614 <Timer0_Init+0x100>
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	9c 81       	ldd	r25, Y+4	; 0x04
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	91 05       	cpc	r25, r1
 566:	09 f4       	brne	.+2      	; 0x56a <Timer0_Init+0x56>
 568:	7f c0       	rjmp	.+254    	; 0x668 <Timer0_Init+0x154>
 56a:	a7 c0       	rjmp	.+334    	; 0x6ba <Timer0_Init+0x1a6>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
 56c:	e3 e5       	ldi	r30, 0x53	; 83
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	80 68       	ori	r24, 0x80	; 128
 574:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
 576:	a3 e5       	ldi	r26, 0x53	; 83
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e9 81       	ldd	r30, Y+1	; 0x01
 57c:	fa 81       	ldd	r31, Y+2	; 0x02
 57e:	80 81       	ld	r24, Z
 580:	86 95       	lsr	r24
 582:	81 70       	andi	r24, 0x01	; 1
 584:	81 70       	andi	r24, 0x01	; 1
 586:	98 2f       	mov	r25, r24
 588:	92 95       	swap	r25
 58a:	99 0f       	add	r25, r25
 58c:	90 7e       	andi	r25, 0xE0	; 224
 58e:	8c 91       	ld	r24, X
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	89 2b       	or	r24, r25
 594:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
 596:	a3 e5       	ldi	r26, 0x53	; 83
 598:	b0 e0       	ldi	r27, 0x00	; 0
 59a:	e9 81       	ldd	r30, Y+1	; 0x01
 59c:	fa 81       	ldd	r31, Y+2	; 0x02
 59e:	80 81       	ld	r24, Z
 5a0:	81 70       	andi	r24, 0x01	; 1
 5a2:	81 70       	andi	r24, 0x01	; 1
 5a4:	98 2f       	mov	r25, r24
 5a6:	92 95       	swap	r25
 5a8:	90 7f       	andi	r25, 0xF0	; 240
 5aa:	8c 91       	ld	r24, X
 5ac:	8f 7e       	andi	r24, 0xEF	; 239
 5ae:	89 2b       	or	r24, r25
 5b0:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
 5b2:	ac e5       	ldi	r26, 0x5C	; 92
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	e9 81       	ldd	r30, Y+1	; 0x01
 5b8:	fa 81       	ldd	r31, Y+2	; 0x02
 5ba:	86 81       	ldd	r24, Z+6	; 0x06
 5bc:	8c 93       	st	X, r24
 5be:	7d c0       	rjmp	.+250    	; 0x6ba <Timer0_Init+0x1a6>
		break;
	case TIMER0_PHASE_CORRECT_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
 5c0:	e3 e5       	ldi	r30, 0x53	; 83
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	8f 77       	andi	r24, 0x7F	; 127
 5c8:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
 5ca:	a3 e5       	ldi	r26, 0x53	; 83
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	e9 81       	ldd	r30, Y+1	; 0x01
 5d0:	fa 81       	ldd	r31, Y+2	; 0x02
 5d2:	82 81       	ldd	r24, Z+2	; 0x02
 5d4:	86 95       	lsr	r24
 5d6:	81 70       	andi	r24, 0x01	; 1
 5d8:	81 70       	andi	r24, 0x01	; 1
 5da:	98 2f       	mov	r25, r24
 5dc:	92 95       	swap	r25
 5de:	99 0f       	add	r25, r25
 5e0:	90 7e       	andi	r25, 0xE0	; 224
 5e2:	8c 91       	ld	r24, X
 5e4:	8f 7d       	andi	r24, 0xDF	; 223
 5e6:	89 2b       	or	r24, r25
 5e8:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
 5ea:	a3 e5       	ldi	r26, 0x53	; 83
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e9 81       	ldd	r30, Y+1	; 0x01
 5f0:	fa 81       	ldd	r31, Y+2	; 0x02
 5f2:	82 81       	ldd	r24, Z+2	; 0x02
 5f4:	81 70       	andi	r24, 0x01	; 1
 5f6:	81 70       	andi	r24, 0x01	; 1
 5f8:	98 2f       	mov	r25, r24
 5fa:	92 95       	swap	r25
 5fc:	90 7f       	andi	r25, 0xF0	; 240
 5fe:	8c 91       	ld	r24, X
 600:	8f 7e       	andi	r24, 0xEF	; 239
 602:	89 2b       	or	r24, r25
 604:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
 606:	ac e5       	ldi	r26, 0x5C	; 92
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e9 81       	ldd	r30, Y+1	; 0x01
 60c:	fa 81       	ldd	r31, Y+2	; 0x02
 60e:	86 81       	ldd	r24, Z+6	; 0x06
 610:	8c 93       	st	X, r24
 612:	53 c0       	rjmp	.+166    	; 0x6ba <Timer0_Init+0x1a6>
		break;
	case TIMER0_CTC_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
 614:	e3 e5       	ldi	r30, 0x53	; 83
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
 61e:	a3 e5       	ldi	r26, 0x53	; 83
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e9 81       	ldd	r30, Y+1	; 0x01
 624:	fa 81       	ldd	r31, Y+2	; 0x02
 626:	80 81       	ld	r24, Z
 628:	86 95       	lsr	r24
 62a:	81 70       	andi	r24, 0x01	; 1
 62c:	81 70       	andi	r24, 0x01	; 1
 62e:	98 2f       	mov	r25, r24
 630:	92 95       	swap	r25
 632:	99 0f       	add	r25, r25
 634:	90 7e       	andi	r25, 0xE0	; 224
 636:	8c 91       	ld	r24, X
 638:	8f 7d       	andi	r24, 0xDF	; 223
 63a:	89 2b       	or	r24, r25
 63c:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
 63e:	a3 e5       	ldi	r26, 0x53	; 83
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e9 81       	ldd	r30, Y+1	; 0x01
 644:	fa 81       	ldd	r31, Y+2	; 0x02
 646:	80 81       	ld	r24, Z
 648:	81 70       	andi	r24, 0x01	; 1
 64a:	81 70       	andi	r24, 0x01	; 1
 64c:	98 2f       	mov	r25, r24
 64e:	92 95       	swap	r25
 650:	90 7f       	andi	r25, 0xF0	; 240
 652:	8c 91       	ld	r24, X
 654:	8f 7e       	andi	r24, 0xEF	; 239
 656:	89 2b       	or	r24, r25
 658:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
 65a:	ac e5       	ldi	r26, 0x5C	; 92
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	e9 81       	ldd	r30, Y+1	; 0x01
 660:	fa 81       	ldd	r31, Y+2	; 0x02
 662:	86 81       	ldd	r24, Z+6	; 0x06
 664:	8c 93       	st	X, r24
 666:	29 c0       	rjmp	.+82     	; 0x6ba <Timer0_Init+0x1a6>
		break;
	case TIMER0_FAST_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
 668:	e3 e5       	ldi	r30, 0x53	; 83
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	8f 77       	andi	r24, 0x7F	; 127
 670:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
 672:	a3 e5       	ldi	r26, 0x53	; 83
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	e9 81       	ldd	r30, Y+1	; 0x01
 678:	fa 81       	ldd	r31, Y+2	; 0x02
 67a:	81 81       	ldd	r24, Z+1	; 0x01
 67c:	86 95       	lsr	r24
 67e:	81 70       	andi	r24, 0x01	; 1
 680:	81 70       	andi	r24, 0x01	; 1
 682:	98 2f       	mov	r25, r24
 684:	92 95       	swap	r25
 686:	99 0f       	add	r25, r25
 688:	90 7e       	andi	r25, 0xE0	; 224
 68a:	8c 91       	ld	r24, X
 68c:	8f 7d       	andi	r24, 0xDF	; 223
 68e:	89 2b       	or	r24, r25
 690:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
 692:	a3 e5       	ldi	r26, 0x53	; 83
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	e9 81       	ldd	r30, Y+1	; 0x01
 698:	fa 81       	ldd	r31, Y+2	; 0x02
 69a:	81 81       	ldd	r24, Z+1	; 0x01
 69c:	81 70       	andi	r24, 0x01	; 1
 69e:	81 70       	andi	r24, 0x01	; 1
 6a0:	98 2f       	mov	r25, r24
 6a2:	92 95       	swap	r25
 6a4:	90 7f       	andi	r25, 0xF0	; 240
 6a6:	8c 91       	ld	r24, X
 6a8:	8f 7e       	andi	r24, 0xEF	; 239
 6aa:	89 2b       	or	r24, r25
 6ac:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
 6ae:	ac e5       	ldi	r26, 0x5C	; 92
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e9 81       	ldd	r30, Y+1	; 0x01
 6b4:	fa 81       	ldd	r31, Y+2	; 0x02
 6b6:	86 81       	ldd	r24, Z+6	; 0x06
 6b8:	8c 93       	st	X, r24
		break;
	}
	TCNT0_REG = Config_Ptr->TIMER0_INITIAL_VALUE;
 6ba:	a2 e5       	ldi	r26, 0x52	; 82
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	e9 81       	ldd	r30, Y+1	; 0x01
 6c0:	fa 81       	ldd	r31, Y+2	; 0x02
 6c2:	85 81       	ldd	r24, Z+5	; 0x05
 6c4:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM01_BIT = (Config_Ptr->Mode>>1);
 6c6:	a3 e5       	ldi	r26, 0x53	; 83
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e9 81       	ldd	r30, Y+1	; 0x01
 6cc:	fa 81       	ldd	r31, Y+2	; 0x02
 6ce:	84 81       	ldd	r24, Z+4	; 0x04
 6d0:	86 95       	lsr	r24
 6d2:	81 70       	andi	r24, 0x01	; 1
 6d4:	81 70       	andi	r24, 0x01	; 1
 6d6:	98 2f       	mov	r25, r24
 6d8:	99 0f       	add	r25, r25
 6da:	99 0f       	add	r25, r25
 6dc:	99 0f       	add	r25, r25
 6de:	8c 91       	ld	r24, X
 6e0:	87 7f       	andi	r24, 0xF7	; 247
 6e2:	89 2b       	or	r24, r25
 6e4:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM00_BIT = (Config_Ptr->Mode>>0);
 6e6:	a3 e5       	ldi	r26, 0x53	; 83
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e9 81       	ldd	r30, Y+1	; 0x01
 6ec:	fa 81       	ldd	r31, Y+2	; 0x02
 6ee:	84 81       	ldd	r24, Z+4	; 0x04
 6f0:	81 70       	andi	r24, 0x01	; 1
 6f2:	81 70       	andi	r24, 0x01	; 1
 6f4:	98 2f       	mov	r25, r24
 6f6:	92 95       	swap	r25
 6f8:	99 0f       	add	r25, r25
 6fa:	99 0f       	add	r25, r25
 6fc:	90 7c       	andi	r25, 0xC0	; 192
 6fe:	8c 91       	ld	r24, X
 700:	8f 7b       	andi	r24, 0xBF	; 191
 702:	89 2b       	or	r24, r25
 704:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
 706:	0f 90       	pop	r0
 708:	0f 90       	pop	r0
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	cf 91       	pop	r28
 710:	df 91       	pop	r29
 712:	08 95       	ret

00000714 <Timer0_Start>:
void Timer0_Start(const TIMER0_INIT_CONFIG* Config_Ptr)
{
 714:	df 93       	push	r29
 716:	cf 93       	push	r28
 718:	00 d0       	rcall	.+0      	; 0x71a <Timer0_Start+0x6>
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	9a 83       	std	Y+2, r25	; 0x02
 720:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
 722:	a3 e5       	ldi	r26, 0x53	; 83
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e3 e5       	ldi	r30, 0x53	; 83
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	98 2f       	mov	r25, r24
 72e:	98 7f       	andi	r25, 0xF8	; 248
 730:	e9 81       	ldd	r30, Y+1	; 0x01
 732:	fa 81       	ldd	r31, Y+2	; 0x02
 734:	83 81       	ldd	r24, Z+3	; 0x03
 736:	89 2b       	or	r24, r25
 738:	8c 93       	st	X, r24
}
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	cf 91       	pop	r28
 740:	df 91       	pop	r29
 742:	08 95       	ret

00000744 <Timer0_Stop>:
void Timer0_Stop(const TIMER0_INIT_CONFIG* Config_Ptr)
{
 744:	df 93       	push	r29
 746:	cf 93       	push	r28
 748:	00 d0       	rcall	.+0      	; 0x74a <Timer0_Stop+0x6>
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	9a 83       	std	Y+2, r25	; 0x02
 750:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
 752:	a3 e5       	ldi	r26, 0x53	; 83
 754:	b0 e0       	ldi	r27, 0x00	; 0
 756:	e3 e5       	ldi	r30, 0x53	; 83
 758:	f0 e0       	ldi	r31, 0x00	; 0
 75a:	80 81       	ld	r24, Z
 75c:	88 7f       	andi	r24, 0xF8	; 248
 75e:	8c 93       	st	X, r24
}
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	cf 91       	pop	r28
 766:	df 91       	pop	r29
 768:	08 95       	ret

0000076a <Timer0_GetCounts>:
u8 Timer0_GetCounts(void)
{
 76a:	df 93       	push	r29
 76c:	cf 93       	push	r28
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
 772:	e2 e5       	ldi	r30, 0x52	; 82
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
}
 778:	cf 91       	pop	r28
 77a:	df 91       	pop	r29
 77c:	08 95       	ret

0000077e <Timer0_SetDelayTimeMilliSec>:
void Timer0_SetDelayTimeMilliSec(const TIMER0_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
 77e:	df 93       	push	r29
 780:	cf 93       	push	r28
 782:	00 d0       	rcall	.+0      	; 0x784 <Timer0_SetDelayTimeMilliSec+0x6>
 784:	00 d0       	rcall	.+0      	; 0x786 <Timer0_SetDelayTimeMilliSec+0x8>
 786:	00 d0       	rcall	.+0      	; 0x788 <Timer0_SetDelayTimeMilliSec+0xa>
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	9a 83       	std	Y+2, r25	; 0x02
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	4b 83       	std	Y+3, r20	; 0x03
 792:	5c 83       	std	Y+4, r21	; 0x04
 794:	6d 83       	std	Y+5, r22	; 0x05
 796:	7e 83       	std	Y+6, r23	; 0x06
	/* Assuming we are using 16MHz FCPU and Prescaler 1024  Tick time = 2 Micro seconds */
	switch(Config_Ptr->Mode)
 798:	e9 81       	ldd	r30, Y+1	; 0x01
 79a:	fa 81       	ldd	r31, Y+2	; 0x02
 79c:	84 81       	ldd	r24, Z+4	; 0x04
 79e:	88 2f       	mov	r24, r24
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	00 97       	sbiw	r24, 0x00	; 0
 7a4:	09 f0       	breq	.+2      	; 0x7a8 <Timer0_SetDelayTimeMilliSec+0x2a>
 7a6:	3f c0       	rjmp	.+126    	; 0x826 <Timer0_SetDelayTimeMilliSec+0xa8>
	{
	case TIMER0_NORMAL_MODE:
		overFlowCounter = (((copy_u32TimeMS * 1000)/TICK_TIME) / TOP_VALUE);
 7a8:	8b 81       	ldd	r24, Y+3	; 0x03
 7aa:	9c 81       	ldd	r25, Y+4	; 0x04
 7ac:	ad 81       	ldd	r26, Y+5	; 0x05
 7ae:	be 81       	ldd	r27, Y+6	; 0x06
 7b0:	28 ee       	ldi	r18, 0xE8	; 232
 7b2:	33 e0       	ldi	r19, 0x03	; 3
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	bc 01       	movw	r22, r24
 7ba:	cd 01       	movw	r24, r26
 7bc:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__mulsi3>
 7c0:	dc 01       	movw	r26, r24
 7c2:	cb 01       	movw	r24, r22
 7c4:	07 2e       	mov	r0, r23
 7c6:	7e e0       	ldi	r23, 0x0E	; 14
 7c8:	b6 95       	lsr	r27
 7ca:	a7 95       	ror	r26
 7cc:	97 95       	ror	r25
 7ce:	87 95       	ror	r24
 7d0:	7a 95       	dec	r23
 7d2:	d1 f7       	brne	.-12     	; 0x7c8 <Timer0_SetDelayTimeMilliSec+0x4a>
 7d4:	70 2d       	mov	r23, r0
 7d6:	80 93 70 00 	sts	0x0070, r24
 7da:	90 93 71 00 	sts	0x0071, r25
 7de:	a0 93 72 00 	sts	0x0072, r26
 7e2:	b0 93 73 00 	sts	0x0073, r27
		remCounter = (u8)(((copy_u32TimeMS * 1000)/TICK_TIME) % TOP_VALUE);
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
 7e8:	9c 81       	ldd	r25, Y+4	; 0x04
 7ea:	ad 81       	ldd	r26, Y+5	; 0x05
 7ec:	be 81       	ldd	r27, Y+6	; 0x06
 7ee:	28 ee       	ldi	r18, 0xE8	; 232
 7f0:	33 e0       	ldi	r19, 0x03	; 3
 7f2:	40 e0       	ldi	r20, 0x00	; 0
 7f4:	50 e0       	ldi	r21, 0x00	; 0
 7f6:	bc 01       	movw	r22, r24
 7f8:	cd 01       	movw	r24, r26
 7fa:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <__mulsi3>
 7fe:	dc 01       	movw	r26, r24
 800:	cb 01       	movw	r24, r22
 802:	68 94       	set
 804:	15 f8       	bld	r1, 5
 806:	b6 95       	lsr	r27
 808:	a7 95       	ror	r26
 80a:	97 95       	ror	r25
 80c:	87 95       	ror	r24
 80e:	16 94       	lsr	r1
 810:	d1 f7       	brne	.-12     	; 0x806 <Timer0_SetDelayTimeMilliSec+0x88>
 812:	80 93 74 00 	sts	0x0074, r24
		Timer0_IntEnable(Config_Ptr);
 816:	89 81       	ldd	r24, Y+1	; 0x01
 818:	9a 81       	ldd	r25, Y+2	; 0x02
 81a:	0e 94 1c 04 	call	0x838	; 0x838 <Timer0_IntEnable>
		Timer0_Start(Config_Ptr);
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	9a 81       	ldd	r25, Y+2	; 0x02
 822:	0e 94 8a 03 	call	0x714	; 0x714 <Timer0_Start>
	case TIMER0_CTC_MODE:

		break;

	}
}
 826:	26 96       	adiw	r28, 0x06	; 6
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	f8 94       	cli
 82c:	de bf       	out	0x3e, r29	; 62
 82e:	0f be       	out	0x3f, r0	; 63
 830:	cd bf       	out	0x3d, r28	; 61
 832:	cf 91       	pop	r28
 834:	df 91       	pop	r29
 836:	08 95       	ret

00000838 <Timer0_IntEnable>:
void Timer0_IntEnable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
 838:	df 93       	push	r29
 83a:	cf 93       	push	r28
 83c:	00 d0       	rcall	.+0      	; 0x83e <Timer0_IntEnable+0x6>
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	9a 83       	std	Y+2, r25	; 0x02
 844:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
 846:	e9 81       	ldd	r30, Y+1	; 0x01
 848:	fa 81       	ldd	r31, Y+2	; 0x02
 84a:	84 81       	ldd	r24, Z+4	; 0x04
 84c:	88 23       	and	r24, r24
 84e:	31 f4       	brne	.+12     	; 0x85c <Timer0_IntEnable+0x24>
	{
		TIMSK_REG->bits.TOIE0_BIT = LOGIC_HIGH;
 850:	e9 e5       	ldi	r30, 0x59	; 89
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	80 81       	ld	r24, Z
 856:	81 60       	ori	r24, 0x01	; 1
 858:	80 83       	st	Z, r24
 85a:	0a c0       	rjmp	.+20     	; 0x870 <__stack+0x11>
	}
	else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
 85c:	e9 81       	ldd	r30, Y+1	; 0x01
 85e:	fa 81       	ldd	r31, Y+2	; 0x02
 860:	84 81       	ldd	r24, Z+4	; 0x04
 862:	82 30       	cpi	r24, 0x02	; 2
 864:	29 f4       	brne	.+10     	; 0x870 <__stack+0x11>
	{
		TIMSK_REG->bits.OCIE0_BIT = LOGIC_HIGH;
 866:	e9 e5       	ldi	r30, 0x59	; 89
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	82 60       	ori	r24, 0x02	; 2
 86e:	80 83       	st	Z, r24
	}
	else
	{
		//return error;
	}
}
 870:	0f 90       	pop	r0
 872:	0f 90       	pop	r0
 874:	cf 91       	pop	r28
 876:	df 91       	pop	r29
 878:	08 95       	ret

0000087a <Timer0_IntDisable>:
void Timer0_IntDisable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
 87a:	df 93       	push	r29
 87c:	cf 93       	push	r28
 87e:	00 d0       	rcall	.+0      	; 0x880 <Timer0_IntDisable+0x6>
 880:	cd b7       	in	r28, 0x3d	; 61
 882:	de b7       	in	r29, 0x3e	; 62
 884:	9a 83       	std	Y+2, r25	; 0x02
 886:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
 888:	e9 81       	ldd	r30, Y+1	; 0x01
 88a:	fa 81       	ldd	r31, Y+2	; 0x02
 88c:	84 81       	ldd	r24, Z+4	; 0x04
 88e:	88 23       	and	r24, r24
 890:	31 f4       	brne	.+12     	; 0x89e <Timer0_IntDisable+0x24>
		{
			TIMSK_REG->bits.TOIE0_BIT = LOGIC_LOW;
 892:	e9 e5       	ldi	r30, 0x59	; 89
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	80 81       	ld	r24, Z
 898:	8e 7f       	andi	r24, 0xFE	; 254
 89a:	80 83       	st	Z, r24
 89c:	0a c0       	rjmp	.+20     	; 0x8b2 <Timer0_IntDisable+0x38>
		}
		else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
 89e:	e9 81       	ldd	r30, Y+1	; 0x01
 8a0:	fa 81       	ldd	r31, Y+2	; 0x02
 8a2:	84 81       	ldd	r24, Z+4	; 0x04
 8a4:	82 30       	cpi	r24, 0x02	; 2
 8a6:	29 f4       	brne	.+10     	; 0x8b2 <Timer0_IntDisable+0x38>
		{
			TIMSK_REG->bits.OCIE0_BIT = LOGIC_LOW;
 8a8:	e9 e5       	ldi	r30, 0x59	; 89
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	80 81       	ld	r24, Z
 8ae:	8d 7f       	andi	r24, 0xFD	; 253
 8b0:	80 83       	st	Z, r24
		}
		else
		{
			//return error;
		}
}
 8b2:	0f 90       	pop	r0
 8b4:	0f 90       	pop	r0
 8b6:	cf 91       	pop	r28
 8b8:	df 91       	pop	r29
 8ba:	08 95       	ret

000008bc <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*ptrfn)(void))
{
 8bc:	df 93       	push	r29
 8be:	cf 93       	push	r28
 8c0:	00 d0       	rcall	.+0      	; 0x8c2 <Timer0_SetCallBack+0x6>
 8c2:	cd b7       	in	r28, 0x3d	; 61
 8c4:	de b7       	in	r29, 0x3e	; 62
 8c6:	9a 83       	std	Y+2, r25	; 0x02
 8c8:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	9a 81       	ldd	r25, Y+2	; 0x02
 8ce:	90 93 76 00 	sts	0x0076, r25
 8d2:	80 93 75 00 	sts	0x0075, r24
}
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	cf 91       	pop	r28
 8dc:	df 91       	pop	r29
 8de:	08 95       	ret

000008e0 <Timer0_SetFastPWM>:
void Timer0_SetFastPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty)
{
 8e0:	df 93       	push	r29
 8e2:	cf 93       	push	r28
 8e4:	00 d0       	rcall	.+0      	; 0x8e6 <Timer0_SetFastPWM+0x6>
 8e6:	0f 92       	push	r0
 8e8:	cd b7       	in	r28, 0x3d	; 61
 8ea:	de b7       	in	r29, 0x3e	; 62
 8ec:	9a 83       	std	Y+2, r25	; 0x02
 8ee:	89 83       	std	Y+1, r24	; 0x01
 8f0:	6b 83       	std	Y+3, r22	; 0x03
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	OCR0_REG = (u8)((duty*256)/100);
 8f2:	ec e5       	ldi	r30, 0x5C	; 92
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	8b 81       	ldd	r24, Y+3	; 0x03
 8f8:	88 2f       	mov	r24, r24
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	98 2f       	mov	r25, r24
 8fe:	88 27       	eor	r24, r24
 900:	24 e6       	ldi	r18, 0x64	; 100
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	b9 01       	movw	r22, r18
 906:	0e 94 9b 05 	call	0xb36	; 0xb36 <__divmodhi4>
 90a:	cb 01       	movw	r24, r22
 90c:	80 83       	st	Z, r24

}
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	08 95       	ret

0000091a <__vector_11>:
void Timer0_SetPhaseCorrectPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty);

ISR(TIMER0_OVF_vect)
{
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	2f 93       	push	r18
 926:	3f 93       	push	r19
 928:	4f 93       	push	r20
 92a:	5f 93       	push	r21
 92c:	6f 93       	push	r22
 92e:	7f 93       	push	r23
 930:	8f 93       	push	r24
 932:	9f 93       	push	r25
 934:	af 93       	push	r26
 936:	bf 93       	push	r27
 938:	ef 93       	push	r30
 93a:	ff 93       	push	r31
 93c:	df 93       	push	r29
 93e:	cf 93       	push	r28
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
	overFlowCounter--;
 944:	80 91 70 00 	lds	r24, 0x0070
 948:	90 91 71 00 	lds	r25, 0x0071
 94c:	a0 91 72 00 	lds	r26, 0x0072
 950:	b0 91 73 00 	lds	r27, 0x0073
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	a1 09       	sbc	r26, r1
 958:	b1 09       	sbc	r27, r1
 95a:	80 93 70 00 	sts	0x0070, r24
 95e:	90 93 71 00 	sts	0x0071, r25
 962:	a0 93 72 00 	sts	0x0072, r26
 966:	b0 93 73 00 	sts	0x0073, r27

	if(overFlowCounter == 0)
 96a:	80 91 70 00 	lds	r24, 0x0070
 96e:	90 91 71 00 	lds	r25, 0x0071
 972:	a0 91 72 00 	lds	r26, 0x0072
 976:	b0 91 73 00 	lds	r27, 0x0073
 97a:	00 97       	sbiw	r24, 0x00	; 0
 97c:	a1 05       	cpc	r26, r1
 97e:	b1 05       	cpc	r27, r1
 980:	31 f4       	brne	.+12     	; 0x98e <__vector_11+0x74>
	{
		TCNT0_REG = (256 - remCounter);
 982:	e2 e5       	ldi	r30, 0x52	; 82
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 91 74 00 	lds	r24, 0x0074
 98a:	81 95       	neg	r24
 98c:	80 83       	st	Z, r24
	}
	if((ptrCallBack != NULL_PTR) && (overFlowCounter == -1))
 98e:	80 91 75 00 	lds	r24, 0x0075
 992:	90 91 76 00 	lds	r25, 0x0076
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	a9 f0       	breq	.+42     	; 0x9c4 <__vector_11+0xaa>
 99a:	80 91 70 00 	lds	r24, 0x0070
 99e:	90 91 71 00 	lds	r25, 0x0071
 9a2:	a0 91 72 00 	lds	r26, 0x0072
 9a6:	b0 91 73 00 	lds	r27, 0x0073
 9aa:	8f 3f       	cpi	r24, 0xFF	; 255
 9ac:	2f ef       	ldi	r18, 0xFF	; 255
 9ae:	92 07       	cpc	r25, r18
 9b0:	2f ef       	ldi	r18, 0xFF	; 255
 9b2:	a2 07       	cpc	r26, r18
 9b4:	2f ef       	ldi	r18, 0xFF	; 255
 9b6:	b2 07       	cpc	r27, r18
 9b8:	29 f4       	brne	.+10     	; 0x9c4 <__vector_11+0xaa>
	{
		(*ptrCallBack)();
 9ba:	e0 91 75 00 	lds	r30, 0x0075
 9be:	f0 91 76 00 	lds	r31, 0x0076
 9c2:	09 95       	icall
	}
}
 9c4:	cf 91       	pop	r28
 9c6:	df 91       	pop	r29
 9c8:	ff 91       	pop	r31
 9ca:	ef 91       	pop	r30
 9cc:	bf 91       	pop	r27
 9ce:	af 91       	pop	r26
 9d0:	9f 91       	pop	r25
 9d2:	8f 91       	pop	r24
 9d4:	7f 91       	pop	r23
 9d6:	6f 91       	pop	r22
 9d8:	5f 91       	pop	r21
 9da:	4f 91       	pop	r20
 9dc:	3f 91       	pop	r19
 9de:	2f 91       	pop	r18
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__vector_10>:

ISR(TIMER0_COMP_vect)
{
 9ea:	1f 92       	push	r1
 9ec:	0f 92       	push	r0
 9ee:	0f b6       	in	r0, 0x3f	; 63
 9f0:	0f 92       	push	r0
 9f2:	11 24       	eor	r1, r1
 9f4:	2f 93       	push	r18
 9f6:	3f 93       	push	r19
 9f8:	4f 93       	push	r20
 9fa:	5f 93       	push	r21
 9fc:	6f 93       	push	r22
 9fe:	7f 93       	push	r23
 a00:	8f 93       	push	r24
 a02:	9f 93       	push	r25
 a04:	af 93       	push	r26
 a06:	bf 93       	push	r27
 a08:	ef 93       	push	r30
 a0a:	ff 93       	push	r31
 a0c:	df 93       	push	r29
 a0e:	cf 93       	push	r28
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
	if(ptrCallBack != NULL_PTR)
 a14:	80 91 75 00 	lds	r24, 0x0075
 a18:	90 91 76 00 	lds	r25, 0x0076
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	29 f0       	breq	.+10     	; 0xa2a <__vector_10+0x40>
	{
		(*ptrCallBack)();
 a20:	e0 91 75 00 	lds	r30, 0x0075
 a24:	f0 91 76 00 	lds	r31, 0x0076
 a28:	09 95       	icall
	}
}
 a2a:	cf 91       	pop	r28
 a2c:	df 91       	pop	r29
 a2e:	ff 91       	pop	r31
 a30:	ef 91       	pop	r30
 a32:	bf 91       	pop	r27
 a34:	af 91       	pop	r26
 a36:	9f 91       	pop	r25
 a38:	8f 91       	pop	r24
 a3a:	7f 91       	pop	r23
 a3c:	6f 91       	pop	r22
 a3e:	5f 91       	pop	r21
 a40:	4f 91       	pop	r20
 a42:	3f 91       	pop	r19
 a44:	2f 91       	pop	r18
 a46:	0f 90       	pop	r0
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	0f 90       	pop	r0
 a4c:	1f 90       	pop	r1
 a4e:	18 95       	reti

00000a50 <main>:

TIMER0_INIT_CONFIG config = {TIMER0_COMPARE_OUTPUT_NON_PWM_MODE_OC0_DISCONNECTED,TIMER0_COMPARE_OUTPUT_FAST_PWM_MODE_OC0_DISCONNECTED,TIMER0_COMPARE_OUTPUT_PHASE_CORRECT_PWM_MODE_OC0_DISCONNECTED,FCPU_DIVIDED_BY_1024,TIMER0_NORMAL_MODE, 0, 0 };


int main()
{
 a50:	df 93       	push	r29
 a52:	cf 93       	push	r28
 a54:	cd b7       	in	r28, 0x3d	; 61
 a56:	de b7       	in	r29, 0x3e	; 62
	GIE_Enable();
 a58:	0e 94 49 00 	call	0x92	; 0x92 <GIE_Enable>
	Timer0_Init(&config);
 a5c:	80 e6       	ldi	r24, 0x60	; 96
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 8a 02 	call	0x514	; 0x514 <Timer0_Init>
	DIO_voidSetPinDirection(pPORTA, pin6, output);
 a64:	80 91 67 00 	lds	r24, 0x0067
 a68:	90 91 68 00 	lds	r25, 0x0068
 a6c:	66 e0       	ldi	r22, 0x06	; 6
 a6e:	41 e0       	ldi	r20, 0x01	; 1
 a70:	0e 94 65 00 	call	0xca	; 0xca <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(pPORTA, pin6, LOGIC_LOW);
 a74:	80 91 67 00 	lds	r24, 0x0067
 a78:	90 91 68 00 	lds	r25, 0x0068
 a7c:	66 e0       	ldi	r22, 0x06	; 6
 a7e:	40 e0       	ldi	r20, 0x00	; 0
 a80:	0e 94 19 01 	call	0x232	; 0x232 <DIO_voidSetPinValue>
	Timer0_SetCallBack(LED_On);
 a84:	8f e4       	ldi	r24, 0x4F	; 79
 a86:	95 e0       	ldi	r25, 0x05	; 5
 a88:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Timer0_SetCallBack>
	Timer0_SetDelayTimeMilliSec(&config, 1000);
 a8c:	80 e6       	ldi	r24, 0x60	; 96
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	48 ee       	ldi	r20, 0xE8	; 232
 a92:	53 e0       	ldi	r21, 0x03	; 3
 a94:	60 e0       	ldi	r22, 0x00	; 0
 a96:	70 e0       	ldi	r23, 0x00	; 0
 a98:	0e 94 bf 03 	call	0x77e	; 0x77e <Timer0_SetDelayTimeMilliSec>
 a9c:	ff cf       	rjmp	.-2      	; 0xa9c <main+0x4c>

00000a9e <LED_On>:

	}

}
void LED_On(void)
{
 a9e:	df 93       	push	r29
 aa0:	cf 93       	push	r28
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
	Timer0_Stop(&config);
 aa6:	80 e6       	ldi	r24, 0x60	; 96
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 a2 03 	call	0x744	; 0x744 <Timer0_Stop>

	if(DIO_voidGetPinValue(pPORTA, pin6))
 aae:	80 91 67 00 	lds	r24, 0x0067
 ab2:	90 91 68 00 	lds	r25, 0x0068
 ab6:	66 e0       	ldi	r22, 0x06	; 6
 ab8:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_voidGetPinValue>
 abc:	88 23       	and	r24, r24
 abe:	49 f0       	breq	.+18     	; 0xad2 <LED_On+0x34>
	{
		DIO_voidSetPinValue(pPORTA, pin6, LOGIC_LOW);
 ac0:	80 91 67 00 	lds	r24, 0x0067
 ac4:	90 91 68 00 	lds	r25, 0x0068
 ac8:	66 e0       	ldi	r22, 0x06	; 6
 aca:	40 e0       	ldi	r20, 0x00	; 0
 acc:	0e 94 19 01 	call	0x232	; 0x232 <DIO_voidSetPinValue>
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <LED_On+0x44>
	}
	else
	{
		DIO_voidSetPinValue(pPORTA, pin6, LOGIC_HIGH);
 ad2:	80 91 67 00 	lds	r24, 0x0067
 ad6:	90 91 68 00 	lds	r25, 0x0068
 ada:	66 e0       	ldi	r22, 0x06	; 6
 adc:	41 e0       	ldi	r20, 0x01	; 1
 ade:	0e 94 19 01 	call	0x232	; 0x232 <DIO_voidSetPinValue>
	}
	Timer0_SetDelayTimeMilliSec(&config, 1000);
 ae2:	80 e6       	ldi	r24, 0x60	; 96
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	48 ee       	ldi	r20, 0xE8	; 232
 ae8:	53 e0       	ldi	r21, 0x03	; 3
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	0e 94 bf 03 	call	0x77e	; 0x77e <Timer0_SetDelayTimeMilliSec>
}
 af2:	cf 91       	pop	r28
 af4:	df 91       	pop	r29
 af6:	08 95       	ret

00000af8 <__mulsi3>:
 af8:	62 9f       	mul	r22, r18
 afa:	d0 01       	movw	r26, r0
 afc:	73 9f       	mul	r23, r19
 afe:	f0 01       	movw	r30, r0
 b00:	82 9f       	mul	r24, r18
 b02:	e0 0d       	add	r30, r0
 b04:	f1 1d       	adc	r31, r1
 b06:	64 9f       	mul	r22, r20
 b08:	e0 0d       	add	r30, r0
 b0a:	f1 1d       	adc	r31, r1
 b0c:	92 9f       	mul	r25, r18
 b0e:	f0 0d       	add	r31, r0
 b10:	83 9f       	mul	r24, r19
 b12:	f0 0d       	add	r31, r0
 b14:	74 9f       	mul	r23, r20
 b16:	f0 0d       	add	r31, r0
 b18:	65 9f       	mul	r22, r21
 b1a:	f0 0d       	add	r31, r0
 b1c:	99 27       	eor	r25, r25
 b1e:	72 9f       	mul	r23, r18
 b20:	b0 0d       	add	r27, r0
 b22:	e1 1d       	adc	r30, r1
 b24:	f9 1f       	adc	r31, r25
 b26:	63 9f       	mul	r22, r19
 b28:	b0 0d       	add	r27, r0
 b2a:	e1 1d       	adc	r30, r1
 b2c:	f9 1f       	adc	r31, r25
 b2e:	bd 01       	movw	r22, r26
 b30:	cf 01       	movw	r24, r30
 b32:	11 24       	eor	r1, r1
 b34:	08 95       	ret

00000b36 <__divmodhi4>:
 b36:	97 fb       	bst	r25, 7
 b38:	09 2e       	mov	r0, r25
 b3a:	07 26       	eor	r0, r23
 b3c:	0a d0       	rcall	.+20     	; 0xb52 <__divmodhi4_neg1>
 b3e:	77 fd       	sbrc	r23, 7
 b40:	04 d0       	rcall	.+8      	; 0xb4a <__divmodhi4_neg2>
 b42:	0c d0       	rcall	.+24     	; 0xb5c <__udivmodhi4>
 b44:	06 d0       	rcall	.+12     	; 0xb52 <__divmodhi4_neg1>
 b46:	00 20       	and	r0, r0
 b48:	1a f4       	brpl	.+6      	; 0xb50 <__divmodhi4_exit>

00000b4a <__divmodhi4_neg2>:
 b4a:	70 95       	com	r23
 b4c:	61 95       	neg	r22
 b4e:	7f 4f       	sbci	r23, 0xFF	; 255

00000b50 <__divmodhi4_exit>:
 b50:	08 95       	ret

00000b52 <__divmodhi4_neg1>:
 b52:	f6 f7       	brtc	.-4      	; 0xb50 <__divmodhi4_exit>
 b54:	90 95       	com	r25
 b56:	81 95       	neg	r24
 b58:	9f 4f       	sbci	r25, 0xFF	; 255
 b5a:	08 95       	ret

00000b5c <__udivmodhi4>:
 b5c:	aa 1b       	sub	r26, r26
 b5e:	bb 1b       	sub	r27, r27
 b60:	51 e1       	ldi	r21, 0x11	; 17
 b62:	07 c0       	rjmp	.+14     	; 0xb72 <__udivmodhi4_ep>

00000b64 <__udivmodhi4_loop>:
 b64:	aa 1f       	adc	r26, r26
 b66:	bb 1f       	adc	r27, r27
 b68:	a6 17       	cp	r26, r22
 b6a:	b7 07       	cpc	r27, r23
 b6c:	10 f0       	brcs	.+4      	; 0xb72 <__udivmodhi4_ep>
 b6e:	a6 1b       	sub	r26, r22
 b70:	b7 0b       	sbc	r27, r23

00000b72 <__udivmodhi4_ep>:
 b72:	88 1f       	adc	r24, r24
 b74:	99 1f       	adc	r25, r25
 b76:	5a 95       	dec	r21
 b78:	a9 f7       	brne	.-22     	; 0xb64 <__udivmodhi4_loop>
 b7a:	80 95       	com	r24
 b7c:	90 95       	com	r25
 b7e:	bc 01       	movw	r22, r24
 b80:	cd 01       	movw	r24, r26
 b82:	08 95       	ret

00000b84 <_exit>:
 b84:	f8 94       	cli

00000b86 <__stop_program>:
 b86:	ff cf       	rjmp	.-2      	; 0xb86 <__stop_program>
