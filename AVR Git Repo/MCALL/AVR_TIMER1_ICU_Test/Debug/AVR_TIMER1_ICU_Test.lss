
AVR_TIMER1_ICU_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00003ffc  00004090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080019e  0080019e  000041ce  2**0
                  ALLOC
  3 .stab         0000351c  00000000  00000000  000041d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002963  00000000  00000000  000076ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a04f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000db72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ed48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ef08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fb6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__vector_6>
      1c:	0c 94 b8 1d 	jmp	0x3b70	; 0x3b70 <__vector_7>
      20:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__vector_8>
      24:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__vector_9>
      28:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__vector_10>
      2c:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <main>
      8a:	0c 94 fc 1f 	jmp	0x3ff8	; 0x3ff8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c5 1f 	jmp	0x3f8a	; 0x3f8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d1 1f 	jmp	0x3fa2	; 0x3fa2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ed 1f 	jmp	0x3fda	; 0x3fda <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d5 1f 	jmp	0x3faa	; 0x3faa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e9 1f 	jmp	0x3fd2	; 0x3fd2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 57       	subi	r30, 0x7E	; 126
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
     e36:	af e5       	ldi	r26, 0x5F	; 95
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e5       	ldi	r30, 0x5F	; 95
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 68       	ori	r24, 0x80	; 128
     e42:	8c 93       	st	X, r24
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <GIE_Disable>:

void GIE_Disable(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
     e52:	af e5       	ldi	r26, 0x5F	; 95
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ef e5       	ldi	r30, 0x5F	; 95
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 77       	andi	r24, 0x7F	; 127
     e5e:	8c 93       	st	X, r24
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_voidSetPinDirection+0x6>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <DIO_voidSetPinDirection+0x8>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_voidSetPinDirection+0xa>
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6b 83       	std	Y+3, r22	; 0x03
     e7a:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3e 83       	std	Y+6, r19	; 0x06
     e84:	2d 83       	std	Y+5, r18	; 0x05
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	83 30       	cpi	r24, 0x03	; 3
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_voidSetPinDirection+0x2c>
     e90:	51 c0       	rjmp	.+162    	; 0xf34 <DIO_voidSetPinDirection+0xce>
     e92:	2d 81       	ldd	r18, Y+5	; 0x05
     e94:	3e 81       	ldd	r19, Y+6	; 0x06
     e96:	24 30       	cpi	r18, 0x04	; 4
     e98:	31 05       	cpc	r19, r1
     e9a:	7c f4       	brge	.+30     	; 0xeba <DIO_voidSetPinDirection+0x54>
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	91 05       	cpc	r25, r1
     ea4:	71 f1       	breq	.+92     	; 0xf02 <DIO_voidSetPinDirection+0x9c>
     ea6:	2d 81       	ldd	r18, Y+5	; 0x05
     ea8:	3e 81       	ldd	r19, Y+6	; 0x06
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	ac f5       	brge	.+106    	; 0xf1a <DIO_voidSetPinDirection+0xb4>
     eb0:	8d 81       	ldd	r24, Y+5	; 0x05
     eb2:	9e 81       	ldd	r25, Y+6	; 0x06
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	d1 f0       	breq	.+52     	; 0xeec <DIO_voidSetPinDirection+0x86>
     eb8:	81 c0       	rjmp	.+258    	; 0xfbc <DIO_voidSetPinDirection+0x156>
     eba:	2d 81       	ldd	r18, Y+5	; 0x05
     ebc:	3e 81       	ldd	r19, Y+6	; 0x06
     ebe:	25 30       	cpi	r18, 0x05	; 5
     ec0:	31 05       	cpc	r19, r1
     ec2:	09 f4       	brne	.+2      	; 0xec6 <DIO_voidSetPinDirection+0x60>
     ec4:	52 c0       	rjmp	.+164    	; 0xf6a <DIO_voidSetPinDirection+0x104>
     ec6:	8d 81       	ldd	r24, Y+5	; 0x05
     ec8:	9e 81       	ldd	r25, Y+6	; 0x06
     eca:	85 30       	cpi	r24, 0x05	; 5
     ecc:	91 05       	cpc	r25, r1
     ece:	0c f4       	brge	.+2      	; 0xed2 <DIO_voidSetPinDirection+0x6c>
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <DIO_voidSetPinDirection+0xea>
     ed2:	2d 81       	ldd	r18, Y+5	; 0x05
     ed4:	3e 81       	ldd	r19, Y+6	; 0x06
     ed6:	26 30       	cpi	r18, 0x06	; 6
     ed8:	31 05       	cpc	r19, r1
     eda:	09 f4       	brne	.+2      	; 0xede <DIO_voidSetPinDirection+0x78>
     edc:	54 c0       	rjmp	.+168    	; 0xf86 <DIO_voidSetPinDirection+0x120>
     ede:	8d 81       	ldd	r24, Y+5	; 0x05
     ee0:	9e 81       	ldd	r25, Y+6	; 0x06
     ee2:	87 30       	cpi	r24, 0x07	; 7
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <DIO_voidSetPinDirection+0x84>
     ee8:	5d c0       	rjmp	.+186    	; 0xfa4 <DIO_voidSetPinDirection+0x13e>
     eea:	68 c0       	rjmp	.+208    	; 0xfbc <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	e9 81       	ldd	r30, Y+1	; 0x01
     ef2:	fa 81       	ldd	r31, Y+2	; 0x02
     ef4:	98 2f       	mov	r25, r24
     ef6:	91 70       	andi	r25, 0x01	; 1
     ef8:	81 81       	ldd	r24, Z+1	; 0x01
     efa:	8e 7f       	andi	r24, 0xFE	; 254
     efc:	89 2b       	or	r24, r25
     efe:	81 83       	std	Z+1, r24	; 0x01
     f00:	5d c0       	rjmp	.+186    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
     f02:	8c 81       	ldd	r24, Y+4	; 0x04
     f04:	81 70       	andi	r24, 0x01	; 1
     f06:	e9 81       	ldd	r30, Y+1	; 0x01
     f08:	fa 81       	ldd	r31, Y+2	; 0x02
     f0a:	81 70       	andi	r24, 0x01	; 1
     f0c:	98 2f       	mov	r25, r24
     f0e:	99 0f       	add	r25, r25
     f10:	81 81       	ldd	r24, Z+1	; 0x01
     f12:	8d 7f       	andi	r24, 0xFD	; 253
     f14:	89 2b       	or	r24, r25
     f16:	81 83       	std	Z+1, r24	; 0x01
     f18:	51 c0       	rjmp	.+162    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	98 2f       	mov	r25, r24
     f26:	99 0f       	add	r25, r25
     f28:	99 0f       	add	r25, r25
     f2a:	81 81       	ldd	r24, Z+1	; 0x01
     f2c:	8b 7f       	andi	r24, 0xFB	; 251
     f2e:	89 2b       	or	r24, r25
     f30:	81 83       	std	Z+1, r24	; 0x01
     f32:	44 c0       	rjmp	.+136    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
     f34:	8c 81       	ldd	r24, Y+4	; 0x04
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	81 70       	andi	r24, 0x01	; 1
     f3e:	98 2f       	mov	r25, r24
     f40:	99 0f       	add	r25, r25
     f42:	99 0f       	add	r25, r25
     f44:	99 0f       	add	r25, r25
     f46:	81 81       	ldd	r24, Z+1	; 0x01
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	89 2b       	or	r24, r25
     f4c:	81 83       	std	Z+1, r24	; 0x01
     f4e:	36 c0       	rjmp	.+108    	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	81 70       	andi	r24, 0x01	; 1
     f5a:	98 2f       	mov	r25, r24
     f5c:	92 95       	swap	r25
     f5e:	90 7f       	andi	r25, 0xF0	; 240
     f60:	81 81       	ldd	r24, Z+1	; 0x01
     f62:	8f 7e       	andi	r24, 0xEF	; 239
     f64:	89 2b       	or	r24, r25
     f66:	81 83       	std	Z+1, r24	; 0x01
     f68:	29 c0       	rjmp	.+82     	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	81 70       	andi	r24, 0x01	; 1
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	98 2f       	mov	r25, r24
     f76:	92 95       	swap	r25
     f78:	99 0f       	add	r25, r25
     f7a:	90 7e       	andi	r25, 0xE0	; 224
     f7c:	81 81       	ldd	r24, Z+1	; 0x01
     f7e:	8f 7d       	andi	r24, 0xDF	; 223
     f80:	89 2b       	or	r24, r25
     f82:	81 83       	std	Z+1, r24	; 0x01
     f84:	1b c0       	rjmp	.+54     	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	81 70       	andi	r24, 0x01	; 1
     f8a:	e9 81       	ldd	r30, Y+1	; 0x01
     f8c:	fa 81       	ldd	r31, Y+2	; 0x02
     f8e:	81 70       	andi	r24, 0x01	; 1
     f90:	98 2f       	mov	r25, r24
     f92:	92 95       	swap	r25
     f94:	99 0f       	add	r25, r25
     f96:	99 0f       	add	r25, r25
     f98:	90 7c       	andi	r25, 0xC0	; 192
     f9a:	81 81       	ldd	r24, Z+1	; 0x01
     f9c:	8f 7b       	andi	r24, 0xBF	; 191
     f9e:	89 2b       	or	r24, r25
     fa0:	81 83       	std	Z+1, r24	; 0x01
     fa2:	0c c0       	rjmp	.+24     	; 0xfbc <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	98 2f       	mov	r25, r24
     fae:	97 95       	ror	r25
     fb0:	99 27       	eor	r25, r25
     fb2:	97 95       	ror	r25
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	8f 77       	andi	r24, 0x7F	; 127
     fb8:	89 2b       	or	r24, r25
     fba:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     fbc:	26 96       	adiw	r28, 0x06	; 6
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	f8 94       	cli
     fc2:	de bf       	out	0x3e, r29	; 62
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	cd bf       	out	0x3d, r28	; 61
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <DIO_voidSetPinValue+0x6>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <DIO_voidSetPinValue+0x8>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <DIO_voidSetPinValue+0xa>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	6b 83       	std	Y+3, r22	; 0x03
     fe2:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3e 83       	std	Y+6, r19	; 0x06
     fec:	2d 83       	std	Y+5, r18	; 0x05
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	9e 81       	ldd	r25, Y+6	; 0x06
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	91 05       	cpc	r25, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <DIO_voidSetPinValue+0x2c>
     ff8:	51 c0       	rjmp	.+162    	; 0x109c <DIO_voidSetPinValue+0xce>
     ffa:	2d 81       	ldd	r18, Y+5	; 0x05
     ffc:	3e 81       	ldd	r19, Y+6	; 0x06
     ffe:	24 30       	cpi	r18, 0x04	; 4
    1000:	31 05       	cpc	r19, r1
    1002:	7c f4       	brge	.+30     	; 0x1022 <DIO_voidSetPinValue+0x54>
    1004:	8d 81       	ldd	r24, Y+5	; 0x05
    1006:	9e 81       	ldd	r25, Y+6	; 0x06
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	71 f1       	breq	.+92     	; 0x106a <DIO_voidSetPinValue+0x9c>
    100e:	2d 81       	ldd	r18, Y+5	; 0x05
    1010:	3e 81       	ldd	r19, Y+6	; 0x06
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	ac f5       	brge	.+106    	; 0x1082 <DIO_voidSetPinValue+0xb4>
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	d1 f0       	breq	.+52     	; 0x1054 <DIO_voidSetPinValue+0x86>
    1020:	81 c0       	rjmp	.+258    	; 0x1124 <DIO_voidSetPinValue+0x156>
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	25 30       	cpi	r18, 0x05	; 5
    1028:	31 05       	cpc	r19, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <DIO_voidSetPinValue+0x60>
    102c:	52 c0       	rjmp	.+164    	; 0x10d2 <DIO_voidSetPinValue+0x104>
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	85 30       	cpi	r24, 0x05	; 5
    1034:	91 05       	cpc	r25, r1
    1036:	0c f4       	brge	.+2      	; 0x103a <DIO_voidSetPinValue+0x6c>
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <DIO_voidSetPinValue+0xea>
    103a:	2d 81       	ldd	r18, Y+5	; 0x05
    103c:	3e 81       	ldd	r19, Y+6	; 0x06
    103e:	26 30       	cpi	r18, 0x06	; 6
    1040:	31 05       	cpc	r19, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <DIO_voidSetPinValue+0x78>
    1044:	54 c0       	rjmp	.+168    	; 0x10ee <DIO_voidSetPinValue+0x120>
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	87 30       	cpi	r24, 0x07	; 7
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <DIO_voidSetPinValue+0x84>
    1050:	5d c0       	rjmp	.+186    	; 0x110c <DIO_voidSetPinValue+0x13e>
    1052:	68 c0       	rjmp	.+208    	; 0x1124 <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	81 70       	andi	r24, 0x01	; 1
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	98 2f       	mov	r25, r24
    105e:	91 70       	andi	r25, 0x01	; 1
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	8e 7f       	andi	r24, 0xFE	; 254
    1064:	89 2b       	or	r24, r25
    1066:	82 83       	std	Z+2, r24	; 0x02
    1068:	5d c0       	rjmp	.+186    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
    106c:	81 70       	andi	r24, 0x01	; 1
    106e:	e9 81       	ldd	r30, Y+1	; 0x01
    1070:	fa 81       	ldd	r31, Y+2	; 0x02
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	98 2f       	mov	r25, r24
    1076:	99 0f       	add	r25, r25
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	8d 7f       	andi	r24, 0xFD	; 253
    107c:	89 2b       	or	r24, r25
    107e:	82 83       	std	Z+2, r24	; 0x02
    1080:	51 c0       	rjmp	.+162    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	e9 81       	ldd	r30, Y+1	; 0x01
    1088:	fa 81       	ldd	r31, Y+2	; 0x02
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	98 2f       	mov	r25, r24
    108e:	99 0f       	add	r25, r25
    1090:	99 0f       	add	r25, r25
    1092:	82 81       	ldd	r24, Z+2	; 0x02
    1094:	8b 7f       	andi	r24, 0xFB	; 251
    1096:	89 2b       	or	r24, r25
    1098:	82 83       	std	Z+2, r24	; 0x02
    109a:	44 c0       	rjmp	.+136    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	81 70       	andi	r24, 0x01	; 1
    10a0:	e9 81       	ldd	r30, Y+1	; 0x01
    10a2:	fa 81       	ldd	r31, Y+2	; 0x02
    10a4:	81 70       	andi	r24, 0x01	; 1
    10a6:	98 2f       	mov	r25, r24
    10a8:	99 0f       	add	r25, r25
    10aa:	99 0f       	add	r25, r25
    10ac:	99 0f       	add	r25, r25
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	89 2b       	or	r24, r25
    10b4:	82 83       	std	Z+2, r24	; 0x02
    10b6:	36 c0       	rjmp	.+108    	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	81 70       	andi	r24, 0x01	; 1
    10bc:	e9 81       	ldd	r30, Y+1	; 0x01
    10be:	fa 81       	ldd	r31, Y+2	; 0x02
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	98 2f       	mov	r25, r24
    10c4:	92 95       	swap	r25
    10c6:	90 7f       	andi	r25, 0xF0	; 240
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	8f 7e       	andi	r24, 0xEF	; 239
    10cc:	89 2b       	or	r24, r25
    10ce:	82 83       	std	Z+2, r24	; 0x02
    10d0:	29 c0       	rjmp	.+82     	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	81 70       	andi	r24, 0x01	; 1
    10d6:	e9 81       	ldd	r30, Y+1	; 0x01
    10d8:	fa 81       	ldd	r31, Y+2	; 0x02
    10da:	81 70       	andi	r24, 0x01	; 1
    10dc:	98 2f       	mov	r25, r24
    10de:	92 95       	swap	r25
    10e0:	99 0f       	add	r25, r25
    10e2:	90 7e       	andi	r25, 0xE0	; 224
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	8f 7d       	andi	r24, 0xDF	; 223
    10e8:	89 2b       	or	r24, r25
    10ea:	82 83       	std	Z+2, r24	; 0x02
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	98 2f       	mov	r25, r24
    10fa:	92 95       	swap	r25
    10fc:	99 0f       	add	r25, r25
    10fe:	99 0f       	add	r25, r25
    1100:	90 7c       	andi	r25, 0xC0	; 192
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	8f 7b       	andi	r24, 0xBF	; 191
    1106:	89 2b       	or	r24, r25
    1108:	82 83       	std	Z+2, r24	; 0x02
    110a:	0c c0       	rjmp	.+24     	; 0x1124 <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	98 2f       	mov	r25, r24
    1116:	97 95       	ror	r25
    1118:	99 27       	eor	r25, r25
    111a:	97 95       	ror	r25
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	8f 77       	andi	r24, 0x7F	; 127
    1120:	89 2b       	or	r24, r25
    1122:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
    1124:	26 96       	adiw	r28, 0x06	; 6
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <DIO_voidGetPinValue+0x6>
    113c:	00 d0       	rcall	.+0      	; 0x113e <DIO_voidGetPinValue+0x8>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <DIO_voidGetPinValue+0xa>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	9b 83       	std	Y+3, r25	; 0x03
    1146:	8a 83       	std	Y+2, r24	; 0x02
    1148:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	28 2f       	mov	r18, r24
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	3e 83       	std	Y+6, r19	; 0x06
    1152:	2d 83       	std	Y+5, r18	; 0x05
    1154:	8d 81       	ldd	r24, Y+5	; 0x05
    1156:	9e 81       	ldd	r25, Y+6	; 0x06
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	91 05       	cpc	r25, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <DIO_voidGetPinValue+0x2a>
    115e:	3e c0       	rjmp	.+124    	; 0x11dc <DIO_voidGetPinValue+0xa6>
    1160:	2d 81       	ldd	r18, Y+5	; 0x05
    1162:	3e 81       	ldd	r19, Y+6	; 0x06
    1164:	24 30       	cpi	r18, 0x04	; 4
    1166:	31 05       	cpc	r19, r1
    1168:	7c f4       	brge	.+30     	; 0x1188 <DIO_voidGetPinValue+0x52>
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	29 f1       	breq	.+74     	; 0x11be <DIO_voidGetPinValue+0x88>
    1174:	2d 81       	ldd	r18, Y+5	; 0x05
    1176:	3e 81       	ldd	r19, Y+6	; 0x06
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	3c f5       	brge	.+78     	; 0x11cc <DIO_voidGetPinValue+0x96>
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	b1 f0       	breq	.+44     	; 0x11b2 <DIO_voidGetPinValue+0x7c>
    1186:	55 c0       	rjmp	.+170    	; 0x1232 <DIO_voidGetPinValue+0xfc>
    1188:	2d 81       	ldd	r18, Y+5	; 0x05
    118a:	3e 81       	ldd	r19, Y+6	; 0x06
    118c:	25 30       	cpi	r18, 0x05	; 5
    118e:	31 05       	cpc	r19, r1
    1190:	b1 f1       	breq	.+108    	; 0x11fe <DIO_voidGetPinValue+0xc8>
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	85 30       	cpi	r24, 0x05	; 5
    1198:	91 05       	cpc	r25, r1
    119a:	4c f1       	brlt	.+82     	; 0x11ee <DIO_voidGetPinValue+0xb8>
    119c:	2d 81       	ldd	r18, Y+5	; 0x05
    119e:	3e 81       	ldd	r19, Y+6	; 0x06
    11a0:	26 30       	cpi	r18, 0x06	; 6
    11a2:	31 05       	cpc	r19, r1
    11a4:	a9 f1       	breq	.+106    	; 0x1210 <DIO_voidGetPinValue+0xda>
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	87 30       	cpi	r24, 0x07	; 7
    11ac:	91 05       	cpc	r25, r1
    11ae:	d1 f1       	breq	.+116    	; 0x1224 <DIO_voidGetPinValue+0xee>
    11b0:	40 c0       	rjmp	.+128    	; 0x1232 <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
    11b2:	ea 81       	ldd	r30, Y+2	; 0x02
    11b4:	fb 81       	ldd	r31, Y+3	; 0x03
    11b6:	80 81       	ld	r24, Z
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	3a c0       	rjmp	.+116    	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
    11be:	ea 81       	ldd	r30, Y+2	; 0x02
    11c0:	fb 81       	ldd	r31, Y+3	; 0x03
    11c2:	80 81       	ld	r24, Z
    11c4:	86 95       	lsr	r24
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	33 c0       	rjmp	.+102    	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
    11cc:	ea 81       	ldd	r30, Y+2	; 0x02
    11ce:	fb 81       	ldd	r31, Y+3	; 0x03
    11d0:	80 81       	ld	r24, Z
    11d2:	86 95       	lsr	r24
    11d4:	86 95       	lsr	r24
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	2b c0       	rjmp	.+86     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
    11dc:	ea 81       	ldd	r30, Y+2	; 0x02
    11de:	fb 81       	ldd	r31, Y+3	; 0x03
    11e0:	80 81       	ld	r24, Z
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	86 95       	lsr	r24
    11e8:	81 70       	andi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	22 c0       	rjmp	.+68     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
    11ee:	ea 81       	ldd	r30, Y+2	; 0x02
    11f0:	fb 81       	ldd	r31, Y+3	; 0x03
    11f2:	80 81       	ld	r24, Z
    11f4:	82 95       	swap	r24
    11f6:	8f 70       	andi	r24, 0x0F	; 15
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	1a c0       	rjmp	.+52     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
    11fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1200:	fb 81       	ldd	r31, Y+3	; 0x03
    1202:	80 81       	ld	r24, Z
    1204:	82 95       	swap	r24
    1206:	86 95       	lsr	r24
    1208:	87 70       	andi	r24, 0x07	; 7
    120a:	81 70       	andi	r24, 0x01	; 1
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	11 c0       	rjmp	.+34     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
    1210:	ea 81       	ldd	r30, Y+2	; 0x02
    1212:	fb 81       	ldd	r31, Y+3	; 0x03
    1214:	80 81       	ld	r24, Z
    1216:	82 95       	swap	r24
    1218:	86 95       	lsr	r24
    121a:	86 95       	lsr	r24
    121c:	83 70       	andi	r24, 0x03	; 3
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	89 83       	std	Y+1, r24	; 0x01
    1222:	07 c0       	rjmp	.+14     	; 0x1232 <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
    1224:	ea 81       	ldd	r30, Y+2	; 0x02
    1226:	fb 81       	ldd	r31, Y+3	; 0x03
    1228:	80 81       	ld	r24, Z
    122a:	88 1f       	adc	r24, r24
    122c:	88 27       	eor	r24, r24
    122e:	88 1f       	adc	r24, r24
    1230:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
}
    1234:	26 96       	adiw	r28, 0x06	; 6
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	00 d0       	rcall	.+0      	; 0x124c <DIO_voidSetPortDirection+0x6>
    124c:	0f 92       	push	r0
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	9a 83       	std	Y+2, r25	; 0x02
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
    1258:	e9 81       	ldd	r30, Y+1	; 0x01
    125a:	fa 81       	ldd	r31, Y+2	; 0x02
    125c:	8b 81       	ldd	r24, Y+3	; 0x03
    125e:	81 83       	std	Z+1, r24	; 0x01
}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	00 d0       	rcall	.+0      	; 0x1272 <DIO_voidSetPortValue+0x6>
    1272:	0f 92       	push	r0
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	9a 83       	std	Y+2, r25	; 0x02
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	82 83       	std	Z+2, r24	; 0x02
}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <DIO_voidGetPortValue+0x6>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
    12a0:	e9 81       	ldd	r30, Y+1	; 0x01
    12a2:	fa 81       	ldd	r31, Y+2	; 0x02
    12a4:	80 81       	ld	r24, Z
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	2e 97       	sbiw	r28, 0x0e	; 14
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
    12c4:	80 91 96 01 	lds	r24, 0x0196
    12c8:	90 91 97 01 	lds	r25, 0x0197
    12cc:	63 e0       	ldi	r22, 0x03	; 3
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
    12d4:	80 91 96 01 	lds	r24, 0x0196
    12d8:	90 91 97 01 	lds	r25, 0x0197
    12dc:	62 e0       	ldi	r22, 0x02	; 2
    12de:	41 e0       	ldi	r20, 0x01	; 1
    12e0:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a8 e4       	ldi	r26, 0x48	; 72
    12ea:	b2 e4       	ldi	r27, 0x42	; 66
    12ec:	8b 87       	std	Y+11, r24	; 0x0b
    12ee:	9c 87       	std	Y+12, r25	; 0x0c
    12f0:	ad 87       	std	Y+13, r26	; 0x0d
    12f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	4a e7       	ldi	r20, 0x7A	; 122
    1302:	55 e4       	ldi	r21, 0x45	; 69
    1304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1308:	dc 01       	movw	r26, r24
    130a:	cb 01       	movw	r24, r22
    130c:	8f 83       	std	Y+7, r24	; 0x07
    130e:	98 87       	std	Y+8, r25	; 0x08
    1310:	a9 87       	std	Y+9, r26	; 0x09
    1312:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1314:	6f 81       	ldd	r22, Y+7	; 0x07
    1316:	78 85       	ldd	r23, Y+8	; 0x08
    1318:	89 85       	ldd	r24, Y+9	; 0x09
    131a:	9a 85       	ldd	r25, Y+10	; 0x0a
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e8       	ldi	r20, 0x80	; 128
    1322:	5f e3       	ldi	r21, 0x3F	; 63
    1324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1328:	88 23       	and	r24, r24
    132a:	2c f4       	brge	.+10     	; 0x1336 <H_LCD_void_Init+0x86>
		__ticks = 1;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9e 83       	std	Y+6, r25	; 0x06
    1332:	8d 83       	std	Y+5, r24	; 0x05
    1334:	3f c0       	rjmp	.+126    	; 0x13b4 <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	3f ef       	ldi	r19, 0xFF	; 255
    1342:	4f e7       	ldi	r20, 0x7F	; 127
    1344:	57 e4       	ldi	r21, 0x47	; 71
    1346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    134a:	18 16       	cp	r1, r24
    134c:	4c f5       	brge	.+82     	; 0x13a0 <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1350:	7c 85       	ldd	r23, Y+12	; 0x0c
    1352:	8d 85       	ldd	r24, Y+13	; 0x0d
    1354:	9e 85       	ldd	r25, Y+14	; 0x0e
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	40 e2       	ldi	r20, 0x20	; 32
    135c:	51 e4       	ldi	r21, 0x41	; 65
    135e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	bc 01       	movw	r22, r24
    1368:	cd 01       	movw	r24, r26
    136a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	9e 83       	std	Y+6, r25	; 0x06
    1374:	8d 83       	std	Y+5, r24	; 0x05
    1376:	0f c0       	rjmp	.+30     	; 0x1396 <H_LCD_void_Init+0xe6>
    1378:	80 e9       	ldi	r24, 0x90	; 144
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	f1 f7       	brne	.-4      	; 0x1384 <H_LCD_void_Init+0xd4>
    1388:	9c 83       	std	Y+4, r25	; 0x04
    138a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	00 97       	sbiw	r24, 0x00	; 0
    139c:	69 f7       	brne	.-38     	; 0x1378 <H_LCD_void_Init+0xc8>
    139e:	14 c0       	rjmp	.+40     	; 0x13c8 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a0:	6f 81       	ldd	r22, Y+7	; 0x07
    13a2:	78 85       	ldd	r23, Y+8	; 0x08
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ac:	dc 01       	movw	r26, r24
    13ae:	cb 01       	movw	r24, r22
    13b0:	9e 83       	std	Y+6, r25	; 0x06
    13b2:	8d 83       	std	Y+5, r24	; 0x05
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <H_LCD_void_Init+0x110>
    13c4:	9a 83       	std	Y+2, r25	; 0x02
    13c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPinDirection(pPORTB, Pin0, output);
    13c8:	80 91 98 01 	lds	r24, 0x0198
    13cc:	90 91 99 01 	lds	r25, 0x0199
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin1, output);
    13d8:	80 91 98 01 	lds	r24, 0x0198
    13dc:	90 91 99 01 	lds	r25, 0x0199
    13e0:	61 e0       	ldi	r22, 0x01	; 1
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin2, output);
    13e8:	80 91 98 01 	lds	r24, 0x0198
    13ec:	90 91 99 01 	lds	r25, 0x0199
    13f0:	62 e0       	ldi	r22, 0x02	; 2
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin4, output);
    13f8:	80 91 98 01 	lds	r24, 0x0198
    13fc:	90 91 99 01 	lds	r25, 0x0199
    1400:	64 e0       	ldi	r22, 0x04	; 4
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1408:	80 91 96 01 	lds	r24, 0x0196
    140c:	90 91 97 01 	lds	r25, 0x0197
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1418:	82 e3       	ldi	r24, 0x32	; 50
    141a:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    141e:	82 e3       	ldi	r24, 0x32	; 50
    1420:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1424:	88 e2       	ldi	r24, 0x28	; 40
    1426:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    142a:	8e e0       	ldi	r24, 0x0E	; 14
    142c:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>


	/*
 #endif*/

}
    1436:	2e 96       	adiw	r28, 0x0e	; 14
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	6d 97       	sbiw	r28, 0x1d	; 29
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    145e:	80 91 96 01 	lds	r24, 0x0196
    1462:	90 91 97 01 	lds	r25, 0x0197
    1466:	63 e0       	ldi	r22, 0x03	; 3
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	a0 e8       	ldi	r26, 0x80	; 128
    1474:	bf e3       	ldi	r27, 0x3F	; 63
    1476:	89 8f       	std	Y+25, r24	; 0x19
    1478:	9a 8f       	std	Y+26, r25	; 0x1a
    147a:	ab 8f       	std	Y+27, r26	; 0x1b
    147c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147e:	69 8d       	ldd	r22, Y+25	; 0x19
    1480:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1482:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1484:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1486:	20 e0       	ldi	r18, 0x00	; 0
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	4a e7       	ldi	r20, 0x7A	; 122
    148c:	55 e4       	ldi	r21, 0x45	; 69
    148e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	8d 8b       	std	Y+21, r24	; 0x15
    1498:	9e 8b       	std	Y+22, r25	; 0x16
    149a:	af 8b       	std	Y+23, r26	; 0x17
    149c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    149e:	6d 89       	ldd	r22, Y+21	; 0x15
    14a0:	7e 89       	ldd	r23, Y+22	; 0x16
    14a2:	8f 89       	ldd	r24, Y+23	; 0x17
    14a4:	98 8d       	ldd	r25, Y+24	; 0x18
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e8       	ldi	r20, 0x80	; 128
    14ac:	5f e3       	ldi	r21, 0x3F	; 63
    14ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14b2:	88 23       	and	r24, r24
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <H_LCD_void_sendData+0x78>
		__ticks = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9c 8b       	std	Y+20, r25	; 0x14
    14bc:	8b 8b       	std	Y+19, r24	; 0x13
    14be:	3f c0       	rjmp	.+126    	; 0x153e <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    14c0:	6d 89       	ldd	r22, Y+21	; 0x15
    14c2:	7e 89       	ldd	r23, Y+22	; 0x16
    14c4:	8f 89       	ldd	r24, Y+23	; 0x17
    14c6:	98 8d       	ldd	r25, Y+24	; 0x18
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	4f e7       	ldi	r20, 0x7F	; 127
    14ce:	57 e4       	ldi	r21, 0x47	; 71
    14d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14d4:	18 16       	cp	r1, r24
    14d6:	4c f5       	brge	.+82     	; 0x152a <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d8:	69 8d       	ldd	r22, Y+25	; 0x19
    14da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e2       	ldi	r20, 0x20	; 32
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	0f c0       	rjmp	.+30     	; 0x1520 <H_LCD_void_sendData+0xd8>
    1502:	80 e9       	ldi	r24, 0x90	; 144
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	9a 8b       	std	Y+18, r25	; 0x12
    1508:	89 8b       	std	Y+17, r24	; 0x11
    150a:	89 89       	ldd	r24, Y+17	; 0x11
    150c:	9a 89       	ldd	r25, Y+18	; 0x12
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	f1 f7       	brne	.-4      	; 0x150e <H_LCD_void_sendData+0xc6>
    1512:	9a 8b       	std	Y+18, r25	; 0x12
    1514:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1516:	8b 89       	ldd	r24, Y+19	; 0x13
    1518:	9c 89       	ldd	r25, Y+20	; 0x14
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	9c 8b       	std	Y+20, r25	; 0x14
    151e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1520:	8b 89       	ldd	r24, Y+19	; 0x13
    1522:	9c 89       	ldd	r25, Y+20	; 0x14
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	69 f7       	brne	.-38     	; 0x1502 <H_LCD_void_sendData+0xba>
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152a:	6d 89       	ldd	r22, Y+21	; 0x15
    152c:	7e 89       	ldd	r23, Y+22	; 0x16
    152e:	8f 89       	ldd	r24, Y+23	; 0x17
    1530:	98 8d       	ldd	r25, Y+24	; 0x18
    1532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	9c 8b       	std	Y+20, r25	; 0x14
    153c:	8b 8b       	std	Y+19, r24	; 0x13
    153e:	8b 89       	ldd	r24, Y+19	; 0x13
    1540:	9c 89       	ldd	r25, Y+20	; 0x14
    1542:	98 8b       	std	Y+16, r25	; 0x10
    1544:	8f 87       	std	Y+15, r24	; 0x0f
    1546:	8f 85       	ldd	r24, Y+15	; 0x0f
    1548:	98 89       	ldd	r25, Y+16	; 0x10
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <H_LCD_void_sendData+0x102>
    154e:	98 8b       	std	Y+16, r25	; 0x10
    1550:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1552:	80 91 96 01 	lds	r24, 0x0196
    1556:	90 91 97 01 	lds	r25, 0x0197
    155a:	62 e0       	ldi	r22, 0x02	; 2
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e8       	ldi	r26, 0x80	; 128
    1568:	bf e3       	ldi	r27, 0x3F	; 63
    156a:	8b 87       	std	Y+11, r24	; 0x0b
    156c:	9c 87       	std	Y+12, r25	; 0x0c
    156e:	ad 87       	std	Y+13, r26	; 0x0d
    1570:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a e7       	ldi	r20, 0x7A	; 122
    1580:	55 e4       	ldi	r21, 0x45	; 69
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8f 83       	std	Y+7, r24	; 0x07
    158c:	98 87       	std	Y+8, r25	; 0x08
    158e:	a9 87       	std	Y+9, r26	; 0x09
    1590:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1592:	6f 81       	ldd	r22, Y+7	; 0x07
    1594:	78 85       	ldd	r23, Y+8	; 0x08
    1596:	89 85       	ldd	r24, Y+9	; 0x09
    1598:	9a 85       	ldd	r25, Y+10	; 0x0a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    15b4:	6f 81       	ldd	r22, Y+7	; 0x07
    15b6:	78 85       	ldd	r23, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9e 83       	std	Y+6, r25	; 0x06
    15f2:	8d 83       	std	Y+5, r24	; 0x05
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <H_LCD_void_sendData+0x1cc>
    15f6:	80 e9       	ldi	r24, 0x90	; 144
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	9c 81       	ldd	r25, Y+4	; 0x04
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <H_LCD_void_sendData+0x1ba>
    1606:	9c 83       	std	Y+4, r25	; 0x04
    1608:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <H_LCD_void_sendData+0x1ae>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	89 81       	ldd	r24, Y+1	; 0x01
    163c:	9a 81       	ldd	r25, Y+2	; 0x02
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <H_LCD_void_sendData+0x1f6>
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    1646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1648:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <H_LCD_void_latchByte>
}
    164c:	6d 96       	adiw	r28, 0x1d	; 29
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    1666:	6d 97       	sbiw	r28, 0x1d	; 29
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1674:	80 91 96 01 	lds	r24, 0x0196
    1678:	90 91 97 01 	lds	r25, 0x0197
    167c:	63 e0       	ldi	r22, 0x03	; 3
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e8       	ldi	r26, 0x80	; 128
    168a:	bf e3       	ldi	r27, 0x3F	; 63
    168c:	89 8f       	std	Y+25, r24	; 0x19
    168e:	9a 8f       	std	Y+26, r25	; 0x1a
    1690:	ab 8f       	std	Y+27, r26	; 0x1b
    1692:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	69 8d       	ldd	r22, Y+25	; 0x19
    1696:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1698:	8b 8d       	ldd	r24, Y+27	; 0x1b
    169a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a e7       	ldi	r20, 0x7A	; 122
    16a2:	55 e4       	ldi	r21, 0x45	; 69
    16a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8d 8b       	std	Y+21, r24	; 0x15
    16ae:	9e 8b       	std	Y+22, r25	; 0x16
    16b0:	af 8b       	std	Y+23, r26	; 0x17
    16b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b4:	6d 89       	ldd	r22, Y+21	; 0x15
    16b6:	7e 89       	ldd	r23, Y+22	; 0x16
    16b8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ba:	98 8d       	ldd	r25, Y+24	; 0x18
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
    16d2:	8b 8b       	std	Y+19, r24	; 0x13
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	69 8d       	ldd	r22, Y+25	; 0x19
    16f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9c 8b       	std	Y+20, r25	; 0x14
    1714:	8b 8b       	std	Y+19, r24	; 0x13
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <H_LCD_void_sendCommand+0xd8>
    1718:	80 e9       	ldi	r24, 0x90	; 144
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
    1720:	89 89       	ldd	r24, Y+17	; 0x11
    1722:	9a 89       	ldd	r25, Y+18	; 0x12
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <H_LCD_void_sendCommand+0xc6>
    1728:	9a 8b       	std	Y+18, r25	; 0x12
    172a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8b 89       	ldd	r24, Y+19	; 0x13
    172e:	9c 89       	ldd	r25, Y+20	; 0x14
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9c 8b       	std	Y+20, r25	; 0x14
    1734:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8b 89       	ldd	r24, Y+19	; 0x13
    1738:	9c 89       	ldd	r25, Y+20	; 0x14
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <H_LCD_void_sendCommand+0xba>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6d 89       	ldd	r22, Y+21	; 0x15
    1742:	7e 89       	ldd	r23, Y+22	; 0x16
    1744:	8f 89       	ldd	r24, Y+23	; 0x17
    1746:	98 8d       	ldd	r25, Y+24	; 0x18
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9c 8b       	std	Y+20, r25	; 0x14
    1752:	8b 8b       	std	Y+19, r24	; 0x13
    1754:	8b 89       	ldd	r24, Y+19	; 0x13
    1756:	9c 89       	ldd	r25, Y+20	; 0x14
    1758:	98 8b       	std	Y+16, r25	; 0x10
    175a:	8f 87       	std	Y+15, r24	; 0x0f
    175c:	8f 85       	ldd	r24, Y+15	; 0x0f
    175e:	98 89       	ldd	r25, Y+16	; 0x10
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <H_LCD_void_sendCommand+0x102>
    1764:	98 8b       	std	Y+16, r25	; 0x10
    1766:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1768:	80 91 96 01 	lds	r24, 0x0196
    176c:	90 91 97 01 	lds	r25, 0x0197
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e8       	ldi	r26, 0x80	; 128
    177e:	bf e3       	ldi	r27, 0x3F	; 63
    1780:	8b 87       	std	Y+11, r24	; 0x0b
    1782:	9c 87       	std	Y+12, r25	; 0x0c
    1784:	ad 87       	std	Y+13, r26	; 0x0d
    1786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	6b 85       	ldd	r22, Y+11	; 0x0b
    178a:	7c 85       	ldd	r23, Y+12	; 0x0c
    178c:	8d 85       	ldd	r24, Y+13	; 0x0d
    178e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4a e7       	ldi	r20, 0x7A	; 122
    1796:	55 e4       	ldi	r21, 0x45	; 69
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8f 83       	std	Y+7, r24	; 0x07
    17a2:	98 87       	std	Y+8, r25	; 0x08
    17a4:	a9 87       	std	Y+9, r26	; 0x09
    17a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a8:	6f 81       	ldd	r22, Y+7	; 0x07
    17aa:	78 85       	ldd	r23, Y+8	; 0x08
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	2c f4       	brge	.+10     	; 0x17ca <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	4c f5       	brge	.+82     	; 0x1834 <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e2       	ldi	r20, 0x20	; 32
    17f0:	51 e4       	ldi	r21, 0x41	; 65
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	0f c0       	rjmp	.+30     	; 0x182a <H_LCD_void_sendCommand+0x1cc>
    180c:	80 e9       	ldi	r24, 0x90	; 144
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <H_LCD_void_sendCommand+0x1ba>
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	69 f7       	brne	.-38     	; 0x180c <H_LCD_void_sendCommand+0x1ae>
    1832:	14 c0       	rjmp	.+40     	; 0x185c <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <H_LCD_void_sendCommand+0x1f6>
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    185c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185e:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <H_LCD_void_latchByte>
}
    1862:	6d 96       	adiw	r28, 0x1d	; 29
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <H_LCD_void_sendString+0x6>
    187a:	0f 92       	push	r0
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	0e c0       	rjmp	.+28     	; 0x18a2 <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	9b 81       	ldd	r25, Y+3	; 0x03
    1890:	fc 01       	movw	r30, r24
    1892:	e2 0f       	add	r30, r18
    1894:	f3 1f       	adc	r31, r19
    1896:	80 81       	ld	r24, Z
    1898:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
		i++;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	fc 01       	movw	r30, r24
    18ae:	e2 0f       	add	r30, r18
    18b0:	f3 1f       	adc	r31, r19
    18b2:	80 81       	ld	r24, Z
    18b4:	88 23       	and	r24, r24
    18b6:	39 f7       	brne	.-50     	; 0x1886 <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	6c 97       	sbiw	r28, 0x1c	; 28
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	f8 94       	cli
    18d2:	de bf       	out	0x3e, r29	; 62
    18d4:	0f be       	out	0x3f, r0	; 63
    18d6:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    18d8:	80 91 96 01 	lds	r24, 0x0196
    18dc:	90 91 97 01 	lds	r25, 0x0197
    18e0:	63 e0       	ldi	r22, 0x03	; 3
    18e2:	40 e0       	ldi	r20, 0x00	; 0
    18e4:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	a0 e8       	ldi	r26, 0x80	; 128
    18ee:	bf e3       	ldi	r27, 0x3F	; 63
    18f0:	89 8f       	std	Y+25, r24	; 0x19
    18f2:	9a 8f       	std	Y+26, r25	; 0x1a
    18f4:	ab 8f       	std	Y+27, r26	; 0x1b
    18f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f8:	69 8d       	ldd	r22, Y+25	; 0x19
    18fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	4a e7       	ldi	r20, 0x7A	; 122
    1906:	55 e4       	ldi	r21, 0x45	; 69
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	8d 8b       	std	Y+21, r24	; 0x15
    1912:	9e 8b       	std	Y+22, r25	; 0x16
    1914:	af 8b       	std	Y+23, r26	; 0x17
    1916:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	2c f4       	brge	.+10     	; 0x193a <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	3f c0       	rjmp	.+126    	; 0x19b8 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    193a:	6d 89       	ldd	r22, Y+21	; 0x15
    193c:	7e 89       	ldd	r23, Y+22	; 0x16
    193e:	8f 89       	ldd	r24, Y+23	; 0x17
    1940:	98 8d       	ldd	r25, Y+24	; 0x18
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	4c f5       	brge	.+82     	; 0x19a4 <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	69 8d       	ldd	r22, Y+25	; 0x19
    1954:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e2       	ldi	r20, 0x20	; 32
    1960:	51 e4       	ldi	r21, 0x41	; 65
    1962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	bc 01       	movw	r22, r24
    196c:	cd 01       	movw	r24, r26
    196e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	9c 8b       	std	Y+20, r25	; 0x14
    1978:	8b 8b       	std	Y+19, r24	; 0x13
    197a:	0f c0       	rjmp	.+30     	; 0x199a <H_LCD_void_clearDisplay+0xd6>
    197c:	80 e9       	ldi	r24, 0x90	; 144
    197e:	91 e0       	ldi	r25, 0x01	; 1
    1980:	9a 8b       	std	Y+18, r25	; 0x12
    1982:	89 8b       	std	Y+17, r24	; 0x11
    1984:	89 89       	ldd	r24, Y+17	; 0x11
    1986:	9a 89       	ldd	r25, Y+18	; 0x12
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <H_LCD_void_clearDisplay+0xc4>
    198c:	9a 8b       	std	Y+18, r25	; 0x12
    198e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	8b 89       	ldd	r24, Y+19	; 0x13
    1992:	9c 89       	ldd	r25, Y+20	; 0x14
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	9c 8b       	std	Y+20, r25	; 0x14
    1998:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    199a:	8b 89       	ldd	r24, Y+19	; 0x13
    199c:	9c 89       	ldd	r25, Y+20	; 0x14
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	69 f7       	brne	.-38     	; 0x197c <H_LCD_void_clearDisplay+0xb8>
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	9c 8b       	std	Y+20, r25	; 0x14
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ba:	9c 89       	ldd	r25, Y+20	; 0x14
    19bc:	98 8b       	std	Y+16, r25	; 0x10
    19be:	8f 87       	std	Y+15, r24	; 0x0f
    19c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19c2:	98 89       	ldd	r25, Y+16	; 0x10
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	f1 f7       	brne	.-4      	; 0x19c4 <H_LCD_void_clearDisplay+0x100>
    19c8:	98 8b       	std	Y+16, r25	; 0x10
    19ca:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    19cc:	80 91 96 01 	lds	r24, 0x0196
    19d0:	90 91 97 01 	lds	r25, 0x0197
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e8       	ldi	r26, 0x80	; 128
    19e2:	bf e3       	ldi	r27, 0x3F	; 63
    19e4:	8b 87       	std	Y+11, r24	; 0x0b
    19e6:	9c 87       	std	Y+12, r25	; 0x0c
    19e8:	ad 87       	std	Y+13, r26	; 0x0d
    19ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	55 e4       	ldi	r21, 0x45	; 69
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8f 83       	std	Y+7, r24	; 0x07
    1a06:	98 87       	std	Y+8, r25	; 0x08
    1a08:	a9 87       	std	Y+9, r26	; 0x09
    1a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <H_LCD_void_clearDisplay+0x1ca>
    1a70:	80 e9       	ldi	r24, 0x90	; 144
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <H_LCD_void_clearDisplay+0x1b8>
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <H_LCD_void_clearDisplay+0x1ac>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <H_LCD_void_clearDisplay+0x1f4>
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <H_LCD_void_latchByte>
}
    1ac6:	6c 96       	adiw	r28, 0x1c	; 28
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	00 d0       	rcall	.+0      	; 0x1ade <H_LCD_void_gotoXY+0x6>
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <H_LCD_void_gotoXY+0x8>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
    1ae8:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    1aea:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	3d 83       	std	Y+5, r19	; 0x05
    1af4:	2c 83       	std	Y+4, r18	; 0x04
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	9d 81       	ldd	r25, Y+5	; 0x05
    1afa:	81 30       	cpi	r24, 0x01	; 1
    1afc:	91 05       	cpc	r25, r1
    1afe:	c1 f0       	breq	.+48     	; 0x1b30 <H_LCD_void_gotoXY+0x58>
    1b00:	2c 81       	ldd	r18, Y+4	; 0x04
    1b02:	3d 81       	ldd	r19, Y+5	; 0x05
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <H_LCD_void_gotoXY+0x3c>
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <H_LCD_void_gotoXY+0x52>
    1b12:	19 c0       	rjmp	.+50     	; 0x1b46 <H_LCD_void_gotoXY+0x6e>
    1b14:	2c 81       	ldd	r18, Y+4	; 0x04
    1b16:	3d 81       	ldd	r19, Y+5	; 0x05
    1b18:	22 30       	cpi	r18, 0x02	; 2
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	69 f0       	breq	.+26     	; 0x1b38 <H_LCD_void_gotoXY+0x60>
    1b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b20:	9d 81       	ldd	r25, Y+5	; 0x05
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 05       	cpc	r25, r1
    1b26:	61 f0       	breq	.+24     	; 0x1b40 <H_LCD_void_gotoXY+0x68>
    1b28:	0e c0       	rjmp	.+28     	; 0x1b46 <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	80 5c       	subi	r24, 0xC0	; 192
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	07 c0       	rjmp	.+14     	; 0x1b46 <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	80 5f       	subi	r24, 0xF0	; 240
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	80 5b       	subi	r24, 0xB0	; 176
    1b44:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	80 68       	ori	r24, 0x80	; 128
    1b4a:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	e9 97       	sbiw	r28, 0x39	; 57
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    1b74:	20 91 98 01 	lds	r18, 0x0198
    1b78:	30 91 99 01 	lds	r19, 0x0199
    1b7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b7e:	48 2f       	mov	r20, r24
    1b80:	44 1f       	adc	r20, r20
    1b82:	44 27       	eor	r20, r20
    1b84:	44 1f       	adc	r20, r20
    1b86:	c9 01       	movw	r24, r18
    1b88:	64 e0       	ldi	r22, 0x04	; 4
    1b8a:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    1b8e:	20 91 98 01 	lds	r18, 0x0198
    1b92:	30 91 99 01 	lds	r19, 0x0199
    1b96:	89 ad       	ldd	r24, Y+57	; 0x39
    1b98:	82 95       	swap	r24
    1b9a:	86 95       	lsr	r24
    1b9c:	86 95       	lsr	r24
    1b9e:	83 70       	andi	r24, 0x03	; 3
    1ba0:	48 2f       	mov	r20, r24
    1ba2:	41 70       	andi	r20, 0x01	; 1
    1ba4:	c9 01       	movw	r24, r18
    1ba6:	62 e0       	ldi	r22, 0x02	; 2
    1ba8:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    1bac:	20 91 98 01 	lds	r18, 0x0198
    1bb0:	30 91 99 01 	lds	r19, 0x0199
    1bb4:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb6:	82 95       	swap	r24
    1bb8:	86 95       	lsr	r24
    1bba:	87 70       	andi	r24, 0x07	; 7
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	41 70       	andi	r20, 0x01	; 1
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	61 e0       	ldi	r22, 0x01	; 1
    1bc4:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    1bc8:	20 91 98 01 	lds	r18, 0x0198
    1bcc:	30 91 99 01 	lds	r19, 0x0199
    1bd0:	89 ad       	ldd	r24, Y+57	; 0x39
    1bd2:	82 95       	swap	r24
    1bd4:	8f 70       	andi	r24, 0x0F	; 15
    1bd6:	48 2f       	mov	r20, r24
    1bd8:	41 70       	andi	r20, 0x01	; 1
    1bda:	c9 01       	movw	r24, r18
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1be2:	80 91 96 01 	lds	r24, 0x0196
    1be6:	90 91 97 01 	lds	r25, 0x0197
    1bea:	62 e0       	ldi	r22, 0x02	; 2
    1bec:	41 e0       	ldi	r20, 0x01	; 1
    1bee:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e8       	ldi	r26, 0x80	; 128
    1bf8:	bf e3       	ldi	r27, 0x3F	; 63
    1bfa:	8d ab       	std	Y+53, r24	; 0x35
    1bfc:	9e ab       	std	Y+54, r25	; 0x36
    1bfe:	af ab       	std	Y+55, r26	; 0x37
    1c00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	6d a9       	ldd	r22, Y+53	; 0x35
    1c04:	7e a9       	ldd	r23, Y+54	; 0x36
    1c06:	8f a9       	ldd	r24, Y+55	; 0x37
    1c08:	98 ad       	ldd	r25, Y+56	; 0x38
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a e7       	ldi	r20, 0x7A	; 122
    1c10:	55 e4       	ldi	r21, 0x45	; 69
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	89 ab       	std	Y+49, r24	; 0x31
    1c1c:	9a ab       	std	Y+50, r25	; 0x32
    1c1e:	ab ab       	std	Y+51, r26	; 0x33
    1c20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c22:	69 a9       	ldd	r22, Y+49	; 0x31
    1c24:	7a a9       	ldd	r23, Y+50	; 0x32
    1c26:	8b a9       	ldd	r24, Y+51	; 0x33
    1c28:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	98 ab       	std	Y+48, r25	; 0x30
    1c40:	8f a7       	std	Y+47, r24	; 0x2f
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    1c44:	69 a9       	ldd	r22, Y+49	; 0x31
    1c46:	7a a9       	ldd	r23, Y+50	; 0x32
    1c48:	8b a9       	ldd	r24, Y+51	; 0x33
    1c4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c60:	8f a9       	ldd	r24, Y+55	; 0x37
    1c62:	98 ad       	ldd	r25, Y+56	; 0x38
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	98 ab       	std	Y+48, r25	; 0x30
    1c82:	8f a7       	std	Y+47, r24	; 0x2f
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <H_LCD_void_latchByte+0x146>
    1c86:	80 e9       	ldi	r24, 0x90	; 144
    1c88:	91 e0       	ldi	r25, 0x01	; 1
    1c8a:	9e a7       	std	Y+46, r25	; 0x2e
    1c8c:	8d a7       	std	Y+45, r24	; 0x2d
    1c8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <H_LCD_void_latchByte+0x134>
    1c96:	9e a7       	std	Y+46, r25	; 0x2e
    1c98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	98 ab       	std	Y+48, r25	; 0x30
    1ca2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <H_LCD_void_latchByte+0x128>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	69 a9       	ldd	r22, Y+49	; 0x31
    1cb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1cb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	98 ab       	std	Y+48, r25	; 0x30
    1cc0:	8f a7       	std	Y+47, r24	; 0x2f
    1cc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc6:	9c a7       	std	Y+44, r25	; 0x2c
    1cc8:	8b a7       	std	Y+43, r24	; 0x2b
    1cca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ccc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <H_LCD_void_latchByte+0x170>
    1cd2:	9c a7       	std	Y+44, r25	; 0x2c
    1cd4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1cd6:	80 91 96 01 	lds	r24, 0x0196
    1cda:	90 91 97 01 	lds	r25, 0x0197
    1cde:	62 e0       	ldi	r22, 0x02	; 2
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	a0 ea       	ldi	r26, 0xA0	; 160
    1cec:	b0 e4       	ldi	r27, 0x40	; 64
    1cee:	8f a3       	std	Y+39, r24	; 0x27
    1cf0:	98 a7       	std	Y+40, r25	; 0x28
    1cf2:	a9 a7       	std	Y+41, r26	; 0x29
    1cf4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1cfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a e7       	ldi	r20, 0x7A	; 122
    1d04:	55 e4       	ldi	r21, 0x45	; 69
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8b a3       	std	Y+35, r24	; 0x23
    1d10:	9c a3       	std	Y+36, r25	; 0x24
    1d12:	ad a3       	std	Y+37, r26	; 0x25
    1d14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d16:	6b a1       	ldd	r22, Y+35	; 0x23
    1d18:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    1d38:	6b a1       	ldd	r22, Y+35	; 0x23
    1d3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6f a1       	ldd	r22, Y+39	; 0x27
    1d52:	78 a5       	ldd	r23, Y+40	; 0x28
    1d54:	89 a5       	ldd	r24, Y+41	; 0x29
    1d56:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9a a3       	std	Y+34, r25	; 0x22
    1d76:	89 a3       	std	Y+33, r24	; 0x21
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <H_LCD_void_latchByte+0x23a>
    1d7a:	80 e9       	ldi	r24, 0x90	; 144
    1d7c:	91 e0       	ldi	r25, 0x01	; 1
    1d7e:	98 a3       	std	Y+32, r25	; 0x20
    1d80:	8f 8f       	std	Y+31, r24	; 0x1f
    1d82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d84:	98 a1       	ldd	r25, Y+32	; 0x20
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <H_LCD_void_latchByte+0x228>
    1d8a:	98 a3       	std	Y+32, r25	; 0x20
    1d8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d90:	9a a1       	ldd	r25, Y+34	; 0x22
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9a a3       	std	Y+34, r25	; 0x22
    1d96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <H_LCD_void_latchByte+0x21c>
    1da0:	14 c0       	rjmp	.+40     	; 0x1dca <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	6b a1       	ldd	r22, Y+35	; 0x23
    1da4:	7c a1       	ldd	r23, Y+36	; 0x24
    1da6:	8d a1       	ldd	r24, Y+37	; 0x25
    1da8:	9e a1       	ldd	r25, Y+38	; 0x26
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9a a3       	std	Y+34, r25	; 0x22
    1db4:	89 a3       	std	Y+33, r24	; 0x21
    1db6:	89 a1       	ldd	r24, Y+33	; 0x21
    1db8:	9a a1       	ldd	r25, Y+34	; 0x22
    1dba:	9e 8f       	std	Y+30, r25	; 0x1e
    1dbc:	8d 8f       	std	Y+29, r24	; 0x1d
    1dbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <H_LCD_void_latchByte+0x264>
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    1dca:	20 91 98 01 	lds	r18, 0x0198
    1dce:	30 91 99 01 	lds	r19, 0x0199
    1dd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd4:	86 95       	lsr	r24
    1dd6:	86 95       	lsr	r24
    1dd8:	86 95       	lsr	r24
    1dda:	48 2f       	mov	r20, r24
    1ddc:	41 70       	andi	r20, 0x01	; 1
    1dde:	c9 01       	movw	r24, r18
    1de0:	64 e0       	ldi	r22, 0x04	; 4
    1de2:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    1de6:	20 91 98 01 	lds	r18, 0x0198
    1dea:	30 91 99 01 	lds	r19, 0x0199
    1dee:	89 ad       	ldd	r24, Y+57	; 0x39
    1df0:	86 95       	lsr	r24
    1df2:	86 95       	lsr	r24
    1df4:	48 2f       	mov	r20, r24
    1df6:	41 70       	andi	r20, 0x01	; 1
    1df8:	c9 01       	movw	r24, r18
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    1e00:	20 91 98 01 	lds	r18, 0x0198
    1e04:	30 91 99 01 	lds	r19, 0x0199
    1e08:	89 ad       	ldd	r24, Y+57	; 0x39
    1e0a:	86 95       	lsr	r24
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	41 70       	andi	r20, 0x01	; 1
    1e10:	c9 01       	movw	r24, r18
    1e12:	61 e0       	ldi	r22, 0x01	; 1
    1e14:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    1e18:	20 91 98 01 	lds	r18, 0x0198
    1e1c:	30 91 99 01 	lds	r19, 0x0199
    1e20:	89 ad       	ldd	r24, Y+57	; 0x39
    1e22:	48 2f       	mov	r20, r24
    1e24:	41 70       	andi	r20, 0x01	; 1
    1e26:	c9 01       	movw	r24, r18
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1e2e:	80 91 96 01 	lds	r24, 0x0196
    1e32:	90 91 97 01 	lds	r25, 0x0197
    1e36:	62 e0       	ldi	r22, 0x02	; 2
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e8       	ldi	r26, 0x80	; 128
    1e44:	bf e3       	ldi	r27, 0x3F	; 63
    1e46:	89 8f       	std	Y+25, r24	; 0x19
    1e48:	9a 8f       	std	Y+26, r25	; 0x1a
    1e4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	4a e7       	ldi	r20, 0x7A	; 122
    1e5c:	55 e4       	ldi	r21, 0x45	; 69
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	8d 8b       	std	Y+21, r24	; 0x15
    1e68:	9e 8b       	std	Y+22, r25	; 0x16
    1e6a:	af 8b       	std	Y+23, r26	; 0x17
    1e6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e70:	7e 89       	ldd	r23, Y+22	; 0x16
    1e72:	8f 89       	ldd	r24, Y+23	; 0x17
    1e74:	98 8d       	ldd	r25, Y+24	; 0x18
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9c 8b       	std	Y+20, r25	; 0x14
    1e8c:	8b 8b       	std	Y+19, r24	; 0x13
    1e8e:	3f c0       	rjmp	.+126    	; 0x1f0e <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    1e90:	6d 89       	ldd	r22, Y+21	; 0x15
    1e92:	7e 89       	ldd	r23, Y+22	; 0x16
    1e94:	8f 89       	ldd	r24, Y+23	; 0x17
    1e96:	98 8d       	ldd	r25, Y+24	; 0x18
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	57 e4       	ldi	r21, 0x47	; 71
    1ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	4c f5       	brge	.+82     	; 0x1efa <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e2       	ldi	r20, 0x20	; 32
    1eb6:	51 e4       	ldi	r21, 0x41	; 65
    1eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	bc 01       	movw	r22, r24
    1ec2:	cd 01       	movw	r24, r26
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9c 8b       	std	Y+20, r25	; 0x14
    1ece:	8b 8b       	std	Y+19, r24	; 0x13
    1ed0:	0f c0       	rjmp	.+30     	; 0x1ef0 <H_LCD_void_latchByte+0x392>
    1ed2:	80 e9       	ldi	r24, 0x90	; 144
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	9a 8b       	std	Y+18, r25	; 0x12
    1ed8:	89 8b       	std	Y+17, r24	; 0x11
    1eda:	89 89       	ldd	r24, Y+17	; 0x11
    1edc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <H_LCD_void_latchByte+0x380>
    1ee2:	9a 8b       	std	Y+18, r25	; 0x12
    1ee4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	00 97       	sbiw	r24, 0x00	; 0
    1ef6:	69 f7       	brne	.-38     	; 0x1ed2 <H_LCD_void_latchByte+0x374>
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efa:	6d 89       	ldd	r22, Y+21	; 0x15
    1efc:	7e 89       	ldd	r23, Y+22	; 0x16
    1efe:	8f 89       	ldd	r24, Y+23	; 0x17
    1f00:	98 8d       	ldd	r25, Y+24	; 0x18
    1f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	9c 8b       	std	Y+20, r25	; 0x14
    1f0c:	8b 8b       	std	Y+19, r24	; 0x13
    1f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f10:	9c 89       	ldd	r25, Y+20	; 0x14
    1f12:	98 8b       	std	Y+16, r25	; 0x10
    1f14:	8f 87       	std	Y+15, r24	; 0x0f
    1f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f18:	98 89       	ldd	r25, Y+16	; 0x10
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <H_LCD_void_latchByte+0x3bc>
    1f1e:	98 8b       	std	Y+16, r25	; 0x10
    1f20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1f22:	80 91 96 01 	lds	r24, 0x0196
    1f26:	90 91 97 01 	lds	r25, 0x0197
    1f2a:	62 e0       	ldi	r22, 0x02	; 2
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 ea       	ldi	r26, 0xA0	; 160
    1f38:	b0 e4       	ldi	r27, 0x40	; 64
    1f3a:	8b 87       	std	Y+11, r24	; 0x0b
    1f3c:	9c 87       	std	Y+12, r25	; 0x0c
    1f3e:	ad 87       	std	Y+13, r26	; 0x0d
    1f40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a e7       	ldi	r20, 0x7A	; 122
    1f50:	55 e4       	ldi	r21, 0x45	; 69
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8f 83       	std	Y+7, r24	; 0x07
    1f5c:	98 87       	std	Y+8, r25	; 0x08
    1f5e:	a9 87       	std	Y+9, r26	; 0x09
    1f60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f62:	6f 81       	ldd	r22, Y+7	; 0x07
    1f64:	78 85       	ldd	r23, Y+8	; 0x08
    1f66:	89 85       	ldd	r24, Y+9	; 0x09
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    1f84:	6f 81       	ldd	r22, Y+7	; 0x07
    1f86:	78 85       	ldd	r23, Y+8	; 0x08
    1f88:	89 85       	ldd	r24, Y+9	; 0x09
    1f8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <H_LCD_void_latchByte+0x486>
    1fc6:	80 e9       	ldi	r24, 0x90	; 144
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <H_LCD_void_latchByte+0x474>
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <H_LCD_void_latchByte+0x468>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff0:	78 85       	ldd	r23, Y+8	; 0x08
    1ff2:	89 85       	ldd	r24, Y+9	; 0x09
    1ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	8d 83       	std	Y+5, r24	; 0x05
    2002:	8d 81       	ldd	r24, Y+5	; 0x05
    2004:	9e 81       	ldd	r25, Y+6	; 0x06
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	9a 81       	ldd	r25, Y+2	; 0x02
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <H_LCD_void_latchByte+0x4b0>
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2016:	e9 96       	adiw	r28, 0x39	; 57
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <H_LCD_void_creatCustomChar+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <H_LCD_void_creatCustomChar+0x8>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9b 83       	std	Y+3, r25	; 0x03
    2036:	8a 83       	std	Y+2, r24	; 0x02
    2038:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	88 30       	cpi	r24, 0x08	; 8
    203e:	f8 f4       	brcc	.+62     	; 0x207e <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	88 2f       	mov	r24, r24
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	08 96       	adiw	r24, 0x08	; 8
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    2058:	19 82       	std	Y+1, r1	; 0x01
    205a:	0e c0       	rjmp	.+28     	; 0x2078 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	fc 01       	movw	r30, r24
    2068:	e2 0f       	add	r30, r18
    206a:	f3 1f       	adc	r31, r19
    206c:	80 81       	ld	r24, Z
    206e:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	89 81       	ldd	r24, Y+1	; 0x01
    207a:	88 30       	cpi	r24, 0x08	; 8
    207c:	78 f3       	brcs	.-34     	; 0x205c <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	0f 92       	push	r0
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	80 58       	subi	r24, 0x80	; 128
    209c:	0e 94 2f 0b 	call	0x165e	; 0x165e <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>

}
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <H_LCD_void_displayHex+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <H_LCD_void_displayHex+0x8>
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <H_LCD_void_displayHex+0xa>
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    20be:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    20c0:	80 e6       	ldi	r24, 0x60	; 96
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	82 95       	swap	r24
    20cc:	8f 70       	andi	r24, 0x0F	; 15
    20ce:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	3e 83       	std	Y+6, r19	; 0x06
    20d8:	2d 83       	std	Y+5, r18	; 0x05
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	8b 30       	cpi	r24, 0x0B	; 11
    20e0:	91 05       	cpc	r25, r1
    20e2:	69 f1       	breq	.+90     	; 0x213e <H_LCD_void_displayHex+0x90>
    20e4:	2d 81       	ldd	r18, Y+5	; 0x05
    20e6:	3e 81       	ldd	r19, Y+6	; 0x06
    20e8:	2c 30       	cpi	r18, 0x0C	; 12
    20ea:	31 05       	cpc	r19, r1
    20ec:	54 f4       	brge	.+20     	; 0x2102 <H_LCD_void_displayHex+0x54>
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	99 23       	and	r25, r25
    20f4:	bc f1       	brlt	.+110    	; 0x2164 <H_LCD_void_displayHex+0xb6>
    20f6:	2d 81       	ldd	r18, Y+5	; 0x05
    20f8:	3e 81       	ldd	r19, Y+6	; 0x06
    20fa:	2a 30       	cpi	r18, 0x0A	; 10
    20fc:	31 05       	cpc	r19, r1
    20fe:	b4 f0       	brlt	.+44     	; 0x212c <H_LCD_void_displayHex+0x7e>
    2100:	1a c0       	rjmp	.+52     	; 0x2136 <H_LCD_void_displayHex+0x88>
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	8d 30       	cpi	r24, 0x0D	; 13
    2108:	91 05       	cpc	r25, r1
    210a:	09 f1       	breq	.+66     	; 0x214e <H_LCD_void_displayHex+0xa0>
    210c:	2d 81       	ldd	r18, Y+5	; 0x05
    210e:	3e 81       	ldd	r19, Y+6	; 0x06
    2110:	2d 30       	cpi	r18, 0x0D	; 13
    2112:	31 05       	cpc	r19, r1
    2114:	c4 f0       	brlt	.+48     	; 0x2146 <H_LCD_void_displayHex+0x98>
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	8e 30       	cpi	r24, 0x0E	; 14
    211c:	91 05       	cpc	r25, r1
    211e:	d9 f0       	breq	.+54     	; 0x2156 <H_LCD_void_displayHex+0xa8>
    2120:	2d 81       	ldd	r18, Y+5	; 0x05
    2122:	3e 81       	ldd	r19, Y+6	; 0x06
    2124:	2f 30       	cpi	r18, 0x0F	; 15
    2126:	31 05       	cpc	r19, r1
    2128:	d1 f0       	breq	.+52     	; 0x215e <H_LCD_void_displayHex+0xb0>
    212a:	1c c0       	rjmp	.+56     	; 0x2164 <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	80 5d       	subi	r24, 0xD0	; 208
    2130:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    2134:	17 c0       	rjmp	.+46     	; 0x2164 <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    2136:	81 e4       	ldi	r24, 0x41	; 65
    2138:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    213c:	13 c0       	rjmp	.+38     	; 0x2164 <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    213e:	82 e4       	ldi	r24, 0x42	; 66
    2140:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    2144:	0f c0       	rjmp	.+30     	; 0x2164 <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    2146:	83 e4       	ldi	r24, 0x43	; 67
    2148:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    214c:	0b c0       	rjmp	.+22     	; 0x2164 <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    214e:	84 e4       	ldi	r24, 0x44	; 68
    2150:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    2154:	07 c0       	rjmp	.+14     	; 0x2164 <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    2156:	85 e4       	ldi	r24, 0x45	; 69
    2158:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    215e:	86 e4       	ldi	r24, 0x46	; 70
    2160:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	3c 83       	std	Y+4, r19	; 0x04
    2172:	2b 83       	std	Y+3, r18	; 0x03
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	8b 30       	cpi	r24, 0x0B	; 11
    217a:	91 05       	cpc	r25, r1
    217c:	69 f1       	breq	.+90     	; 0x21d8 <H_LCD_void_displayHex+0x12a>
    217e:	2b 81       	ldd	r18, Y+3	; 0x03
    2180:	3c 81       	ldd	r19, Y+4	; 0x04
    2182:	2c 30       	cpi	r18, 0x0C	; 12
    2184:	31 05       	cpc	r19, r1
    2186:	54 f4       	brge	.+20     	; 0x219c <H_LCD_void_displayHex+0xee>
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	9c 81       	ldd	r25, Y+4	; 0x04
    218c:	99 23       	and	r25, r25
    218e:	bc f1       	brlt	.+110    	; 0x21fe <H_LCD_void_displayHex+0x150>
    2190:	2b 81       	ldd	r18, Y+3	; 0x03
    2192:	3c 81       	ldd	r19, Y+4	; 0x04
    2194:	2a 30       	cpi	r18, 0x0A	; 10
    2196:	31 05       	cpc	r19, r1
    2198:	b4 f0       	brlt	.+44     	; 0x21c6 <H_LCD_void_displayHex+0x118>
    219a:	1a c0       	rjmp	.+52     	; 0x21d0 <H_LCD_void_displayHex+0x122>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	8d 30       	cpi	r24, 0x0D	; 13
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f1       	breq	.+66     	; 0x21e8 <H_LCD_void_displayHex+0x13a>
    21a6:	2b 81       	ldd	r18, Y+3	; 0x03
    21a8:	3c 81       	ldd	r19, Y+4	; 0x04
    21aa:	2d 30       	cpi	r18, 0x0D	; 13
    21ac:	31 05       	cpc	r19, r1
    21ae:	c4 f0       	brlt	.+48     	; 0x21e0 <H_LCD_void_displayHex+0x132>
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	9c 81       	ldd	r25, Y+4	; 0x04
    21b4:	8e 30       	cpi	r24, 0x0E	; 14
    21b6:	91 05       	cpc	r25, r1
    21b8:	d9 f0       	breq	.+54     	; 0x21f0 <H_LCD_void_displayHex+0x142>
    21ba:	2b 81       	ldd	r18, Y+3	; 0x03
    21bc:	3c 81       	ldd	r19, Y+4	; 0x04
    21be:	2f 30       	cpi	r18, 0x0F	; 15
    21c0:	31 05       	cpc	r19, r1
    21c2:	d1 f0       	breq	.+52     	; 0x21f8 <H_LCD_void_displayHex+0x14a>
    21c4:	1c c0       	rjmp	.+56     	; 0x21fe <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	80 5d       	subi	r24, 0xD0	; 208
    21ca:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    21ce:	17 c0       	rjmp	.+46     	; 0x21fe <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    21d0:	81 e4       	ldi	r24, 0x41	; 65
    21d2:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    21d6:	13 c0       	rjmp	.+38     	; 0x21fe <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    21d8:	82 e4       	ldi	r24, 0x42	; 66
    21da:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    21e0:	83 e4       	ldi	r24, 0x43	; 67
    21e2:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    21e6:	0b c0       	rjmp	.+22     	; 0x21fe <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    21e8:	84 e4       	ldi	r24, 0x44	; 68
    21ea:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    21f0:	85 e4       	ldi	r24, 0x45	; 69
    21f2:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    21f8:	86 e4       	ldi	r24, 0x46	; 70
    21fa:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
		break;
	}
}
    21fe:	26 96       	adiw	r28, 0x06	; 6
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <H_LCD_void_displayBinary+0x6>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    221c:	83 e6       	ldi	r24, 0x63	; 99
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 3a 0c 	call	0x1874	; 0x1874 <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	18 c0       	rjmp	.+48     	; 0x2258 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	48 2f       	mov	r20, r24
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	87 e0       	ldi	r24, 0x07	; 7
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	82 1b       	sub	r24, r18
    223a:	93 0b       	sbc	r25, r19
    223c:	9a 01       	movw	r18, r20
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <H_LCD_void_displayBinary+0x34>
    2240:	35 95       	asr	r19
    2242:	27 95       	ror	r18
    2244:	8a 95       	dec	r24
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <H_LCD_void_displayBinary+0x30>
    2248:	c9 01       	movw	r24, r18
    224a:	81 70       	andi	r24, 0x01	; 1
    224c:	80 5d       	subi	r24, 0xD0	; 208
    224e:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	8f 5f       	subi	r24, 0xFF	; 255
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	88 30       	cpi	r24, 0x08	; 8
    225c:	28 f3       	brcs	.-54     	; 0x2228 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	cf 91       	pop	r28
    2264:	df 91       	pop	r29
    2266:	08 95       	ret

00002268 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    2268:	df 93       	push	r29
    226a:	cf 93       	push	r28
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
    2270:	2a 97       	sbiw	r28, 0x0a	; 10
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	6f 83       	std	Y+7, r22	; 0x07
    227e:	78 87       	std	Y+8, r23	; 0x08
    2280:	89 87       	std	Y+9, r24	; 0x09
    2282:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    2284:	1e 82       	std	Y+6, r1	; 0x06
    2286:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    2288:	8f 81       	ldd	r24, Y+7	; 0x07
    228a:	98 85       	ldd	r25, Y+8	; 0x08
    228c:	a9 85       	ldd	r26, Y+9	; 0x09
    228e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	ab 83       	std	Y+3, r26	; 0x03
    2296:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	aa 27       	eor	r26, r26
    22aa:	97 fd       	sbrc	r25, 7
    22ac:	a0 95       	com	r26
    22ae:	ba 2f       	mov	r27, r26
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 ac 11 	call	0x2358	; 0x2358 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    22b8:	8e e2       	ldi	r24, 0x2E	; 46
    22ba:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
	if(val < 0)
    22be:	69 81       	ldd	r22, Y+1	; 0x01
    22c0:	7a 81       	ldd	r23, Y+2	; 0x02
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e0       	ldi	r20, 0x00	; 0
    22cc:	50 e0       	ldi	r21, 0x00	; 0
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	4c f4       	brge	.+18     	; 0x22e8 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	ab 81       	ldd	r26, Y+3	; 0x03
    22dc:	bc 81       	ldd	r27, Y+4	; 0x04
    22de:	b0 58       	subi	r27, 0x80	; 128
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	ab 83       	std	Y+3, r26	; 0x03
    22e6:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    22e8:	1e 82       	std	Y+6, r1	; 0x06
    22ea:	2a c0       	rjmp	.+84     	; 0x2340 <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    22ec:	69 81       	ldd	r22, Y+1	; 0x01
    22ee:	7a 81       	ldd	r23, Y+2	; 0x02
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	89 83       	std	Y+1, r24	; 0x01
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	ab 83       	std	Y+3, r26	; 0x03
    230a:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    230c:	69 81       	ldd	r22, Y+1	; 0x01
    230e:	7a 81       	ldd	r23, Y+2	; 0x02
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	2a e0       	ldi	r18, 0x0A	; 10
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e0       	ldi	r20, 0x00	; 0
    2322:	50 e0       	ldi	r21, 0x00	; 0
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__divmodsi4>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	80 5d       	subi	r24, 0xD0	; 208
    2336:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    233a:	8e 81       	ldd	r24, Y+6	; 0x06
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	8e 83       	std	Y+6, r24	; 0x06
    2340:	8e 81       	ldd	r24, Y+6	; 0x06
    2342:	83 30       	cpi	r24, 0x03	; 3
    2344:	98 f2       	brcs	.-90     	; 0x22ec <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    2346:	2a 96       	adiw	r28, 0x0a	; 10
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
    2360:	6c 97       	sbiw	r28, 0x1c	; 28
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	f8 94       	cli
    2366:	de bf       	out	0x3e, r29	; 62
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	cd bf       	out	0x3d, r28	; 61
    236c:	69 8f       	std	Y+25, r22	; 0x19
    236e:	7a 8f       	std	Y+26, r23	; 0x1a
    2370:	8b 8f       	std	Y+27, r24	; 0x1b
    2372:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    2374:	84 e1       	ldi	r24, 0x14	; 20
    2376:	fe 01       	movw	r30, r28
    2378:	35 96       	adiw	r30, 0x05	; 5
    237a:	df 01       	movw	r26, r30
    237c:	98 2f       	mov	r25, r24
    237e:	1d 92       	st	X+, r1
    2380:	9a 95       	dec	r25
    2382:	e9 f7       	brne	.-6      	; 0x237e <H_LCD_void_sendIntNum+0x26>
    2384:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    2386:	89 8d       	ldd	r24, Y+25	; 0x19
    2388:	9a 8d       	ldd	r25, Y+26	; 0x1a
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	00 97       	sbiw	r24, 0x00	; 0
    2394:	09 f4       	brne	.+2      	; 0x2398 <H_LCD_void_sendIntNum+0x40>
    2396:	5d c0       	rjmp	.+186    	; 0x2452 <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	9a 81       	ldd	r25, Y+2	; 0x02
    239c:	99 23       	and	r25, r25
    239e:	c4 f4       	brge	.+48     	; 0x23d0 <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    23a0:	8d e2       	ldi	r24, 0x2D	; 45
    23a2:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
			val *=-1;
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	90 95       	com	r25
    23ac:	81 95       	neg	r24
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	9a 83       	std	Y+2, r25	; 0x02
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	8f 5f       	subi	r24, 0xFF	; 255
    23ba:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	2a e0       	ldi	r18, 0x0A	; 10
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	b9 01       	movw	r22, r18
    23c6:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__divmodhi4>
    23ca:	cb 01       	movw	r24, r22
    23cc:	9a 83       	std	Y+2, r25	; 0x02
    23ce:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	18 16       	cp	r1, r24
    23d6:	19 06       	cpc	r1, r25
    23d8:	74 f3       	brlt	.-36     	; 0x23b6 <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    23da:	89 8d       	ldd	r24, Y+25	; 0x19
    23dc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	18 16       	cp	r1, r24
    23e8:	19 06       	cpc	r1, r25
    23ea:	3c f0       	brlt	.+14     	; 0x23fa <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	9a 81       	ldd	r25, Y+2	; 0x02
    23f0:	90 95       	com	r25
    23f2:	81 95       	neg	r24
    23f4:	9f 4f       	sbci	r25, 0xFF	; 255
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	81 50       	subi	r24, 0x01	; 1
    23fe:	8c 83       	std	Y+4, r24	; 0x04
    2400:	20 c0       	rjmp	.+64     	; 0x2442 <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	e8 2f       	mov	r30, r24
    2406:	ff 27       	eor	r31, r31
    2408:	e7 fd       	sbrc	r30, 7
    240a:	f0 95       	com	r31
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	b9 01       	movw	r22, r18
    2416:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__divmodhi4>
    241a:	80 5d       	subi	r24, 0xD0	; 208
    241c:	28 2f       	mov	r18, r24
    241e:	ce 01       	movw	r24, r28
    2420:	05 96       	adiw	r24, 0x05	; 5
    2422:	e8 0f       	add	r30, r24
    2424:	f9 1f       	adc	r31, r25
    2426:	20 83       	st	Z, r18
			val /= 10;
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	2a e0       	ldi	r18, 0x0A	; 10
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	b9 01       	movw	r22, r18
    2432:	0e 94 75 1f 	call	0x3eea	; 0x3eea <__divmodhi4>
    2436:	cb 01       	movw	r24, r22
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	81 50       	subi	r24, 0x01	; 1
    2440:	8c 83       	std	Y+4, r24	; 0x04
    2442:	8c 81       	ldd	r24, Y+4	; 0x04
    2444:	88 23       	and	r24, r24
    2446:	ec f6       	brge	.-70     	; 0x2402 <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    2448:	ce 01       	movw	r24, r28
    244a:	05 96       	adiw	r24, 0x05	; 5
    244c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <H_LCD_void_sendString>
    2450:	03 c0       	rjmp	.+6      	; 0x2458 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    2452:	80 e3       	ldi	r24, 0x30	; 48
    2454:	0e 94 24 0a 	call	0x1448	; 0x1448 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    2458:	6c 96       	adiw	r28, 0x1c	; 28
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	de bf       	out	0x3e, r29	; 62
    2460:	0f be       	out	0x3f, r0	; 63
    2462:	cd bf       	out	0x3d, r28	; 61
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <TIMER0_Init>:
u8 remCounter = 0;

void(*ptrCallBack)(void) = NULL_PTR;

void TIMER0_Init(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <TIMER0_Init+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <TIMER0_Init+0x8>
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9a 83       	std	Y+2, r25	; 0x02
    2478:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    247a:	e9 81       	ldd	r30, Y+1	; 0x01
    247c:	fa 81       	ldd	r31, Y+2	; 0x02
    247e:	84 81       	ldd	r24, Z+4	; 0x04
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	3c 83       	std	Y+4, r19	; 0x04
    2486:	2b 83       	std	Y+3, r18	; 0x03
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	09 f4       	brne	.+2      	; 0x2494 <TIMER0_Init+0x2a>
    2492:	41 c0       	rjmp	.+130    	; 0x2516 <TIMER0_Init+0xac>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	22 30       	cpi	r18, 0x02	; 2
    249a:	31 05       	cpc	r19, r1
    249c:	2c f4       	brge	.+10     	; 0x24a8 <TIMER0_Init+0x3e>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	71 f0       	breq	.+28     	; 0x24c2 <TIMER0_Init+0x58>
    24a6:	a8 c0       	rjmp	.+336    	; 0x25f8 <TIMER0_Init+0x18e>
    24a8:	2b 81       	ldd	r18, Y+3	; 0x03
    24aa:	3c 81       	ldd	r19, Y+4	; 0x04
    24ac:	22 30       	cpi	r18, 0x02	; 2
    24ae:	31 05       	cpc	r19, r1
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <TIMER0_Init+0x4a>
    24b2:	55 c0       	rjmp	.+170    	; 0x255e <TIMER0_Init+0xf4>
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	83 30       	cpi	r24, 0x03	; 3
    24ba:	91 05       	cpc	r25, r1
    24bc:	09 f4       	brne	.+2      	; 0x24c0 <TIMER0_Init+0x56>
    24be:	79 c0       	rjmp	.+242    	; 0x25b2 <TIMER0_Init+0x148>
    24c0:	9b c0       	rjmp	.+310    	; 0x25f8 <TIMER0_Init+0x18e>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    24c2:	e3 e5       	ldi	r30, 0x53	; 83
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 68       	ori	r24, 0x80	; 128
    24ca:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    24cc:	a3 e5       	ldi	r26, 0x53	; 83
    24ce:	b0 e0       	ldi	r27, 0x00	; 0
    24d0:	e9 81       	ldd	r30, Y+1	; 0x01
    24d2:	fa 81       	ldd	r31, Y+2	; 0x02
    24d4:	80 81       	ld	r24, Z
    24d6:	86 95       	lsr	r24
    24d8:	81 70       	andi	r24, 0x01	; 1
    24da:	81 70       	andi	r24, 0x01	; 1
    24dc:	98 2f       	mov	r25, r24
    24de:	92 95       	swap	r25
    24e0:	99 0f       	add	r25, r25
    24e2:	90 7e       	andi	r25, 0xE0	; 224
    24e4:	8c 91       	ld	r24, X
    24e6:	8f 7d       	andi	r24, 0xDF	; 223
    24e8:	89 2b       	or	r24, r25
    24ea:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    24ec:	a3 e5       	ldi	r26, 0x53	; 83
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e9 81       	ldd	r30, Y+1	; 0x01
    24f2:	fa 81       	ldd	r31, Y+2	; 0x02
    24f4:	80 81       	ld	r24, Z
    24f6:	81 70       	andi	r24, 0x01	; 1
    24f8:	81 70       	andi	r24, 0x01	; 1
    24fa:	98 2f       	mov	r25, r24
    24fc:	92 95       	swap	r25
    24fe:	90 7f       	andi	r25, 0xF0	; 240
    2500:	8c 91       	ld	r24, X
    2502:	8f 7e       	andi	r24, 0xEF	; 239
    2504:	89 2b       	or	r24, r25
    2506:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    2508:	ac e5       	ldi	r26, 0x5C	; 92
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	e9 81       	ldd	r30, Y+1	; 0x01
    250e:	fa 81       	ldd	r31, Y+2	; 0x02
    2510:	86 81       	ldd	r24, Z+6	; 0x06
    2512:	8c 93       	st	X, r24
    2514:	71 c0       	rjmp	.+226    	; 0x25f8 <TIMER0_Init+0x18e>
		break;
	case TIMER0_PHASE_CORRECT_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    2516:	e3 e5       	ldi	r30, 0x53	; 83
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
    251c:	8f 77       	andi	r24, 0x7F	; 127
    251e:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2520:	a3 e5       	ldi	r26, 0x53	; 83
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	e9 81       	ldd	r30, Y+1	; 0x01
    2526:	fa 81       	ldd	r31, Y+2	; 0x02
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	86 95       	lsr	r24
    252c:	81 70       	andi	r24, 0x01	; 1
    252e:	81 70       	andi	r24, 0x01	; 1
    2530:	98 2f       	mov	r25, r24
    2532:	92 95       	swap	r25
    2534:	99 0f       	add	r25, r25
    2536:	90 7e       	andi	r25, 0xE0	; 224
    2538:	8c 91       	ld	r24, X
    253a:	8f 7d       	andi	r24, 0xDF	; 223
    253c:	89 2b       	or	r24, r25
    253e:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2540:	a3 e5       	ldi	r26, 0x53	; 83
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e9 81       	ldd	r30, Y+1	; 0x01
    2546:	fa 81       	ldd	r31, Y+2	; 0x02
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	81 70       	andi	r24, 0x01	; 1
    254c:	81 70       	andi	r24, 0x01	; 1
    254e:	98 2f       	mov	r25, r24
    2550:	92 95       	swap	r25
    2552:	90 7f       	andi	r25, 0xF0	; 240
    2554:	8c 91       	ld	r24, X
    2556:	8f 7e       	andi	r24, 0xEF	; 239
    2558:	89 2b       	or	r24, r25
    255a:	8c 93       	st	X, r24
    255c:	4d c0       	rjmp	.+154    	; 0x25f8 <TIMER0_Init+0x18e>
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	case TIMER0_CTC_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    255e:	e3 e5       	ldi	r30, 0x53	; 83
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	80 68       	ori	r24, 0x80	; 128
    2566:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2568:	a3 e5       	ldi	r26, 0x53	; 83
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e9 81       	ldd	r30, Y+1	; 0x01
    256e:	fa 81       	ldd	r31, Y+2	; 0x02
    2570:	80 81       	ld	r24, Z
    2572:	86 95       	lsr	r24
    2574:	81 70       	andi	r24, 0x01	; 1
    2576:	81 70       	andi	r24, 0x01	; 1
    2578:	98 2f       	mov	r25, r24
    257a:	92 95       	swap	r25
    257c:	99 0f       	add	r25, r25
    257e:	90 7e       	andi	r25, 0xE0	; 224
    2580:	8c 91       	ld	r24, X
    2582:	8f 7d       	andi	r24, 0xDF	; 223
    2584:	89 2b       	or	r24, r25
    2586:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2588:	a3 e5       	ldi	r26, 0x53	; 83
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	80 81       	ld	r24, Z
    2592:	81 70       	andi	r24, 0x01	; 1
    2594:	81 70       	andi	r24, 0x01	; 1
    2596:	98 2f       	mov	r25, r24
    2598:	92 95       	swap	r25
    259a:	90 7f       	andi	r25, 0xF0	; 240
    259c:	8c 91       	ld	r24, X
    259e:	8f 7e       	andi	r24, 0xEF	; 239
    25a0:	89 2b       	or	r24, r25
    25a2:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    25a4:	ac e5       	ldi	r26, 0x5C	; 92
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	e9 81       	ldd	r30, Y+1	; 0x01
    25aa:	fa 81       	ldd	r31, Y+2	; 0x02
    25ac:	86 81       	ldd	r24, Z+6	; 0x06
    25ae:	8c 93       	st	X, r24
    25b0:	23 c0       	rjmp	.+70     	; 0x25f8 <TIMER0_Init+0x18e>
		break;
	case TIMER0_FAST_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    25b2:	e3 e5       	ldi	r30, 0x53	; 83
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	8f 77       	andi	r24, 0x7F	; 127
    25ba:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    25bc:	a3 e5       	ldi	r26, 0x53	; 83
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e9 81       	ldd	r30, Y+1	; 0x01
    25c2:	fa 81       	ldd	r31, Y+2	; 0x02
    25c4:	81 81       	ldd	r24, Z+1	; 0x01
    25c6:	86 95       	lsr	r24
    25c8:	81 70       	andi	r24, 0x01	; 1
    25ca:	81 70       	andi	r24, 0x01	; 1
    25cc:	98 2f       	mov	r25, r24
    25ce:	92 95       	swap	r25
    25d0:	99 0f       	add	r25, r25
    25d2:	90 7e       	andi	r25, 0xE0	; 224
    25d4:	8c 91       	ld	r24, X
    25d6:	8f 7d       	andi	r24, 0xDF	; 223
    25d8:	89 2b       	or	r24, r25
    25da:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    25dc:	a3 e5       	ldi	r26, 0x53	; 83
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e9 81       	ldd	r30, Y+1	; 0x01
    25e2:	fa 81       	ldd	r31, Y+2	; 0x02
    25e4:	81 81       	ldd	r24, Z+1	; 0x01
    25e6:	81 70       	andi	r24, 0x01	; 1
    25e8:	81 70       	andi	r24, 0x01	; 1
    25ea:	98 2f       	mov	r25, r24
    25ec:	92 95       	swap	r25
    25ee:	90 7f       	andi	r25, 0xF0	; 240
    25f0:	8c 91       	ld	r24, X
    25f2:	8f 7e       	andi	r24, 0xEF	; 239
    25f4:	89 2b       	or	r24, r25
    25f6:	8c 93       	st	X, r24
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	}
	TCNT0_REG = Config_Ptr->TIMER0_INITIAL_VALUE;
    25f8:	a2 e5       	ldi	r26, 0x52	; 82
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e9 81       	ldd	r30, Y+1	; 0x01
    25fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2600:	85 81       	ldd	r24, Z+5	; 0x05
    2602:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM01_BIT = (Config_Ptr->Mode>>1);
    2604:	a3 e5       	ldi	r26, 0x53	; 83
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e9 81       	ldd	r30, Y+1	; 0x01
    260a:	fa 81       	ldd	r31, Y+2	; 0x02
    260c:	84 81       	ldd	r24, Z+4	; 0x04
    260e:	86 95       	lsr	r24
    2610:	81 70       	andi	r24, 0x01	; 1
    2612:	81 70       	andi	r24, 0x01	; 1
    2614:	98 2f       	mov	r25, r24
    2616:	99 0f       	add	r25, r25
    2618:	99 0f       	add	r25, r25
    261a:	99 0f       	add	r25, r25
    261c:	8c 91       	ld	r24, X
    261e:	87 7f       	andi	r24, 0xF7	; 247
    2620:	89 2b       	or	r24, r25
    2622:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM00_BIT = (Config_Ptr->Mode>>0);
    2624:	a3 e5       	ldi	r26, 0x53	; 83
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e9 81       	ldd	r30, Y+1	; 0x01
    262a:	fa 81       	ldd	r31, Y+2	; 0x02
    262c:	84 81       	ldd	r24, Z+4	; 0x04
    262e:	81 70       	andi	r24, 0x01	; 1
    2630:	81 70       	andi	r24, 0x01	; 1
    2632:	98 2f       	mov	r25, r24
    2634:	92 95       	swap	r25
    2636:	99 0f       	add	r25, r25
    2638:	99 0f       	add	r25, r25
    263a:	90 7c       	andi	r25, 0xC0	; 192
    263c:	8c 91       	ld	r24, X
    263e:	8f 7b       	andi	r24, 0xBF	; 191
    2640:	89 2b       	or	r24, r25
    2642:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <TIMER0_Start>:
void TIMER0_Start(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <TIMER0_Start+0x6>
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
    2660:	a3 e5       	ldi	r26, 0x53	; 83
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e3 e5       	ldi	r30, 0x53	; 83
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	98 2f       	mov	r25, r24
    266c:	98 7f       	andi	r25, 0xF8	; 248
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	83 81       	ldd	r24, Z+3	; 0x03
    2674:	89 2b       	or	r24, r25
    2676:	8c 93       	st	X, r24
}
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <TIMER0_Stop>:
void TIMER0_Stop(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	00 d0       	rcall	.+0      	; 0x2688 <TIMER0_Stop+0x6>
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    2690:	a3 e5       	ldi	r26, 0x53	; 83
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e3 e5       	ldi	r30, 0x53	; 83
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	88 7f       	andi	r24, 0xF8	; 248
    269c:	8c 93       	st	X, r24
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <TIMER0_GetCounts>:
u8 TIMER0_GetCounts(void)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    26b0:	e2 e5       	ldi	r30, 0x52	; 82
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <TIMER0_SetDelayTimeMilliSec>:
void TIMER0_SetDelayTimeMilliSec(const TIMER0_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <TIMER0_SetDelayTimeMilliSec+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <TIMER0_SetDelayTimeMilliSec+0x8>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <TIMER0_SetDelayTimeMilliSec+0xa>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	4b 83       	std	Y+3, r20	; 0x03
    26d0:	5c 83       	std	Y+4, r21	; 0x04
    26d2:	6d 83       	std	Y+5, r22	; 0x05
    26d4:	7e 83       	std	Y+6, r23	; 0x06
	/* Assuming we are using 16MHz FCPU and Prescaler 1024  Tick time = 2 Micro seconds */
	switch(Config_Ptr->Mode)
    26d6:	e9 81       	ldd	r30, Y+1	; 0x01
    26d8:	fa 81       	ldd	r31, Y+2	; 0x02
    26da:	84 81       	ldd	r24, Z+4	; 0x04
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <TIMER0_SetDelayTimeMilliSec+0x2a>
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <TIMER0_SetDelayTimeMilliSec+0xa8>
	{
	case TIMER0_NORMAL_MODE:
		overFlowCounter = (((copy_u32TimeMS * 1000)/TICK_TIME) / TOP_VALUE);
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	ad 81       	ldd	r26, Y+5	; 0x05
    26ec:	be 81       	ldd	r27, Y+6	; 0x06
    26ee:	28 ee       	ldi	r18, 0xE8	; 232
    26f0:	33 e0       	ldi	r19, 0x03	; 3
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	50 e0       	ldi	r21, 0x00	; 0
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__mulsi3>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	07 2e       	mov	r0, r23
    2704:	7e e0       	ldi	r23, 0x0E	; 14
    2706:	b6 95       	lsr	r27
    2708:	a7 95       	ror	r26
    270a:	97 95       	ror	r25
    270c:	87 95       	ror	r24
    270e:	7a 95       	dec	r23
    2710:	d1 f7       	brne	.-12     	; 0x2706 <TIMER0_SetDelayTimeMilliSec+0x4a>
    2712:	70 2d       	mov	r23, r0
    2714:	80 93 b2 01 	sts	0x01B2, r24
    2718:	90 93 b3 01 	sts	0x01B3, r25
    271c:	a0 93 b4 01 	sts	0x01B4, r26
    2720:	b0 93 b5 01 	sts	0x01B5, r27
		remCounter = (u8)(((copy_u32TimeMS * 1000)/TICK_TIME) % TOP_VALUE);
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	ad 81       	ldd	r26, Y+5	; 0x05
    272a:	be 81       	ldd	r27, Y+6	; 0x06
    272c:	28 ee       	ldi	r18, 0xE8	; 232
    272e:	33 e0       	ldi	r19, 0x03	; 3
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__mulsi3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	68 94       	set
    2742:	15 f8       	bld	r1, 5
    2744:	b6 95       	lsr	r27
    2746:	a7 95       	ror	r26
    2748:	97 95       	ror	r25
    274a:	87 95       	ror	r24
    274c:	16 94       	lsr	r1
    274e:	d1 f7       	brne	.-12     	; 0x2744 <TIMER0_SetDelayTimeMilliSec+0x88>
    2750:	80 93 b6 01 	sts	0x01B6, r24
		TIMER0_IntEnable(Config_Ptr);
    2754:	89 81       	ldd	r24, Y+1	; 0x01
    2756:	9a 81       	ldd	r25, Y+2	; 0x02
    2758:	0e 94 bb 13 	call	0x2776	; 0x2776 <TIMER0_IntEnable>
		TIMER0_Start(Config_Ptr);
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	9a 81       	ldd	r25, Y+2	; 0x02
    2760:	0e 94 29 13 	call	0x2652	; 0x2652 <TIMER0_Start>
	case TIMER0_CTC_MODE:

		break;

	}
}
    2764:	26 96       	adiw	r28, 0x06	; 6
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	cf 91       	pop	r28
    2772:	df 91       	pop	r29
    2774:	08 95       	ret

00002776 <TIMER0_IntEnable>:
void TIMER0_IntEnable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <TIMER0_IntEnable+0x6>
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    2784:	e9 81       	ldd	r30, Y+1	; 0x01
    2786:	fa 81       	ldd	r31, Y+2	; 0x02
    2788:	84 81       	ldd	r24, Z+4	; 0x04
    278a:	88 23       	and	r24, r24
    278c:	31 f4       	brne	.+12     	; 0x279a <TIMER0_IntEnable+0x24>
	{
		TIMSK_REG->bits.TOIE0_BIT = LOGIC_HIGH;
    278e:	e9 e5       	ldi	r30, 0x59	; 89
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	81 60       	ori	r24, 0x01	; 1
    2796:	80 83       	st	Z, r24
    2798:	0a c0       	rjmp	.+20     	; 0x27ae <TIMER0_IntEnable+0x38>
	}
	else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    279a:	e9 81       	ldd	r30, Y+1	; 0x01
    279c:	fa 81       	ldd	r31, Y+2	; 0x02
    279e:	84 81       	ldd	r24, Z+4	; 0x04
    27a0:	82 30       	cpi	r24, 0x02	; 2
    27a2:	29 f4       	brne	.+10     	; 0x27ae <TIMER0_IntEnable+0x38>
	{
		TIMSK_REG->bits.OCIE0_BIT = LOGIC_HIGH;
    27a4:	e9 e5       	ldi	r30, 0x59	; 89
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	82 60       	ori	r24, 0x02	; 2
    27ac:	80 83       	st	Z, r24
	}
	else
	{
		//return error;
	}
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <TIMER0_IntDisable>:
void TIMER0_IntDisable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <TIMER0_IntDisable+0x6>
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    27c6:	e9 81       	ldd	r30, Y+1	; 0x01
    27c8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ca:	84 81       	ldd	r24, Z+4	; 0x04
    27cc:	88 23       	and	r24, r24
    27ce:	31 f4       	brne	.+12     	; 0x27dc <TIMER0_IntDisable+0x24>
		{
			TIMSK_REG->bits.TOIE0_BIT = LOGIC_LOW;
    27d0:	e9 e5       	ldi	r30, 0x59	; 89
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	8e 7f       	andi	r24, 0xFE	; 254
    27d8:	80 83       	st	Z, r24
    27da:	0a c0       	rjmp	.+20     	; 0x27f0 <TIMER0_IntDisable+0x38>
		}
		else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    27dc:	e9 81       	ldd	r30, Y+1	; 0x01
    27de:	fa 81       	ldd	r31, Y+2	; 0x02
    27e0:	84 81       	ldd	r24, Z+4	; 0x04
    27e2:	82 30       	cpi	r24, 0x02	; 2
    27e4:	29 f4       	brne	.+10     	; 0x27f0 <TIMER0_IntDisable+0x38>
		{
			TIMSK_REG->bits.OCIE0_BIT = LOGIC_LOW;
    27e6:	e9 e5       	ldi	r30, 0x59	; 89
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	80 81       	ld	r24, Z
    27ec:	8d 7f       	andi	r24, 0xFD	; 253
    27ee:	80 83       	st	Z, r24
		}
		else
		{
			//return error;
		}
}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <TIMER0_SetCallBack>:

void TIMER0_SetCallBack(void(*ptrfn)(void))
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <TIMER0_SetCallBack+0x6>
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	90 93 b8 01 	sts	0x01B8, r25
    2810:	80 93 b7 01 	sts	0x01B7, r24
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <TIMER0_SetFastPWM>:
void TIMER0_SetFastPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty)
{
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <TIMER0_SetFastPWM+0x6>
    2824:	0f 92       	push	r0
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	6b 83       	std	Y+3, r22	; 0x03
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	OCR0_REG = (u8)(((u16)duty*256)/100);
    2830:	ec e5       	ldi	r30, 0x5C	; 92
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	98 2f       	mov	r25, r24
    283c:	88 27       	eor	r24, r24
    283e:	24 e6       	ldi	r18, 0x64	; 100
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	b9 01       	movw	r22, r18
    2844:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__udivmodhi4>
    2848:	cb 01       	movw	r24, r22
    284a:	80 83       	st	Z, r24

}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <__vector_11>:
void TIMER0_SetPhaseCorrectPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty);

ISR(TIMER0_OVF_vect)
{
    2858:	1f 92       	push	r1
    285a:	0f 92       	push	r0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	0f 92       	push	r0
    2860:	11 24       	eor	r1, r1
    2862:	2f 93       	push	r18
    2864:	3f 93       	push	r19
    2866:	4f 93       	push	r20
    2868:	5f 93       	push	r21
    286a:	6f 93       	push	r22
    286c:	7f 93       	push	r23
    286e:	8f 93       	push	r24
    2870:	9f 93       	push	r25
    2872:	af 93       	push	r26
    2874:	bf 93       	push	r27
    2876:	ef 93       	push	r30
    2878:	ff 93       	push	r31
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	overFlowCounter--;
    2882:	80 91 b2 01 	lds	r24, 0x01B2
    2886:	90 91 b3 01 	lds	r25, 0x01B3
    288a:	a0 91 b4 01 	lds	r26, 0x01B4
    288e:	b0 91 b5 01 	lds	r27, 0x01B5
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	a1 09       	sbc	r26, r1
    2896:	b1 09       	sbc	r27, r1
    2898:	80 93 b2 01 	sts	0x01B2, r24
    289c:	90 93 b3 01 	sts	0x01B3, r25
    28a0:	a0 93 b4 01 	sts	0x01B4, r26
    28a4:	b0 93 b5 01 	sts	0x01B5, r27

	if(overFlowCounter == 0)
    28a8:	80 91 b2 01 	lds	r24, 0x01B2
    28ac:	90 91 b3 01 	lds	r25, 0x01B3
    28b0:	a0 91 b4 01 	lds	r26, 0x01B4
    28b4:	b0 91 b5 01 	lds	r27, 0x01B5
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	a1 05       	cpc	r26, r1
    28bc:	b1 05       	cpc	r27, r1
    28be:	31 f4       	brne	.+12     	; 0x28cc <__vector_11+0x74>
	{
		TCNT0_REG = (256 - remCounter);
    28c0:	e2 e5       	ldi	r30, 0x52	; 82
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 91 b6 01 	lds	r24, 0x01B6
    28c8:	81 95       	neg	r24
    28ca:	80 83       	st	Z, r24
	}
	if((ptrCallBack != NULL_PTR) && (overFlowCounter == -1))
    28cc:	80 91 b7 01 	lds	r24, 0x01B7
    28d0:	90 91 b8 01 	lds	r25, 0x01B8
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	a9 f0       	breq	.+42     	; 0x2902 <__vector_11+0xaa>
    28d8:	80 91 b2 01 	lds	r24, 0x01B2
    28dc:	90 91 b3 01 	lds	r25, 0x01B3
    28e0:	a0 91 b4 01 	lds	r26, 0x01B4
    28e4:	b0 91 b5 01 	lds	r27, 0x01B5
    28e8:	8f 3f       	cpi	r24, 0xFF	; 255
    28ea:	2f ef       	ldi	r18, 0xFF	; 255
    28ec:	92 07       	cpc	r25, r18
    28ee:	2f ef       	ldi	r18, 0xFF	; 255
    28f0:	a2 07       	cpc	r26, r18
    28f2:	2f ef       	ldi	r18, 0xFF	; 255
    28f4:	b2 07       	cpc	r27, r18
    28f6:	29 f4       	brne	.+10     	; 0x2902 <__vector_11+0xaa>
	{
		(*ptrCallBack)();
    28f8:	e0 91 b7 01 	lds	r30, 0x01B7
    28fc:	f0 91 b8 01 	lds	r31, 0x01B8
    2900:	09 95       	icall
	}
}
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	ff 91       	pop	r31
    2908:	ef 91       	pop	r30
    290a:	bf 91       	pop	r27
    290c:	af 91       	pop	r26
    290e:	9f 91       	pop	r25
    2910:	8f 91       	pop	r24
    2912:	7f 91       	pop	r23
    2914:	6f 91       	pop	r22
    2916:	5f 91       	pop	r21
    2918:	4f 91       	pop	r20
    291a:	3f 91       	pop	r19
    291c:	2f 91       	pop	r18
    291e:	0f 90       	pop	r0
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	0f 90       	pop	r0
    2924:	1f 90       	pop	r1
    2926:	18 95       	reti

00002928 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2928:	1f 92       	push	r1
    292a:	0f 92       	push	r0
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	0f 92       	push	r0
    2930:	11 24       	eor	r1, r1
    2932:	2f 93       	push	r18
    2934:	3f 93       	push	r19
    2936:	4f 93       	push	r20
    2938:	5f 93       	push	r21
    293a:	6f 93       	push	r22
    293c:	7f 93       	push	r23
    293e:	8f 93       	push	r24
    2940:	9f 93       	push	r25
    2942:	af 93       	push	r26
    2944:	bf 93       	push	r27
    2946:	ef 93       	push	r30
    2948:	ff 93       	push	r31
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
	if(ptrCallBack != NULL_PTR)
    2952:	80 91 b7 01 	lds	r24, 0x01B7
    2956:	90 91 b8 01 	lds	r25, 0x01B8
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	29 f0       	breq	.+10     	; 0x2968 <__vector_10+0x40>
	{
		(*ptrCallBack)();
    295e:	e0 91 b7 01 	lds	r30, 0x01B7
    2962:	f0 91 b8 01 	lds	r31, 0x01B8
    2966:	09 95       	icall
	}
}
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	ff 91       	pop	r31
    296e:	ef 91       	pop	r30
    2970:	bf 91       	pop	r27
    2972:	af 91       	pop	r26
    2974:	9f 91       	pop	r25
    2976:	8f 91       	pop	r24
    2978:	7f 91       	pop	r23
    297a:	6f 91       	pop	r22
    297c:	5f 91       	pop	r21
    297e:	4f 91       	pop	r20
    2980:	3f 91       	pop	r19
    2982:	2f 91       	pop	r18
    2984:	0f 90       	pop	r0
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	0f 90       	pop	r0
    298a:	1f 90       	pop	r1
    298c:	18 95       	reti

0000298e <TIMER1_Init>:
u16 timer1RemCounter = 0;

void(*timer1PtrCallBack)(void) = NULL_PTR;

void TIMER1_Init(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	00 d0       	rcall	.+0      	; 0x2994 <TIMER1_Init+0x6>
    2994:	00 d0       	rcall	.+0      	; 0x2996 <TIMER1_Init+0x8>
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    299e:	e9 81       	ldd	r30, Y+1	; 0x01
    29a0:	fa 81       	ldd	r31, Y+2	; 0x02
    29a2:	84 81       	ldd	r24, Z+4	; 0x04
    29a4:	28 2f       	mov	r18, r24
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	3c 83       	std	Y+4, r19	; 0x04
    29aa:	2b 83       	std	Y+3, r18	; 0x03
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	87 30       	cpi	r24, 0x07	; 7
    29b2:	91 05       	cpc	r25, r1
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <TIMER1_Init+0x2a>
    29b6:	15 c3       	rjmp	.+1578   	; 0x2fe2 <TIMER1_Init+0x654>
    29b8:	2b 81       	ldd	r18, Y+3	; 0x03
    29ba:	3c 81       	ldd	r19, Y+4	; 0x04
    29bc:	28 30       	cpi	r18, 0x08	; 8
    29be:	31 05       	cpc	r19, r1
    29c0:	4c f5       	brge	.+82     	; 0x2a14 <TIMER1_Init+0x86>
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	9c 81       	ldd	r25, Y+4	; 0x04
    29c6:	83 30       	cpi	r24, 0x03	; 3
    29c8:	91 05       	cpc	r25, r1
    29ca:	09 f4       	brne	.+2      	; 0x29ce <TIMER1_Init+0x40>
    29cc:	7a c1       	rjmp	.+756    	; 0x2cc2 <TIMER1_Init+0x334>
    29ce:	2b 81       	ldd	r18, Y+3	; 0x03
    29d0:	3c 81       	ldd	r19, Y+4	; 0x04
    29d2:	24 30       	cpi	r18, 0x04	; 4
    29d4:	31 05       	cpc	r19, r1
    29d6:	8c f4       	brge	.+34     	; 0x29fa <TIMER1_Init+0x6c>
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	91 05       	cpc	r25, r1
    29e0:	09 f4       	brne	.+2      	; 0x29e4 <TIMER1_Init+0x56>
    29e2:	a7 c0       	rjmp	.+334    	; 0x2b32 <TIMER1_Init+0x1a4>
    29e4:	2b 81       	ldd	r18, Y+3	; 0x03
    29e6:	3c 81       	ldd	r19, Y+4	; 0x04
    29e8:	22 30       	cpi	r18, 0x02	; 2
    29ea:	31 05       	cpc	r19, r1
    29ec:	0c f0       	brlt	.+2      	; 0x29f0 <TIMER1_Init+0x62>
    29ee:	05 c1       	rjmp	.+522    	; 0x2bfa <TIMER1_Init+0x26c>
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	9c 81       	ldd	r25, Y+4	; 0x04
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	c9 f1       	breq	.+114    	; 0x2a6a <TIMER1_Init+0xdc>
    29f8:	13 c6       	rjmp	.+3110   	; 0x3620 <TIMER1_Init+0xc92>
    29fa:	2b 81       	ldd	r18, Y+3	; 0x03
    29fc:	3c 81       	ldd	r19, Y+4	; 0x04
    29fe:	25 30       	cpi	r18, 0x05	; 5
    2a00:	31 05       	cpc	r19, r1
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <TIMER1_Init+0x78>
    2a04:	26 c2       	rjmp	.+1100   	; 0x2e52 <TIMER1_Init+0x4c4>
    2a06:	8b 81       	ldd	r24, Y+3	; 0x03
    2a08:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0a:	86 30       	cpi	r24, 0x06	; 6
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	0c f0       	brlt	.+2      	; 0x2a12 <TIMER1_Init+0x84>
    2a10:	84 c2       	rjmp	.+1288   	; 0x2f1a <TIMER1_Init+0x58c>
    2a12:	bb c1       	rjmp	.+886    	; 0x2d8a <TIMER1_Init+0x3fc>
    2a14:	2b 81       	ldd	r18, Y+3	; 0x03
    2a16:	3c 81       	ldd	r19, Y+4	; 0x04
    2a18:	2b 30       	cpi	r18, 0x0B	; 11
    2a1a:	31 05       	cpc	r19, r1
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <TIMER1_Init+0x92>
    2a1e:	71 c4       	rjmp	.+2274   	; 0x3302 <TIMER1_Init+0x974>
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	9c 81       	ldd	r25, Y+4	; 0x04
    2a24:	8c 30       	cpi	r24, 0x0C	; 12
    2a26:	91 05       	cpc	r25, r1
    2a28:	6c f4       	brge	.+26     	; 0x2a44 <TIMER1_Init+0xb6>
    2a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a2e:	29 30       	cpi	r18, 0x09	; 9
    2a30:	31 05       	cpc	r19, r1
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <TIMER1_Init+0xa8>
    2a34:	9e c3       	rjmp	.+1852   	; 0x3172 <TIMER1_Init+0x7e4>
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	8a 30       	cpi	r24, 0x0A	; 10
    2a3c:	91 05       	cpc	r25, r1
    2a3e:	0c f0       	brlt	.+2      	; 0x2a42 <TIMER1_Init+0xb4>
    2a40:	fc c3       	rjmp	.+2040   	; 0x323a <TIMER1_Init+0x8ac>
    2a42:	33 c3       	rjmp	.+1638   	; 0x30aa <TIMER1_Init+0x71c>
    2a44:	2b 81       	ldd	r18, Y+3	; 0x03
    2a46:	3c 81       	ldd	r19, Y+4	; 0x04
    2a48:	2e 30       	cpi	r18, 0x0E	; 14
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <TIMER1_Init+0xc2>
    2a4e:	21 c5       	rjmp	.+2626   	; 0x3492 <TIMER1_Init+0xb04>
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	9c 81       	ldd	r25, Y+4	; 0x04
    2a54:	8f 30       	cpi	r24, 0x0F	; 15
    2a56:	91 05       	cpc	r25, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <TIMER1_Init+0xce>
    2a5a:	7f c5       	rjmp	.+2814   	; 0x355a <TIMER1_Init+0xbcc>
    2a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a60:	2c 30       	cpi	r18, 0x0C	; 12
    2a62:	31 05       	cpc	r19, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <TIMER1_Init+0xda>
    2a66:	b1 c4       	rjmp	.+2402   	; 0x33ca <TIMER1_Init+0xa3c>
    2a68:	db c5       	rjmp	.+2998   	; 0x3620 <TIMER1_Init+0xc92>
	{
	case TIMER1_NORMAL_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2a6a:	ef e4       	ldi	r30, 0x4F	; 79
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	87 7f       	andi	r24, 0xF7	; 247
    2a72:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2a74:	ef e4       	ldi	r30, 0x4F	; 79
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	8b 7f       	andi	r24, 0xFB	; 251
    2a7c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2a7e:	af e4       	ldi	r26, 0x4F	; 79
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	80 81       	ld	r24, Z
    2a88:	86 95       	lsr	r24
    2a8a:	81 70       	andi	r24, 0x01	; 1
    2a8c:	98 2f       	mov	r25, r24
    2a8e:	97 95       	ror	r25
    2a90:	99 27       	eor	r25, r25
    2a92:	97 95       	ror	r25
    2a94:	8c 91       	ld	r24, X
    2a96:	8f 77       	andi	r24, 0x7F	; 127
    2a98:	89 2b       	or	r24, r25
    2a9a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2a9c:	af e4       	ldi	r26, 0x4F	; 79
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    2aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    2aa4:	80 81       	ld	r24, Z
    2aa6:	81 70       	andi	r24, 0x01	; 1
    2aa8:	81 70       	andi	r24, 0x01	; 1
    2aaa:	98 2f       	mov	r25, r24
    2aac:	92 95       	swap	r25
    2aae:	99 0f       	add	r25, r25
    2ab0:	99 0f       	add	r25, r25
    2ab2:	90 7c       	andi	r25, 0xC0	; 192
    2ab4:	8c 91       	ld	r24, X
    2ab6:	8f 7b       	andi	r24, 0xBF	; 191
    2ab8:	89 2b       	or	r24, r25
    2aba:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2abc:	af e4       	ldi	r26, 0x4F	; 79
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	80 81       	ld	r24, Z
    2ac6:	86 95       	lsr	r24
    2ac8:	81 70       	andi	r24, 0x01	; 1
    2aca:	81 70       	andi	r24, 0x01	; 1
    2acc:	98 2f       	mov	r25, r24
    2ace:	92 95       	swap	r25
    2ad0:	99 0f       	add	r25, r25
    2ad2:	90 7e       	andi	r25, 0xE0	; 224
    2ad4:	8c 91       	ld	r24, X
    2ad6:	8f 7d       	andi	r24, 0xDF	; 223
    2ad8:	89 2b       	or	r24, r25
    2ada:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2adc:	af e4       	ldi	r26, 0x4F	; 79
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae4:	80 81       	ld	r24, Z
    2ae6:	81 70       	andi	r24, 0x01	; 1
    2ae8:	81 70       	andi	r24, 0x01	; 1
    2aea:	98 2f       	mov	r25, r24
    2aec:	92 95       	swap	r25
    2aee:	90 7f       	andi	r25, 0xF0	; 240
    2af0:	8c 91       	ld	r24, X
    2af2:	8f 7e       	andi	r24, 0xEF	; 239
    2af4:	89 2b       	or	r24, r25
    2af6:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2af8:	ab e4       	ldi	r26, 0x4B	; 75
    2afa:	b0 e0       	ldi	r27, 0x00	; 0
    2afc:	e9 81       	ldd	r30, Y+1	; 0x01
    2afe:	fa 81       	ldd	r31, Y+2	; 0x02
    2b00:	87 81       	ldd	r24, Z+7	; 0x07
    2b02:	90 85       	ldd	r25, Z+8	; 0x08
    2b04:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2b06:	aa e4       	ldi	r26, 0x4A	; 74
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0e:	87 81       	ldd	r24, Z+7	; 0x07
    2b10:	90 85       	ldd	r25, Z+8	; 0x08
    2b12:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2b14:	a9 e4       	ldi	r26, 0x49	; 73
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1c:	87 81       	ldd	r24, Z+7	; 0x07
    2b1e:	90 85       	ldd	r25, Z+8	; 0x08
    2b20:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2b22:	a8 e4       	ldi	r26, 0x48	; 72
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e9 81       	ldd	r30, Y+1	; 0x01
    2b28:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2a:	87 81       	ldd	r24, Z+7	; 0x07
    2b2c:	90 85       	ldd	r25, Z+8	; 0x08
    2b2e:	8c 93       	st	X, r24
    2b30:	77 c5       	rjmp	.+2798   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_CORRECT_PWM_8bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2b32:	ef e4       	ldi	r30, 0x4F	; 79
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	87 7f       	andi	r24, 0xF7	; 247
    2b3a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2b3c:	ef e4       	ldi	r30, 0x4F	; 79
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	8b 7f       	andi	r24, 0xFB	; 251
    2b44:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2b46:	af e4       	ldi	r26, 0x4F	; 79
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	86 95       	lsr	r24
    2b52:	81 70       	andi	r24, 0x01	; 1
    2b54:	98 2f       	mov	r25, r24
    2b56:	97 95       	ror	r25
    2b58:	99 27       	eor	r25, r25
    2b5a:	97 95       	ror	r25
    2b5c:	8c 91       	ld	r24, X
    2b5e:	8f 77       	andi	r24, 0x7F	; 127
    2b60:	89 2b       	or	r24, r25
    2b62:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2b64:	af e4       	ldi	r26, 0x4F	; 79
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	81 70       	andi	r24, 0x01	; 1
    2b70:	81 70       	andi	r24, 0x01	; 1
    2b72:	98 2f       	mov	r25, r24
    2b74:	92 95       	swap	r25
    2b76:	99 0f       	add	r25, r25
    2b78:	99 0f       	add	r25, r25
    2b7a:	90 7c       	andi	r25, 0xC0	; 192
    2b7c:	8c 91       	ld	r24, X
    2b7e:	8f 7b       	andi	r24, 0xBF	; 191
    2b80:	89 2b       	or	r24, r25
    2b82:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2b84:	af e4       	ldi	r26, 0x4F	; 79
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8c:	82 81       	ldd	r24, Z+2	; 0x02
    2b8e:	86 95       	lsr	r24
    2b90:	81 70       	andi	r24, 0x01	; 1
    2b92:	81 70       	andi	r24, 0x01	; 1
    2b94:	98 2f       	mov	r25, r24
    2b96:	92 95       	swap	r25
    2b98:	99 0f       	add	r25, r25
    2b9a:	90 7e       	andi	r25, 0xE0	; 224
    2b9c:	8c 91       	ld	r24, X
    2b9e:	8f 7d       	andi	r24, 0xDF	; 223
    2ba0:	89 2b       	or	r24, r25
    2ba2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2ba4:	af e4       	ldi	r26, 0x4F	; 79
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	82 81       	ldd	r24, Z+2	; 0x02
    2bae:	81 70       	andi	r24, 0x01	; 1
    2bb0:	81 70       	andi	r24, 0x01	; 1
    2bb2:	98 2f       	mov	r25, r24
    2bb4:	92 95       	swap	r25
    2bb6:	90 7f       	andi	r25, 0xF0	; 240
    2bb8:	8c 91       	ld	r24, X
    2bba:	8f 7e       	andi	r24, 0xEF	; 239
    2bbc:	89 2b       	or	r24, r25
    2bbe:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2bc0:	ab e4       	ldi	r26, 0x4B	; 75
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc8:	87 81       	ldd	r24, Z+7	; 0x07
    2bca:	90 85       	ldd	r25, Z+8	; 0x08
    2bcc:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2bce:	aa e4       	ldi	r26, 0x4A	; 74
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd6:	87 81       	ldd	r24, Z+7	; 0x07
    2bd8:	90 85       	ldd	r25, Z+8	; 0x08
    2bda:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2bdc:	a9 e4       	ldi	r26, 0x49	; 73
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e9 81       	ldd	r30, Y+1	; 0x01
    2be2:	fa 81       	ldd	r31, Y+2	; 0x02
    2be4:	87 81       	ldd	r24, Z+7	; 0x07
    2be6:	90 85       	ldd	r25, Z+8	; 0x08
    2be8:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2bea:	a8 e4       	ldi	r26, 0x48	; 72
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	87 81       	ldd	r24, Z+7	; 0x07
    2bf4:	90 85       	ldd	r25, Z+8	; 0x08
    2bf6:	8c 93       	st	X, r24
    2bf8:	13 c5       	rjmp	.+2598   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_CORRECT_PWM_9bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2bfa:	ef e4       	ldi	r30, 0x4F	; 79
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	87 7f       	andi	r24, 0xF7	; 247
    2c02:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2c04:	ef e4       	ldi	r30, 0x4F	; 79
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	8b 7f       	andi	r24, 0xFB	; 251
    2c0c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2c0e:	af e4       	ldi	r26, 0x4F	; 79
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e9 81       	ldd	r30, Y+1	; 0x01
    2c14:	fa 81       	ldd	r31, Y+2	; 0x02
    2c16:	82 81       	ldd	r24, Z+2	; 0x02
    2c18:	86 95       	lsr	r24
    2c1a:	81 70       	andi	r24, 0x01	; 1
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	97 95       	ror	r25
    2c20:	99 27       	eor	r25, r25
    2c22:	97 95       	ror	r25
    2c24:	8c 91       	ld	r24, X
    2c26:	8f 77       	andi	r24, 0x7F	; 127
    2c28:	89 2b       	or	r24, r25
    2c2a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2c2c:	af e4       	ldi	r26, 0x4F	; 79
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e9 81       	ldd	r30, Y+1	; 0x01
    2c32:	fa 81       	ldd	r31, Y+2	; 0x02
    2c34:	82 81       	ldd	r24, Z+2	; 0x02
    2c36:	81 70       	andi	r24, 0x01	; 1
    2c38:	81 70       	andi	r24, 0x01	; 1
    2c3a:	98 2f       	mov	r25, r24
    2c3c:	92 95       	swap	r25
    2c3e:	99 0f       	add	r25, r25
    2c40:	99 0f       	add	r25, r25
    2c42:	90 7c       	andi	r25, 0xC0	; 192
    2c44:	8c 91       	ld	r24, X
    2c46:	8f 7b       	andi	r24, 0xBF	; 191
    2c48:	89 2b       	or	r24, r25
    2c4a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2c4c:	af e4       	ldi	r26, 0x4F	; 79
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e9 81       	ldd	r30, Y+1	; 0x01
    2c52:	fa 81       	ldd	r31, Y+2	; 0x02
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	86 95       	lsr	r24
    2c58:	81 70       	andi	r24, 0x01	; 1
    2c5a:	81 70       	andi	r24, 0x01	; 1
    2c5c:	98 2f       	mov	r25, r24
    2c5e:	92 95       	swap	r25
    2c60:	99 0f       	add	r25, r25
    2c62:	90 7e       	andi	r25, 0xE0	; 224
    2c64:	8c 91       	ld	r24, X
    2c66:	8f 7d       	andi	r24, 0xDF	; 223
    2c68:	89 2b       	or	r24, r25
    2c6a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2c6c:	af e4       	ldi	r26, 0x4F	; 79
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e9 81       	ldd	r30, Y+1	; 0x01
    2c72:	fa 81       	ldd	r31, Y+2	; 0x02
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	81 70       	andi	r24, 0x01	; 1
    2c78:	81 70       	andi	r24, 0x01	; 1
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	92 95       	swap	r25
    2c7e:	90 7f       	andi	r25, 0xF0	; 240
    2c80:	8c 91       	ld	r24, X
    2c82:	8f 7e       	andi	r24, 0xEF	; 239
    2c84:	89 2b       	or	r24, r25
    2c86:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2c88:	ab e4       	ldi	r26, 0x4B	; 75
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c90:	87 81       	ldd	r24, Z+7	; 0x07
    2c92:	90 85       	ldd	r25, Z+8	; 0x08
    2c94:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2c96:	aa e4       	ldi	r26, 0x4A	; 74
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c9e:	87 81       	ldd	r24, Z+7	; 0x07
    2ca0:	90 85       	ldd	r25, Z+8	; 0x08
    2ca2:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2ca4:	a9 e4       	ldi	r26, 0x49	; 73
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    2caa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cac:	87 81       	ldd	r24, Z+7	; 0x07
    2cae:	90 85       	ldd	r25, Z+8	; 0x08
    2cb0:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2cb2:	a8 e4       	ldi	r26, 0x48	; 72
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cba:	87 81       	ldd	r24, Z+7	; 0x07
    2cbc:	90 85       	ldd	r25, Z+8	; 0x08
    2cbe:	8c 93       	st	X, r24
    2cc0:	af c4       	rjmp	.+2398   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_CORRECT_PWM_10bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2cc2:	ef e4       	ldi	r30, 0x4F	; 79
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	87 7f       	andi	r24, 0xF7	; 247
    2cca:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2ccc:	ef e4       	ldi	r30, 0x4F	; 79
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8b 7f       	andi	r24, 0xFB	; 251
    2cd4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2cd6:	af e4       	ldi	r26, 0x4F	; 79
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	86 95       	lsr	r24
    2ce2:	81 70       	andi	r24, 0x01	; 1
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	97 95       	ror	r25
    2ce8:	99 27       	eor	r25, r25
    2cea:	97 95       	ror	r25
    2cec:	8c 91       	ld	r24, X
    2cee:	8f 77       	andi	r24, 0x7F	; 127
    2cf0:	89 2b       	or	r24, r25
    2cf2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2cf4:	af e4       	ldi	r26, 0x4F	; 79
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	81 70       	andi	r24, 0x01	; 1
    2d00:	81 70       	andi	r24, 0x01	; 1
    2d02:	98 2f       	mov	r25, r24
    2d04:	92 95       	swap	r25
    2d06:	99 0f       	add	r25, r25
    2d08:	99 0f       	add	r25, r25
    2d0a:	90 7c       	andi	r25, 0xC0	; 192
    2d0c:	8c 91       	ld	r24, X
    2d0e:	8f 7b       	andi	r24, 0xBF	; 191
    2d10:	89 2b       	or	r24, r25
    2d12:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2d14:	af e4       	ldi	r26, 0x4F	; 79
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e9 81       	ldd	r30, Y+1	; 0x01
    2d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1c:	82 81       	ldd	r24, Z+2	; 0x02
    2d1e:	86 95       	lsr	r24
    2d20:	81 70       	andi	r24, 0x01	; 1
    2d22:	81 70       	andi	r24, 0x01	; 1
    2d24:	98 2f       	mov	r25, r24
    2d26:	92 95       	swap	r25
    2d28:	99 0f       	add	r25, r25
    2d2a:	90 7e       	andi	r25, 0xE0	; 224
    2d2c:	8c 91       	ld	r24, X
    2d2e:	8f 7d       	andi	r24, 0xDF	; 223
    2d30:	89 2b       	or	r24, r25
    2d32:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2d34:	af e4       	ldi	r26, 0x4F	; 79
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	81 70       	andi	r24, 0x01	; 1
    2d40:	81 70       	andi	r24, 0x01	; 1
    2d42:	98 2f       	mov	r25, r24
    2d44:	92 95       	swap	r25
    2d46:	90 7f       	andi	r25, 0xF0	; 240
    2d48:	8c 91       	ld	r24, X
    2d4a:	8f 7e       	andi	r24, 0xEF	; 239
    2d4c:	89 2b       	or	r24, r25
    2d4e:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2d50:	ab e4       	ldi	r26, 0x4B	; 75
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	e9 81       	ldd	r30, Y+1	; 0x01
    2d56:	fa 81       	ldd	r31, Y+2	; 0x02
    2d58:	87 81       	ldd	r24, Z+7	; 0x07
    2d5a:	90 85       	ldd	r25, Z+8	; 0x08
    2d5c:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2d5e:	aa e4       	ldi	r26, 0x4A	; 74
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	87 81       	ldd	r24, Z+7	; 0x07
    2d68:	90 85       	ldd	r25, Z+8	; 0x08
    2d6a:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2d6c:	a9 e4       	ldi	r26, 0x49	; 73
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	e9 81       	ldd	r30, Y+1	; 0x01
    2d72:	fa 81       	ldd	r31, Y+2	; 0x02
    2d74:	87 81       	ldd	r24, Z+7	; 0x07
    2d76:	90 85       	ldd	r25, Z+8	; 0x08
    2d78:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2d7a:	a8 e4       	ldi	r26, 0x48	; 72
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d80:	fa 81       	ldd	r31, Y+2	; 0x02
    2d82:	87 81       	ldd	r24, Z+7	; 0x07
    2d84:	90 85       	ldd	r25, Z+8	; 0x08
    2d86:	8c 93       	st	X, r24
    2d88:	4b c4       	rjmp	.+2198   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_CTC_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2d8a:	ef e4       	ldi	r30, 0x4F	; 79
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	87 7f       	andi	r24, 0xF7	; 247
    2d92:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2d94:	ef e4       	ldi	r30, 0x4F	; 79
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	8b 7f       	andi	r24, 0xFB	; 251
    2d9c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2d9e:	af e4       	ldi	r26, 0x4F	; 79
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e9 81       	ldd	r30, Y+1	; 0x01
    2da4:	fa 81       	ldd	r31, Y+2	; 0x02
    2da6:	80 81       	ld	r24, Z
    2da8:	86 95       	lsr	r24
    2daa:	81 70       	andi	r24, 0x01	; 1
    2dac:	98 2f       	mov	r25, r24
    2dae:	97 95       	ror	r25
    2db0:	99 27       	eor	r25, r25
    2db2:	97 95       	ror	r25
    2db4:	8c 91       	ld	r24, X
    2db6:	8f 77       	andi	r24, 0x7F	; 127
    2db8:	89 2b       	or	r24, r25
    2dba:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2dbc:	af e4       	ldi	r26, 0x4F	; 79
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc4:	80 81       	ld	r24, Z
    2dc6:	81 70       	andi	r24, 0x01	; 1
    2dc8:	81 70       	andi	r24, 0x01	; 1
    2dca:	98 2f       	mov	r25, r24
    2dcc:	92 95       	swap	r25
    2dce:	99 0f       	add	r25, r25
    2dd0:	99 0f       	add	r25, r25
    2dd2:	90 7c       	andi	r25, 0xC0	; 192
    2dd4:	8c 91       	ld	r24, X
    2dd6:	8f 7b       	andi	r24, 0xBF	; 191
    2dd8:	89 2b       	or	r24, r25
    2dda:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2ddc:	af e4       	ldi	r26, 0x4F	; 79
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e9 81       	ldd	r30, Y+1	; 0x01
    2de2:	fa 81       	ldd	r31, Y+2	; 0x02
    2de4:	80 81       	ld	r24, Z
    2de6:	86 95       	lsr	r24
    2de8:	81 70       	andi	r24, 0x01	; 1
    2dea:	81 70       	andi	r24, 0x01	; 1
    2dec:	98 2f       	mov	r25, r24
    2dee:	92 95       	swap	r25
    2df0:	99 0f       	add	r25, r25
    2df2:	90 7e       	andi	r25, 0xE0	; 224
    2df4:	8c 91       	ld	r24, X
    2df6:	8f 7d       	andi	r24, 0xDF	; 223
    2df8:	89 2b       	or	r24, r25
    2dfa:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2dfc:	af e4       	ldi	r26, 0x4F	; 79
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e9 81       	ldd	r30, Y+1	; 0x01
    2e02:	fa 81       	ldd	r31, Y+2	; 0x02
    2e04:	80 81       	ld	r24, Z
    2e06:	81 70       	andi	r24, 0x01	; 1
    2e08:	81 70       	andi	r24, 0x01	; 1
    2e0a:	98 2f       	mov	r25, r24
    2e0c:	92 95       	swap	r25
    2e0e:	90 7f       	andi	r25, 0xF0	; 240
    2e10:	8c 91       	ld	r24, X
    2e12:	8f 7e       	andi	r24, 0xEF	; 239
    2e14:	89 2b       	or	r24, r25
    2e16:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2e18:	ab e4       	ldi	r26, 0x4B	; 75
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e20:	87 81       	ldd	r24, Z+7	; 0x07
    2e22:	90 85       	ldd	r25, Z+8	; 0x08
    2e24:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2e26:	aa e4       	ldi	r26, 0x4A	; 74
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e2e:	87 81       	ldd	r24, Z+7	; 0x07
    2e30:	90 85       	ldd	r25, Z+8	; 0x08
    2e32:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2e34:	a9 e4       	ldi	r26, 0x49	; 73
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3c:	87 81       	ldd	r24, Z+7	; 0x07
    2e3e:	90 85       	ldd	r25, Z+8	; 0x08
    2e40:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2e42:	a8 e4       	ldi	r26, 0x48	; 72
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e9 81       	ldd	r30, Y+1	; 0x01
    2e48:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4a:	87 81       	ldd	r24, Z+7	; 0x07
    2e4c:	90 85       	ldd	r25, Z+8	; 0x08
    2e4e:	8c 93       	st	X, r24
    2e50:	e7 c3       	rjmp	.+1998   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_FAST_PWM_8bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2e52:	ef e4       	ldi	r30, 0x4F	; 79
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	87 7f       	andi	r24, 0xF7	; 247
    2e5a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2e5c:	ef e4       	ldi	r30, 0x4F	; 79
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	80 81       	ld	r24, Z
    2e62:	8b 7f       	andi	r24, 0xFB	; 251
    2e64:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2e66:	af e4       	ldi	r26, 0x4F	; 79
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6e:	81 81       	ldd	r24, Z+1	; 0x01
    2e70:	86 95       	lsr	r24
    2e72:	81 70       	andi	r24, 0x01	; 1
    2e74:	98 2f       	mov	r25, r24
    2e76:	97 95       	ror	r25
    2e78:	99 27       	eor	r25, r25
    2e7a:	97 95       	ror	r25
    2e7c:	8c 91       	ld	r24, X
    2e7e:	8f 77       	andi	r24, 0x7F	; 127
    2e80:	89 2b       	or	r24, r25
    2e82:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2e84:	af e4       	ldi	r26, 0x4F	; 79
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8c:	81 81       	ldd	r24, Z+1	; 0x01
    2e8e:	81 70       	andi	r24, 0x01	; 1
    2e90:	81 70       	andi	r24, 0x01	; 1
    2e92:	98 2f       	mov	r25, r24
    2e94:	92 95       	swap	r25
    2e96:	99 0f       	add	r25, r25
    2e98:	99 0f       	add	r25, r25
    2e9a:	90 7c       	andi	r25, 0xC0	; 192
    2e9c:	8c 91       	ld	r24, X
    2e9e:	8f 7b       	andi	r24, 0xBF	; 191
    2ea0:	89 2b       	or	r24, r25
    2ea2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2ea4:	af e4       	ldi	r26, 0x4F	; 79
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    2eac:	81 81       	ldd	r24, Z+1	; 0x01
    2eae:	86 95       	lsr	r24
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	81 70       	andi	r24, 0x01	; 1
    2eb4:	98 2f       	mov	r25, r24
    2eb6:	92 95       	swap	r25
    2eb8:	99 0f       	add	r25, r25
    2eba:	90 7e       	andi	r25, 0xE0	; 224
    2ebc:	8c 91       	ld	r24, X
    2ebe:	8f 7d       	andi	r24, 0xDF	; 223
    2ec0:	89 2b       	or	r24, r25
    2ec2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2ec4:	af e4       	ldi	r26, 0x4F	; 79
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eca:	fa 81       	ldd	r31, Y+2	; 0x02
    2ecc:	81 81       	ldd	r24, Z+1	; 0x01
    2ece:	81 70       	andi	r24, 0x01	; 1
    2ed0:	81 70       	andi	r24, 0x01	; 1
    2ed2:	98 2f       	mov	r25, r24
    2ed4:	92 95       	swap	r25
    2ed6:	90 7f       	andi	r25, 0xF0	; 240
    2ed8:	8c 91       	ld	r24, X
    2eda:	8f 7e       	andi	r24, 0xEF	; 239
    2edc:	89 2b       	or	r24, r25
    2ede:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2ee0:	ab e4       	ldi	r26, 0x4B	; 75
    2ee2:	b0 e0       	ldi	r27, 0x00	; 0
    2ee4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee8:	87 81       	ldd	r24, Z+7	; 0x07
    2eea:	90 85       	ldd	r25, Z+8	; 0x08
    2eec:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2eee:	aa e4       	ldi	r26, 0x4A	; 74
    2ef0:	b0 e0       	ldi	r27, 0x00	; 0
    2ef2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef6:	87 81       	ldd	r24, Z+7	; 0x07
    2ef8:	90 85       	ldd	r25, Z+8	; 0x08
    2efa:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2efc:	a9 e4       	ldi	r26, 0x49	; 73
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e9 81       	ldd	r30, Y+1	; 0x01
    2f02:	fa 81       	ldd	r31, Y+2	; 0x02
    2f04:	87 81       	ldd	r24, Z+7	; 0x07
    2f06:	90 85       	ldd	r25, Z+8	; 0x08
    2f08:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2f0a:	a8 e4       	ldi	r26, 0x48	; 72
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f10:	fa 81       	ldd	r31, Y+2	; 0x02
    2f12:	87 81       	ldd	r24, Z+7	; 0x07
    2f14:	90 85       	ldd	r25, Z+8	; 0x08
    2f16:	8c 93       	st	X, r24
    2f18:	83 c3       	rjmp	.+1798   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_FAST_PWM_9bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2f1a:	ef e4       	ldi	r30, 0x4F	; 79
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	87 7f       	andi	r24, 0xF7	; 247
    2f22:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2f24:	ef e4       	ldi	r30, 0x4F	; 79
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	8b 7f       	andi	r24, 0xFB	; 251
    2f2c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2f2e:	af e4       	ldi	r26, 0x4F	; 79
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e9 81       	ldd	r30, Y+1	; 0x01
    2f34:	fa 81       	ldd	r31, Y+2	; 0x02
    2f36:	81 81       	ldd	r24, Z+1	; 0x01
    2f38:	86 95       	lsr	r24
    2f3a:	81 70       	andi	r24, 0x01	; 1
    2f3c:	98 2f       	mov	r25, r24
    2f3e:	97 95       	ror	r25
    2f40:	99 27       	eor	r25, r25
    2f42:	97 95       	ror	r25
    2f44:	8c 91       	ld	r24, X
    2f46:	8f 77       	andi	r24, 0x7F	; 127
    2f48:	89 2b       	or	r24, r25
    2f4a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2f4c:	af e4       	ldi	r26, 0x4F	; 79
    2f4e:	b0 e0       	ldi	r27, 0x00	; 0
    2f50:	e9 81       	ldd	r30, Y+1	; 0x01
    2f52:	fa 81       	ldd	r31, Y+2	; 0x02
    2f54:	81 81       	ldd	r24, Z+1	; 0x01
    2f56:	81 70       	andi	r24, 0x01	; 1
    2f58:	81 70       	andi	r24, 0x01	; 1
    2f5a:	98 2f       	mov	r25, r24
    2f5c:	92 95       	swap	r25
    2f5e:	99 0f       	add	r25, r25
    2f60:	99 0f       	add	r25, r25
    2f62:	90 7c       	andi	r25, 0xC0	; 192
    2f64:	8c 91       	ld	r24, X
    2f66:	8f 7b       	andi	r24, 0xBF	; 191
    2f68:	89 2b       	or	r24, r25
    2f6a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2f6c:	af e4       	ldi	r26, 0x4F	; 79
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e9 81       	ldd	r30, Y+1	; 0x01
    2f72:	fa 81       	ldd	r31, Y+2	; 0x02
    2f74:	81 81       	ldd	r24, Z+1	; 0x01
    2f76:	86 95       	lsr	r24
    2f78:	81 70       	andi	r24, 0x01	; 1
    2f7a:	81 70       	andi	r24, 0x01	; 1
    2f7c:	98 2f       	mov	r25, r24
    2f7e:	92 95       	swap	r25
    2f80:	99 0f       	add	r25, r25
    2f82:	90 7e       	andi	r25, 0xE0	; 224
    2f84:	8c 91       	ld	r24, X
    2f86:	8f 7d       	andi	r24, 0xDF	; 223
    2f88:	89 2b       	or	r24, r25
    2f8a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2f8c:	af e4       	ldi	r26, 0x4F	; 79
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	e9 81       	ldd	r30, Y+1	; 0x01
    2f92:	fa 81       	ldd	r31, Y+2	; 0x02
    2f94:	81 81       	ldd	r24, Z+1	; 0x01
    2f96:	81 70       	andi	r24, 0x01	; 1
    2f98:	81 70       	andi	r24, 0x01	; 1
    2f9a:	98 2f       	mov	r25, r24
    2f9c:	92 95       	swap	r25
    2f9e:	90 7f       	andi	r25, 0xF0	; 240
    2fa0:	8c 91       	ld	r24, X
    2fa2:	8f 7e       	andi	r24, 0xEF	; 239
    2fa4:	89 2b       	or	r24, r25
    2fa6:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2fa8:	ab e4       	ldi	r26, 0x4B	; 75
    2faa:	b0 e0       	ldi	r27, 0x00	; 0
    2fac:	e9 81       	ldd	r30, Y+1	; 0x01
    2fae:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb0:	87 81       	ldd	r24, Z+7	; 0x07
    2fb2:	90 85       	ldd	r25, Z+8	; 0x08
    2fb4:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2fb6:	aa e4       	ldi	r26, 0x4A	; 74
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbe:	87 81       	ldd	r24, Z+7	; 0x07
    2fc0:	90 85       	ldd	r25, Z+8	; 0x08
    2fc2:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2fc4:	a9 e4       	ldi	r26, 0x49	; 73
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fca:	fa 81       	ldd	r31, Y+2	; 0x02
    2fcc:	87 81       	ldd	r24, Z+7	; 0x07
    2fce:	90 85       	ldd	r25, Z+8	; 0x08
    2fd0:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    2fd2:	a8 e4       	ldi	r26, 0x48	; 72
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fda:	87 81       	ldd	r24, Z+7	; 0x07
    2fdc:	90 85       	ldd	r25, Z+8	; 0x08
    2fde:	8c 93       	st	X, r24
    2fe0:	1f c3       	rjmp	.+1598   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_FAST_PWM_10bIT_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    2fe2:	ef e4       	ldi	r30, 0x4F	; 79
    2fe4:	f0 e0       	ldi	r31, 0x00	; 0
    2fe6:	80 81       	ld	r24, Z
    2fe8:	87 7f       	andi	r24, 0xF7	; 247
    2fea:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    2fec:	ef e4       	ldi	r30, 0x4F	; 79
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	8b 7f       	andi	r24, 0xFB	; 251
    2ff4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2ff6:	af e4       	ldi	r26, 0x4F	; 79
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffe:	81 81       	ldd	r24, Z+1	; 0x01
    3000:	86 95       	lsr	r24
    3002:	81 70       	andi	r24, 0x01	; 1
    3004:	98 2f       	mov	r25, r24
    3006:	97 95       	ror	r25
    3008:	99 27       	eor	r25, r25
    300a:	97 95       	ror	r25
    300c:	8c 91       	ld	r24, X
    300e:	8f 77       	andi	r24, 0x7F	; 127
    3010:	89 2b       	or	r24, r25
    3012:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3014:	af e4       	ldi	r26, 0x4F	; 79
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e9 81       	ldd	r30, Y+1	; 0x01
    301a:	fa 81       	ldd	r31, Y+2	; 0x02
    301c:	81 81       	ldd	r24, Z+1	; 0x01
    301e:	81 70       	andi	r24, 0x01	; 1
    3020:	81 70       	andi	r24, 0x01	; 1
    3022:	98 2f       	mov	r25, r24
    3024:	92 95       	swap	r25
    3026:	99 0f       	add	r25, r25
    3028:	99 0f       	add	r25, r25
    302a:	90 7c       	andi	r25, 0xC0	; 192
    302c:	8c 91       	ld	r24, X
    302e:	8f 7b       	andi	r24, 0xBF	; 191
    3030:	89 2b       	or	r24, r25
    3032:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    3034:	af e4       	ldi	r26, 0x4F	; 79
    3036:	b0 e0       	ldi	r27, 0x00	; 0
    3038:	e9 81       	ldd	r30, Y+1	; 0x01
    303a:	fa 81       	ldd	r31, Y+2	; 0x02
    303c:	81 81       	ldd	r24, Z+1	; 0x01
    303e:	86 95       	lsr	r24
    3040:	81 70       	andi	r24, 0x01	; 1
    3042:	81 70       	andi	r24, 0x01	; 1
    3044:	98 2f       	mov	r25, r24
    3046:	92 95       	swap	r25
    3048:	99 0f       	add	r25, r25
    304a:	90 7e       	andi	r25, 0xE0	; 224
    304c:	8c 91       	ld	r24, X
    304e:	8f 7d       	andi	r24, 0xDF	; 223
    3050:	89 2b       	or	r24, r25
    3052:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3054:	af e4       	ldi	r26, 0x4F	; 79
    3056:	b0 e0       	ldi	r27, 0x00	; 0
    3058:	e9 81       	ldd	r30, Y+1	; 0x01
    305a:	fa 81       	ldd	r31, Y+2	; 0x02
    305c:	81 81       	ldd	r24, Z+1	; 0x01
    305e:	81 70       	andi	r24, 0x01	; 1
    3060:	81 70       	andi	r24, 0x01	; 1
    3062:	98 2f       	mov	r25, r24
    3064:	92 95       	swap	r25
    3066:	90 7f       	andi	r25, 0xF0	; 240
    3068:	8c 91       	ld	r24, X
    306a:	8f 7e       	andi	r24, 0xEF	; 239
    306c:	89 2b       	or	r24, r25
    306e:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3070:	ab e4       	ldi	r26, 0x4B	; 75
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e9 81       	ldd	r30, Y+1	; 0x01
    3076:	fa 81       	ldd	r31, Y+2	; 0x02
    3078:	87 81       	ldd	r24, Z+7	; 0x07
    307a:	90 85       	ldd	r25, Z+8	; 0x08
    307c:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    307e:	aa e4       	ldi	r26, 0x4A	; 74
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e9 81       	ldd	r30, Y+1	; 0x01
    3084:	fa 81       	ldd	r31, Y+2	; 0x02
    3086:	87 81       	ldd	r24, Z+7	; 0x07
    3088:	90 85       	ldd	r25, Z+8	; 0x08
    308a:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    308c:	a9 e4       	ldi	r26, 0x49	; 73
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e9 81       	ldd	r30, Y+1	; 0x01
    3092:	fa 81       	ldd	r31, Y+2	; 0x02
    3094:	87 81       	ldd	r24, Z+7	; 0x07
    3096:	90 85       	ldd	r25, Z+8	; 0x08
    3098:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    309a:	a8 e4       	ldi	r26, 0x48	; 72
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e9 81       	ldd	r30, Y+1	; 0x01
    30a0:	fa 81       	ldd	r31, Y+2	; 0x02
    30a2:	87 81       	ldd	r24, Z+7	; 0x07
    30a4:	90 85       	ldd	r25, Z+8	; 0x08
    30a6:	8c 93       	st	X, r24
    30a8:	bb c2       	rjmp	.+1398   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    30aa:	ef e4       	ldi	r30, 0x4F	; 79
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	80 81       	ld	r24, Z
    30b0:	87 7f       	andi	r24, 0xF7	; 247
    30b2:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    30b4:	ef e4       	ldi	r30, 0x4F	; 79
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	80 81       	ld	r24, Z
    30ba:	8b 7f       	andi	r24, 0xFB	; 251
    30bc:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    30be:	af e4       	ldi	r26, 0x4F	; 79
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	e9 81       	ldd	r30, Y+1	; 0x01
    30c4:	fa 81       	ldd	r31, Y+2	; 0x02
    30c6:	82 81       	ldd	r24, Z+2	; 0x02
    30c8:	86 95       	lsr	r24
    30ca:	81 70       	andi	r24, 0x01	; 1
    30cc:	98 2f       	mov	r25, r24
    30ce:	97 95       	ror	r25
    30d0:	99 27       	eor	r25, r25
    30d2:	97 95       	ror	r25
    30d4:	8c 91       	ld	r24, X
    30d6:	8f 77       	andi	r24, 0x7F	; 127
    30d8:	89 2b       	or	r24, r25
    30da:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    30dc:	af e4       	ldi	r26, 0x4F	; 79
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e9 81       	ldd	r30, Y+1	; 0x01
    30e2:	fa 81       	ldd	r31, Y+2	; 0x02
    30e4:	82 81       	ldd	r24, Z+2	; 0x02
    30e6:	81 70       	andi	r24, 0x01	; 1
    30e8:	81 70       	andi	r24, 0x01	; 1
    30ea:	98 2f       	mov	r25, r24
    30ec:	92 95       	swap	r25
    30ee:	99 0f       	add	r25, r25
    30f0:	99 0f       	add	r25, r25
    30f2:	90 7c       	andi	r25, 0xC0	; 192
    30f4:	8c 91       	ld	r24, X
    30f6:	8f 7b       	andi	r24, 0xBF	; 191
    30f8:	89 2b       	or	r24, r25
    30fa:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    30fc:	af e4       	ldi	r26, 0x4F	; 79
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e9 81       	ldd	r30, Y+1	; 0x01
    3102:	fa 81       	ldd	r31, Y+2	; 0x02
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	86 95       	lsr	r24
    3108:	81 70       	andi	r24, 0x01	; 1
    310a:	81 70       	andi	r24, 0x01	; 1
    310c:	98 2f       	mov	r25, r24
    310e:	92 95       	swap	r25
    3110:	99 0f       	add	r25, r25
    3112:	90 7e       	andi	r25, 0xE0	; 224
    3114:	8c 91       	ld	r24, X
    3116:	8f 7d       	andi	r24, 0xDF	; 223
    3118:	89 2b       	or	r24, r25
    311a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    311c:	af e4       	ldi	r26, 0x4F	; 79
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e9 81       	ldd	r30, Y+1	; 0x01
    3122:	fa 81       	ldd	r31, Y+2	; 0x02
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	81 70       	andi	r24, 0x01	; 1
    3128:	81 70       	andi	r24, 0x01	; 1
    312a:	98 2f       	mov	r25, r24
    312c:	92 95       	swap	r25
    312e:	90 7f       	andi	r25, 0xF0	; 240
    3130:	8c 91       	ld	r24, X
    3132:	8f 7e       	andi	r24, 0xEF	; 239
    3134:	89 2b       	or	r24, r25
    3136:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3138:	ab e4       	ldi	r26, 0x4B	; 75
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e9 81       	ldd	r30, Y+1	; 0x01
    313e:	fa 81       	ldd	r31, Y+2	; 0x02
    3140:	87 81       	ldd	r24, Z+7	; 0x07
    3142:	90 85       	ldd	r25, Z+8	; 0x08
    3144:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3146:	aa e4       	ldi	r26, 0x4A	; 74
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e9 81       	ldd	r30, Y+1	; 0x01
    314c:	fa 81       	ldd	r31, Y+2	; 0x02
    314e:	87 81       	ldd	r24, Z+7	; 0x07
    3150:	90 85       	ldd	r25, Z+8	; 0x08
    3152:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3154:	a9 e4       	ldi	r26, 0x49	; 73
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	e9 81       	ldd	r30, Y+1	; 0x01
    315a:	fa 81       	ldd	r31, Y+2	; 0x02
    315c:	87 81       	ldd	r24, Z+7	; 0x07
    315e:	90 85       	ldd	r25, Z+8	; 0x08
    3160:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3162:	a8 e4       	ldi	r26, 0x48	; 72
    3164:	b0 e0       	ldi	r27, 0x00	; 0
    3166:	e9 81       	ldd	r30, Y+1	; 0x01
    3168:	fa 81       	ldd	r31, Y+2	; 0x02
    316a:	87 81       	ldd	r24, Z+7	; 0x07
    316c:	90 85       	ldd	r25, Z+8	; 0x08
    316e:	8c 93       	st	X, r24
    3170:	57 c2       	rjmp	.+1198   	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_FREQUENCY_CORRECT_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3172:	ef e4       	ldi	r30, 0x4F	; 79
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	87 7f       	andi	r24, 0xF7	; 247
    317a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    317c:	ef e4       	ldi	r30, 0x4F	; 79
    317e:	f0 e0       	ldi	r31, 0x00	; 0
    3180:	80 81       	ld	r24, Z
    3182:	8b 7f       	andi	r24, 0xFB	; 251
    3184:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    3186:	af e4       	ldi	r26, 0x4F	; 79
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e9 81       	ldd	r30, Y+1	; 0x01
    318c:	fa 81       	ldd	r31, Y+2	; 0x02
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	86 95       	lsr	r24
    3192:	81 70       	andi	r24, 0x01	; 1
    3194:	98 2f       	mov	r25, r24
    3196:	97 95       	ror	r25
    3198:	99 27       	eor	r25, r25
    319a:	97 95       	ror	r25
    319c:	8c 91       	ld	r24, X
    319e:	8f 77       	andi	r24, 0x7F	; 127
    31a0:	89 2b       	or	r24, r25
    31a2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    31a4:	af e4       	ldi	r26, 0x4F	; 79
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e9 81       	ldd	r30, Y+1	; 0x01
    31aa:	fa 81       	ldd	r31, Y+2	; 0x02
    31ac:	82 81       	ldd	r24, Z+2	; 0x02
    31ae:	81 70       	andi	r24, 0x01	; 1
    31b0:	81 70       	andi	r24, 0x01	; 1
    31b2:	98 2f       	mov	r25, r24
    31b4:	92 95       	swap	r25
    31b6:	99 0f       	add	r25, r25
    31b8:	99 0f       	add	r25, r25
    31ba:	90 7c       	andi	r25, 0xC0	; 192
    31bc:	8c 91       	ld	r24, X
    31be:	8f 7b       	andi	r24, 0xBF	; 191
    31c0:	89 2b       	or	r24, r25
    31c2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    31c4:	af e4       	ldi	r26, 0x4F	; 79
    31c6:	b0 e0       	ldi	r27, 0x00	; 0
    31c8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ca:	fa 81       	ldd	r31, Y+2	; 0x02
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	86 95       	lsr	r24
    31d0:	81 70       	andi	r24, 0x01	; 1
    31d2:	81 70       	andi	r24, 0x01	; 1
    31d4:	98 2f       	mov	r25, r24
    31d6:	92 95       	swap	r25
    31d8:	99 0f       	add	r25, r25
    31da:	90 7e       	andi	r25, 0xE0	; 224
    31dc:	8c 91       	ld	r24, X
    31de:	8f 7d       	andi	r24, 0xDF	; 223
    31e0:	89 2b       	or	r24, r25
    31e2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    31e4:	af e4       	ldi	r26, 0x4F	; 79
    31e6:	b0 e0       	ldi	r27, 0x00	; 0
    31e8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ea:	fa 81       	ldd	r31, Y+2	; 0x02
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	81 70       	andi	r24, 0x01	; 1
    31f0:	81 70       	andi	r24, 0x01	; 1
    31f2:	98 2f       	mov	r25, r24
    31f4:	92 95       	swap	r25
    31f6:	90 7f       	andi	r25, 0xF0	; 240
    31f8:	8c 91       	ld	r24, X
    31fa:	8f 7e       	andi	r24, 0xEF	; 239
    31fc:	89 2b       	or	r24, r25
    31fe:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3200:	ab e4       	ldi	r26, 0x4B	; 75
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	e9 81       	ldd	r30, Y+1	; 0x01
    3206:	fa 81       	ldd	r31, Y+2	; 0x02
    3208:	87 81       	ldd	r24, Z+7	; 0x07
    320a:	90 85       	ldd	r25, Z+8	; 0x08
    320c:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    320e:	aa e4       	ldi	r26, 0x4A	; 74
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	e9 81       	ldd	r30, Y+1	; 0x01
    3214:	fa 81       	ldd	r31, Y+2	; 0x02
    3216:	87 81       	ldd	r24, Z+7	; 0x07
    3218:	90 85       	ldd	r25, Z+8	; 0x08
    321a:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    321c:	a9 e4       	ldi	r26, 0x49	; 73
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e9 81       	ldd	r30, Y+1	; 0x01
    3222:	fa 81       	ldd	r31, Y+2	; 0x02
    3224:	87 81       	ldd	r24, Z+7	; 0x07
    3226:	90 85       	ldd	r25, Z+8	; 0x08
    3228:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    322a:	a8 e4       	ldi	r26, 0x48	; 72
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e9 81       	ldd	r30, Y+1	; 0x01
    3230:	fa 81       	ldd	r31, Y+2	; 0x02
    3232:	87 81       	ldd	r24, Z+7	; 0x07
    3234:	90 85       	ldd	r25, Z+8	; 0x08
    3236:	8c 93       	st	X, r24
    3238:	f3 c1       	rjmp	.+998    	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_CORRECT_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    323a:	ef e4       	ldi	r30, 0x4F	; 79
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	87 7f       	andi	r24, 0xF7	; 247
    3242:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3244:	ef e4       	ldi	r30, 0x4F	; 79
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	8b 7f       	andi	r24, 0xFB	; 251
    324c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    324e:	af e4       	ldi	r26, 0x4F	; 79
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e9 81       	ldd	r30, Y+1	; 0x01
    3254:	fa 81       	ldd	r31, Y+2	; 0x02
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	86 95       	lsr	r24
    325a:	81 70       	andi	r24, 0x01	; 1
    325c:	98 2f       	mov	r25, r24
    325e:	97 95       	ror	r25
    3260:	99 27       	eor	r25, r25
    3262:	97 95       	ror	r25
    3264:	8c 91       	ld	r24, X
    3266:	8f 77       	andi	r24, 0x7F	; 127
    3268:	89 2b       	or	r24, r25
    326a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    326c:	af e4       	ldi	r26, 0x4F	; 79
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e9 81       	ldd	r30, Y+1	; 0x01
    3272:	fa 81       	ldd	r31, Y+2	; 0x02
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	81 70       	andi	r24, 0x01	; 1
    3278:	81 70       	andi	r24, 0x01	; 1
    327a:	98 2f       	mov	r25, r24
    327c:	92 95       	swap	r25
    327e:	99 0f       	add	r25, r25
    3280:	99 0f       	add	r25, r25
    3282:	90 7c       	andi	r25, 0xC0	; 192
    3284:	8c 91       	ld	r24, X
    3286:	8f 7b       	andi	r24, 0xBF	; 191
    3288:	89 2b       	or	r24, r25
    328a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    328c:	af e4       	ldi	r26, 0x4F	; 79
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	e9 81       	ldd	r30, Y+1	; 0x01
    3292:	fa 81       	ldd	r31, Y+2	; 0x02
    3294:	82 81       	ldd	r24, Z+2	; 0x02
    3296:	86 95       	lsr	r24
    3298:	81 70       	andi	r24, 0x01	; 1
    329a:	81 70       	andi	r24, 0x01	; 1
    329c:	98 2f       	mov	r25, r24
    329e:	92 95       	swap	r25
    32a0:	99 0f       	add	r25, r25
    32a2:	90 7e       	andi	r25, 0xE0	; 224
    32a4:	8c 91       	ld	r24, X
    32a6:	8f 7d       	andi	r24, 0xDF	; 223
    32a8:	89 2b       	or	r24, r25
    32aa:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    32ac:	af e4       	ldi	r26, 0x4F	; 79
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e9 81       	ldd	r30, Y+1	; 0x01
    32b2:	fa 81       	ldd	r31, Y+2	; 0x02
    32b4:	82 81       	ldd	r24, Z+2	; 0x02
    32b6:	81 70       	andi	r24, 0x01	; 1
    32b8:	81 70       	andi	r24, 0x01	; 1
    32ba:	98 2f       	mov	r25, r24
    32bc:	92 95       	swap	r25
    32be:	90 7f       	andi	r25, 0xF0	; 240
    32c0:	8c 91       	ld	r24, X
    32c2:	8f 7e       	andi	r24, 0xEF	; 239
    32c4:	89 2b       	or	r24, r25
    32c6:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32c8:	ab e4       	ldi	r26, 0x4B	; 75
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	e9 81       	ldd	r30, Y+1	; 0x01
    32ce:	fa 81       	ldd	r31, Y+2	; 0x02
    32d0:	87 81       	ldd	r24, Z+7	; 0x07
    32d2:	90 85       	ldd	r25, Z+8	; 0x08
    32d4:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32d6:	aa e4       	ldi	r26, 0x4A	; 74
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	e9 81       	ldd	r30, Y+1	; 0x01
    32dc:	fa 81       	ldd	r31, Y+2	; 0x02
    32de:	87 81       	ldd	r24, Z+7	; 0x07
    32e0:	90 85       	ldd	r25, Z+8	; 0x08
    32e2:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32e4:	a9 e4       	ldi	r26, 0x49	; 73
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ea:	fa 81       	ldd	r31, Y+2	; 0x02
    32ec:	87 81       	ldd	r24, Z+7	; 0x07
    32ee:	90 85       	ldd	r25, Z+8	; 0x08
    32f0:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    32f2:	a8 e4       	ldi	r26, 0x48	; 72
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e9 81       	ldd	r30, Y+1	; 0x01
    32f8:	fa 81       	ldd	r31, Y+2	; 0x02
    32fa:	87 81       	ldd	r24, Z+7	; 0x07
    32fc:	90 85       	ldd	r25, Z+8	; 0x08
    32fe:	8c 93       	st	X, r24
    3300:	8f c1       	rjmp	.+798    	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_PHASE_CORRECT_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3302:	ef e4       	ldi	r30, 0x4F	; 79
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	87 7f       	andi	r24, 0xF7	; 247
    330a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    330c:	ef e4       	ldi	r30, 0x4F	; 79
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	8b 7f       	andi	r24, 0xFB	; 251
    3314:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    3316:	af e4       	ldi	r26, 0x4F	; 79
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	e9 81       	ldd	r30, Y+1	; 0x01
    331c:	fa 81       	ldd	r31, Y+2	; 0x02
    331e:	82 81       	ldd	r24, Z+2	; 0x02
    3320:	86 95       	lsr	r24
    3322:	81 70       	andi	r24, 0x01	; 1
    3324:	98 2f       	mov	r25, r24
    3326:	97 95       	ror	r25
    3328:	99 27       	eor	r25, r25
    332a:	97 95       	ror	r25
    332c:	8c 91       	ld	r24, X
    332e:	8f 77       	andi	r24, 0x7F	; 127
    3330:	89 2b       	or	r24, r25
    3332:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    3334:	af e4       	ldi	r26, 0x4F	; 79
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e9 81       	ldd	r30, Y+1	; 0x01
    333a:	fa 81       	ldd	r31, Y+2	; 0x02
    333c:	82 81       	ldd	r24, Z+2	; 0x02
    333e:	81 70       	andi	r24, 0x01	; 1
    3340:	81 70       	andi	r24, 0x01	; 1
    3342:	98 2f       	mov	r25, r24
    3344:	92 95       	swap	r25
    3346:	99 0f       	add	r25, r25
    3348:	99 0f       	add	r25, r25
    334a:	90 7c       	andi	r25, 0xC0	; 192
    334c:	8c 91       	ld	r24, X
    334e:	8f 7b       	andi	r24, 0xBF	; 191
    3350:	89 2b       	or	r24, r25
    3352:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    3354:	af e4       	ldi	r26, 0x4F	; 79
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e9 81       	ldd	r30, Y+1	; 0x01
    335a:	fa 81       	ldd	r31, Y+2	; 0x02
    335c:	82 81       	ldd	r24, Z+2	; 0x02
    335e:	86 95       	lsr	r24
    3360:	81 70       	andi	r24, 0x01	; 1
    3362:	81 70       	andi	r24, 0x01	; 1
    3364:	98 2f       	mov	r25, r24
    3366:	92 95       	swap	r25
    3368:	99 0f       	add	r25, r25
    336a:	90 7e       	andi	r25, 0xE0	; 224
    336c:	8c 91       	ld	r24, X
    336e:	8f 7d       	andi	r24, 0xDF	; 223
    3370:	89 2b       	or	r24, r25
    3372:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    3374:	af e4       	ldi	r26, 0x4F	; 79
    3376:	b0 e0       	ldi	r27, 0x00	; 0
    3378:	e9 81       	ldd	r30, Y+1	; 0x01
    337a:	fa 81       	ldd	r31, Y+2	; 0x02
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	81 70       	andi	r24, 0x01	; 1
    3380:	81 70       	andi	r24, 0x01	; 1
    3382:	98 2f       	mov	r25, r24
    3384:	92 95       	swap	r25
    3386:	90 7f       	andi	r25, 0xF0	; 240
    3388:	8c 91       	ld	r24, X
    338a:	8f 7e       	andi	r24, 0xEF	; 239
    338c:	89 2b       	or	r24, r25
    338e:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3390:	ab e4       	ldi	r26, 0x4B	; 75
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e9 81       	ldd	r30, Y+1	; 0x01
    3396:	fa 81       	ldd	r31, Y+2	; 0x02
    3398:	87 81       	ldd	r24, Z+7	; 0x07
    339a:	90 85       	ldd	r25, Z+8	; 0x08
    339c:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    339e:	aa e4       	ldi	r26, 0x4A	; 74
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e9 81       	ldd	r30, Y+1	; 0x01
    33a4:	fa 81       	ldd	r31, Y+2	; 0x02
    33a6:	87 81       	ldd	r24, Z+7	; 0x07
    33a8:	90 85       	ldd	r25, Z+8	; 0x08
    33aa:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    33ac:	a9 e4       	ldi	r26, 0x49	; 73
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	e9 81       	ldd	r30, Y+1	; 0x01
    33b2:	fa 81       	ldd	r31, Y+2	; 0x02
    33b4:	87 81       	ldd	r24, Z+7	; 0x07
    33b6:	90 85       	ldd	r25, Z+8	; 0x08
    33b8:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    33ba:	a8 e4       	ldi	r26, 0x48	; 72
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	e9 81       	ldd	r30, Y+1	; 0x01
    33c0:	fa 81       	ldd	r31, Y+2	; 0x02
    33c2:	87 81       	ldd	r24, Z+7	; 0x07
    33c4:	90 85       	ldd	r25, Z+8	; 0x08
    33c6:	8c 93       	st	X, r24
    33c8:	2b c1       	rjmp	.+598    	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_CTC_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    33ca:	ef e4       	ldi	r30, 0x4F	; 79
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	80 81       	ld	r24, Z
    33d0:	87 7f       	andi	r24, 0xF7	; 247
    33d2:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    33d4:	ef e4       	ldi	r30, 0x4F	; 79
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	8b 7f       	andi	r24, 0xFB	; 251
    33dc:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    33de:	af e4       	ldi	r26, 0x4F	; 79
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	e9 81       	ldd	r30, Y+1	; 0x01
    33e4:	fa 81       	ldd	r31, Y+2	; 0x02
    33e6:	80 81       	ld	r24, Z
    33e8:	86 95       	lsr	r24
    33ea:	81 70       	andi	r24, 0x01	; 1
    33ec:	98 2f       	mov	r25, r24
    33ee:	97 95       	ror	r25
    33f0:	99 27       	eor	r25, r25
    33f2:	97 95       	ror	r25
    33f4:	8c 91       	ld	r24, X
    33f6:	8f 77       	andi	r24, 0x7F	; 127
    33f8:	89 2b       	or	r24, r25
    33fa:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    33fc:	af e4       	ldi	r26, 0x4F	; 79
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	e9 81       	ldd	r30, Y+1	; 0x01
    3402:	fa 81       	ldd	r31, Y+2	; 0x02
    3404:	80 81       	ld	r24, Z
    3406:	81 70       	andi	r24, 0x01	; 1
    3408:	81 70       	andi	r24, 0x01	; 1
    340a:	98 2f       	mov	r25, r24
    340c:	92 95       	swap	r25
    340e:	99 0f       	add	r25, r25
    3410:	99 0f       	add	r25, r25
    3412:	90 7c       	andi	r25, 0xC0	; 192
    3414:	8c 91       	ld	r24, X
    3416:	8f 7b       	andi	r24, 0xBF	; 191
    3418:	89 2b       	or	r24, r25
    341a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    341c:	af e4       	ldi	r26, 0x4F	; 79
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e9 81       	ldd	r30, Y+1	; 0x01
    3422:	fa 81       	ldd	r31, Y+2	; 0x02
    3424:	80 81       	ld	r24, Z
    3426:	86 95       	lsr	r24
    3428:	81 70       	andi	r24, 0x01	; 1
    342a:	81 70       	andi	r24, 0x01	; 1
    342c:	98 2f       	mov	r25, r24
    342e:	92 95       	swap	r25
    3430:	99 0f       	add	r25, r25
    3432:	90 7e       	andi	r25, 0xE0	; 224
    3434:	8c 91       	ld	r24, X
    3436:	8f 7d       	andi	r24, 0xDF	; 223
    3438:	89 2b       	or	r24, r25
    343a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    343c:	af e4       	ldi	r26, 0x4F	; 79
    343e:	b0 e0       	ldi	r27, 0x00	; 0
    3440:	e9 81       	ldd	r30, Y+1	; 0x01
    3442:	fa 81       	ldd	r31, Y+2	; 0x02
    3444:	80 81       	ld	r24, Z
    3446:	81 70       	andi	r24, 0x01	; 1
    3448:	81 70       	andi	r24, 0x01	; 1
    344a:	98 2f       	mov	r25, r24
    344c:	92 95       	swap	r25
    344e:	90 7f       	andi	r25, 0xF0	; 240
    3450:	8c 91       	ld	r24, X
    3452:	8f 7e       	andi	r24, 0xEF	; 239
    3454:	89 2b       	or	r24, r25
    3456:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3458:	ab e4       	ldi	r26, 0x4B	; 75
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e9 81       	ldd	r30, Y+1	; 0x01
    345e:	fa 81       	ldd	r31, Y+2	; 0x02
    3460:	87 81       	ldd	r24, Z+7	; 0x07
    3462:	90 85       	ldd	r25, Z+8	; 0x08
    3464:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3466:	aa e4       	ldi	r26, 0x4A	; 74
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e9 81       	ldd	r30, Y+1	; 0x01
    346c:	fa 81       	ldd	r31, Y+2	; 0x02
    346e:	87 81       	ldd	r24, Z+7	; 0x07
    3470:	90 85       	ldd	r25, Z+8	; 0x08
    3472:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3474:	a9 e4       	ldi	r26, 0x49	; 73
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	e9 81       	ldd	r30, Y+1	; 0x01
    347a:	fa 81       	ldd	r31, Y+2	; 0x02
    347c:	87 81       	ldd	r24, Z+7	; 0x07
    347e:	90 85       	ldd	r25, Z+8	; 0x08
    3480:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3482:	a8 e4       	ldi	r26, 0x48	; 72
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	e9 81       	ldd	r30, Y+1	; 0x01
    3488:	fa 81       	ldd	r31, Y+2	; 0x02
    348a:	87 81       	ldd	r24, Z+7	; 0x07
    348c:	90 85       	ldd	r25, Z+8	; 0x08
    348e:	8c 93       	st	X, r24
    3490:	c7 c0       	rjmp	.+398    	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_FAST_PWM_ICR1_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    3492:	ef e4       	ldi	r30, 0x4F	; 79
    3494:	f0 e0       	ldi	r31, 0x00	; 0
    3496:	80 81       	ld	r24, Z
    3498:	87 7f       	andi	r24, 0xF7	; 247
    349a:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    349c:	ef e4       	ldi	r30, 0x4F	; 79
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	8b 7f       	andi	r24, 0xFB	; 251
    34a4:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    34a6:	af e4       	ldi	r26, 0x4F	; 79
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e9 81       	ldd	r30, Y+1	; 0x01
    34ac:	fa 81       	ldd	r31, Y+2	; 0x02
    34ae:	81 81       	ldd	r24, Z+1	; 0x01
    34b0:	86 95       	lsr	r24
    34b2:	81 70       	andi	r24, 0x01	; 1
    34b4:	98 2f       	mov	r25, r24
    34b6:	97 95       	ror	r25
    34b8:	99 27       	eor	r25, r25
    34ba:	97 95       	ror	r25
    34bc:	8c 91       	ld	r24, X
    34be:	8f 77       	andi	r24, 0x7F	; 127
    34c0:	89 2b       	or	r24, r25
    34c2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    34c4:	af e4       	ldi	r26, 0x4F	; 79
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ca:	fa 81       	ldd	r31, Y+2	; 0x02
    34cc:	81 81       	ldd	r24, Z+1	; 0x01
    34ce:	81 70       	andi	r24, 0x01	; 1
    34d0:	81 70       	andi	r24, 0x01	; 1
    34d2:	98 2f       	mov	r25, r24
    34d4:	92 95       	swap	r25
    34d6:	99 0f       	add	r25, r25
    34d8:	99 0f       	add	r25, r25
    34da:	90 7c       	andi	r25, 0xC0	; 192
    34dc:	8c 91       	ld	r24, X
    34de:	8f 7b       	andi	r24, 0xBF	; 191
    34e0:	89 2b       	or	r24, r25
    34e2:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    34e4:	af e4       	ldi	r26, 0x4F	; 79
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ea:	fa 81       	ldd	r31, Y+2	; 0x02
    34ec:	81 81       	ldd	r24, Z+1	; 0x01
    34ee:	86 95       	lsr	r24
    34f0:	81 70       	andi	r24, 0x01	; 1
    34f2:	81 70       	andi	r24, 0x01	; 1
    34f4:	98 2f       	mov	r25, r24
    34f6:	92 95       	swap	r25
    34f8:	99 0f       	add	r25, r25
    34fa:	90 7e       	andi	r25, 0xE0	; 224
    34fc:	8c 91       	ld	r24, X
    34fe:	8f 7d       	andi	r24, 0xDF	; 223
    3500:	89 2b       	or	r24, r25
    3502:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    3504:	af e4       	ldi	r26, 0x4F	; 79
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	e9 81       	ldd	r30, Y+1	; 0x01
    350a:	fa 81       	ldd	r31, Y+2	; 0x02
    350c:	81 81       	ldd	r24, Z+1	; 0x01
    350e:	81 70       	andi	r24, 0x01	; 1
    3510:	81 70       	andi	r24, 0x01	; 1
    3512:	98 2f       	mov	r25, r24
    3514:	92 95       	swap	r25
    3516:	90 7f       	andi	r25, 0xF0	; 240
    3518:	8c 91       	ld	r24, X
    351a:	8f 7e       	andi	r24, 0xEF	; 239
    351c:	89 2b       	or	r24, r25
    351e:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3520:	ab e4       	ldi	r26, 0x4B	; 75
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e9 81       	ldd	r30, Y+1	; 0x01
    3526:	fa 81       	ldd	r31, Y+2	; 0x02
    3528:	87 81       	ldd	r24, Z+7	; 0x07
    352a:	90 85       	ldd	r25, Z+8	; 0x08
    352c:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    352e:	aa e4       	ldi	r26, 0x4A	; 74
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e9 81       	ldd	r30, Y+1	; 0x01
    3534:	fa 81       	ldd	r31, Y+2	; 0x02
    3536:	87 81       	ldd	r24, Z+7	; 0x07
    3538:	90 85       	ldd	r25, Z+8	; 0x08
    353a:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    353c:	a9 e4       	ldi	r26, 0x49	; 73
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	e9 81       	ldd	r30, Y+1	; 0x01
    3542:	fa 81       	ldd	r31, Y+2	; 0x02
    3544:	87 81       	ldd	r24, Z+7	; 0x07
    3546:	90 85       	ldd	r25, Z+8	; 0x08
    3548:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    354a:	a8 e4       	ldi	r26, 0x48	; 72
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e9 81       	ldd	r30, Y+1	; 0x01
    3550:	fa 81       	ldd	r31, Y+2	; 0x02
    3552:	87 81       	ldd	r24, Z+7	; 0x07
    3554:	90 85       	ldd	r25, Z+8	; 0x08
    3556:	8c 93       	st	X, r24
    3558:	63 c0       	rjmp	.+198    	; 0x3620 <TIMER1_Init+0xc92>
		break;
	case TIMER1_FAST_PWM_OCR1A_MODE:
		TCCR1A_REG->bits.FOC1A_BIT = LOGIC_LOW;
    355a:	ef e4       	ldi	r30, 0x4F	; 79
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	87 7f       	andi	r24, 0xF7	; 247
    3562:	80 83       	st	Z, r24
		TCCR1A_REG->bits.FOC1B_BIT = LOGIC_LOW;
    3564:	ef e4       	ldi	r30, 0x4F	; 79
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	8b 7f       	andi	r24, 0xFB	; 251
    356c:	80 83       	st	Z, r24
		TCCR1A_REG->bits.COM1A1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    356e:	af e4       	ldi	r26, 0x4F	; 79
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	e9 81       	ldd	r30, Y+1	; 0x01
    3574:	fa 81       	ldd	r31, Y+2	; 0x02
    3576:	81 81       	ldd	r24, Z+1	; 0x01
    3578:	86 95       	lsr	r24
    357a:	81 70       	andi	r24, 0x01	; 1
    357c:	98 2f       	mov	r25, r24
    357e:	97 95       	ror	r25
    3580:	99 27       	eor	r25, r25
    3582:	97 95       	ror	r25
    3584:	8c 91       	ld	r24, X
    3586:	8f 77       	andi	r24, 0x7F	; 127
    3588:	89 2b       	or	r24, r25
    358a:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1A0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    358c:	af e4       	ldi	r26, 0x4F	; 79
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e9 81       	ldd	r30, Y+1	; 0x01
    3592:	fa 81       	ldd	r31, Y+2	; 0x02
    3594:	81 81       	ldd	r24, Z+1	; 0x01
    3596:	81 70       	andi	r24, 0x01	; 1
    3598:	81 70       	andi	r24, 0x01	; 1
    359a:	98 2f       	mov	r25, r24
    359c:	92 95       	swap	r25
    359e:	99 0f       	add	r25, r25
    35a0:	99 0f       	add	r25, r25
    35a2:	90 7c       	andi	r25, 0xC0	; 192
    35a4:	8c 91       	ld	r24, X
    35a6:	8f 7b       	andi	r24, 0xBF	; 191
    35a8:	89 2b       	or	r24, r25
    35aa:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B1_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    35ac:	af e4       	ldi	r26, 0x4F	; 79
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	e9 81       	ldd	r30, Y+1	; 0x01
    35b2:	fa 81       	ldd	r31, Y+2	; 0x02
    35b4:	81 81       	ldd	r24, Z+1	; 0x01
    35b6:	86 95       	lsr	r24
    35b8:	81 70       	andi	r24, 0x01	; 1
    35ba:	81 70       	andi	r24, 0x01	; 1
    35bc:	98 2f       	mov	r25, r24
    35be:	92 95       	swap	r25
    35c0:	99 0f       	add	r25, r25
    35c2:	90 7e       	andi	r25, 0xE0	; 224
    35c4:	8c 91       	ld	r24, X
    35c6:	8f 7d       	andi	r24, 0xDF	; 223
    35c8:	89 2b       	or	r24, r25
    35ca:	8c 93       	st	X, r24
		TCCR1A_REG->bits.COM1B0_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    35cc:	af e4       	ldi	r26, 0x4F	; 79
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e9 81       	ldd	r30, Y+1	; 0x01
    35d2:	fa 81       	ldd	r31, Y+2	; 0x02
    35d4:	81 81       	ldd	r24, Z+1	; 0x01
    35d6:	81 70       	andi	r24, 0x01	; 1
    35d8:	81 70       	andi	r24, 0x01	; 1
    35da:	98 2f       	mov	r25, r24
    35dc:	92 95       	swap	r25
    35de:	90 7f       	andi	r25, 0xF0	; 240
    35e0:	8c 91       	ld	r24, X
    35e2:	8f 7e       	andi	r24, 0xEF	; 239
    35e4:	89 2b       	or	r24, r25
    35e6:	8c 93       	st	X, r24
		OCR1AH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    35e8:	ab e4       	ldi	r26, 0x4B	; 75
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	e9 81       	ldd	r30, Y+1	; 0x01
    35ee:	fa 81       	ldd	r31, Y+2	; 0x02
    35f0:	87 81       	ldd	r24, Z+7	; 0x07
    35f2:	90 85       	ldd	r25, Z+8	; 0x08
    35f4:	8c 93       	st	X, r24
		OCR1AL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    35f6:	aa e4       	ldi	r26, 0x4A	; 74
    35f8:	b0 e0       	ldi	r27, 0x00	; 0
    35fa:	e9 81       	ldd	r30, Y+1	; 0x01
    35fc:	fa 81       	ldd	r31, Y+2	; 0x02
    35fe:	87 81       	ldd	r24, Z+7	; 0x07
    3600:	90 85       	ldd	r25, Z+8	; 0x08
    3602:	8c 93       	st	X, r24
		OCR1BH_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3604:	a9 e4       	ldi	r26, 0x49	; 73
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	e9 81       	ldd	r30, Y+1	; 0x01
    360a:	fa 81       	ldd	r31, Y+2	; 0x02
    360c:	87 81       	ldd	r24, Z+7	; 0x07
    360e:	90 85       	ldd	r25, Z+8	; 0x08
    3610:	8c 93       	st	X, r24
		OCR1BL_REG = Config_Ptr->TIMER1_COMPARE_VALUE;
    3612:	a8 e4       	ldi	r26, 0x48	; 72
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e9 81       	ldd	r30, Y+1	; 0x01
    3618:	fa 81       	ldd	r31, Y+2	; 0x02
    361a:	87 81       	ldd	r24, Z+7	; 0x07
    361c:	90 85       	ldd	r25, Z+8	; 0x08
    361e:	8c 93       	st	X, r24
		break;
	}
	TCNT1L = (Config_Ptr->TIMER1_INITIAL_VALUE);
    3620:	ac e4       	ldi	r26, 0x4C	; 76
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	e9 81       	ldd	r30, Y+1	; 0x01
    3626:	fa 81       	ldd	r31, Y+2	; 0x02
    3628:	85 81       	ldd	r24, Z+5	; 0x05
    362a:	96 81       	ldd	r25, Z+6	; 0x06
    362c:	8c 93       	st	X, r24
	TCNT1H = (Config_Ptr->TIMER1_INITIAL_VALUE >> 8);
    362e:	ad e4       	ldi	r26, 0x4D	; 77
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	e9 81       	ldd	r30, Y+1	; 0x01
    3634:	fa 81       	ldd	r31, Y+2	; 0x02
    3636:	85 81       	ldd	r24, Z+5	; 0x05
    3638:	96 81       	ldd	r25, Z+6	; 0x06
    363a:	89 2f       	mov	r24, r25
    363c:	99 27       	eor	r25, r25
    363e:	8c 93       	st	X, r24
	TCCR1A_REG->bits.WGM10_BIT = (Config_Ptr->Mode);
    3640:	af e4       	ldi	r26, 0x4F	; 79
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	e9 81       	ldd	r30, Y+1	; 0x01
    3646:	fa 81       	ldd	r31, Y+2	; 0x02
    3648:	84 81       	ldd	r24, Z+4	; 0x04
    364a:	81 70       	andi	r24, 0x01	; 1
    364c:	98 2f       	mov	r25, r24
    364e:	91 70       	andi	r25, 0x01	; 1
    3650:	8c 91       	ld	r24, X
    3652:	8e 7f       	andi	r24, 0xFE	; 254
    3654:	89 2b       	or	r24, r25
    3656:	8c 93       	st	X, r24
	TCCR1A_REG->bits.WGM11_BIT = (Config_Ptr->Mode>> 1);
    3658:	af e4       	ldi	r26, 0x4F	; 79
    365a:	b0 e0       	ldi	r27, 0x00	; 0
    365c:	e9 81       	ldd	r30, Y+1	; 0x01
    365e:	fa 81       	ldd	r31, Y+2	; 0x02
    3660:	84 81       	ldd	r24, Z+4	; 0x04
    3662:	86 95       	lsr	r24
    3664:	81 70       	andi	r24, 0x01	; 1
    3666:	81 70       	andi	r24, 0x01	; 1
    3668:	98 2f       	mov	r25, r24
    366a:	99 0f       	add	r25, r25
    366c:	8c 91       	ld	r24, X
    366e:	8d 7f       	andi	r24, 0xFD	; 253
    3670:	89 2b       	or	r24, r25
    3672:	8c 93       	st	X, r24
	TCCR1B_REG->bits.WGM12_BIT = (Config_Ptr->Mode >> 2);
    3674:	ae e4       	ldi	r26, 0x4E	; 78
    3676:	b0 e0       	ldi	r27, 0x00	; 0
    3678:	e9 81       	ldd	r30, Y+1	; 0x01
    367a:	fa 81       	ldd	r31, Y+2	; 0x02
    367c:	84 81       	ldd	r24, Z+4	; 0x04
    367e:	86 95       	lsr	r24
    3680:	86 95       	lsr	r24
    3682:	81 70       	andi	r24, 0x01	; 1
    3684:	81 70       	andi	r24, 0x01	; 1
    3686:	98 2f       	mov	r25, r24
    3688:	99 0f       	add	r25, r25
    368a:	99 0f       	add	r25, r25
    368c:	99 0f       	add	r25, r25
    368e:	8c 91       	ld	r24, X
    3690:	87 7f       	andi	r24, 0xF7	; 247
    3692:	89 2b       	or	r24, r25
    3694:	8c 93       	st	X, r24
	TCCR1B_REG->bits.WGM13_BIT = (Config_Ptr->Mode >> 3);
    3696:	ae e4       	ldi	r26, 0x4E	; 78
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e9 81       	ldd	r30, Y+1	; 0x01
    369c:	fa 81       	ldd	r31, Y+2	; 0x02
    369e:	84 81       	ldd	r24, Z+4	; 0x04
    36a0:	86 95       	lsr	r24
    36a2:	86 95       	lsr	r24
    36a4:	86 95       	lsr	r24
    36a6:	81 70       	andi	r24, 0x01	; 1
    36a8:	81 70       	andi	r24, 0x01	; 1
    36aa:	98 2f       	mov	r25, r24
    36ac:	92 95       	swap	r25
    36ae:	90 7f       	andi	r25, 0xF0	; 240
    36b0:	8c 91       	ld	r24, X
    36b2:	8f 7e       	andi	r24, 0xEF	; 239
    36b4:	89 2b       	or	r24, r25
    36b6:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    36b8:	0f 90       	pop	r0
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <TIMER1_Start>:
void TIMER1_Start(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <TIMER1_Start+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->FULL_REG = ((TCCR1B_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
    36d4:	ae e4       	ldi	r26, 0x4E	; 78
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	ee e4       	ldi	r30, 0x4E	; 78
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	98 2f       	mov	r25, r24
    36e0:	98 7f       	andi	r25, 0xF8	; 248
    36e2:	e9 81       	ldd	r30, Y+1	; 0x01
    36e4:	fa 81       	ldd	r31, Y+2	; 0x02
    36e6:	83 81       	ldd	r24, Z+3	; 0x03
    36e8:	89 2b       	or	r24, r25
    36ea:	8c 93       	st	X, r24
}
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	cf 91       	pop	r28
    36f2:	df 91       	pop	r29
    36f4:	08 95       	ret

000036f6 <TIMER1_Stop>:
void TIMER1_Stop(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    36f6:	df 93       	push	r29
    36f8:	cf 93       	push	r28
    36fa:	00 d0       	rcall	.+0      	; 0x36fc <TIMER1_Stop+0x6>
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->FULL_REG = ((TCCR1B_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    3704:	ae e4       	ldi	r26, 0x4E	; 78
    3706:	b0 e0       	ldi	r27, 0x00	; 0
    3708:	ee e4       	ldi	r30, 0x4E	; 78
    370a:	f0 e0       	ldi	r31, 0x00	; 0
    370c:	80 81       	ld	r24, Z
    370e:	88 7f       	andi	r24, 0xF8	; 248
    3710:	8c 93       	st	X, r24
}
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	cf 91       	pop	r28
    3718:	df 91       	pop	r29
    371a:	08 95       	ret

0000371c <TIMER1_GetCounts>:
u16 TIMER1_GetCounts(void)
{
    371c:	df 93       	push	r29
    371e:	cf 93       	push	r28
    3720:	00 d0       	rcall	.+0      	; 0x3722 <TIMER1_GetCounts+0x6>
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
	u16 counts = 0;
    3726:	1a 82       	std	Y+2, r1	; 0x02
    3728:	19 82       	std	Y+1, r1	; 0x01
	counts = TCNT1H_REG;
    372a:	ed e4       	ldi	r30, 0x4D	; 77
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	88 2f       	mov	r24, r24
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	9a 83       	std	Y+2, r25	; 0x02
    3736:	89 83       	std	Y+1, r24	; 0x01
	counts <<= 8;
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	9a 81       	ldd	r25, Y+2	; 0x02
    373c:	98 2f       	mov	r25, r24
    373e:	88 27       	eor	r24, r24
    3740:	9a 83       	std	Y+2, r25	; 0x02
    3742:	89 83       	std	Y+1, r24	; 0x01
	counts |= TCNT1L_REG;
    3744:	ec e4       	ldi	r30, 0x4C	; 76
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	80 81       	ld	r24, Z
    374a:	28 2f       	mov	r18, r24
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	89 81       	ldd	r24, Y+1	; 0x01
    3750:	9a 81       	ldd	r25, Y+2	; 0x02
    3752:	82 2b       	or	r24, r18
    3754:	93 2b       	or	r25, r19
    3756:	9a 83       	std	Y+2, r25	; 0x02
    3758:	89 83       	std	Y+1, r24	; 0x01
	return counts;
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	cf 91       	pop	r28
    3764:	df 91       	pop	r29
    3766:	08 95       	ret

00003768 <TIMER1_SetDelayTimeMilliSec>:
void TIMER1_SetDelayTimeMilliSec(const TIMER1_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    3768:	df 93       	push	r29
    376a:	cf 93       	push	r28
    376c:	00 d0       	rcall	.+0      	; 0x376e <TIMER1_SetDelayTimeMilliSec+0x6>
    376e:	00 d0       	rcall	.+0      	; 0x3770 <TIMER1_SetDelayTimeMilliSec+0x8>
    3770:	00 d0       	rcall	.+0      	; 0x3772 <TIMER1_SetDelayTimeMilliSec+0xa>
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	9a 83       	std	Y+2, r25	; 0x02
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	4b 83       	std	Y+3, r20	; 0x03
    377c:	5c 83       	std	Y+4, r21	; 0x04
    377e:	6d 83       	std	Y+5, r22	; 0x05
    3780:	7e 83       	std	Y+6, r23	; 0x06
	/* Assuming we are using 16MHz FCPU and Prescaler 1024  Tick time = 2 Micro seconds */
	switch(Config_Ptr->Mode)
    3782:	e9 81       	ldd	r30, Y+1	; 0x01
    3784:	fa 81       	ldd	r31, Y+2	; 0x02
    3786:	84 81       	ldd	r24, Z+4	; 0x04
    3788:	88 2f       	mov	r24, r24
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	09 f0       	breq	.+2      	; 0x3792 <TIMER1_SetDelayTimeMilliSec+0x2a>
    3790:	4c c0       	rjmp	.+152    	; 0x382a <TIMER1_SetDelayTimeMilliSec+0xc2>
	{
	case TIMER1_NORMAL_MODE:
		timer1OverFlowCounter = (((copy_u32TimeMS * 1000)/TICK_TIME) / TOP_VALUE);
    3792:	8b 81       	ldd	r24, Y+3	; 0x03
    3794:	9c 81       	ldd	r25, Y+4	; 0x04
    3796:	ad 81       	ldd	r26, Y+5	; 0x05
    3798:	be 81       	ldd	r27, Y+6	; 0x06
    379a:	28 ee       	ldi	r18, 0xE8	; 232
    379c:	33 e0       	ldi	r19, 0x03	; 3
    379e:	40 e0       	ldi	r20, 0x00	; 0
    37a0:	50 e0       	ldi	r21, 0x00	; 0
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__mulsi3>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	20 ec       	ldi	r18, 0xC0	; 192
    37b0:	3f ef       	ldi	r19, 0xFF	; 255
    37b2:	4f e3       	ldi	r20, 0x3F	; 63
    37b4:	50 e0       	ldi	r21, 0x00	; 0
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__udivmodsi4>
    37be:	da 01       	movw	r26, r20
    37c0:	c9 01       	movw	r24, r18
    37c2:	80 93 b9 01 	sts	0x01B9, r24
    37c6:	90 93 ba 01 	sts	0x01BA, r25
    37ca:	a0 93 bb 01 	sts	0x01BB, r26
    37ce:	b0 93 bc 01 	sts	0x01BC, r27
		timer1RemCounter = (u16)(((copy_u32TimeMS * 1000)/TICK_TIME) % TOP_VALUE);
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	ad 81       	ldd	r26, Y+5	; 0x05
    37d8:	be 81       	ldd	r27, Y+6	; 0x06
    37da:	28 ee       	ldi	r18, 0xE8	; 232
    37dc:	33 e0       	ldi	r19, 0x03	; 3
    37de:	40 e0       	ldi	r20, 0x00	; 0
    37e0:	50 e0       	ldi	r21, 0x00	; 0
    37e2:	bc 01       	movw	r22, r24
    37e4:	cd 01       	movw	r24, r26
    37e6:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__mulsi3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	68 94       	set
    37f0:	15 f8       	bld	r1, 5
    37f2:	b6 95       	lsr	r27
    37f4:	a7 95       	ror	r26
    37f6:	97 95       	ror	r25
    37f8:	87 95       	ror	r24
    37fa:	16 94       	lsr	r1
    37fc:	d1 f7       	brne	.-12     	; 0x37f2 <TIMER1_SetDelayTimeMilliSec+0x8a>
    37fe:	2f ef       	ldi	r18, 0xFF	; 255
    3800:	3f ef       	ldi	r19, 0xFF	; 255
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	50 e0       	ldi	r21, 0x00	; 0
    3806:	bc 01       	movw	r22, r24
    3808:	cd 01       	movw	r24, r26
    380a:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__udivmodsi4>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	90 93 be 01 	sts	0x01BE, r25
    3816:	80 93 bd 01 	sts	0x01BD, r24
		TIMER1_IntEnable(Config_Ptr);
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	9a 81       	ldd	r25, Y+2	; 0x02
    381e:	0e 94 1e 1c 	call	0x383c	; 0x383c <TIMER1_IntEnable>
		TIMER1_Start(Config_Ptr);
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	9a 81       	ldd	r25, Y+2	; 0x02
    3826:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <TIMER1_Start>
		break;
	}
}
    382a:	26 96       	adiw	r28, 0x06	; 6
    382c:	0f b6       	in	r0, 0x3f	; 63
    382e:	f8 94       	cli
    3830:	de bf       	out	0x3e, r29	; 62
    3832:	0f be       	out	0x3f, r0	; 63
    3834:	cd bf       	out	0x3d, r28	; 61
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <TIMER1_IntEnable>:
void TIMER1_IntEnable(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	00 d0       	rcall	.+0      	; 0x3842 <TIMER1_IntEnable+0x6>
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	9a 83       	std	Y+2, r25	; 0x02
    3848:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER1_NORMAL_MODE)
    384a:	e9 81       	ldd	r30, Y+1	; 0x01
    384c:	fa 81       	ldd	r31, Y+2	; 0x02
    384e:	84 81       	ldd	r24, Z+4	; 0x04
    3850:	88 23       	and	r24, r24
    3852:	29 f4       	brne	.+10     	; 0x385e <TIMER1_IntEnable+0x22>
	{
		TIMSK_REG->bits.TOIE1_BIT = LOGIC_HIGH;
    3854:	e9 e5       	ldi	r30, 0x59	; 89
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	84 60       	ori	r24, 0x04	; 4
    385c:	80 83       	st	Z, r24
	else
	{
		//return error;
	}
	 */
}
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	cf 91       	pop	r28
    3864:	df 91       	pop	r29
    3866:	08 95       	ret

00003868 <TIMER1_IntDisable>:
void TIMER1_IntDisable(const TIMER1_INIT_CONFIG* Config_Ptr)
{
    3868:	df 93       	push	r29
    386a:	cf 93       	push	r28
    386c:	00 d0       	rcall	.+0      	; 0x386e <TIMER1_IntDisable+0x6>
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	9a 83       	std	Y+2, r25	; 0x02
    3874:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER1_NORMAL_MODE)
    3876:	e9 81       	ldd	r30, Y+1	; 0x01
    3878:	fa 81       	ldd	r31, Y+2	; 0x02
    387a:	84 81       	ldd	r24, Z+4	; 0x04
    387c:	88 23       	and	r24, r24
    387e:	29 f4       	brne	.+10     	; 0x388a <TIMER1_IntDisable+0x22>
	{
		TIMSK_REG->bits.TOIE1_BIT = LOGIC_HIGH;
    3880:	e9 e5       	ldi	r30, 0x59	; 89
    3882:	f0 e0       	ldi	r31, 0x00	; 0
    3884:	80 81       	ld	r24, Z
    3886:	84 60       	ori	r24, 0x04	; 4
    3888:	80 83       	st	Z, r24
	else
	{
		//return error;
	}
	 */
}
    388a:	0f 90       	pop	r0
    388c:	0f 90       	pop	r0
    388e:	cf 91       	pop	r28
    3890:	df 91       	pop	r29
    3892:	08 95       	ret

00003894 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void(*ptrfn)(void))
{
    3894:	df 93       	push	r29
    3896:	cf 93       	push	r28
    3898:	00 d0       	rcall	.+0      	; 0x389a <TIMER1_SetCallBack+0x6>
    389a:	cd b7       	in	r28, 0x3d	; 61
    389c:	de b7       	in	r29, 0x3e	; 62
    389e:	9a 83       	std	Y+2, r25	; 0x02
    38a0:	89 83       	std	Y+1, r24	; 0x01
	timer1PtrCallBack = ptrfn;
    38a2:	89 81       	ldd	r24, Y+1	; 0x01
    38a4:	9a 81       	ldd	r25, Y+2	; 0x02
    38a6:	90 93 c0 01 	sts	0x01C0, r25
    38aa:	80 93 bf 01 	sts	0x01BF, r24
}
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <TIMER1_SetFastPWM>:
void TIMER1_SetFastPWM(const TIMER1_INIT_CONFIG* Config_Ptr, u16 duty)
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <TIMER1_SetFastPWM+0x6>
    38be:	00 d0       	rcall	.+0      	; 0x38c0 <TIMER1_SetFastPWM+0x8>
    38c0:	00 d0       	rcall	.+0      	; 0x38c2 <TIMER1_SetFastPWM+0xa>
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	9c 83       	std	Y+4, r25	; 0x04
    38c8:	8b 83       	std	Y+3, r24	; 0x03
    38ca:	7e 83       	std	Y+6, r23	; 0x06
    38cc:	6d 83       	std	Y+5, r22	; 0x05
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	u16 dutyval = 0;
    38ce:	1a 82       	std	Y+2, r1	; 0x02
    38d0:	19 82       	std	Y+1, r1	; 0x01
	dutyval = (u16)(((u32)duty*TOP_VALUE)/100);
    38d2:	8d 81       	ldd	r24, Y+5	; 0x05
    38d4:	9e 81       	ldd	r25, Y+6	; 0x06
    38d6:	cc 01       	movw	r24, r24
    38d8:	a0 e0       	ldi	r26, 0x00	; 0
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	2f ef       	ldi	r18, 0xFF	; 255
    38de:	3f ef       	ldi	r19, 0xFF	; 255
    38e0:	40 e0       	ldi	r20, 0x00	; 0
    38e2:	50 e0       	ldi	r21, 0x00	; 0
    38e4:	bc 01       	movw	r22, r24
    38e6:	cd 01       	movw	r24, r26
    38e8:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__mulsi3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	24 e6       	ldi	r18, 0x64	; 100
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e0       	ldi	r20, 0x00	; 0
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__udivmodsi4>
    3900:	da 01       	movw	r26, r20
    3902:	c9 01       	movw	r24, r18
    3904:	9a 83       	std	Y+2, r25	; 0x02
    3906:	89 83       	std	Y+1, r24	; 0x01

	OCR1AL_REG = dutyval;
    3908:	ea e4       	ldi	r30, 0x4A	; 74
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	80 83       	st	Z, r24
	OCR1AH_REG = (dutyval >> 8);
    3910:	eb e4       	ldi	r30, 0x4B	; 75
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	9a 81       	ldd	r25, Y+2	; 0x02
    3918:	89 2f       	mov	r24, r25
    391a:	99 27       	eor	r25, r25
    391c:	80 83       	st	Z, r24

	OCR1BL_REG = dutyval;
    391e:	e8 e4       	ldi	r30, 0x48	; 72
    3920:	f0 e0       	ldi	r31, 0x00	; 0
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	80 83       	st	Z, r24
	OCR1BH_REG = (dutyval >> 8);
    3926:	e9 e4       	ldi	r30, 0x49	; 73
    3928:	f0 e0       	ldi	r31, 0x00	; 0
    392a:	89 81       	ldd	r24, Y+1	; 0x01
    392c:	9a 81       	ldd	r25, Y+2	; 0x02
    392e:	89 2f       	mov	r24, r25
    3930:	99 27       	eor	r25, r25
    3932:	80 83       	st	Z, r24

}
    3934:	26 96       	adiw	r28, 0x06	; 6
    3936:	0f b6       	in	r0, 0x3f	; 63
    3938:	f8 94       	cli
    393a:	de bf       	out	0x3e, r29	; 62
    393c:	0f be       	out	0x3f, r0	; 63
    393e:	cd bf       	out	0x3d, r28	; 61
    3940:	cf 91       	pop	r28
    3942:	df 91       	pop	r29
    3944:	08 95       	ret

00003946 <TIMER1_GetEventDuration>:
void TIMER1_SetPhaseCorrectPWM(const TIMER1_INIT_CONFIG* Config_Ptr, u16 duty);

void TIMER1_GetEventDuration(void)
{
    3946:	df 93       	push	r29
    3948:	cf 93       	push	r28
    394a:	cd b7       	in	r28, 0x3d	; 61
    394c:	de b7       	in	r29, 0x3e	; 62
	ICR1L_REG = 0;
    394e:	e6 e4       	ldi	r30, 0x46	; 70
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	10 82       	st	Z, r1
	ICR1H_REG = 0;
    3954:	e7 e4       	ldi	r30, 0x47	; 71
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    395a:	e9 e5       	ldi	r30, 0x59	; 89
    395c:	f0 e0       	ldi	r31, 0x00	; 0
    395e:	80 81       	ld	r24, Z
    3960:	80 62       	ori	r24, 0x20	; 32
    3962:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    3964:	ee e4       	ldi	r30, 0x4E	; 78
    3966:	f0 e0       	ldi	r31, 0x00	; 0
    3968:	80 81       	ld	r24, Z
    396a:	8f 77       	andi	r24, 0x7F	; 127
    396c:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    396e:	ee e4       	ldi	r30, 0x4E	; 78
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	80 64       	ori	r24, 0x40	; 64
    3976:	80 83       	st	Z, r24
}
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <TIMER1_GetSignalFrequency>:
void TIMER1_GetSignalFrequency(void)
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
	ICR1L_REG = 0;
    3986:	e6 e4       	ldi	r30, 0x46	; 70
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	10 82       	st	Z, r1
	ICR1H_REG = 0;
    398c:	e7 e4       	ldi	r30, 0x47	; 71
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    3992:	e9 e5       	ldi	r30, 0x59	; 89
    3994:	f0 e0       	ldi	r31, 0x00	; 0
    3996:	80 81       	ld	r24, Z
    3998:	80 62       	ori	r24, 0x20	; 32
    399a:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    399c:	ee e4       	ldi	r30, 0x4E	; 78
    399e:	f0 e0       	ldi	r31, 0x00	; 0
    39a0:	80 81       	ld	r24, Z
    39a2:	8f 77       	andi	r24, 0x7F	; 127
    39a4:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    39a6:	ee e4       	ldi	r30, 0x4E	; 78
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	80 81       	ld	r24, Z
    39ac:	80 64       	ori	r24, 0x40	; 64
    39ae:	80 83       	st	Z, r24
}
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	08 95       	ret

000039b6 <TIMER1_GetSignalDutyCycle>:
void TIMER1_GetSignalDutyCycle(void)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
	ICR1L_REG = 0;
    39be:	e6 e4       	ldi	r30, 0x46	; 70
    39c0:	f0 e0       	ldi	r31, 0x00	; 0
    39c2:	10 82       	st	Z, r1
	ICR1H_REG = 0;
    39c4:	e7 e4       	ldi	r30, 0x47	; 71
    39c6:	f0 e0       	ldi	r31, 0x00	; 0
    39c8:	10 82       	st	Z, r1
	TIMSK_REG->bits.TICIE1_BIT = LOGIC_HIGH;
    39ca:	e9 e5       	ldi	r30, 0x59	; 89
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	80 62       	ori	r24, 0x20	; 32
    39d2:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICNC1_BIT = LOGIC_LOW;
    39d4:	ee e4       	ldi	r30, 0x4E	; 78
    39d6:	f0 e0       	ldi	r31, 0x00	; 0
    39d8:	80 81       	ld	r24, Z
    39da:	8f 77       	andi	r24, 0x7F	; 127
    39dc:	80 83       	st	Z, r24
	TCCR1B_REG->bits.ICES1_BIT = RISING_EDGE;
    39de:	ee e4       	ldi	r30, 0x4E	; 78
    39e0:	f0 e0       	ldi	r31, 0x00	; 0
    39e2:	80 81       	ld	r24, Z
    39e4:	80 64       	ori	r24, 0x40	; 64
    39e6:	80 83       	st	Z, r24
}
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <TIMER1_GetInputCaptureValue>:

u16 TIMER1_GetInputCaptureValue(void)
{
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <TIMER1_GetInputCaptureValue+0x6>
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
	u16 counts = 0;
    39f8:	1a 82       	std	Y+2, r1	; 0x02
    39fa:	19 82       	std	Y+1, r1	; 0x01
	counts = ICR1H_REG;
    39fc:	e7 e4       	ldi	r30, 0x47	; 71
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	80 81       	ld	r24, Z
    3a02:	88 2f       	mov	r24, r24
    3a04:	90 e0       	ldi	r25, 0x00	; 0
    3a06:	9a 83       	std	Y+2, r25	; 0x02
    3a08:	89 83       	std	Y+1, r24	; 0x01
	counts <<= 8;
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	98 2f       	mov	r25, r24
    3a10:	88 27       	eor	r24, r24
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
	counts |= ICR1L_REG;
    3a16:	e6 e4       	ldi	r30, 0x46	; 70
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	28 2f       	mov	r18, r24
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	9a 81       	ldd	r25, Y+2	; 0x02
    3a24:	82 2b       	or	r24, r18
    3a26:	93 2b       	or	r25, r19
    3a28:	9a 83       	std	Y+2, r25	; 0x02
    3a2a:	89 83       	std	Y+1, r24	; 0x01
	return counts;
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3a30:	0f 90       	pop	r0
    3a32:	0f 90       	pop	r0
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <TIMER1_SetInputCaptureEdgeDetection>:

void TIMER1_SetInputCaptureEdgeDetection(u8 trigger)
{
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	0f 92       	push	r0
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B_REG->bits.ICES1_BIT = trigger;
    3a46:	ee e4       	ldi	r30, 0x4E	; 78
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	89 81       	ldd	r24, Y+1	; 0x01
    3a4c:	81 70       	andi	r24, 0x01	; 1
    3a4e:	81 70       	andi	r24, 0x01	; 1
    3a50:	98 2f       	mov	r25, r24
    3a52:	92 95       	swap	r25
    3a54:	99 0f       	add	r25, r25
    3a56:	99 0f       	add	r25, r25
    3a58:	90 7c       	andi	r25, 0xC0	; 192
    3a5a:	80 81       	ld	r24, Z
    3a5c:	8f 7b       	andi	r24, 0xBF	; 191
    3a5e:	89 2b       	or	r24, r25
    3a60:	80 83       	st	Z, r24
}
    3a62:	0f 90       	pop	r0
    3a64:	cf 91       	pop	r28
    3a66:	df 91       	pop	r29
    3a68:	08 95       	ret

00003a6a <TIMER1_ClearTimerValue>:

void TIMER1_ClearTimerValue(void)
{
    3a6a:	df 93       	push	r29
    3a6c:	cf 93       	push	r28
    3a6e:	cd b7       	in	r28, 0x3d	; 61
    3a70:	de b7       	in	r29, 0x3e	; 62
	TCNT1H_REG = 0;
    3a72:	ed e4       	ldi	r30, 0x4D	; 77
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	10 82       	st	Z, r1
	TCNT1L_REG = 0;
    3a78:	ec e4       	ldi	r30, 0x4C	; 76
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	10 82       	st	Z, r1
}
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    3a84:	1f 92       	push	r1
    3a86:	0f 92       	push	r0
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	0f 92       	push	r0
    3a8c:	11 24       	eor	r1, r1
    3a8e:	2f 93       	push	r18
    3a90:	3f 93       	push	r19
    3a92:	4f 93       	push	r20
    3a94:	5f 93       	push	r21
    3a96:	6f 93       	push	r22
    3a98:	7f 93       	push	r23
    3a9a:	8f 93       	push	r24
    3a9c:	9f 93       	push	r25
    3a9e:	af 93       	push	r26
    3aa0:	bf 93       	push	r27
    3aa2:	ef 93       	push	r30
    3aa4:	ff 93       	push	r31
    3aa6:	df 93       	push	r29
    3aa8:	cf 93       	push	r28
    3aaa:	cd b7       	in	r28, 0x3d	; 61
    3aac:	de b7       	in	r29, 0x3e	; 62
	{
		(*ptrCallBack)();
	}
	 */

	if((timer1PtrCallBack != NULL_PTR) && (timer1OverFlowCounter == -1))
    3aae:	80 91 bf 01 	lds	r24, 0x01BF
    3ab2:	90 91 c0 01 	lds	r25, 0x01C0
    3ab6:	00 97       	sbiw	r24, 0x00	; 0
    3ab8:	a9 f0       	breq	.+42     	; 0x3ae4 <__vector_9+0x60>
    3aba:	80 91 b9 01 	lds	r24, 0x01B9
    3abe:	90 91 ba 01 	lds	r25, 0x01BA
    3ac2:	a0 91 bb 01 	lds	r26, 0x01BB
    3ac6:	b0 91 bc 01 	lds	r27, 0x01BC
    3aca:	8f 3f       	cpi	r24, 0xFF	; 255
    3acc:	2f ef       	ldi	r18, 0xFF	; 255
    3ace:	92 07       	cpc	r25, r18
    3ad0:	2f ef       	ldi	r18, 0xFF	; 255
    3ad2:	a2 07       	cpc	r26, r18
    3ad4:	2f ef       	ldi	r18, 0xFF	; 255
    3ad6:	b2 07       	cpc	r27, r18
    3ad8:	29 f4       	brne	.+10     	; 0x3ae4 <__vector_9+0x60>
	{
		(*timer1PtrCallBack)();
    3ada:	e0 91 bf 01 	lds	r30, 0x01BF
    3ade:	f0 91 c0 01 	lds	r31, 0x01C0
    3ae2:	09 95       	icall
	}
}
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	ff 91       	pop	r31
    3aea:	ef 91       	pop	r30
    3aec:	bf 91       	pop	r27
    3aee:	af 91       	pop	r26
    3af0:	9f 91       	pop	r25
    3af2:	8f 91       	pop	r24
    3af4:	7f 91       	pop	r23
    3af6:	6f 91       	pop	r22
    3af8:	5f 91       	pop	r21
    3afa:	4f 91       	pop	r20
    3afc:	3f 91       	pop	r19
    3afe:	2f 91       	pop	r18
    3b00:	0f 90       	pop	r0
    3b02:	0f be       	out	0x3f, r0	; 63
    3b04:	0f 90       	pop	r0
    3b06:	1f 90       	pop	r1
    3b08:	18 95       	reti

00003b0a <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    3b0a:	1f 92       	push	r1
    3b0c:	0f 92       	push	r0
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	0f 92       	push	r0
    3b12:	11 24       	eor	r1, r1
    3b14:	2f 93       	push	r18
    3b16:	3f 93       	push	r19
    3b18:	4f 93       	push	r20
    3b1a:	5f 93       	push	r21
    3b1c:	6f 93       	push	r22
    3b1e:	7f 93       	push	r23
    3b20:	8f 93       	push	r24
    3b22:	9f 93       	push	r25
    3b24:	af 93       	push	r26
    3b26:	bf 93       	push	r27
    3b28:	ef 93       	push	r30
    3b2a:	ff 93       	push	r31
    3b2c:	df 93       	push	r29
    3b2e:	cf 93       	push	r28
    3b30:	cd b7       	in	r28, 0x3d	; 61
    3b32:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL_PTR)
    3b34:	80 91 bf 01 	lds	r24, 0x01BF
    3b38:	90 91 c0 01 	lds	r25, 0x01C0
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	29 f0       	breq	.+10     	; 0x3b4a <__vector_6+0x40>
	{
		(*timer1PtrCallBack)();
    3b40:	e0 91 bf 01 	lds	r30, 0x01BF
    3b44:	f0 91 c0 01 	lds	r31, 0x01C0
    3b48:	09 95       	icall
	}
}
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	ff 91       	pop	r31
    3b50:	ef 91       	pop	r30
    3b52:	bf 91       	pop	r27
    3b54:	af 91       	pop	r26
    3b56:	9f 91       	pop	r25
    3b58:	8f 91       	pop	r24
    3b5a:	7f 91       	pop	r23
    3b5c:	6f 91       	pop	r22
    3b5e:	5f 91       	pop	r21
    3b60:	4f 91       	pop	r20
    3b62:	3f 91       	pop	r19
    3b64:	2f 91       	pop	r18
    3b66:	0f 90       	pop	r0
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	0f 90       	pop	r0
    3b6c:	1f 90       	pop	r1
    3b6e:	18 95       	reti

00003b70 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3b70:	1f 92       	push	r1
    3b72:	0f 92       	push	r0
    3b74:	0f b6       	in	r0, 0x3f	; 63
    3b76:	0f 92       	push	r0
    3b78:	11 24       	eor	r1, r1
    3b7a:	2f 93       	push	r18
    3b7c:	3f 93       	push	r19
    3b7e:	4f 93       	push	r20
    3b80:	5f 93       	push	r21
    3b82:	6f 93       	push	r22
    3b84:	7f 93       	push	r23
    3b86:	8f 93       	push	r24
    3b88:	9f 93       	push	r25
    3b8a:	af 93       	push	r26
    3b8c:	bf 93       	push	r27
    3b8e:	ef 93       	push	r30
    3b90:	ff 93       	push	r31
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	cd b7       	in	r28, 0x3d	; 61
    3b98:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL_PTR)
    3b9a:	80 91 bf 01 	lds	r24, 0x01BF
    3b9e:	90 91 c0 01 	lds	r25, 0x01C0
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	29 f0       	breq	.+10     	; 0x3bb0 <__vector_7+0x40>
	{
		(*timer1PtrCallBack)();
    3ba6:	e0 91 bf 01 	lds	r30, 0x01BF
    3baa:	f0 91 c0 01 	lds	r31, 0x01C0
    3bae:	09 95       	icall
	}
}
    3bb0:	cf 91       	pop	r28
    3bb2:	df 91       	pop	r29
    3bb4:	ff 91       	pop	r31
    3bb6:	ef 91       	pop	r30
    3bb8:	bf 91       	pop	r27
    3bba:	af 91       	pop	r26
    3bbc:	9f 91       	pop	r25
    3bbe:	8f 91       	pop	r24
    3bc0:	7f 91       	pop	r23
    3bc2:	6f 91       	pop	r22
    3bc4:	5f 91       	pop	r21
    3bc6:	4f 91       	pop	r20
    3bc8:	3f 91       	pop	r19
    3bca:	2f 91       	pop	r18
    3bcc:	0f 90       	pop	r0
    3bce:	0f be       	out	0x3f, r0	; 63
    3bd0:	0f 90       	pop	r0
    3bd2:	1f 90       	pop	r1
    3bd4:	18 95       	reti

00003bd6 <__vector_8>:


ISR(TIMER1_COMPB_vect)
{
    3bd6:	1f 92       	push	r1
    3bd8:	0f 92       	push	r0
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	0f 92       	push	r0
    3bde:	11 24       	eor	r1, r1
    3be0:	2f 93       	push	r18
    3be2:	3f 93       	push	r19
    3be4:	4f 93       	push	r20
    3be6:	5f 93       	push	r21
    3be8:	6f 93       	push	r22
    3bea:	7f 93       	push	r23
    3bec:	8f 93       	push	r24
    3bee:	9f 93       	push	r25
    3bf0:	af 93       	push	r26
    3bf2:	bf 93       	push	r27
    3bf4:	ef 93       	push	r30
    3bf6:	ff 93       	push	r31
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
	if(timer1PtrCallBack != NULL_PTR)
    3c00:	80 91 bf 01 	lds	r24, 0x01BF
    3c04:	90 91 c0 01 	lds	r25, 0x01C0
    3c08:	00 97       	sbiw	r24, 0x00	; 0
    3c0a:	29 f0       	breq	.+10     	; 0x3c16 <__vector_8+0x40>
	{
		(*timer1PtrCallBack)();
    3c0c:	e0 91 bf 01 	lds	r30, 0x01BF
    3c10:	f0 91 c0 01 	lds	r31, 0x01C0
    3c14:	09 95       	icall
	}
}
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	ff 91       	pop	r31
    3c1c:	ef 91       	pop	r30
    3c1e:	bf 91       	pop	r27
    3c20:	af 91       	pop	r26
    3c22:	9f 91       	pop	r25
    3c24:	8f 91       	pop	r24
    3c26:	7f 91       	pop	r23
    3c28:	6f 91       	pop	r22
    3c2a:	5f 91       	pop	r21
    3c2c:	4f 91       	pop	r20
    3c2e:	3f 91       	pop	r19
    3c30:	2f 91       	pop	r18
    3c32:	0f 90       	pop	r0
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	0f 90       	pop	r0
    3c38:	1f 90       	pop	r1
    3c3a:	18 95       	reti

00003c3c <main>:

//void PWM_Timer0_Start(u8 duty_cycle);


int main()
{
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	cd b7       	in	r28, 0x3d	; 61
    3c4a:	de b7       	in	r29, 0x3e	; 62
    3c4c:	28 97       	sbiw	r28, 0x08	; 8
    3c4e:	0f b6       	in	r0, 0x3f	; 63
    3c50:	f8 94       	cli
    3c52:	de bf       	out	0x3e, r29	; 62
    3c54:	0f be       	out	0x3f, r0	; 63
    3c56:	cd bf       	out	0x3d, r28	; 61
	u32 freq = 0;
    3c58:	1d 82       	std	Y+5, r1	; 0x05
    3c5a:	1e 82       	std	Y+6, r1	; 0x06
    3c5c:	1f 82       	std	Y+7, r1	; 0x07
    3c5e:	18 86       	std	Y+8, r1	; 0x08
	u32 duty = 0;
    3c60:	19 82       	std	Y+1, r1	; 0x01
    3c62:	1a 82       	std	Y+2, r1	; 0x02
    3c64:	1b 82       	std	Y+3, r1	; 0x03
    3c66:	1c 82       	std	Y+4, r1	; 0x04

	DIO_voidSetPinDirection(pPORTB, pin3, output);
    3c68:	80 91 98 01 	lds	r24, 0x0198
    3c6c:	90 91 99 01 	lds	r25, 0x0199
    3c70:	63 e0       	ldi	r22, 0x03	; 3
    3c72:	41 e0       	ldi	r20, 0x01	; 1
    3c74:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(pPORTB, pin3, LOGIC_LOW);
    3c78:	80 91 98 01 	lds	r24, 0x0198
    3c7c:	90 91 99 01 	lds	r25, 0x0199
    3c80:	63 e0       	ldi	r22, 0x03	; 3
    3c82:	40 e0       	ldi	r20, 0x00	; 0
    3c84:	0e 94 e7 07 	call	0xfce	; 0xfce <DIO_voidSetPinValue>

//	DIO_voidSetPinDirection(pPORTD, pin5, output);
//	DIO_voidSetPinValue(pPORTD, pin5, LOGIC_LOW);

	DIO_voidSetPinDirection(pPORTD, pin6, input);
    3c88:	80 91 9c 01 	lds	r24, 0x019C
    3c8c:	90 91 9d 01 	lds	r25, 0x019D
    3c90:	66 e0       	ldi	r22, 0x06	; 6
    3c92:	40 e0       	ldi	r20, 0x00	; 0
    3c94:	0e 94 33 07 	call	0xe66	; 0xe66 <DIO_voidSetPinDirection>

	GIE_Enable();
    3c98:	0e 94 17 07 	call	0xe2e	; 0xe2e <GIE_Enable>
	H_LCD_void_Init();
    3c9c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <H_LCD_void_Init>

	TIMER0_Init(&TIMER0_config);
    3ca0:	86 e8       	ldi	r24, 0x86	; 134
    3ca2:	91 e0       	ldi	r25, 0x01	; 1
    3ca4:	0e 94 35 12 	call	0x246a	; 0x246a <TIMER0_Init>
	TIMER0_SetFastPWM(&TIMER0_config, 75);
    3ca8:	86 e8       	ldi	r24, 0x86	; 134
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	6b e4       	ldi	r22, 0x4B	; 75
    3cae:	0e 94 0f 14 	call	0x281e	; 0x281e <TIMER0_SetFastPWM>
	//PWM_Timer0_Start(65);

	TIMER1_Init(&TIMER1_config);
    3cb2:	8d e8       	ldi	r24, 0x8D	; 141
    3cb4:	91 e0       	ldi	r25, 0x01	; 1
    3cb6:	0e 94 c7 14 	call	0x298e	; 0x298e <TIMER1_Init>
	TIMER1_IntEnable(&TIMER1_config);
    3cba:	8d e8       	ldi	r24, 0x8D	; 141
    3cbc:	91 e0       	ldi	r25, 0x01	; 1
    3cbe:	0e 94 1e 1c 	call	0x383c	; 0x383c <TIMER1_IntEnable>

	TIMER1_SetCallBack(APP_edgeProcessing);
    3cc2:	81 e0       	ldi	r24, 0x01	; 1
    3cc4:	9f e1       	ldi	r25, 0x1F	; 31
    3cc6:	0e 94 4a 1c 	call	0x3894	; 0x3894 <TIMER1_SetCallBack>
	//TIMER1_GetSignalFrequency();
	TIMER1_GetSignalDutyCycle();
    3cca:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_GetSignalDutyCycle>
	TIMER1_Start(&TIMER1_config);
    3cce:	8d e8       	ldi	r24, 0x8D	; 141
    3cd0:	91 e0       	ldi	r25, 0x01	; 1
    3cd2:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <TIMER1_Start>
	TIMER0_Start(&TIMER0_config);
    3cd6:	86 e8       	ldi	r24, 0x86	; 134
    3cd8:	91 e0       	ldi	r25, 0x01	; 1
    3cda:	0e 94 29 13 	call	0x2652	; 0x2652 <TIMER0_Start>

	while(1)
	{
		if(g_edgeCount == 4)
    3cde:	80 91 c1 01 	lds	r24, 0x01C1
    3ce2:	84 30       	cpi	r24, 0x04	; 4
    3ce4:	e1 f7       	brne	.-8      	; 0x3cde <main+0xa2>
		{
			TIMER1_IntDisable(&TIMER1_config); /* Disable timer Interrupts */
    3ce6:	8d e8       	ldi	r24, 0x8D	; 141
    3ce8:	91 e0       	ldi	r25, 0x01	; 1
    3cea:	0e 94 34 1c 	call	0x3868	; 0x3868 <TIMER1_IntDisable>
			GIE_Disable();
    3cee:	0e 94 25 07 	call	0xe4a	; 0xe4a <GIE_Disable>
			g_edgeCount = 0;
    3cf2:	10 92 c1 01 	sts	0x01C1, r1
			H_LCD_void_gotoXY(0, 0);
    3cf6:	80 e0       	ldi	r24, 0x00	; 0
    3cf8:	60 e0       	ldi	r22, 0x00	; 0
    3cfa:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("freq = ");
    3cfe:	86 e6       	ldi	r24, 0x66	; 102
    3d00:	90 e0       	ldi	r25, 0x00	; 0
    3d02:	0e 94 3a 0c 	call	0x1874	; 0x1874 <H_LCD_void_sendString>
			/* calculate the freq */
			freq = 1000000 / (g_timePeriodPlusHigh - g_timeHigh);;
    3d06:	20 91 c6 01 	lds	r18, 0x01C6
    3d0a:	30 91 c7 01 	lds	r19, 0x01C7
    3d0e:	80 91 c2 01 	lds	r24, 0x01C2
    3d12:	90 91 c3 01 	lds	r25, 0x01C3
    3d16:	a9 01       	movw	r20, r18
    3d18:	48 1b       	sub	r20, r24
    3d1a:	59 0b       	sbc	r21, r25
    3d1c:	ca 01       	movw	r24, r20
    3d1e:	9c 01       	movw	r18, r24
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	80 e4       	ldi	r24, 0x40	; 64
    3d26:	92 e4       	ldi	r25, 0x42	; 66
    3d28:	af e0       	ldi	r26, 0x0F	; 15
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	cd 01       	movw	r24, r26
    3d30:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <__divmodsi4>
    3d34:	da 01       	movw	r26, r20
    3d36:	c9 01       	movw	r24, r18
    3d38:	8d 83       	std	Y+5, r24	; 0x05
    3d3a:	9e 83       	std	Y+6, r25	; 0x06
    3d3c:	af 83       	std	Y+7, r26	; 0x07
    3d3e:	b8 87       	std	Y+8, r27	; 0x08
			duty  = ((f32)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriodPlusHigh - g_timeHigh)) * 100;
    3d40:	20 91 c6 01 	lds	r18, 0x01C6
    3d44:	30 91 c7 01 	lds	r19, 0x01C7
    3d48:	80 91 c4 01 	lds	r24, 0x01C4
    3d4c:	90 91 c5 01 	lds	r25, 0x01C5
    3d50:	a9 01       	movw	r20, r18
    3d52:	48 1b       	sub	r20, r24
    3d54:	59 0b       	sbc	r21, r25
    3d56:	ca 01       	movw	r24, r20
    3d58:	cc 01       	movw	r24, r24
    3d5a:	a0 e0       	ldi	r26, 0x00	; 0
    3d5c:	b0 e0       	ldi	r27, 0x00	; 0
    3d5e:	bc 01       	movw	r22, r24
    3d60:	cd 01       	movw	r24, r26
    3d62:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d66:	7b 01       	movw	r14, r22
    3d68:	8c 01       	movw	r16, r24
    3d6a:	20 91 c6 01 	lds	r18, 0x01C6
    3d6e:	30 91 c7 01 	lds	r19, 0x01C7
    3d72:	80 91 c2 01 	lds	r24, 0x01C2
    3d76:	90 91 c3 01 	lds	r25, 0x01C3
    3d7a:	a9 01       	movw	r20, r18
    3d7c:	48 1b       	sub	r20, r24
    3d7e:	59 0b       	sbc	r21, r25
    3d80:	ca 01       	movw	r24, r20
    3d82:	cc 01       	movw	r24, r24
    3d84:	a0 e0       	ldi	r26, 0x00	; 0
    3d86:	b0 e0       	ldi	r27, 0x00	; 0
    3d88:	bc 01       	movw	r22, r24
    3d8a:	cd 01       	movw	r24, r26
    3d8c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d90:	9b 01       	movw	r18, r22
    3d92:	ac 01       	movw	r20, r24
    3d94:	c8 01       	movw	r24, r16
    3d96:	b7 01       	movw	r22, r14
    3d98:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	bc 01       	movw	r22, r24
    3da2:	cd 01       	movw	r24, r26
    3da4:	20 e0       	ldi	r18, 0x00	; 0
    3da6:	30 e0       	ldi	r19, 0x00	; 0
    3da8:	48 ec       	ldi	r20, 0xC8	; 200
    3daa:	52 e4       	ldi	r21, 0x42	; 66
    3dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db0:	dc 01       	movw	r26, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	bc 01       	movw	r22, r24
    3db6:	cd 01       	movw	r24, r26
    3db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	89 83       	std	Y+1, r24	; 0x01
    3dc2:	9a 83       	std	Y+2, r25	; 0x02
    3dc4:	ab 83       	std	Y+3, r26	; 0x03
    3dc6:	bc 83       	std	Y+4, r27	; 0x04
			/* display the freq on LCD screen */
			H_LCD_void_sendIntNum(freq);
    3dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dca:	9e 81       	ldd	r25, Y+6	; 0x06
    3dcc:	af 81       	ldd	r26, Y+7	; 0x07
    3dce:	b8 85       	ldd	r27, Y+8	; 0x08
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	cd 01       	movw	r24, r26
    3dd4:	0e 94 ac 11 	call	0x2358	; 0x2358 <H_LCD_void_sendIntNum>
			H_LCD_void_sendString(" Hz");
    3dd8:	8e e6       	ldi	r24, 0x6E	; 110
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	0e 94 3a 0c 	call	0x1874	; 0x1874 <H_LCD_void_sendString>
			H_LCD_void_gotoXY(1, 0);
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <H_LCD_void_gotoXY>
			H_LCD_void_sendString("duty = ");
    3de8:	82 e7       	ldi	r24, 0x72	; 114
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	0e 94 3a 0c 	call	0x1874	; 0x1874 <H_LCD_void_sendString>
			H_LCD_void_sendIntNum(duty);
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	ab 81       	ldd	r26, Y+3	; 0x03
    3df6:	bc 81       	ldd	r27, Y+4	; 0x04
    3df8:	bc 01       	movw	r22, r24
    3dfa:	cd 01       	movw	r24, r26
    3dfc:	0e 94 ac 11 	call	0x2358	; 0x2358 <H_LCD_void_sendIntNum>
    3e00:	6e cf       	rjmp	.-292    	; 0x3cde <main+0xa2>

00003e02 <APP_edgeProcessing>:
	}
}

/* This is the call-back function */
void APP_edgeProcessing(void)
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    3e0a:	80 91 c1 01 	lds	r24, 0x01C1
    3e0e:	8f 5f       	subi	r24, 0xFF	; 255
    3e10:	80 93 c1 01 	sts	0x01C1, r24

	if(g_edgeCount == 1)
    3e14:	80 91 c1 01 	lds	r24, 0x01C1
    3e18:	81 30       	cpi	r24, 0x01	; 1
    3e1a:	31 f4       	brne	.+12     	; 0x3e28 <APP_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		TIMER1_ClearTimerValue();
    3e1c:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <TIMER1_ClearTimerValue>
		/* Detect falling edge */
		TIMER1_SetInputCaptureEdgeDetection(FALLING_EDGE);
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <TIMER1_SetInputCaptureEdgeDetection>
    3e26:	2b c0       	rjmp	.+86     	; 0x3e7e <APP_edgeProcessing+0x7c>
	}
	else if(g_edgeCount == 2)
    3e28:	80 91 c1 01 	lds	r24, 0x01C1
    3e2c:	82 30       	cpi	r24, 0x02	; 2
    3e2e:	51 f4       	brne	.+20     	; 0x3e44 <APP_edgeProcessing+0x42>
	{
		/* Store the High time value */
		g_timeHigh = TIMER1_GetInputCaptureValue();
    3e30:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <TIMER1_GetInputCaptureValue>
    3e34:	90 93 c3 01 	sts	0x01C3, r25
    3e38:	80 93 c2 01 	sts	0x01C2, r24
		/* Detect rising edge */
		TIMER1_SetInputCaptureEdgeDetection(RISING_EDGE);
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <TIMER1_SetInputCaptureEdgeDetection>
    3e42:	1d c0       	rjmp	.+58     	; 0x3e7e <APP_edgeProcessing+0x7c>
	}
	else if(g_edgeCount == 3)
    3e44:	80 91 c1 01 	lds	r24, 0x01C1
    3e48:	83 30       	cpi	r24, 0x03	; 3
    3e4a:	51 f4       	brne	.+20     	; 0x3e60 <APP_edgeProcessing+0x5e>
	{
		/* Store the Period time value */
		g_timePeriod = TIMER1_GetInputCaptureValue();
    3e4c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <TIMER1_GetInputCaptureValue>
    3e50:	90 93 c5 01 	sts	0x01C5, r25
    3e54:	80 93 c4 01 	sts	0x01C4, r24
		/* Detect falling edge */
		TIMER1_SetInputCaptureEdgeDetection(FALLING_EDGE);
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <TIMER1_SetInputCaptureEdgeDetection>
    3e5e:	0f c0       	rjmp	.+30     	; 0x3e7e <APP_edgeProcessing+0x7c>
	}
	else if(g_edgeCount == 4)
    3e60:	80 91 c1 01 	lds	r24, 0x01C1
    3e64:	84 30       	cpi	r24, 0x04	; 4
    3e66:	59 f4       	brne	.+22     	; 0x3e7e <APP_edgeProcessing+0x7c>
	{
		/* Store the Period time value + High time value */
		g_timePeriodPlusHigh = TIMER1_GetInputCaptureValue();
    3e68:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <TIMER1_GetInputCaptureValue>
    3e6c:	90 93 c7 01 	sts	0x01C7, r25
    3e70:	80 93 c6 01 	sts	0x01C6, r24
		/* Clear the timer counter register to start measurements again */
		TIMER1_ClearTimerValue();
    3e74:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <TIMER1_ClearTimerValue>
		/* Detect rising edge */
		TIMER1_SetInputCaptureEdgeDetection(RISING_EDGE);
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <TIMER1_SetInputCaptureEdgeDetection>
	}
}
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <__mulsi3>:
    3e84:	62 9f       	mul	r22, r18
    3e86:	d0 01       	movw	r26, r0
    3e88:	73 9f       	mul	r23, r19
    3e8a:	f0 01       	movw	r30, r0
    3e8c:	82 9f       	mul	r24, r18
    3e8e:	e0 0d       	add	r30, r0
    3e90:	f1 1d       	adc	r31, r1
    3e92:	64 9f       	mul	r22, r20
    3e94:	e0 0d       	add	r30, r0
    3e96:	f1 1d       	adc	r31, r1
    3e98:	92 9f       	mul	r25, r18
    3e9a:	f0 0d       	add	r31, r0
    3e9c:	83 9f       	mul	r24, r19
    3e9e:	f0 0d       	add	r31, r0
    3ea0:	74 9f       	mul	r23, r20
    3ea2:	f0 0d       	add	r31, r0
    3ea4:	65 9f       	mul	r22, r21
    3ea6:	f0 0d       	add	r31, r0
    3ea8:	99 27       	eor	r25, r25
    3eaa:	72 9f       	mul	r23, r18
    3eac:	b0 0d       	add	r27, r0
    3eae:	e1 1d       	adc	r30, r1
    3eb0:	f9 1f       	adc	r31, r25
    3eb2:	63 9f       	mul	r22, r19
    3eb4:	b0 0d       	add	r27, r0
    3eb6:	e1 1d       	adc	r30, r1
    3eb8:	f9 1f       	adc	r31, r25
    3eba:	bd 01       	movw	r22, r26
    3ebc:	cf 01       	movw	r24, r30
    3ebe:	11 24       	eor	r1, r1
    3ec0:	08 95       	ret

00003ec2 <__udivmodhi4>:
    3ec2:	aa 1b       	sub	r26, r26
    3ec4:	bb 1b       	sub	r27, r27
    3ec6:	51 e1       	ldi	r21, 0x11	; 17
    3ec8:	07 c0       	rjmp	.+14     	; 0x3ed8 <__udivmodhi4_ep>

00003eca <__udivmodhi4_loop>:
    3eca:	aa 1f       	adc	r26, r26
    3ecc:	bb 1f       	adc	r27, r27
    3ece:	a6 17       	cp	r26, r22
    3ed0:	b7 07       	cpc	r27, r23
    3ed2:	10 f0       	brcs	.+4      	; 0x3ed8 <__udivmodhi4_ep>
    3ed4:	a6 1b       	sub	r26, r22
    3ed6:	b7 0b       	sbc	r27, r23

00003ed8 <__udivmodhi4_ep>:
    3ed8:	88 1f       	adc	r24, r24
    3eda:	99 1f       	adc	r25, r25
    3edc:	5a 95       	dec	r21
    3ede:	a9 f7       	brne	.-22     	; 0x3eca <__udivmodhi4_loop>
    3ee0:	80 95       	com	r24
    3ee2:	90 95       	com	r25
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	08 95       	ret

00003eea <__divmodhi4>:
    3eea:	97 fb       	bst	r25, 7
    3eec:	09 2e       	mov	r0, r25
    3eee:	07 26       	eor	r0, r23
    3ef0:	0a d0       	rcall	.+20     	; 0x3f06 <__divmodhi4_neg1>
    3ef2:	77 fd       	sbrc	r23, 7
    3ef4:	04 d0       	rcall	.+8      	; 0x3efe <__divmodhi4_neg2>
    3ef6:	e5 df       	rcall	.-54     	; 0x3ec2 <__udivmodhi4>
    3ef8:	06 d0       	rcall	.+12     	; 0x3f06 <__divmodhi4_neg1>
    3efa:	00 20       	and	r0, r0
    3efc:	1a f4       	brpl	.+6      	; 0x3f04 <__divmodhi4_exit>

00003efe <__divmodhi4_neg2>:
    3efe:	70 95       	com	r23
    3f00:	61 95       	neg	r22
    3f02:	7f 4f       	sbci	r23, 0xFF	; 255

00003f04 <__divmodhi4_exit>:
    3f04:	08 95       	ret

00003f06 <__divmodhi4_neg1>:
    3f06:	f6 f7       	brtc	.-4      	; 0x3f04 <__divmodhi4_exit>
    3f08:	90 95       	com	r25
    3f0a:	81 95       	neg	r24
    3f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0e:	08 95       	ret

00003f10 <__udivmodsi4>:
    3f10:	a1 e2       	ldi	r26, 0x21	; 33
    3f12:	1a 2e       	mov	r1, r26
    3f14:	aa 1b       	sub	r26, r26
    3f16:	bb 1b       	sub	r27, r27
    3f18:	fd 01       	movw	r30, r26
    3f1a:	0d c0       	rjmp	.+26     	; 0x3f36 <__udivmodsi4_ep>

00003f1c <__udivmodsi4_loop>:
    3f1c:	aa 1f       	adc	r26, r26
    3f1e:	bb 1f       	adc	r27, r27
    3f20:	ee 1f       	adc	r30, r30
    3f22:	ff 1f       	adc	r31, r31
    3f24:	a2 17       	cp	r26, r18
    3f26:	b3 07       	cpc	r27, r19
    3f28:	e4 07       	cpc	r30, r20
    3f2a:	f5 07       	cpc	r31, r21
    3f2c:	20 f0       	brcs	.+8      	; 0x3f36 <__udivmodsi4_ep>
    3f2e:	a2 1b       	sub	r26, r18
    3f30:	b3 0b       	sbc	r27, r19
    3f32:	e4 0b       	sbc	r30, r20
    3f34:	f5 0b       	sbc	r31, r21

00003f36 <__udivmodsi4_ep>:
    3f36:	66 1f       	adc	r22, r22
    3f38:	77 1f       	adc	r23, r23
    3f3a:	88 1f       	adc	r24, r24
    3f3c:	99 1f       	adc	r25, r25
    3f3e:	1a 94       	dec	r1
    3f40:	69 f7       	brne	.-38     	; 0x3f1c <__udivmodsi4_loop>
    3f42:	60 95       	com	r22
    3f44:	70 95       	com	r23
    3f46:	80 95       	com	r24
    3f48:	90 95       	com	r25
    3f4a:	9b 01       	movw	r18, r22
    3f4c:	ac 01       	movw	r20, r24
    3f4e:	bd 01       	movw	r22, r26
    3f50:	cf 01       	movw	r24, r30
    3f52:	08 95       	ret

00003f54 <__divmodsi4>:
    3f54:	97 fb       	bst	r25, 7
    3f56:	09 2e       	mov	r0, r25
    3f58:	05 26       	eor	r0, r21
    3f5a:	0e d0       	rcall	.+28     	; 0x3f78 <__divmodsi4_neg1>
    3f5c:	57 fd       	sbrc	r21, 7
    3f5e:	04 d0       	rcall	.+8      	; 0x3f68 <__divmodsi4_neg2>
    3f60:	d7 df       	rcall	.-82     	; 0x3f10 <__udivmodsi4>
    3f62:	0a d0       	rcall	.+20     	; 0x3f78 <__divmodsi4_neg1>
    3f64:	00 1c       	adc	r0, r0
    3f66:	38 f4       	brcc	.+14     	; 0x3f76 <__divmodsi4_exit>

00003f68 <__divmodsi4_neg2>:
    3f68:	50 95       	com	r21
    3f6a:	40 95       	com	r20
    3f6c:	30 95       	com	r19
    3f6e:	21 95       	neg	r18
    3f70:	3f 4f       	sbci	r19, 0xFF	; 255
    3f72:	4f 4f       	sbci	r20, 0xFF	; 255
    3f74:	5f 4f       	sbci	r21, 0xFF	; 255

00003f76 <__divmodsi4_exit>:
    3f76:	08 95       	ret

00003f78 <__divmodsi4_neg1>:
    3f78:	f6 f7       	brtc	.-4      	; 0x3f76 <__divmodsi4_exit>
    3f7a:	90 95       	com	r25
    3f7c:	80 95       	com	r24
    3f7e:	70 95       	com	r23
    3f80:	61 95       	neg	r22
    3f82:	7f 4f       	sbci	r23, 0xFF	; 255
    3f84:	8f 4f       	sbci	r24, 0xFF	; 255
    3f86:	9f 4f       	sbci	r25, 0xFF	; 255
    3f88:	08 95       	ret

00003f8a <__prologue_saves__>:
    3f8a:	2f 92       	push	r2
    3f8c:	3f 92       	push	r3
    3f8e:	4f 92       	push	r4
    3f90:	5f 92       	push	r5
    3f92:	6f 92       	push	r6
    3f94:	7f 92       	push	r7
    3f96:	8f 92       	push	r8
    3f98:	9f 92       	push	r9
    3f9a:	af 92       	push	r10
    3f9c:	bf 92       	push	r11
    3f9e:	cf 92       	push	r12
    3fa0:	df 92       	push	r13
    3fa2:	ef 92       	push	r14
    3fa4:	ff 92       	push	r15
    3fa6:	0f 93       	push	r16
    3fa8:	1f 93       	push	r17
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	cd b7       	in	r28, 0x3d	; 61
    3fb0:	de b7       	in	r29, 0x3e	; 62
    3fb2:	ca 1b       	sub	r28, r26
    3fb4:	db 0b       	sbc	r29, r27
    3fb6:	0f b6       	in	r0, 0x3f	; 63
    3fb8:	f8 94       	cli
    3fba:	de bf       	out	0x3e, r29	; 62
    3fbc:	0f be       	out	0x3f, r0	; 63
    3fbe:	cd bf       	out	0x3d, r28	; 61
    3fc0:	09 94       	ijmp

00003fc2 <__epilogue_restores__>:
    3fc2:	2a 88       	ldd	r2, Y+18	; 0x12
    3fc4:	39 88       	ldd	r3, Y+17	; 0x11
    3fc6:	48 88       	ldd	r4, Y+16	; 0x10
    3fc8:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fca:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fcc:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fce:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fd0:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fd2:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fd4:	b9 84       	ldd	r11, Y+9	; 0x09
    3fd6:	c8 84       	ldd	r12, Y+8	; 0x08
    3fd8:	df 80       	ldd	r13, Y+7	; 0x07
    3fda:	ee 80       	ldd	r14, Y+6	; 0x06
    3fdc:	fd 80       	ldd	r15, Y+5	; 0x05
    3fde:	0c 81       	ldd	r16, Y+4	; 0x04
    3fe0:	1b 81       	ldd	r17, Y+3	; 0x03
    3fe2:	aa 81       	ldd	r26, Y+2	; 0x02
    3fe4:	b9 81       	ldd	r27, Y+1	; 0x01
    3fe6:	ce 0f       	add	r28, r30
    3fe8:	d1 1d       	adc	r29, r1
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	ed 01       	movw	r28, r26
    3ff6:	08 95       	ret

00003ff8 <_exit>:
    3ff8:	f8 94       	cli

00003ffa <__stop_program>:
    3ffa:	ff cf       	rjmp	.-2      	; 0x3ffa <__stop_program>
