
AVR_UART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000253c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000253c  000025d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  0080007a  0080007a  000025ea  2**0
                  ALLOC
  3 .stab         000021e4  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127a  00000000  00000000  000047d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000882e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000095dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000973c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000099c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a197  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 11 	call	0x234e	; 0x234e <main>
      8a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 12 	jmp	0x24ca	; 0x24ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
     b4e:	af e5       	ldi	r26, 0x5F	; 95
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <GIE_Disable>:

void GIE_Disable(void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
     b6a:	af e5       	ldi	r26, 0x5F	; 95
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ef e5       	ldi	r30, 0x5F	; 95
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	00 d0       	rcall	.+0      	; 0xb84 <DIO_voidSetPinDirection+0x6>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <DIO_voidSetPinDirection+0x8>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <DIO_voidSetPinDirection+0xa>
     b88:	cd b7       	in	r28, 0x3d	; 61
     b8a:	de b7       	in	r29, 0x3e	; 62
     b8c:	9a 83       	std	Y+2, r25	; 0x02
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	6b 83       	std	Y+3, r22	; 0x03
     b92:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3e 83       	std	Y+6, r19	; 0x06
     b9c:	2d 83       	std	Y+5, r18	; 0x05
     b9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ba0:	9e 81       	ldd	r25, Y+6	; 0x06
     ba2:	83 30       	cpi	r24, 0x03	; 3
     ba4:	91 05       	cpc	r25, r1
     ba6:	09 f4       	brne	.+2      	; 0xbaa <DIO_voidSetPinDirection+0x2c>
     ba8:	51 c0       	rjmp	.+162    	; 0xc4c <DIO_voidSetPinDirection+0xce>
     baa:	2d 81       	ldd	r18, Y+5	; 0x05
     bac:	3e 81       	ldd	r19, Y+6	; 0x06
     bae:	24 30       	cpi	r18, 0x04	; 4
     bb0:	31 05       	cpc	r19, r1
     bb2:	7c f4       	brge	.+30     	; 0xbd2 <DIO_voidSetPinDirection+0x54>
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	9e 81       	ldd	r25, Y+6	; 0x06
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	91 05       	cpc	r25, r1
     bbc:	71 f1       	breq	.+92     	; 0xc1a <DIO_voidSetPinDirection+0x9c>
     bbe:	2d 81       	ldd	r18, Y+5	; 0x05
     bc0:	3e 81       	ldd	r19, Y+6	; 0x06
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	31 05       	cpc	r19, r1
     bc6:	ac f5       	brge	.+106    	; 0xc32 <DIO_voidSetPinDirection+0xb4>
     bc8:	8d 81       	ldd	r24, Y+5	; 0x05
     bca:	9e 81       	ldd	r25, Y+6	; 0x06
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	d1 f0       	breq	.+52     	; 0xc04 <DIO_voidSetPinDirection+0x86>
     bd0:	81 c0       	rjmp	.+258    	; 0xcd4 <DIO_voidSetPinDirection+0x156>
     bd2:	2d 81       	ldd	r18, Y+5	; 0x05
     bd4:	3e 81       	ldd	r19, Y+6	; 0x06
     bd6:	25 30       	cpi	r18, 0x05	; 5
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <DIO_voidSetPinDirection+0x60>
     bdc:	52 c0       	rjmp	.+164    	; 0xc82 <DIO_voidSetPinDirection+0x104>
     bde:	8d 81       	ldd	r24, Y+5	; 0x05
     be0:	9e 81       	ldd	r25, Y+6	; 0x06
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	91 05       	cpc	r25, r1
     be6:	0c f4       	brge	.+2      	; 0xbea <DIO_voidSetPinDirection+0x6c>
     be8:	3f c0       	rjmp	.+126    	; 0xc68 <DIO_voidSetPinDirection+0xea>
     bea:	2d 81       	ldd	r18, Y+5	; 0x05
     bec:	3e 81       	ldd	r19, Y+6	; 0x06
     bee:	26 30       	cpi	r18, 0x06	; 6
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <DIO_voidSetPinDirection+0x78>
     bf4:	54 c0       	rjmp	.+168    	; 0xc9e <DIO_voidSetPinDirection+0x120>
     bf6:	8d 81       	ldd	r24, Y+5	; 0x05
     bf8:	9e 81       	ldd	r25, Y+6	; 0x06
     bfa:	87 30       	cpi	r24, 0x07	; 7
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <DIO_voidSetPinDirection+0x84>
     c00:	5d c0       	rjmp	.+186    	; 0xcbc <DIO_voidSetPinDirection+0x13e>
     c02:	68 c0       	rjmp	.+208    	; 0xcd4 <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	81 70       	andi	r24, 0x01	; 1
     c08:	e9 81       	ldd	r30, Y+1	; 0x01
     c0a:	fa 81       	ldd	r31, Y+2	; 0x02
     c0c:	98 2f       	mov	r25, r24
     c0e:	91 70       	andi	r25, 0x01	; 1
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	8e 7f       	andi	r24, 0xFE	; 254
     c14:	89 2b       	or	r24, r25
     c16:	81 83       	std	Z+1, r24	; 0x01
     c18:	5d c0       	rjmp	.+186    	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
     c1a:	8c 81       	ldd	r24, Y+4	; 0x04
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	e9 81       	ldd	r30, Y+1	; 0x01
     c20:	fa 81       	ldd	r31, Y+2	; 0x02
     c22:	81 70       	andi	r24, 0x01	; 1
     c24:	98 2f       	mov	r25, r24
     c26:	99 0f       	add	r25, r25
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	8d 7f       	andi	r24, 0xFD	; 253
     c2c:	89 2b       	or	r24, r25
     c2e:	81 83       	std	Z+1, r24	; 0x01
     c30:	51 c0       	rjmp	.+162    	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
     c32:	8c 81       	ldd	r24, Y+4	; 0x04
     c34:	81 70       	andi	r24, 0x01	; 1
     c36:	e9 81       	ldd	r30, Y+1	; 0x01
     c38:	fa 81       	ldd	r31, Y+2	; 0x02
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	98 2f       	mov	r25, r24
     c3e:	99 0f       	add	r25, r25
     c40:	99 0f       	add	r25, r25
     c42:	81 81       	ldd	r24, Z+1	; 0x01
     c44:	8b 7f       	andi	r24, 0xFB	; 251
     c46:	89 2b       	or	r24, r25
     c48:	81 83       	std	Z+1, r24	; 0x01
     c4a:	44 c0       	rjmp	.+136    	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
     c4c:	8c 81       	ldd	r24, Y+4	; 0x04
     c4e:	81 70       	andi	r24, 0x01	; 1
     c50:	e9 81       	ldd	r30, Y+1	; 0x01
     c52:	fa 81       	ldd	r31, Y+2	; 0x02
     c54:	81 70       	andi	r24, 0x01	; 1
     c56:	98 2f       	mov	r25, r24
     c58:	99 0f       	add	r25, r25
     c5a:	99 0f       	add	r25, r25
     c5c:	99 0f       	add	r25, r25
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	87 7f       	andi	r24, 0xF7	; 247
     c62:	89 2b       	or	r24, r25
     c64:	81 83       	std	Z+1, r24	; 0x01
     c66:	36 c0       	rjmp	.+108    	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	81 70       	andi	r24, 0x01	; 1
     c6c:	e9 81       	ldd	r30, Y+1	; 0x01
     c6e:	fa 81       	ldd	r31, Y+2	; 0x02
     c70:	81 70       	andi	r24, 0x01	; 1
     c72:	98 2f       	mov	r25, r24
     c74:	92 95       	swap	r25
     c76:	90 7f       	andi	r25, 0xF0	; 240
     c78:	81 81       	ldd	r24, Z+1	; 0x01
     c7a:	8f 7e       	andi	r24, 0xEF	; 239
     c7c:	89 2b       	or	r24, r25
     c7e:	81 83       	std	Z+1, r24	; 0x01
     c80:	29 c0       	rjmp	.+82     	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	81 70       	andi	r24, 0x01	; 1
     c86:	e9 81       	ldd	r30, Y+1	; 0x01
     c88:	fa 81       	ldd	r31, Y+2	; 0x02
     c8a:	81 70       	andi	r24, 0x01	; 1
     c8c:	98 2f       	mov	r25, r24
     c8e:	92 95       	swap	r25
     c90:	99 0f       	add	r25, r25
     c92:	90 7e       	andi	r25, 0xE0	; 224
     c94:	81 81       	ldd	r24, Z+1	; 0x01
     c96:	8f 7d       	andi	r24, 0xDF	; 223
     c98:	89 2b       	or	r24, r25
     c9a:	81 83       	std	Z+1, r24	; 0x01
     c9c:	1b c0       	rjmp	.+54     	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
     c9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ca0:	81 70       	andi	r24, 0x01	; 1
     ca2:	e9 81       	ldd	r30, Y+1	; 0x01
     ca4:	fa 81       	ldd	r31, Y+2	; 0x02
     ca6:	81 70       	andi	r24, 0x01	; 1
     ca8:	98 2f       	mov	r25, r24
     caa:	92 95       	swap	r25
     cac:	99 0f       	add	r25, r25
     cae:	99 0f       	add	r25, r25
     cb0:	90 7c       	andi	r25, 0xC0	; 192
     cb2:	81 81       	ldd	r24, Z+1	; 0x01
     cb4:	8f 7b       	andi	r24, 0xBF	; 191
     cb6:	89 2b       	or	r24, r25
     cb8:	81 83       	std	Z+1, r24	; 0x01
     cba:	0c c0       	rjmp	.+24     	; 0xcd4 <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	81 70       	andi	r24, 0x01	; 1
     cc0:	e9 81       	ldd	r30, Y+1	; 0x01
     cc2:	fa 81       	ldd	r31, Y+2	; 0x02
     cc4:	98 2f       	mov	r25, r24
     cc6:	97 95       	ror	r25
     cc8:	99 27       	eor	r25, r25
     cca:	97 95       	ror	r25
     ccc:	81 81       	ldd	r24, Z+1	; 0x01
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	89 2b       	or	r24, r25
     cd2:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     cd4:	26 96       	adiw	r28, 0x06	; 6
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <DIO_voidSetPinValue+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_voidSetPinValue+0x8>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <DIO_voidSetPinValue+0xa>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	6b 83       	std	Y+3, r22	; 0x03
     cfa:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	3e 83       	std	Y+6, r19	; 0x06
     d04:	2d 83       	std	Y+5, r18	; 0x05
     d06:	8d 81       	ldd	r24, Y+5	; 0x05
     d08:	9e 81       	ldd	r25, Y+6	; 0x06
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <DIO_voidSetPinValue+0x2c>
     d10:	51 c0       	rjmp	.+162    	; 0xdb4 <DIO_voidSetPinValue+0xce>
     d12:	2d 81       	ldd	r18, Y+5	; 0x05
     d14:	3e 81       	ldd	r19, Y+6	; 0x06
     d16:	24 30       	cpi	r18, 0x04	; 4
     d18:	31 05       	cpc	r19, r1
     d1a:	7c f4       	brge	.+30     	; 0xd3a <DIO_voidSetPinValue+0x54>
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	9e 81       	ldd	r25, Y+6	; 0x06
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	91 05       	cpc	r25, r1
     d24:	71 f1       	breq	.+92     	; 0xd82 <DIO_voidSetPinValue+0x9c>
     d26:	2d 81       	ldd	r18, Y+5	; 0x05
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	22 30       	cpi	r18, 0x02	; 2
     d2c:	31 05       	cpc	r19, r1
     d2e:	ac f5       	brge	.+106    	; 0xd9a <DIO_voidSetPinValue+0xb4>
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	d1 f0       	breq	.+52     	; 0xd6c <DIO_voidSetPinValue+0x86>
     d38:	81 c0       	rjmp	.+258    	; 0xe3c <DIO_voidSetPinValue+0x156>
     d3a:	2d 81       	ldd	r18, Y+5	; 0x05
     d3c:	3e 81       	ldd	r19, Y+6	; 0x06
     d3e:	25 30       	cpi	r18, 0x05	; 5
     d40:	31 05       	cpc	r19, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <DIO_voidSetPinValue+0x60>
     d44:	52 c0       	rjmp	.+164    	; 0xdea <DIO_voidSetPinValue+0x104>
     d46:	8d 81       	ldd	r24, Y+5	; 0x05
     d48:	9e 81       	ldd	r25, Y+6	; 0x06
     d4a:	85 30       	cpi	r24, 0x05	; 5
     d4c:	91 05       	cpc	r25, r1
     d4e:	0c f4       	brge	.+2      	; 0xd52 <DIO_voidSetPinValue+0x6c>
     d50:	3f c0       	rjmp	.+126    	; 0xdd0 <DIO_voidSetPinValue+0xea>
     d52:	2d 81       	ldd	r18, Y+5	; 0x05
     d54:	3e 81       	ldd	r19, Y+6	; 0x06
     d56:	26 30       	cpi	r18, 0x06	; 6
     d58:	31 05       	cpc	r19, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <DIO_voidSetPinValue+0x78>
     d5c:	54 c0       	rjmp	.+168    	; 0xe06 <DIO_voidSetPinValue+0x120>
     d5e:	8d 81       	ldd	r24, Y+5	; 0x05
     d60:	9e 81       	ldd	r25, Y+6	; 0x06
     d62:	87 30       	cpi	r24, 0x07	; 7
     d64:	91 05       	cpc	r25, r1
     d66:	09 f4       	brne	.+2      	; 0xd6a <DIO_voidSetPinValue+0x84>
     d68:	5d c0       	rjmp	.+186    	; 0xe24 <DIO_voidSetPinValue+0x13e>
     d6a:	68 c0       	rjmp	.+208    	; 0xe3c <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	e9 81       	ldd	r30, Y+1	; 0x01
     d72:	fa 81       	ldd	r31, Y+2	; 0x02
     d74:	98 2f       	mov	r25, r24
     d76:	91 70       	andi	r25, 0x01	; 1
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	89 2b       	or	r24, r25
     d7e:	82 83       	std	Z+2, r24	; 0x02
     d80:	5d c0       	rjmp	.+186    	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	81 70       	andi	r24, 0x01	; 1
     d8c:	98 2f       	mov	r25, r24
     d8e:	99 0f       	add	r25, r25
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	8d 7f       	andi	r24, 0xFD	; 253
     d94:	89 2b       	or	r24, r25
     d96:	82 83       	std	Z+2, r24	; 0x02
     d98:	51 c0       	rjmp	.+162    	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	e9 81       	ldd	r30, Y+1	; 0x01
     da0:	fa 81       	ldd	r31, Y+2	; 0x02
     da2:	81 70       	andi	r24, 0x01	; 1
     da4:	98 2f       	mov	r25, r24
     da6:	99 0f       	add	r25, r25
     da8:	99 0f       	add	r25, r25
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	89 2b       	or	r24, r25
     db0:	82 83       	std	Z+2, r24	; 0x02
     db2:	44 c0       	rjmp	.+136    	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	e9 81       	ldd	r30, Y+1	; 0x01
     dba:	fa 81       	ldd	r31, Y+2	; 0x02
     dbc:	81 70       	andi	r24, 0x01	; 1
     dbe:	98 2f       	mov	r25, r24
     dc0:	99 0f       	add	r25, r25
     dc2:	99 0f       	add	r25, r25
     dc4:	99 0f       	add	r25, r25
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	89 2b       	or	r24, r25
     dcc:	82 83       	std	Z+2, r24	; 0x02
     dce:	36 c0       	rjmp	.+108    	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
     dd0:	8c 81       	ldd	r24, Y+4	; 0x04
     dd2:	81 70       	andi	r24, 0x01	; 1
     dd4:	e9 81       	ldd	r30, Y+1	; 0x01
     dd6:	fa 81       	ldd	r31, Y+2	; 0x02
     dd8:	81 70       	andi	r24, 0x01	; 1
     dda:	98 2f       	mov	r25, r24
     ddc:	92 95       	swap	r25
     dde:	90 7f       	andi	r25, 0xF0	; 240
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	8f 7e       	andi	r24, 0xEF	; 239
     de4:	89 2b       	or	r24, r25
     de6:	82 83       	std	Z+2, r24	; 0x02
     de8:	29 c0       	rjmp	.+82     	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	81 70       	andi	r24, 0x01	; 1
     dee:	e9 81       	ldd	r30, Y+1	; 0x01
     df0:	fa 81       	ldd	r31, Y+2	; 0x02
     df2:	81 70       	andi	r24, 0x01	; 1
     df4:	98 2f       	mov	r25, r24
     df6:	92 95       	swap	r25
     df8:	99 0f       	add	r25, r25
     dfa:	90 7e       	andi	r25, 0xE0	; 224
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	8f 7d       	andi	r24, 0xDF	; 223
     e00:	89 2b       	or	r24, r25
     e02:	82 83       	std	Z+2, r24	; 0x02
     e04:	1b c0       	rjmp	.+54     	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	81 70       	andi	r24, 0x01	; 1
     e0a:	e9 81       	ldd	r30, Y+1	; 0x01
     e0c:	fa 81       	ldd	r31, Y+2	; 0x02
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	98 2f       	mov	r25, r24
     e12:	92 95       	swap	r25
     e14:	99 0f       	add	r25, r25
     e16:	99 0f       	add	r25, r25
     e18:	90 7c       	andi	r25, 0xC0	; 192
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	8f 7b       	andi	r24, 0xBF	; 191
     e1e:	89 2b       	or	r24, r25
     e20:	82 83       	std	Z+2, r24	; 0x02
     e22:	0c c0       	rjmp	.+24     	; 0xe3c <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	81 70       	andi	r24, 0x01	; 1
     e28:	e9 81       	ldd	r30, Y+1	; 0x01
     e2a:	fa 81       	ldd	r31, Y+2	; 0x02
     e2c:	98 2f       	mov	r25, r24
     e2e:	97 95       	ror	r25
     e30:	99 27       	eor	r25, r25
     e32:	97 95       	ror	r25
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	8f 77       	andi	r24, 0x7F	; 127
     e38:	89 2b       	or	r24, r25
     e3a:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
     e3c:	26 96       	adiw	r28, 0x06	; 6
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <DIO_voidGetPinValue+0x6>
     e54:	00 d0       	rcall	.+0      	; 0xe56 <DIO_voidGetPinValue+0x8>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <DIO_voidGetPinValue+0xa>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	9b 83       	std	Y+3, r25	; 0x03
     e5e:	8a 83       	std	Y+2, r24	; 0x02
     e60:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3e 83       	std	Y+6, r19	; 0x06
     e6a:	2d 83       	std	Y+5, r18	; 0x05
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	91 05       	cpc	r25, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <DIO_voidGetPinValue+0x2a>
     e76:	3e c0       	rjmp	.+124    	; 0xef4 <DIO_voidGetPinValue+0xa6>
     e78:	2d 81       	ldd	r18, Y+5	; 0x05
     e7a:	3e 81       	ldd	r19, Y+6	; 0x06
     e7c:	24 30       	cpi	r18, 0x04	; 4
     e7e:	31 05       	cpc	r19, r1
     e80:	7c f4       	brge	.+30     	; 0xea0 <DIO_voidGetPinValue+0x52>
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	91 05       	cpc	r25, r1
     e8a:	29 f1       	breq	.+74     	; 0xed6 <DIO_voidGetPinValue+0x88>
     e8c:	2d 81       	ldd	r18, Y+5	; 0x05
     e8e:	3e 81       	ldd	r19, Y+6	; 0x06
     e90:	22 30       	cpi	r18, 0x02	; 2
     e92:	31 05       	cpc	r19, r1
     e94:	3c f5       	brge	.+78     	; 0xee4 <DIO_voidGetPinValue+0x96>
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	b1 f0       	breq	.+44     	; 0xeca <DIO_voidGetPinValue+0x7c>
     e9e:	55 c0       	rjmp	.+170    	; 0xf4a <DIO_voidGetPinValue+0xfc>
     ea0:	2d 81       	ldd	r18, Y+5	; 0x05
     ea2:	3e 81       	ldd	r19, Y+6	; 0x06
     ea4:	25 30       	cpi	r18, 0x05	; 5
     ea6:	31 05       	cpc	r19, r1
     ea8:	b1 f1       	breq	.+108    	; 0xf16 <DIO_voidGetPinValue+0xc8>
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	85 30       	cpi	r24, 0x05	; 5
     eb0:	91 05       	cpc	r25, r1
     eb2:	4c f1       	brlt	.+82     	; 0xf06 <DIO_voidGetPinValue+0xb8>
     eb4:	2d 81       	ldd	r18, Y+5	; 0x05
     eb6:	3e 81       	ldd	r19, Y+6	; 0x06
     eb8:	26 30       	cpi	r18, 0x06	; 6
     eba:	31 05       	cpc	r19, r1
     ebc:	a9 f1       	breq	.+106    	; 0xf28 <DIO_voidGetPinValue+0xda>
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	87 30       	cpi	r24, 0x07	; 7
     ec4:	91 05       	cpc	r25, r1
     ec6:	d1 f1       	breq	.+116    	; 0xf3c <DIO_voidGetPinValue+0xee>
     ec8:	40 c0       	rjmp	.+128    	; 0xf4a <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
     eca:	ea 81       	ldd	r30, Y+2	; 0x02
     ecc:	fb 81       	ldd	r31, Y+3	; 0x03
     ece:	80 81       	ld	r24, Z
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	3a c0       	rjmp	.+116    	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
     ed6:	ea 81       	ldd	r30, Y+2	; 0x02
     ed8:	fb 81       	ldd	r31, Y+3	; 0x03
     eda:	80 81       	ld	r24, Z
     edc:	86 95       	lsr	r24
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	33 c0       	rjmp	.+102    	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
     ee4:	ea 81       	ldd	r30, Y+2	; 0x02
     ee6:	fb 81       	ldd	r31, Y+3	; 0x03
     ee8:	80 81       	ld	r24, Z
     eea:	86 95       	lsr	r24
     eec:	86 95       	lsr	r24
     eee:	81 70       	andi	r24, 0x01	; 1
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	2b c0       	rjmp	.+86     	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
     ef4:	ea 81       	ldd	r30, Y+2	; 0x02
     ef6:	fb 81       	ldd	r31, Y+3	; 0x03
     ef8:	80 81       	ld	r24, Z
     efa:	86 95       	lsr	r24
     efc:	86 95       	lsr	r24
     efe:	86 95       	lsr	r24
     f00:	81 70       	andi	r24, 0x01	; 1
     f02:	89 83       	std	Y+1, r24	; 0x01
     f04:	22 c0       	rjmp	.+68     	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
     f06:	ea 81       	ldd	r30, Y+2	; 0x02
     f08:	fb 81       	ldd	r31, Y+3	; 0x03
     f0a:	80 81       	ld	r24, Z
     f0c:	82 95       	swap	r24
     f0e:	8f 70       	andi	r24, 0x0F	; 15
     f10:	81 70       	andi	r24, 0x01	; 1
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	1a c0       	rjmp	.+52     	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
     f16:	ea 81       	ldd	r30, Y+2	; 0x02
     f18:	fb 81       	ldd	r31, Y+3	; 0x03
     f1a:	80 81       	ld	r24, Z
     f1c:	82 95       	swap	r24
     f1e:	86 95       	lsr	r24
     f20:	87 70       	andi	r24, 0x07	; 7
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
     f28:	ea 81       	ldd	r30, Y+2	; 0x02
     f2a:	fb 81       	ldd	r31, Y+3	; 0x03
     f2c:	80 81       	ld	r24, Z
     f2e:	82 95       	swap	r24
     f30:	86 95       	lsr	r24
     f32:	86 95       	lsr	r24
     f34:	83 70       	andi	r24, 0x03	; 3
     f36:	81 70       	andi	r24, 0x01	; 1
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
     f3c:	ea 81       	ldd	r30, Y+2	; 0x02
     f3e:	fb 81       	ldd	r31, Y+3	; 0x03
     f40:	80 81       	ld	r24, Z
     f42:	88 1f       	adc	r24, r24
     f44:	88 27       	eor	r24, r24
     f46:	88 1f       	adc	r24, r24
     f48:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f4c:	26 96       	adiw	r28, 0x06	; 6
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <DIO_voidSetPortDirection+0x6>
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9a 83       	std	Y+2, r25	; 0x02
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	81 83       	std	Z+1, r24	; 0x01
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <DIO_voidSetPortValue+0x6>
     f8a:	0f 92       	push	r0
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	82 83       	std	Z+2, r24	; 0x02
}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <DIO_voidGetPortValue+0x6>
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
     fb8:	e9 81       	ldd	r30, Y+1	; 0x01
     fba:	fa 81       	ldd	r31, Y+2	; 0x02
     fbc:	80 81       	ld	r24, Z
}
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
     fd0:	2e 97       	sbiw	r28, 0x0e	; 14
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	f8 94       	cli
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	0f be       	out	0x3f, r0	; 63
     fda:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
     fdc:	80 91 72 00 	lds	r24, 0x0072
     fe0:	90 91 73 00 	lds	r25, 0x0073
     fe4:	63 e0       	ldi	r22, 0x03	; 3
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
     fec:	80 91 72 00 	lds	r24, 0x0072
     ff0:	90 91 73 00 	lds	r25, 0x0073
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_voidSetPinDirection>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a8 e4       	ldi	r26, 0x48	; 72
    1002:	b2 e4       	ldi	r27, 0x42	; 66
    1004:	8b 87       	std	Y+11, r24	; 0x0b
    1006:	9c 87       	std	Y+12, r25	; 0x0c
    1008:	ad 87       	std	Y+13, r26	; 0x0d
    100a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100c:	6b 85       	ldd	r22, Y+11	; 0x0b
    100e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1010:	8d 85       	ldd	r24, Y+13	; 0x0d
    1012:	9e 85       	ldd	r25, Y+14	; 0x0e
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	4a e7       	ldi	r20, 0x7A	; 122
    101a:	55 e4       	ldi	r21, 0x45	; 69
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	8f 83       	std	Y+7, r24	; 0x07
    1026:	98 87       	std	Y+8, r25	; 0x08
    1028:	a9 87       	std	Y+9, r26	; 0x09
    102a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    102c:	6f 81       	ldd	r22, Y+7	; 0x07
    102e:	78 85       	ldd	r23, Y+8	; 0x08
    1030:	89 85       	ldd	r24, Y+9	; 0x09
    1032:	9a 85       	ldd	r25, Y+10	; 0x0a
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	2c f4       	brge	.+10     	; 0x104e <H_LCD_void_Init+0x86>
		__ticks = 1;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9e 83       	std	Y+6, r25	; 0x06
    104a:	8d 83       	std	Y+5, r24	; 0x05
    104c:	3f c0       	rjmp	.+126    	; 0x10cc <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    104e:	6f 81       	ldd	r22, Y+7	; 0x07
    1050:	78 85       	ldd	r23, Y+8	; 0x08
    1052:	89 85       	ldd	r24, Y+9	; 0x09
    1054:	9a 85       	ldd	r25, Y+10	; 0x0a
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1062:	18 16       	cp	r1, r24
    1064:	4c f5       	brge	.+82     	; 0x10b8 <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1066:	6b 85       	ldd	r22, Y+11	; 0x0b
    1068:	7c 85       	ldd	r23, Y+12	; 0x0c
    106a:	8d 85       	ldd	r24, Y+13	; 0x0d
    106c:	9e 85       	ldd	r25, Y+14	; 0x0e
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e2       	ldi	r20, 0x20	; 32
    1074:	51 e4       	ldi	r21, 0x41	; 65
    1076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	9e 83       	std	Y+6, r25	; 0x06
    108c:	8d 83       	std	Y+5, r24	; 0x05
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <H_LCD_void_Init+0xe6>
    1090:	80 e9       	ldi	r24, 0x90	; 144
    1092:	91 e0       	ldi	r25, 0x01	; 1
    1094:	9c 83       	std	Y+4, r25	; 0x04
    1096:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <H_LCD_void_Init+0xd4>
    10a0:	9c 83       	std	Y+4, r25	; 0x04
    10a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a4:	8d 81       	ldd	r24, Y+5	; 0x05
    10a6:	9e 81       	ldd	r25, Y+6	; 0x06
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	69 f7       	brne	.-38     	; 0x1090 <H_LCD_void_Init+0xc8>
    10b6:	14 c0       	rjmp	.+40     	; 0x10e0 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ba:	78 85       	ldd	r23, Y+8	; 0x08
    10bc:	89 85       	ldd	r24, Y+9	; 0x09
    10be:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	9a 83       	std	Y+2, r25	; 0x02
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <H_LCD_void_Init+0x110>
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPinDirection(pPORTB, Pin0, output);
    10e0:	80 91 74 00 	lds	r24, 0x0074
    10e4:	90 91 75 00 	lds	r25, 0x0075
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	41 e0       	ldi	r20, 0x01	; 1
    10ec:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin1, output);
    10f0:	80 91 74 00 	lds	r24, 0x0074
    10f4:	90 91 75 00 	lds	r25, 0x0075
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin2, output);
    1100:	80 91 74 00 	lds	r24, 0x0074
    1104:	90 91 75 00 	lds	r25, 0x0075
    1108:	62 e0       	ldi	r22, 0x02	; 2
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin4, output);
    1110:	80 91 74 00 	lds	r24, 0x0074
    1114:	90 91 75 00 	lds	r25, 0x0075
    1118:	64 e0       	ldi	r22, 0x04	; 4
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	0e 94 bf 05 	call	0xb7e	; 0xb7e <DIO_voidSetPinDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1120:	80 91 72 00 	lds	r24, 0x0072
    1124:	90 91 73 00 	lds	r25, 0x0073
    1128:	62 e0       	ldi	r22, 0x02	; 2
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1130:	82 e3       	ldi	r24, 0x32	; 50
    1132:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1136:	82 e3       	ldi	r24, 0x32	; 50
    1138:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    113c:	88 e2       	ldi	r24, 0x28	; 40
    113e:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    1142:	8e e0       	ldi	r24, 0x0E	; 14
    1144:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>


	/*
 #endif*/

}
    114e:	2e 96       	adiw	r28, 0x0e	; 14
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	6d 97       	sbiw	r28, 0x1d	; 29
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    1176:	80 91 72 00 	lds	r24, 0x0072
    117a:	90 91 73 00 	lds	r25, 0x0073
    117e:	63 e0       	ldi	r22, 0x03	; 3
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a0 e8       	ldi	r26, 0x80	; 128
    118c:	bf e3       	ldi	r27, 0x3F	; 63
    118e:	89 8f       	std	Y+25, r24	; 0x19
    1190:	9a 8f       	std	Y+26, r25	; 0x1a
    1192:	ab 8f       	std	Y+27, r26	; 0x1b
    1194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1196:	69 8d       	ldd	r22, Y+25	; 0x19
    1198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    119a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	4a e7       	ldi	r20, 0x7A	; 122
    11a4:	55 e4       	ldi	r21, 0x45	; 69
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8d 8b       	std	Y+21, r24	; 0x15
    11b0:	9e 8b       	std	Y+22, r25	; 0x16
    11b2:	af 8b       	std	Y+23, r26	; 0x17
    11b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11b6:	6d 89       	ldd	r22, Y+21	; 0x15
    11b8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ba:	8f 89       	ldd	r24, Y+23	; 0x17
    11bc:	98 8d       	ldd	r25, Y+24	; 0x18
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e8       	ldi	r20, 0x80	; 128
    11c4:	5f e3       	ldi	r21, 0x3F	; 63
    11c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ca:	88 23       	and	r24, r24
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <H_LCD_void_sendData+0x78>
		__ticks = 1;
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    11d8:	6d 89       	ldd	r22, Y+21	; 0x15
    11da:	7e 89       	ldd	r23, Y+22	; 0x16
    11dc:	8f 89       	ldd	r24, Y+23	; 0x17
    11de:	98 8d       	ldd	r25, Y+24	; 0x18
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	3f ef       	ldi	r19, 0xFF	; 255
    11e4:	4f e7       	ldi	r20, 0x7F	; 127
    11e6:	57 e4       	ldi	r21, 0x47	; 71
    11e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	4c f5       	brge	.+82     	; 0x1242 <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11f0:	69 8d       	ldd	r22, Y+25	; 0x19
    11f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <H_LCD_void_sendData+0xd8>
    121a:	80 e9       	ldi	r24, 0x90	; 144
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	9a 8b       	std	Y+18, r25	; 0x12
    1220:	89 8b       	std	Y+17, r24	; 0x11
    1222:	89 89       	ldd	r24, Y+17	; 0x11
    1224:	9a 89       	ldd	r25, Y+18	; 0x12
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <H_LCD_void_sendData+0xc6>
    122a:	9a 8b       	std	Y+18, r25	; 0x12
    122c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9c 8b       	std	Y+20, r25	; 0x14
    1236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1238:	8b 89       	ldd	r24, Y+19	; 0x13
    123a:	9c 89       	ldd	r25, Y+20	; 0x14
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	69 f7       	brne	.-38     	; 0x121a <H_LCD_void_sendData+0xba>
    1240:	14 c0       	rjmp	.+40     	; 0x126a <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1242:	6d 89       	ldd	r22, Y+21	; 0x15
    1244:	7e 89       	ldd	r23, Y+22	; 0x16
    1246:	8f 89       	ldd	r24, Y+23	; 0x17
    1248:	98 8d       	ldd	r25, Y+24	; 0x18
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9c 8b       	std	Y+20, r25	; 0x14
    1254:	8b 8b       	std	Y+19, r24	; 0x13
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	98 8b       	std	Y+16, r25	; 0x10
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	98 89       	ldd	r25, Y+16	; 0x10
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <H_LCD_void_sendData+0x102>
    1266:	98 8b       	std	Y+16, r25	; 0x10
    1268:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    126a:	80 91 72 00 	lds	r24, 0x0072
    126e:	90 91 73 00 	lds	r25, 0x0073
    1272:	62 e0       	ldi	r22, 0x02	; 2
    1274:	40 e0       	ldi	r20, 0x00	; 0
    1276:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e8       	ldi	r26, 0x80	; 128
    1280:	bf e3       	ldi	r27, 0x3F	; 63
    1282:	8b 87       	std	Y+11, r24	; 0x0b
    1284:	9c 87       	std	Y+12, r25	; 0x0c
    1286:	ad 87       	std	Y+13, r26	; 0x0d
    1288:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    128a:	6b 85       	ldd	r22, Y+11	; 0x0b
    128c:	7c 85       	ldd	r23, Y+12	; 0x0c
    128e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1290:	9e 85       	ldd	r25, Y+14	; 0x0e
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	55 e4       	ldi	r21, 0x45	; 69
    129a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129e:	dc 01       	movw	r26, r24
    12a0:	cb 01       	movw	r24, r22
    12a2:	8f 83       	std	Y+7, r24	; 0x07
    12a4:	98 87       	std	Y+8, r25	; 0x08
    12a6:	a9 87       	std	Y+9, r26	; 0x09
    12a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12aa:	6f 81       	ldd	r22, Y+7	; 0x07
    12ac:	78 85       	ldd	r23, Y+8	; 0x08
    12ae:	89 85       	ldd	r24, Y+9	; 0x09
    12b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	40 e8       	ldi	r20, 0x80	; 128
    12b8:	5f e3       	ldi	r21, 0x3F	; 63
    12ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12be:	88 23       	and	r24, r24
    12c0:	2c f4       	brge	.+10     	; 0x12cc <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9e 83       	std	Y+6, r25	; 0x06
    12c8:	8d 83       	std	Y+5, r24	; 0x05
    12ca:	3f c0       	rjmp	.+126    	; 0x134a <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    12cc:	6f 81       	ldd	r22, Y+7	; 0x07
    12ce:	78 85       	ldd	r23, Y+8	; 0x08
    12d0:	89 85       	ldd	r24, Y+9	; 0x09
    12d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	4f e7       	ldi	r20, 0x7F	; 127
    12da:	57 e4       	ldi	r21, 0x47	; 71
    12dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e0:	18 16       	cp	r1, r24
    12e2:	4c f5       	brge	.+82     	; 0x1336 <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	bc 01       	movw	r22, r24
    12fe:	cd 01       	movw	r24, r26
    1300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9e 83       	std	Y+6, r25	; 0x06
    130a:	8d 83       	std	Y+5, r24	; 0x05
    130c:	0f c0       	rjmp	.+30     	; 0x132c <H_LCD_void_sendData+0x1cc>
    130e:	80 e9       	ldi	r24, 0x90	; 144
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	9c 83       	std	Y+4, r25	; 0x04
    1314:	8b 83       	std	Y+3, r24	; 0x03
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <H_LCD_void_sendData+0x1ba>
    131e:	9c 83       	std	Y+4, r25	; 0x04
    1320:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	69 f7       	brne	.-38     	; 0x130e <H_LCD_void_sendData+0x1ae>
    1334:	14 c0       	rjmp	.+40     	; 0x135e <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	6f 81       	ldd	r22, Y+7	; 0x07
    1338:	78 85       	ldd	r23, Y+8	; 0x08
    133a:	89 85       	ldd	r24, Y+9	; 0x09
    133c:	9a 85       	ldd	r25, Y+10	; 0x0a
    133e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <H_LCD_void_sendData+0x1f6>
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    135e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1360:	0e 94 3b 0c 	call	0x1876	; 0x1876 <H_LCD_void_latchByte>
}
    1364:	6d 96       	adiw	r28, 0x1d	; 29
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	6d 97       	sbiw	r28, 0x1d	; 29
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    138c:	80 91 72 00 	lds	r24, 0x0072
    1390:	90 91 73 00 	lds	r25, 0x0073
    1394:	63 e0       	ldi	r22, 0x03	; 3
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a0 e8       	ldi	r26, 0x80	; 128
    13a2:	bf e3       	ldi	r27, 0x3F	; 63
    13a4:	89 8f       	std	Y+25, r24	; 0x19
    13a6:	9a 8f       	std	Y+26, r25	; 0x1a
    13a8:	ab 8f       	std	Y+27, r26	; 0x1b
    13aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ac:	69 8d       	ldd	r22, Y+25	; 0x19
    13ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	4a e7       	ldi	r20, 0x7A	; 122
    13ba:	55 e4       	ldi	r21, 0x45	; 69
    13bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	8d 8b       	std	Y+21, r24	; 0x15
    13c6:	9e 8b       	std	Y+22, r25	; 0x16
    13c8:	af 8b       	std	Y+23, r26	; 0x17
    13ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13cc:	6d 89       	ldd	r22, Y+21	; 0x15
    13ce:	7e 89       	ldd	r23, Y+22	; 0x16
    13d0:	8f 89       	ldd	r24, Y+23	; 0x17
    13d2:	98 8d       	ldd	r25, Y+24	; 0x18
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	40 e8       	ldi	r20, 0x80	; 128
    13da:	5f e3       	ldi	r21, 0x3F	; 63
    13dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e0:	88 23       	and	r24, r24
    13e2:	2c f4       	brge	.+10     	; 0x13ee <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	9c 8b       	std	Y+20, r25	; 0x14
    13ea:	8b 8b       	std	Y+19, r24	; 0x13
    13ec:	3f c0       	rjmp	.+126    	; 0x146c <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    13ee:	6d 89       	ldd	r22, Y+21	; 0x15
    13f0:	7e 89       	ldd	r23, Y+22	; 0x16
    13f2:	8f 89       	ldd	r24, Y+23	; 0x17
    13f4:	98 8d       	ldd	r25, Y+24	; 0x18
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	3f ef       	ldi	r19, 0xFF	; 255
    13fa:	4f e7       	ldi	r20, 0x7F	; 127
    13fc:	57 e4       	ldi	r21, 0x47	; 71
    13fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1402:	18 16       	cp	r1, r24
    1404:	4c f5       	brge	.+82     	; 0x1458 <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1406:	69 8d       	ldd	r22, Y+25	; 0x19
    1408:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e2       	ldi	r20, 0x20	; 32
    1414:	51 e4       	ldi	r21, 0x41	; 65
    1416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	9c 8b       	std	Y+20, r25	; 0x14
    142c:	8b 8b       	std	Y+19, r24	; 0x13
    142e:	0f c0       	rjmp	.+30     	; 0x144e <H_LCD_void_sendCommand+0xd8>
    1430:	80 e9       	ldi	r24, 0x90	; 144
    1432:	91 e0       	ldi	r25, 0x01	; 1
    1434:	9a 8b       	std	Y+18, r25	; 0x12
    1436:	89 8b       	std	Y+17, r24	; 0x11
    1438:	89 89       	ldd	r24, Y+17	; 0x11
    143a:	9a 89       	ldd	r25, Y+18	; 0x12
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <H_LCD_void_sendCommand+0xc6>
    1440:	9a 8b       	std	Y+18, r25	; 0x12
    1442:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1444:	8b 89       	ldd	r24, Y+19	; 0x13
    1446:	9c 89       	ldd	r25, Y+20	; 0x14
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	9c 8b       	std	Y+20, r25	; 0x14
    144c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144e:	8b 89       	ldd	r24, Y+19	; 0x13
    1450:	9c 89       	ldd	r25, Y+20	; 0x14
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	69 f7       	brne	.-38     	; 0x1430 <H_LCD_void_sendCommand+0xba>
    1456:	14 c0       	rjmp	.+40     	; 0x1480 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1458:	6d 89       	ldd	r22, Y+21	; 0x15
    145a:	7e 89       	ldd	r23, Y+22	; 0x16
    145c:	8f 89       	ldd	r24, Y+23	; 0x17
    145e:	98 8d       	ldd	r25, Y+24	; 0x18
    1460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	9c 8b       	std	Y+20, r25	; 0x14
    146a:	8b 8b       	std	Y+19, r24	; 0x13
    146c:	8b 89       	ldd	r24, Y+19	; 0x13
    146e:	9c 89       	ldd	r25, Y+20	; 0x14
    1470:	98 8b       	std	Y+16, r25	; 0x10
    1472:	8f 87       	std	Y+15, r24	; 0x0f
    1474:	8f 85       	ldd	r24, Y+15	; 0x0f
    1476:	98 89       	ldd	r25, Y+16	; 0x10
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <H_LCD_void_sendCommand+0x102>
    147c:	98 8b       	std	Y+16, r25	; 0x10
    147e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1480:	80 91 72 00 	lds	r24, 0x0072
    1484:	90 91 73 00 	lds	r25, 0x0073
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e8       	ldi	r26, 0x80	; 128
    1496:	bf e3       	ldi	r27, 0x3F	; 63
    1498:	8b 87       	std	Y+11, r24	; 0x0b
    149a:	9c 87       	std	Y+12, r25	; 0x0c
    149c:	ad 87       	std	Y+13, r26	; 0x0d
    149e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	4a e7       	ldi	r20, 0x7A	; 122
    14ae:	55 e4       	ldi	r21, 0x45	; 69
    14b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	8f 83       	std	Y+7, r24	; 0x07
    14ba:	98 87       	std	Y+8, r25	; 0x08
    14bc:	a9 87       	std	Y+9, r26	; 0x09
    14be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c0:	6f 81       	ldd	r22, Y+7	; 0x07
    14c2:	78 85       	ldd	r23, Y+8	; 0x08
    14c4:	89 85       	ldd	r24, Y+9	; 0x09
    14c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	40 e8       	ldi	r20, 0x80	; 128
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d4:	88 23       	and	r24, r24
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9e 83       	std	Y+6, r25	; 0x06
    14de:	8d 83       	std	Y+5, r24	; 0x05
    14e0:	3f c0       	rjmp	.+126    	; 0x1560 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	3f ef       	ldi	r19, 0xFF	; 255
    14ee:	4f e7       	ldi	r20, 0x7F	; 127
    14f0:	57 e4       	ldi	r21, 0x47	; 71
    14f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f6:	18 16       	cp	r1, r24
    14f8:	4c f5       	brge	.+82     	; 0x154c <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	9e 85       	ldd	r25, Y+14	; 0x0e
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e2       	ldi	r20, 0x20	; 32
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	bc 01       	movw	r22, r24
    1514:	cd 01       	movw	r24, r26
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	8d 83       	std	Y+5, r24	; 0x05
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <H_LCD_void_sendCommand+0x1cc>
    1524:	80 e9       	ldi	r24, 0x90	; 144
    1526:	91 e0       	ldi	r25, 0x01	; 1
    1528:	9c 83       	std	Y+4, r25	; 0x04
    152a:	8b 83       	std	Y+3, r24	; 0x03
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	f1 f7       	brne	.-4      	; 0x1530 <H_LCD_void_sendCommand+0x1ba>
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1542:	8d 81       	ldd	r24, Y+5	; 0x05
    1544:	9e 81       	ldd	r25, Y+6	; 0x06
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	69 f7       	brne	.-38     	; 0x1524 <H_LCD_void_sendCommand+0x1ae>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154c:	6f 81       	ldd	r22, Y+7	; 0x07
    154e:	78 85       	ldd	r23, Y+8	; 0x08
    1550:	89 85       	ldd	r24, Y+9	; 0x09
    1552:	9a 85       	ldd	r25, Y+10	; 0x0a
    1554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	9e 81       	ldd	r25, Y+6	; 0x06
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	9a 81       	ldd	r25, Y+2	; 0x02
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <H_LCD_void_sendCommand+0x1f6>
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    1574:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1576:	0e 94 3b 0c 	call	0x1876	; 0x1876 <H_LCD_void_latchByte>
}
    157a:	6d 96       	adiw	r28, 0x1d	; 29
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <H_LCD_void_sendString+0x6>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9b 83       	std	Y+3, r25	; 0x03
    159a:	8a 83       	std	Y+2, r24	; 0x02
    159c:	0e c0       	rjmp	.+28     	; 0x15ba <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	fc 01       	movw	r30, r24
    15aa:	e2 0f       	add	r30, r18
    15ac:	f3 1f       	adc	r31, r19
    15ae:	80 81       	ld	r24, Z
    15b0:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
		i++;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	8f 5f       	subi	r24, 0xFF	; 255
    15b8:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	fc 01       	movw	r30, r24
    15c6:	e2 0f       	add	r30, r18
    15c8:	f3 1f       	adc	r31, r19
    15ca:	80 81       	ld	r24, Z
    15cc:	88 23       	and	r24, r24
    15ce:	39 f7       	brne	.-50     	; 0x159e <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	6c 97       	sbiw	r28, 0x1c	; 28
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	de bf       	out	0x3e, r29	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    15f0:	80 91 72 00 	lds	r24, 0x0072
    15f4:	90 91 73 00 	lds	r25, 0x0073
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 e8       	ldi	r26, 0x80	; 128
    1606:	bf e3       	ldi	r27, 0x3F	; 63
    1608:	89 8f       	std	Y+25, r24	; 0x19
    160a:	9a 8f       	std	Y+26, r25	; 0x1a
    160c:	ab 8f       	std	Y+27, r26	; 0x1b
    160e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	69 8d       	ldd	r22, Y+25	; 0x19
    1612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	55 e4       	ldi	r21, 0x45	; 69
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	8d 8b       	std	Y+21, r24	; 0x15
    162a:	9e 8b       	std	Y+22, r25	; 0x16
    162c:	af 8b       	std	Y+23, r26	; 0x17
    162e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1630:	6d 89       	ldd	r22, Y+21	; 0x15
    1632:	7e 89       	ldd	r23, Y+22	; 0x16
    1634:	8f 89       	ldd	r24, Y+23	; 0x17
    1636:	98 8d       	ldd	r25, Y+24	; 0x18
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c 8b       	std	Y+20, r25	; 0x14
    164e:	8b 8b       	std	Y+19, r24	; 0x13
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    1652:	6d 89       	ldd	r22, Y+21	; 0x15
    1654:	7e 89       	ldd	r23, Y+22	; 0x16
    1656:	8f 89       	ldd	r24, Y+23	; 0x17
    1658:	98 8d       	ldd	r25, Y+24	; 0x18
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	69 8d       	ldd	r22, Y+25	; 0x19
    166c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    166e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	9c 8b       	std	Y+20, r25	; 0x14
    1690:	8b 8b       	std	Y+19, r24	; 0x13
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <H_LCD_void_clearDisplay+0xd6>
    1694:	80 e9       	ldi	r24, 0x90	; 144
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	9a 8b       	std	Y+18, r25	; 0x12
    169a:	89 8b       	std	Y+17, r24	; 0x11
    169c:	89 89       	ldd	r24, Y+17	; 0x11
    169e:	9a 89       	ldd	r25, Y+18	; 0x12
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <H_LCD_void_clearDisplay+0xc4>
    16a4:	9a 8b       	std	Y+18, r25	; 0x12
    16a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8b 89       	ldd	r24, Y+19	; 0x13
    16aa:	9c 89       	ldd	r25, Y+20	; 0x14
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	9c 8b       	std	Y+20, r25	; 0x14
    16b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8b 89       	ldd	r24, Y+19	; 0x13
    16b4:	9c 89       	ldd	r25, Y+20	; 0x14
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <H_LCD_void_clearDisplay+0xb8>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	6d 89       	ldd	r22, Y+21	; 0x15
    16be:	7e 89       	ldd	r23, Y+22	; 0x16
    16c0:	8f 89       	ldd	r24, Y+23	; 0x17
    16c2:	98 8d       	ldd	r25, Y+24	; 0x18
    16c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	8b 89       	ldd	r24, Y+19	; 0x13
    16d2:	9c 89       	ldd	r25, Y+20	; 0x14
    16d4:	98 8b       	std	Y+16, r25	; 0x10
    16d6:	8f 87       	std	Y+15, r24	; 0x0f
    16d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16da:	98 89       	ldd	r25, Y+16	; 0x10
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <H_LCD_void_clearDisplay+0x100>
    16e0:	98 8b       	std	Y+16, r25	; 0x10
    16e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    16e4:	80 91 72 00 	lds	r24, 0x0072
    16e8:	90 91 73 00 	lds	r25, 0x0073
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	a0 e8       	ldi	r26, 0x80	; 128
    16fa:	bf e3       	ldi	r27, 0x3F	; 63
    16fc:	8b 87       	std	Y+11, r24	; 0x0b
    16fe:	9c 87       	std	Y+12, r25	; 0x0c
    1700:	ad 87       	std	Y+13, r26	; 0x0d
    1702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1704:	6b 85       	ldd	r22, Y+11	; 0x0b
    1706:	7c 85       	ldd	r23, Y+12	; 0x0c
    1708:	8d 85       	ldd	r24, Y+13	; 0x0d
    170a:	9e 85       	ldd	r25, Y+14	; 0x0e
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4a e7       	ldi	r20, 0x7A	; 122
    1712:	55 e4       	ldi	r21, 0x45	; 69
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8f 83       	std	Y+7, r24	; 0x07
    171e:	98 87       	std	Y+8, r25	; 0x08
    1720:	a9 87       	std	Y+9, r26	; 0x09
    1722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1724:	6f 81       	ldd	r22, Y+7	; 0x07
    1726:	78 85       	ldd	r23, Y+8	; 0x08
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	9a 85       	ldd	r25, Y+10	; 0x0a
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e8       	ldi	r20, 0x80	; 128
    1732:	5f e3       	ldi	r21, 0x3F	; 63
    1734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1738:	88 23       	and	r24, r24
    173a:	2c f4       	brge	.+10     	; 0x1746 <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	3f c0       	rjmp	.+126    	; 0x17c4 <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	3f ef       	ldi	r19, 0xFF	; 255
    1752:	4f e7       	ldi	r20, 0x7F	; 127
    1754:	57 e4       	ldi	r21, 0x47	; 71
    1756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175a:	18 16       	cp	r1, r24
    175c:	4c f5       	brge	.+82     	; 0x17b0 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1760:	7c 85       	ldd	r23, Y+12	; 0x0c
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e2       	ldi	r20, 0x20	; 32
    176c:	51 e4       	ldi	r21, 0x41	; 65
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	bc 01       	movw	r22, r24
    1778:	cd 01       	movw	r24, r26
    177a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177e:	dc 01       	movw	r26, r24
    1780:	cb 01       	movw	r24, r22
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
    1786:	0f c0       	rjmp	.+30     	; 0x17a6 <H_LCD_void_clearDisplay+0x1ca>
    1788:	80 e9       	ldi	r24, 0x90	; 144
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	9c 83       	std	Y+4, r25	; 0x04
    178e:	8b 83       	std	Y+3, r24	; 0x03
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	f1 f7       	brne	.-4      	; 0x1794 <H_LCD_void_clearDisplay+0x1b8>
    1798:	9c 83       	std	Y+4, r25	; 0x04
    179a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	00 97       	sbiw	r24, 0x00	; 0
    17ac:	69 f7       	brne	.-38     	; 0x1788 <H_LCD_void_clearDisplay+0x1ac>
    17ae:	14 c0       	rjmp	.+40     	; 0x17d8 <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	9e 83       	std	Y+6, r25	; 0x06
    17c2:	8d 83       	std	Y+5, r24	; 0x05
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	9a 81       	ldd	r25, Y+2	; 0x02
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	f1 f7       	brne	.-4      	; 0x17d0 <H_LCD_void_clearDisplay+0x1f4>
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	0e 94 3b 0c 	call	0x1876	; 0x1876 <H_LCD_void_latchByte>
}
    17de:	6c 96       	adiw	r28, 0x1c	; 28
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <H_LCD_void_gotoXY+0x6>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <H_LCD_void_gotoXY+0x8>
    17f8:	0f 92       	push	r0
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	8a 83       	std	Y+2, r24	; 0x02
    1800:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    1802:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3d 83       	std	Y+5, r19	; 0x05
    180c:	2c 83       	std	Y+4, r18	; 0x04
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	9d 81       	ldd	r25, Y+5	; 0x05
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	c1 f0       	breq	.+48     	; 0x1848 <H_LCD_void_gotoXY+0x58>
    1818:	2c 81       	ldd	r18, Y+4	; 0x04
    181a:	3d 81       	ldd	r19, Y+5	; 0x05
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <H_LCD_void_gotoXY+0x3c>
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	9d 81       	ldd	r25, Y+5	; 0x05
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <H_LCD_void_gotoXY+0x52>
    182a:	19 c0       	rjmp	.+50     	; 0x185e <H_LCD_void_gotoXY+0x6e>
    182c:	2c 81       	ldd	r18, Y+4	; 0x04
    182e:	3d 81       	ldd	r19, Y+5	; 0x05
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	69 f0       	breq	.+26     	; 0x1850 <H_LCD_void_gotoXY+0x60>
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	61 f0       	breq	.+24     	; 0x1858 <H_LCD_void_gotoXY+0x68>
    1840:	0e c0       	rjmp	.+28     	; 0x185e <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	89 83       	std	Y+1, r24	; 0x01
    1846:	0b c0       	rjmp	.+22     	; 0x185e <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	80 5c       	subi	r24, 0xC0	; 192
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	07 c0       	rjmp	.+14     	; 0x185e <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	80 5f       	subi	r24, 0xF0	; 240
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	03 c0       	rjmp	.+6      	; 0x185e <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	80 5b       	subi	r24, 0xB0	; 176
    185c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	e9 97       	sbiw	r28, 0x39	; 57
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    188c:	20 91 74 00 	lds	r18, 0x0074
    1890:	30 91 75 00 	lds	r19, 0x0075
    1894:	89 ad       	ldd	r24, Y+57	; 0x39
    1896:	48 2f       	mov	r20, r24
    1898:	44 1f       	adc	r20, r20
    189a:	44 27       	eor	r20, r20
    189c:	44 1f       	adc	r20, r20
    189e:	c9 01       	movw	r24, r18
    18a0:	64 e0       	ldi	r22, 0x04	; 4
    18a2:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    18a6:	20 91 74 00 	lds	r18, 0x0074
    18aa:	30 91 75 00 	lds	r19, 0x0075
    18ae:	89 ad       	ldd	r24, Y+57	; 0x39
    18b0:	82 95       	swap	r24
    18b2:	86 95       	lsr	r24
    18b4:	86 95       	lsr	r24
    18b6:	83 70       	andi	r24, 0x03	; 3
    18b8:	48 2f       	mov	r20, r24
    18ba:	41 70       	andi	r20, 0x01	; 1
    18bc:	c9 01       	movw	r24, r18
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    18c4:	20 91 74 00 	lds	r18, 0x0074
    18c8:	30 91 75 00 	lds	r19, 0x0075
    18cc:	89 ad       	ldd	r24, Y+57	; 0x39
    18ce:	82 95       	swap	r24
    18d0:	86 95       	lsr	r24
    18d2:	87 70       	andi	r24, 0x07	; 7
    18d4:	48 2f       	mov	r20, r24
    18d6:	41 70       	andi	r20, 0x01	; 1
    18d8:	c9 01       	movw	r24, r18
    18da:	61 e0       	ldi	r22, 0x01	; 1
    18dc:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    18e0:	20 91 74 00 	lds	r18, 0x0074
    18e4:	30 91 75 00 	lds	r19, 0x0075
    18e8:	89 ad       	ldd	r24, Y+57	; 0x39
    18ea:	82 95       	swap	r24
    18ec:	8f 70       	andi	r24, 0x0F	; 15
    18ee:	48 2f       	mov	r20, r24
    18f0:	41 70       	andi	r20, 0x01	; 1
    18f2:	c9 01       	movw	r24, r18
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    18fa:	80 91 72 00 	lds	r24, 0x0072
    18fe:	90 91 73 00 	lds	r25, 0x0073
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	41 e0       	ldi	r20, 0x01	; 1
    1906:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e8       	ldi	r26, 0x80	; 128
    1910:	bf e3       	ldi	r27, 0x3F	; 63
    1912:	8d ab       	std	Y+53, r24	; 0x35
    1914:	9e ab       	std	Y+54, r25	; 0x36
    1916:	af ab       	std	Y+55, r26	; 0x37
    1918:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	6d a9       	ldd	r22, Y+53	; 0x35
    191c:	7e a9       	ldd	r23, Y+54	; 0x36
    191e:	8f a9       	ldd	r24, Y+55	; 0x37
    1920:	98 ad       	ldd	r25, Y+56	; 0x38
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a e7       	ldi	r20, 0x7A	; 122
    1928:	55 e4       	ldi	r21, 0x45	; 69
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	89 ab       	std	Y+49, r24	; 0x31
    1934:	9a ab       	std	Y+50, r25	; 0x32
    1936:	ab ab       	std	Y+51, r26	; 0x33
    1938:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    193a:	69 a9       	ldd	r22, Y+49	; 0x31
    193c:	7a a9       	ldd	r23, Y+50	; 0x32
    193e:	8b a9       	ldd	r24, Y+51	; 0x33
    1940:	9c a9       	ldd	r25, Y+52	; 0x34
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	2c f4       	brge	.+10     	; 0x195c <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	98 ab       	std	Y+48, r25	; 0x30
    1958:	8f a7       	std	Y+47, r24	; 0x2f
    195a:	3f c0       	rjmp	.+126    	; 0x19da <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	3f ef       	ldi	r19, 0xFF	; 255
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	57 e4       	ldi	r21, 0x47	; 71
    196c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1970:	18 16       	cp	r1, r24
    1972:	4c f5       	brge	.+82     	; 0x19c6 <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	6d a9       	ldd	r22, Y+53	; 0x35
    1976:	7e a9       	ldd	r23, Y+54	; 0x36
    1978:	8f a9       	ldd	r24, Y+55	; 0x37
    197a:	98 ad       	ldd	r25, Y+56	; 0x38
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <H_LCD_void_latchByte+0x146>
    199e:	80 e9       	ldi	r24, 0x90	; 144
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	9e a7       	std	Y+46, r25	; 0x2e
    19a4:	8d a7       	std	Y+45, r24	; 0x2d
    19a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <H_LCD_void_latchByte+0x134>
    19ae:	9e a7       	std	Y+46, r25	; 0x2e
    19b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b4:	98 a9       	ldd	r25, Y+48	; 0x30
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	98 ab       	std	Y+48, r25	; 0x30
    19ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19be:	98 a9       	ldd	r25, Y+48	; 0x30
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	69 f7       	brne	.-38     	; 0x199e <H_LCD_void_latchByte+0x128>
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	69 a9       	ldd	r22, Y+49	; 0x31
    19c8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ca:	8b a9       	ldd	r24, Y+51	; 0x33
    19cc:	9c a9       	ldd	r25, Y+52	; 0x34
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	98 ab       	std	Y+48, r25	; 0x30
    19d8:	8f a7       	std	Y+47, r24	; 0x2f
    19da:	8f a5       	ldd	r24, Y+47	; 0x2f
    19dc:	98 a9       	ldd	r25, Y+48	; 0x30
    19de:	9c a7       	std	Y+44, r25	; 0x2c
    19e0:	8b a7       	std	Y+43, r24	; 0x2b
    19e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <H_LCD_void_latchByte+0x170>
    19ea:	9c a7       	std	Y+44, r25	; 0x2c
    19ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    19ee:	80 91 72 00 	lds	r24, 0x0072
    19f2:	90 91 73 00 	lds	r25, 0x0073
    19f6:	62 e0       	ldi	r22, 0x02	; 2
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a0 ea       	ldi	r26, 0xA0	; 160
    1a04:	b0 e4       	ldi	r27, 0x40	; 64
    1a06:	8f a3       	std	Y+39, r24	; 0x27
    1a08:	98 a7       	std	Y+40, r25	; 0x28
    1a0a:	a9 a7       	std	Y+41, r26	; 0x29
    1a0c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a10:	78 a5       	ldd	r23, Y+40	; 0x28
    1a12:	89 a5       	ldd	r24, Y+41	; 0x29
    1a14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a e7       	ldi	r20, 0x7A	; 122
    1a1c:	55 e4       	ldi	r21, 0x45	; 69
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8b a3       	std	Y+35, r24	; 0x23
    1a28:	9c a3       	std	Y+36, r25	; 0x24
    1a2a:	ad a3       	std	Y+37, r26	; 0x25
    1a2c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a2e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a30:	7c a1       	ldd	r23, Y+36	; 0x24
    1a32:	8d a1       	ldd	r24, Y+37	; 0x25
    1a34:	9e a1       	ldd	r25, Y+38	; 0x26
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9a a3       	std	Y+34, r25	; 0x22
    1a4c:	89 a3       	std	Y+33, r24	; 0x21
    1a4e:	3f c0       	rjmp	.+126    	; 0x1ace <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    1a50:	6b a1       	ldd	r22, Y+35	; 0x23
    1a52:	7c a1       	ldd	r23, Y+36	; 0x24
    1a54:	8d a1       	ldd	r24, Y+37	; 0x25
    1a56:	9e a1       	ldd	r25, Y+38	; 0x26
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	3f ef       	ldi	r19, 0xFF	; 255
    1a5c:	4f e7       	ldi	r20, 0x7F	; 127
    1a5e:	57 e4       	ldi	r21, 0x47	; 71
    1a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a64:	18 16       	cp	r1, r24
    1a66:	4c f5       	brge	.+82     	; 0x1aba <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a68:	6f a1       	ldd	r22, Y+39	; 0x27
    1a6a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a6c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a6e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e2       	ldi	r20, 0x20	; 32
    1a76:	51 e4       	ldi	r21, 0x41	; 65
    1a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9a a3       	std	Y+34, r25	; 0x22
    1a8e:	89 a3       	std	Y+33, r24	; 0x21
    1a90:	0f c0       	rjmp	.+30     	; 0x1ab0 <H_LCD_void_latchByte+0x23a>
    1a92:	80 e9       	ldi	r24, 0x90	; 144
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	98 a3       	std	Y+32, r25	; 0x20
    1a98:	8f 8f       	std	Y+31, r24	; 0x1f
    1a9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a9c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	f1 f7       	brne	.-4      	; 0x1a9e <H_LCD_void_latchByte+0x228>
    1aa2:	98 a3       	std	Y+32, r25	; 0x20
    1aa4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa6:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	69 f7       	brne	.-38     	; 0x1a92 <H_LCD_void_latchByte+0x21c>
    1ab8:	14 c0       	rjmp	.+40     	; 0x1ae2 <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aba:	6b a1       	ldd	r22, Y+35	; 0x23
    1abc:	7c a1       	ldd	r23, Y+36	; 0x24
    1abe:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	9a a3       	std	Y+34, r25	; 0x22
    1acc:	89 a3       	std	Y+33, r24	; 0x21
    1ace:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad4:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <H_LCD_void_latchByte+0x264>
    1ade:	9e 8f       	std	Y+30, r25	; 0x1e
    1ae0:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    1ae2:	20 91 74 00 	lds	r18, 0x0074
    1ae6:	30 91 75 00 	lds	r19, 0x0075
    1aea:	89 ad       	ldd	r24, Y+57	; 0x39
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	86 95       	lsr	r24
    1af2:	48 2f       	mov	r20, r24
    1af4:	41 70       	andi	r20, 0x01	; 1
    1af6:	c9 01       	movw	r24, r18
    1af8:	64 e0       	ldi	r22, 0x04	; 4
    1afa:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    1afe:	20 91 74 00 	lds	r18, 0x0074
    1b02:	30 91 75 00 	lds	r19, 0x0075
    1b06:	89 ad       	ldd	r24, Y+57	; 0x39
    1b08:	86 95       	lsr	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	41 70       	andi	r20, 0x01	; 1
    1b10:	c9 01       	movw	r24, r18
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    1b18:	20 91 74 00 	lds	r18, 0x0074
    1b1c:	30 91 75 00 	lds	r19, 0x0075
    1b20:	89 ad       	ldd	r24, Y+57	; 0x39
    1b22:	86 95       	lsr	r24
    1b24:	48 2f       	mov	r20, r24
    1b26:	41 70       	andi	r20, 0x01	; 1
    1b28:	c9 01       	movw	r24, r18
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    1b30:	20 91 74 00 	lds	r18, 0x0074
    1b34:	30 91 75 00 	lds	r19, 0x0075
    1b38:	89 ad       	ldd	r24, Y+57	; 0x39
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	41 70       	andi	r20, 0x01	; 1
    1b3e:	c9 01       	movw	r24, r18
    1b40:	60 e0       	ldi	r22, 0x00	; 0
    1b42:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1b46:	80 91 72 00 	lds	r24, 0x0072
    1b4a:	90 91 73 00 	lds	r25, 0x0073
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e8       	ldi	r26, 0x80	; 128
    1b5c:	bf e3       	ldi	r27, 0x3F	; 63
    1b5e:	89 8f       	std	Y+25, r24	; 0x19
    1b60:	9a 8f       	std	Y+26, r25	; 0x1a
    1b62:	ab 8f       	std	Y+27, r26	; 0x1b
    1b64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b66:	69 8d       	ldd	r22, Y+25	; 0x19
    1b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	4a e7       	ldi	r20, 0x7A	; 122
    1b74:	55 e4       	ldi	r21, 0x45	; 69
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	8d 8b       	std	Y+21, r24	; 0x15
    1b80:	9e 8b       	std	Y+22, r25	; 0x16
    1b82:	af 8b       	std	Y+23, r26	; 0x17
    1b84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b86:	6d 89       	ldd	r22, Y+21	; 0x15
    1b88:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	2c f4       	brge	.+10     	; 0x1ba8 <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
    1ba6:	3f c0       	rjmp	.+126    	; 0x1c26 <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    1ba8:	6d 89       	ldd	r22, Y+21	; 0x15
    1baa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bac:	8f 89       	ldd	r24, Y+23	; 0x17
    1bae:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	3f ef       	ldi	r19, 0xFF	; 255
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	57 e4       	ldi	r21, 0x47	; 71
    1bb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bbc:	18 16       	cp	r1, r24
    1bbe:	4c f5       	brge	.+82     	; 0x1c12 <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bc4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bc6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e2       	ldi	r20, 0x20	; 32
    1bce:	51 e4       	ldi	r21, 0x41	; 65
    1bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	bc 01       	movw	r22, r24
    1bda:	cd 01       	movw	r24, r26
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9c 8b       	std	Y+20, r25	; 0x14
    1be6:	8b 8b       	std	Y+19, r24	; 0x13
    1be8:	0f c0       	rjmp	.+30     	; 0x1c08 <H_LCD_void_latchByte+0x392>
    1bea:	80 e9       	ldi	r24, 0x90	; 144
    1bec:	91 e0       	ldi	r25, 0x01	; 1
    1bee:	9a 8b       	std	Y+18, r25	; 0x12
    1bf0:	89 8b       	std	Y+17, r24	; 0x11
    1bf2:	89 89       	ldd	r24, Y+17	; 0x11
    1bf4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <H_LCD_void_latchByte+0x380>
    1bfa:	9a 8b       	std	Y+18, r25	; 0x12
    1bfc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfe:	8b 89       	ldd	r24, Y+19	; 0x13
    1c00:	9c 89       	ldd	r25, Y+20	; 0x14
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c08:	8b 89       	ldd	r24, Y+19	; 0x13
    1c0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	69 f7       	brne	.-38     	; 0x1bea <H_LCD_void_latchByte+0x374>
    1c10:	14 c0       	rjmp	.+40     	; 0x1c3a <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	8b 89       	ldd	r24, Y+19	; 0x13
    1c28:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2a:	98 8b       	std	Y+16, r25	; 0x10
    1c2c:	8f 87       	std	Y+15, r24	; 0x0f
    1c2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c30:	98 89       	ldd	r25, Y+16	; 0x10
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	f1 f7       	brne	.-4      	; 0x1c32 <H_LCD_void_latchByte+0x3bc>
    1c36:	98 8b       	std	Y+16, r25	; 0x10
    1c38:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1c3a:	80 91 72 00 	lds	r24, 0x0072
    1c3e:	90 91 73 00 	lds	r25, 0x0073
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 73 06 	call	0xce6	; 0xce6 <DIO_voidSetPinValue>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c50:	b0 e4       	ldi	r27, 0x40	; 64
    1c52:	8b 87       	std	Y+11, r24	; 0x0b
    1c54:	9c 87       	std	Y+12, r25	; 0x0c
    1c56:	ad 87       	std	Y+13, r26	; 0x0d
    1c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	55 e4       	ldi	r21, 0x45	; 69
    1c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	8f 83       	std	Y+7, r24	; 0x07
    1c74:	98 87       	std	Y+8, r25	; 0x08
    1c76:	a9 87       	std	Y+9, r26	; 0x09
    1c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	4c f5       	brge	.+82     	; 0x1d06 <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <H_LCD_void_latchByte+0x486>
    1cde:	80 e9       	ldi	r24, 0x90	; 144
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <H_LCD_void_latchByte+0x474>
    1cee:	9c 83       	std	Y+4, r25	; 0x04
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	69 f7       	brne	.-38     	; 0x1cde <H_LCD_void_latchByte+0x468>
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	9e 83       	std	Y+6, r25	; 0x06
    1d18:	8d 83       	std	Y+5, r24	; 0x05
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	9a 83       	std	Y+2, r25	; 0x02
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <H_LCD_void_latchByte+0x4b0>
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1d2e:	e9 96       	adiw	r28, 0x39	; 57
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	de bf       	out	0x3e, r29	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <H_LCD_void_creatCustomChar+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <H_LCD_void_creatCustomChar+0x8>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9b 83       	std	Y+3, r25	; 0x03
    1d4e:	8a 83       	std	Y+2, r24	; 0x02
    1d50:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	f8 f4       	brcc	.+62     	; 0x1d96 <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	08 96       	adiw	r24, 0x08	; 8
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e2 0f       	add	r30, r18
    1d82:	f3 1f       	adc	r31, r19
    1d84:	80 81       	ld	r24, Z
    1d86:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	88 30       	cpi	r24, 0x08	; 8
    1d94:	78 f3       	brcs	.-34     	; 0x1d74 <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	80 58       	subi	r24, 0x80	; 128
    1db4:	0e 94 bb 09 	call	0x1376	; 0x1376 <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>

}
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <H_LCD_void_displayHex+0x6>
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <H_LCD_void_displayHex+0x8>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <H_LCD_void_displayHex+0xa>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    1dd8:	80 e6       	ldi	r24, 0x60	; 96
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 c6 0a 	call	0x158c	; 0x158c <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	82 95       	swap	r24
    1de4:	8f 70       	andi	r24, 0x0F	; 15
    1de6:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    1de8:	89 81       	ldd	r24, Y+1	; 0x01
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	3e 83       	std	Y+6, r19	; 0x06
    1df0:	2d 83       	std	Y+5, r18	; 0x05
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	8b 30       	cpi	r24, 0x0B	; 11
    1df8:	91 05       	cpc	r25, r1
    1dfa:	69 f1       	breq	.+90     	; 0x1e56 <H_LCD_void_displayHex+0x90>
    1dfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1e00:	2c 30       	cpi	r18, 0x0C	; 12
    1e02:	31 05       	cpc	r19, r1
    1e04:	54 f4       	brge	.+20     	; 0x1e1a <H_LCD_void_displayHex+0x54>
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	99 23       	and	r25, r25
    1e0c:	bc f1       	brlt	.+110    	; 0x1e7c <H_LCD_void_displayHex+0xb6>
    1e0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1e10:	3e 81       	ldd	r19, Y+6	; 0x06
    1e12:	2a 30       	cpi	r18, 0x0A	; 10
    1e14:	31 05       	cpc	r19, r1
    1e16:	b4 f0       	brlt	.+44     	; 0x1e44 <H_LCD_void_displayHex+0x7e>
    1e18:	1a c0       	rjmp	.+52     	; 0x1e4e <H_LCD_void_displayHex+0x88>
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	8d 30       	cpi	r24, 0x0D	; 13
    1e20:	91 05       	cpc	r25, r1
    1e22:	09 f1       	breq	.+66     	; 0x1e66 <H_LCD_void_displayHex+0xa0>
    1e24:	2d 81       	ldd	r18, Y+5	; 0x05
    1e26:	3e 81       	ldd	r19, Y+6	; 0x06
    1e28:	2d 30       	cpi	r18, 0x0D	; 13
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	c4 f0       	brlt	.+48     	; 0x1e5e <H_LCD_void_displayHex+0x98>
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	8e 30       	cpi	r24, 0x0E	; 14
    1e34:	91 05       	cpc	r25, r1
    1e36:	d9 f0       	breq	.+54     	; 0x1e6e <H_LCD_void_displayHex+0xa8>
    1e38:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3c:	2f 30       	cpi	r18, 0x0F	; 15
    1e3e:	31 05       	cpc	r19, r1
    1e40:	d1 f0       	breq	.+52     	; 0x1e76 <H_LCD_void_displayHex+0xb0>
    1e42:	1c c0       	rjmp	.+56     	; 0x1e7c <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	80 5d       	subi	r24, 0xD0	; 208
    1e48:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1e4c:	17 c0       	rjmp	.+46     	; 0x1e7c <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    1e4e:	81 e4       	ldi	r24, 0x41	; 65
    1e50:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1e54:	13 c0       	rjmp	.+38     	; 0x1e7c <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    1e56:	82 e4       	ldi	r24, 0x42	; 66
    1e58:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    1e5e:	83 e4       	ldi	r24, 0x43	; 67
    1e60:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1e64:	0b c0       	rjmp	.+22     	; 0x1e7c <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    1e66:	84 e4       	ldi	r24, 0x44	; 68
    1e68:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1e6c:	07 c0       	rjmp	.+14     	; 0x1e7c <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    1e6e:	85 e4       	ldi	r24, 0x45	; 69
    1e70:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    1e76:	86 e4       	ldi	r24, 0x46	; 70
    1e78:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	8f 70       	andi	r24, 0x0F	; 15
    1e80:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3c 83       	std	Y+4, r19	; 0x04
    1e8a:	2b 83       	std	Y+3, r18	; 0x03
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	8b 30       	cpi	r24, 0x0B	; 11
    1e92:	91 05       	cpc	r25, r1
    1e94:	69 f1       	breq	.+90     	; 0x1ef0 <H_LCD_void_displayHex+0x12a>
    1e96:	2b 81       	ldd	r18, Y+3	; 0x03
    1e98:	3c 81       	ldd	r19, Y+4	; 0x04
    1e9a:	2c 30       	cpi	r18, 0x0C	; 12
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	54 f4       	brge	.+20     	; 0x1eb4 <H_LCD_void_displayHex+0xee>
    1ea0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea4:	99 23       	and	r25, r25
    1ea6:	bc f1       	brlt	.+110    	; 0x1f16 <H_LCD_void_displayHex+0x150>
    1ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1eac:	2a 30       	cpi	r18, 0x0A	; 10
    1eae:	31 05       	cpc	r19, r1
    1eb0:	b4 f0       	brlt	.+44     	; 0x1ede <H_LCD_void_displayHex+0x118>
    1eb2:	1a c0       	rjmp	.+52     	; 0x1ee8 <H_LCD_void_displayHex+0x122>
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	8d 30       	cpi	r24, 0x0D	; 13
    1eba:	91 05       	cpc	r25, r1
    1ebc:	09 f1       	breq	.+66     	; 0x1f00 <H_LCD_void_displayHex+0x13a>
    1ebe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec2:	2d 30       	cpi	r18, 0x0D	; 13
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	c4 f0       	brlt	.+48     	; 0x1ef8 <H_LCD_void_displayHex+0x132>
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ecc:	8e 30       	cpi	r24, 0x0E	; 14
    1ece:	91 05       	cpc	r25, r1
    1ed0:	d9 f0       	breq	.+54     	; 0x1f08 <H_LCD_void_displayHex+0x142>
    1ed2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed6:	2f 30       	cpi	r18, 0x0F	; 15
    1ed8:	31 05       	cpc	r19, r1
    1eda:	d1 f0       	breq	.+52     	; 0x1f10 <H_LCD_void_displayHex+0x14a>
    1edc:	1c c0       	rjmp	.+56     	; 0x1f16 <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	80 5d       	subi	r24, 0xD0	; 208
    1ee2:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1ee6:	17 c0       	rjmp	.+46     	; 0x1f16 <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    1ee8:	81 e4       	ldi	r24, 0x41	; 65
    1eea:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1eee:	13 c0       	rjmp	.+38     	; 0x1f16 <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    1ef0:	82 e4       	ldi	r24, 0x42	; 66
    1ef2:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    1ef8:	83 e4       	ldi	r24, 0x43	; 67
    1efa:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1efe:	0b c0       	rjmp	.+22     	; 0x1f16 <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    1f00:	84 e4       	ldi	r24, 0x44	; 68
    1f02:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1f06:	07 c0       	rjmp	.+14     	; 0x1f16 <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    1f08:	85 e4       	ldi	r24, 0x45	; 69
    1f0a:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
    1f0e:	03 c0       	rjmp	.+6      	; 0x1f16 <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    1f10:	86 e4       	ldi	r24, 0x46	; 70
    1f12:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
		break;
	}
}
    1f16:	26 96       	adiw	r28, 0x06	; 6
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	cf 91       	pop	r28
    1f24:	df 91       	pop	r29
    1f26:	08 95       	ret

00001f28 <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    1f28:	df 93       	push	r29
    1f2a:	cf 93       	push	r28
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <H_LCD_void_displayBinary+0x6>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    1f34:	83 e6       	ldi	r24, 0x63	; 99
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 c6 0a 	call	0x158c	; 0x158c <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	18 c0       	rjmp	.+48     	; 0x1f70 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	48 2f       	mov	r20, r24
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	87 e0       	ldi	r24, 0x07	; 7
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	82 1b       	sub	r24, r18
    1f52:	93 0b       	sbc	r25, r19
    1f54:	9a 01       	movw	r18, r20
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <H_LCD_void_displayBinary+0x34>
    1f58:	35 95       	asr	r19
    1f5a:	27 95       	ror	r18
    1f5c:	8a 95       	dec	r24
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <H_LCD_void_displayBinary+0x30>
    1f60:	c9 01       	movw	r24, r18
    1f62:	81 70       	andi	r24, 0x01	; 1
    1f64:	80 5d       	subi	r24, 0xD0	; 208
    1f66:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
    1f6c:	8f 5f       	subi	r24, 0xFF	; 255
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	88 30       	cpi	r24, 0x08	; 8
    1f74:	28 f3       	brcs	.-54     	; 0x1f40 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	2a 97       	sbiw	r28, 0x0a	; 10
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	6f 83       	std	Y+7, r22	; 0x07
    1f96:	78 87       	std	Y+8, r23	; 0x08
    1f98:	89 87       	std	Y+9, r24	; 0x09
    1f9a:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    1f9c:	1e 82       	std	Y+6, r1	; 0x06
    1f9e:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	98 85       	ldd	r25, Y+8	; 0x08
    1fa4:	a9 85       	ldd	r26, Y+9	; 0x09
    1fa6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	9a 83       	std	Y+2, r25	; 0x02
    1fac:	ab 83       	std	Y+3, r26	; 0x03
    1fae:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	aa 27       	eor	r26, r26
    1fc2:	97 fd       	sbrc	r25, 7
    1fc4:	a0 95       	com	r26
    1fc6:	ba 2f       	mov	r27, r26
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 38 10 	call	0x2070	; 0x2070 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    1fd0:	8e e2       	ldi	r24, 0x2E	; 46
    1fd2:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
	if(val < 0)
    1fd6:	69 81       	ldd	r22, Y+1	; 0x01
    1fd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	4c f4       	brge	.+18     	; 0x2000 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ff4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ff6:	b0 58       	subi	r27, 0x80	; 128
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	ab 83       	std	Y+3, r26	; 0x03
    1ffe:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    2000:	1e 82       	std	Y+6, r1	; 0x06
    2002:	2a c0       	rjmp	.+84     	; 0x2058 <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    2004:	69 81       	ldd	r22, Y+1	; 0x01
    2006:	7a 81       	ldd	r23, Y+2	; 0x02
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	9c 81       	ldd	r25, Y+4	; 0x04
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e2       	ldi	r20, 0x20	; 32
    2012:	51 e4       	ldi	r21, 0x41	; 65
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	ab 83       	std	Y+3, r26	; 0x03
    2022:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    2024:	69 81       	ldd	r22, Y+1	; 0x01
    2026:	7a 81       	ldd	r23, Y+2	; 0x02
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	2a e0       	ldi	r18, 0x0A	; 10
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 14 12 	call	0x2428	; 0x2428 <__divmodsi4>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    204a:	8d 81       	ldd	r24, Y+5	; 0x05
    204c:	80 5d       	subi	r24, 0xD0	; 208
    204e:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	8f 5f       	subi	r24, 0xFF	; 255
    2056:	8e 83       	std	Y+6, r24	; 0x06
    2058:	8e 81       	ldd	r24, Y+6	; 0x06
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	98 f2       	brcs	.-90     	; 0x2004 <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    205e:	2a 96       	adiw	r28, 0x0a	; 10
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	6c 97       	sbiw	r28, 0x1c	; 28
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	69 8f       	std	Y+25, r22	; 0x19
    2086:	7a 8f       	std	Y+26, r23	; 0x1a
    2088:	8b 8f       	std	Y+27, r24	; 0x1b
    208a:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    208c:	84 e1       	ldi	r24, 0x14	; 20
    208e:	fe 01       	movw	r30, r28
    2090:	35 96       	adiw	r30, 0x05	; 5
    2092:	df 01       	movw	r26, r30
    2094:	98 2f       	mov	r25, r24
    2096:	1d 92       	st	X+, r1
    2098:	9a 95       	dec	r25
    209a:	e9 f7       	brne	.-6      	; 0x2096 <H_LCD_void_sendIntNum+0x26>
    209c:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    209e:	89 8d       	ldd	r24, Y+25	; 0x19
    20a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <H_LCD_void_sendIntNum+0x40>
    20ae:	5d c0       	rjmp	.+186    	; 0x216a <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	99 23       	and	r25, r25
    20b6:	c4 f4       	brge	.+48     	; 0x20e8 <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    20b8:	8d e2       	ldi	r24, 0x2D	; 45
    20ba:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
			val *=-1;
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	90 95       	com	r25
    20c4:	81 95       	neg	r24
    20c6:	9f 4f       	sbci	r25, 0xFF	; 255
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	0d c0       	rjmp	.+26     	; 0x20e8 <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	9a 81       	ldd	r25, Y+2	; 0x02
    20d8:	2a e0       	ldi	r18, 0x0A	; 10
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	b9 01       	movw	r22, r18
    20de:	0e 94 01 12 	call	0x2402	; 0x2402 <__divmodhi4>
    20e2:	cb 01       	movw	r24, r22
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	18 16       	cp	r1, r24
    20ee:	19 06       	cpc	r1, r25
    20f0:	74 f3       	brlt	.-36     	; 0x20ce <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    20f2:	89 8d       	ldd	r24, Y+25	; 0x19
    20f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	18 16       	cp	r1, r24
    2100:	19 06       	cpc	r1, r25
    2102:	3c f0       	brlt	.+14     	; 0x2112 <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	90 95       	com	r25
    210a:	81 95       	neg	r24
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	81 50       	subi	r24, 0x01	; 1
    2116:	8c 83       	std	Y+4, r24	; 0x04
    2118:	20 c0       	rjmp	.+64     	; 0x215a <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	e8 2f       	mov	r30, r24
    211e:	ff 27       	eor	r31, r31
    2120:	e7 fd       	sbrc	r30, 7
    2122:	f0 95       	com	r31
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	2a e0       	ldi	r18, 0x0A	; 10
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 01 12 	call	0x2402	; 0x2402 <__divmodhi4>
    2132:	80 5d       	subi	r24, 0xD0	; 208
    2134:	28 2f       	mov	r18, r24
    2136:	ce 01       	movw	r24, r28
    2138:	05 96       	adiw	r24, 0x05	; 5
    213a:	e8 0f       	add	r30, r24
    213c:	f9 1f       	adc	r31, r25
    213e:	20 83       	st	Z, r18
			val /= 10;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	2a e0       	ldi	r18, 0x0A	; 10
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	b9 01       	movw	r22, r18
    214a:	0e 94 01 12 	call	0x2402	; 0x2402 <__divmodhi4>
    214e:	cb 01       	movw	r24, r22
    2150:	9a 83       	std	Y+2, r25	; 0x02
    2152:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	81 50       	subi	r24, 0x01	; 1
    2158:	8c 83       	std	Y+4, r24	; 0x04
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	88 23       	and	r24, r24
    215e:	ec f6       	brge	.-70     	; 0x211a <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    2160:	ce 01       	movw	r24, r28
    2162:	05 96       	adiw	r24, 0x05	; 5
    2164:	0e 94 c6 0a 	call	0x158c	; 0x158c <H_LCD_void_sendString>
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    216a:	80 e3       	ldi	r24, 0x30	; 48
    216c:	0e 94 b0 08 	call	0x1160	; 0x1160 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    2170:	6c 96       	adiw	r28, 0x1c	; 28
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(void)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	00 d0       	rcall	.+0      	; 0x2188 <UART_init+0x6>
    2188:	0f 92       	push	r0
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
	u8 regVal = 0;
    218e:	1b 82       	std	Y+3, r1	; 0x03
	u16 ubrr_value = 0;
    2190:	1a 82       	std	Y+2, r1	; 0x02
    2192:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA_REG = (UART_TRANSMISSION_SPEED<<U2X_BIT);
    2194:	eb e2       	ldi	r30, 0x2B	; 43
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 5:9 bits data modes
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	regVal = 0;
    219c:	1b 82       	std	Y+3, r1	; 0x03
	regVal = (1<<RXEN_BIT) | (1<<TXEN_BIT) | ((UART_BitData>>2)<<UCSZ2_BIT);
    219e:	88 e1       	ldi	r24, 0x18	; 24
    21a0:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB_REG = regVal;
    21a2:	ea e2       	ldi	r30, 0x2A	; 42
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit
	 * USBS    = stop bit
	 * UCSZ1:0 = 5:9 bits data modes
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	regVal = 0;
    21aa:	1b 82       	std	Y+3, r1	; 0x03
	regVal= (1 <<URSEL_BIT) | (((UART_BitData & 0x02)>>1)<<UCSZ1_BIT) | ((UART_BitData & 0x01)<<UCSZ0_BIT) | ((UART_Parity & 0x01)<<UPM0_BIT) | ((UART_Parity & 0x02)<<UPM1_BIT) | ((UART_StopBit)<<USBS_BIT);
    21ac:	86 e8       	ldi	r24, 0x86	; 134
    21ae:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC_REG = regVal;
    21b0:	e0 e4       	ldi	r30, 0x40	; 64
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (u16)(((F_CPU / (UART_BaudRate * 8UL))) - 1);
    21b8:	8f ec       	ldi	r24, 0xCF	; 207
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value>>8;
    21c0:	e0 e4       	ldi	r30, 0x40	; 64
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	9a 81       	ldd	r25, Y+2	; 0x02
    21c8:	89 2f       	mov	r24, r25
    21ca:	99 27       	eor	r25, r25
    21cc:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
    21ce:	e9 e2       	ldi	r30, 0x29	; 41
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	80 83       	st	Z, r24

}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const u8 data)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	0f 92       	push	r0
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
    21ec:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(!(UCSRA_REG & (1<<UDRE_BIT)));
    21ee:	eb e2       	ldi	r30, 0x2B	; 43
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	80 72       	andi	r24, 0x20	; 32
    21fa:	90 70       	andi	r25, 0x00	; 0
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	b9 f3       	breq	.-18     	; 0x21ee <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
    2200:	ec e2       	ldi	r30, 0x2C	; 44
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	80 83       	st	Z, r24
}
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <UART_recieveByteSynchNonBlocking>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
void UART_recieveByteSynchNonBlocking(u8* data)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <UART_recieveByteSynchNonBlocking+0x6>
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
    221a:	9a 83       	std	Y+2, r25	; 0x02
    221c:	89 83       	std	Y+1, r24	; 0x01
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(!(UCSRA_REG & (1<<RXC_BIT)));
    221e:	eb e2       	ldi	r30, 0x2B	; 43
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	dc f7       	brge	.-10     	; 0x221e <UART_recieveByteSynchNonBlocking+0xe>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	*data = UDR_REG;
    2228:	ec e2       	ldi	r30, 0x2C	; 44
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	e9 81       	ldd	r30, Y+1	; 0x01
    2230:	fa 81       	ldd	r31, Y+2	; 0x02
    2232:	80 83       	st	Z, r24
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8 *Str)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	00 d0       	rcall	.+0      	; 0x2244 <UART_sendString+0x6>
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	0a c0       	rjmp	.+20     	; 0x2262 <UART_sendString+0x24>

	/* Sending the whole string one character after the other till we find the null character */
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    224e:	e9 81       	ldd	r30, Y+1	; 0x01
    2250:	fa 81       	ldd	r31, Y+2	; 0x02
    2252:	80 81       	ld	r24, Z
    2254:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <UART_sendByte>
		Str++;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const u8 *Str)
{

	/* Sending the whole string one character after the other till we find the null character */
	while(*Str != '\0')
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	80 81       	ld	r24, Z
    2268:	88 23       	and	r24, r24
    226a:	89 f7       	brne	.-30     	; 0x224e <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <UART_receiveStringAsynchCallBack>:
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveStringAsynchCallBack(void(*ptrfn)(u8)) // Receive until #

{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <UART_receiveStringAsynchCallBack+0x6>
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	90 93 8f 00 	sts	0x008F, r25
    228c:	80 93 8e 00 	sts	0x008E, r24
	UCSRB_REG |= (1<<RXCIE_BIT);
    2290:	aa e2       	ldi	r26, 0x2A	; 42
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ea e2       	ldi	r30, 0x2A	; 42
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	80 68       	ori	r24, 0x80	; 128
    229c:	8c 93       	st	X, r24
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void(*ptrfn)(u8))
{
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <UART_receiveByteAsynchCallBack+0x6>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	90 93 8f 00 	sts	0x008F, r25
    22be:	80 93 8e 00 	sts	0x008E, r24
	UCSRB_REG |= (1<<RXCIE_BIT);
    22c2:	aa e2       	ldi	r26, 0x2A	; 42
    22c4:	b0 e0       	ldi	r27, 0x00	; 0
    22c6:	ea e2       	ldi	r30, 0x2A	; 42
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	80 68       	ori	r24, 0x80	; 128
    22ce:	8c 93       	st	X, r24
}
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <__vector_13>:

ISR(USART_RXC_vect)
{
    22da:	1f 92       	push	r1
    22dc:	0f 92       	push	r0
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	0f 92       	push	r0
    22e2:	11 24       	eor	r1, r1
    22e4:	2f 93       	push	r18
    22e6:	3f 93       	push	r19
    22e8:	4f 93       	push	r20
    22ea:	5f 93       	push	r21
    22ec:	6f 93       	push	r22
    22ee:	7f 93       	push	r23
    22f0:	8f 93       	push	r24
    22f2:	9f 93       	push	r25
    22f4:	af 93       	push	r26
    22f6:	bf 93       	push	r27
    22f8:	ef 93       	push	r30
    22fa:	ff 93       	push	r31
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
	static u8 byte = 0;

	byte = UDR_REG;
    2304:	ec e2       	ldi	r30, 0x2C	; 44
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 93 90 00 	sts	0x0090, r24

	if((*ptrCallBack) != NULL_PTR)
    230e:	80 91 8e 00 	lds	r24, 0x008E
    2312:	90 91 8f 00 	lds	r25, 0x008F
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	39 f0       	breq	.+14     	; 0x2328 <__vector_13+0x4e>
	{
		(*ptrCallBack)(byte);
    231a:	e0 91 8e 00 	lds	r30, 0x008E
    231e:	f0 91 8f 00 	lds	r31, 0x008F
    2322:	80 91 90 00 	lds	r24, 0x0090
    2326:	09 95       	icall
	}
}
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	0f 90       	pop	r0
    234a:	1f 90       	pop	r1
    234c:	18 95       	reti

0000234e <main>:
u8 stringReceived = 0;

void getbyte(u8 byte);
void getstring(u8 byte);
int main()
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	0f 92       	push	r0
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
	u8 flag = 0;
    2358:	19 82       	std	Y+1, r1	; 0x01

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init();
    235a:	0e 94 c1 10 	call	0x2182	; 0x2182 <UART_init>
	UART_receiveStringAsynchCallBack(getstring); // Receive until #
    235e:	86 ed       	ldi	r24, 0xD6	; 214
    2360:	91 e1       	ldi	r25, 0x11	; 17
    2362:	0e 94 3b 11 	call	0x2276	; 0x2276 <UART_receiveStringAsynchCallBack>
	//	UART_receiveByteAsynchCallBack(getbyte);
	//	UART_recieveByteSynchNonBlocking(&data);/* Receive Byte from Terminal */
	GIE_Enable();
    2366:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_Enable>
	flag = 1;
    236a:	81 e0       	ldi	r24, 0x01	; 1
    236c:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{

		if(stringReceived == 1 && flag == 1)
    236e:	80 91 a6 00 	lds	r24, 0x00A6
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	e1 f7       	brne	.-8      	; 0x236e <main+0x20>
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	c9 f7       	brne	.-14     	; 0x236e <main+0x20>
		{
			//			UART_sendByte(data);
			UART_sendString(Str2);
    237c:	81 e9       	ldi	r24, 0x91	; 145
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 1f 11 	call	0x223e	; 0x223e <UART_sendString>
			flag = 0;
    2384:	19 82       	std	Y+1, r1	; 0x01
			stringReceived = 0;
    2386:	10 92 a6 00 	sts	0x00A6, r1
    238a:	f1 cf       	rjmp	.-30     	; 0x236e <main+0x20>

0000238c <getbyte>:
		}
	}
}

void getbyte(u8 byte)
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	0f 92       	push	r0
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	89 83       	std	Y+1, r24	; 0x01
	data = byte;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	80 93 a5 00 	sts	0x00A5, r24
	stringReceived = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	80 93 a6 00 	sts	0x00A6, r24
}
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <getstring>:
void getstring(u8 byte)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	89 83       	std	Y+1, r24	; 0x01
	static u8 i=0;

	if(stringReceived == 0)
    23b8:	80 91 a6 00 	lds	r24, 0x00A6
    23bc:	88 23       	and	r24, r24
    23be:	e9 f4       	brne	.+58     	; 0x23fa <getstring+0x4e>
	{
		if(byte == '#')
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	83 32       	cpi	r24, 0x23	; 35
    23c4:	61 f4       	brne	.+24     	; 0x23de <getstring+0x32>
		{
			Str2[i] = '\0';
    23c6:	80 91 a7 00 	lds	r24, 0x00A7
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	fc 01       	movw	r30, r24
    23d0:	ef 56       	subi	r30, 0x6F	; 111
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	10 82       	st	Z, r1
			stringReceived = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	80 93 a6 00 	sts	0x00A6, r24
    23dc:	0e c0       	rjmp	.+28     	; 0x23fa <getstring+0x4e>
		}
		else
		{
			Str2[i] = byte;
    23de:	80 91 a7 00 	lds	r24, 0x00A7
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	fc 01       	movw	r30, r24
    23e8:	ef 56       	subi	r30, 0x6F	; 111
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	80 83       	st	Z, r24
			i++;
    23f0:	80 91 a7 00 	lds	r24, 0x00A7
    23f4:	8f 5f       	subi	r24, 0xFF	; 255
    23f6:	80 93 a7 00 	sts	0x00A7, r24
		}

	}
}
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <__divmodhi4>:
    2402:	97 fb       	bst	r25, 7
    2404:	09 2e       	mov	r0, r25
    2406:	07 26       	eor	r0, r23
    2408:	0a d0       	rcall	.+20     	; 0x241e <__divmodhi4_neg1>
    240a:	77 fd       	sbrc	r23, 7
    240c:	04 d0       	rcall	.+8      	; 0x2416 <__divmodhi4_neg2>
    240e:	27 d0       	rcall	.+78     	; 0x245e <__udivmodhi4>
    2410:	06 d0       	rcall	.+12     	; 0x241e <__divmodhi4_neg1>
    2412:	00 20       	and	r0, r0
    2414:	1a f4       	brpl	.+6      	; 0x241c <__divmodhi4_exit>

00002416 <__divmodhi4_neg2>:
    2416:	70 95       	com	r23
    2418:	61 95       	neg	r22
    241a:	7f 4f       	sbci	r23, 0xFF	; 255

0000241c <__divmodhi4_exit>:
    241c:	08 95       	ret

0000241e <__divmodhi4_neg1>:
    241e:	f6 f7       	brtc	.-4      	; 0x241c <__divmodhi4_exit>
    2420:	90 95       	com	r25
    2422:	81 95       	neg	r24
    2424:	9f 4f       	sbci	r25, 0xFF	; 255
    2426:	08 95       	ret

00002428 <__divmodsi4>:
    2428:	97 fb       	bst	r25, 7
    242a:	09 2e       	mov	r0, r25
    242c:	05 26       	eor	r0, r21
    242e:	0e d0       	rcall	.+28     	; 0x244c <__divmodsi4_neg1>
    2430:	57 fd       	sbrc	r21, 7
    2432:	04 d0       	rcall	.+8      	; 0x243c <__divmodsi4_neg2>
    2434:	28 d0       	rcall	.+80     	; 0x2486 <__udivmodsi4>
    2436:	0a d0       	rcall	.+20     	; 0x244c <__divmodsi4_neg1>
    2438:	00 1c       	adc	r0, r0
    243a:	38 f4       	brcc	.+14     	; 0x244a <__divmodsi4_exit>

0000243c <__divmodsi4_neg2>:
    243c:	50 95       	com	r21
    243e:	40 95       	com	r20
    2440:	30 95       	com	r19
    2442:	21 95       	neg	r18
    2444:	3f 4f       	sbci	r19, 0xFF	; 255
    2446:	4f 4f       	sbci	r20, 0xFF	; 255
    2448:	5f 4f       	sbci	r21, 0xFF	; 255

0000244a <__divmodsi4_exit>:
    244a:	08 95       	ret

0000244c <__divmodsi4_neg1>:
    244c:	f6 f7       	brtc	.-4      	; 0x244a <__divmodsi4_exit>
    244e:	90 95       	com	r25
    2450:	80 95       	com	r24
    2452:	70 95       	com	r23
    2454:	61 95       	neg	r22
    2456:	7f 4f       	sbci	r23, 0xFF	; 255
    2458:	8f 4f       	sbci	r24, 0xFF	; 255
    245a:	9f 4f       	sbci	r25, 0xFF	; 255
    245c:	08 95       	ret

0000245e <__udivmodhi4>:
    245e:	aa 1b       	sub	r26, r26
    2460:	bb 1b       	sub	r27, r27
    2462:	51 e1       	ldi	r21, 0x11	; 17
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <__udivmodhi4_ep>

00002466 <__udivmodhi4_loop>:
    2466:	aa 1f       	adc	r26, r26
    2468:	bb 1f       	adc	r27, r27
    246a:	a6 17       	cp	r26, r22
    246c:	b7 07       	cpc	r27, r23
    246e:	10 f0       	brcs	.+4      	; 0x2474 <__udivmodhi4_ep>
    2470:	a6 1b       	sub	r26, r22
    2472:	b7 0b       	sbc	r27, r23

00002474 <__udivmodhi4_ep>:
    2474:	88 1f       	adc	r24, r24
    2476:	99 1f       	adc	r25, r25
    2478:	5a 95       	dec	r21
    247a:	a9 f7       	brne	.-22     	; 0x2466 <__udivmodhi4_loop>
    247c:	80 95       	com	r24
    247e:	90 95       	com	r25
    2480:	bc 01       	movw	r22, r24
    2482:	cd 01       	movw	r24, r26
    2484:	08 95       	ret

00002486 <__udivmodsi4>:
    2486:	a1 e2       	ldi	r26, 0x21	; 33
    2488:	1a 2e       	mov	r1, r26
    248a:	aa 1b       	sub	r26, r26
    248c:	bb 1b       	sub	r27, r27
    248e:	fd 01       	movw	r30, r26
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <__udivmodsi4_ep>

00002492 <__udivmodsi4_loop>:
    2492:	aa 1f       	adc	r26, r26
    2494:	bb 1f       	adc	r27, r27
    2496:	ee 1f       	adc	r30, r30
    2498:	ff 1f       	adc	r31, r31
    249a:	a2 17       	cp	r26, r18
    249c:	b3 07       	cpc	r27, r19
    249e:	e4 07       	cpc	r30, r20
    24a0:	f5 07       	cpc	r31, r21
    24a2:	20 f0       	brcs	.+8      	; 0x24ac <__udivmodsi4_ep>
    24a4:	a2 1b       	sub	r26, r18
    24a6:	b3 0b       	sbc	r27, r19
    24a8:	e4 0b       	sbc	r30, r20
    24aa:	f5 0b       	sbc	r31, r21

000024ac <__udivmodsi4_ep>:
    24ac:	66 1f       	adc	r22, r22
    24ae:	77 1f       	adc	r23, r23
    24b0:	88 1f       	adc	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	1a 94       	dec	r1
    24b6:	69 f7       	brne	.-38     	; 0x2492 <__udivmodsi4_loop>
    24b8:	60 95       	com	r22
    24ba:	70 95       	com	r23
    24bc:	80 95       	com	r24
    24be:	90 95       	com	r25
    24c0:	9b 01       	movw	r18, r22
    24c2:	ac 01       	movw	r20, r24
    24c4:	bd 01       	movw	r22, r26
    24c6:	cf 01       	movw	r24, r30
    24c8:	08 95       	ret

000024ca <__prologue_saves__>:
    24ca:	2f 92       	push	r2
    24cc:	3f 92       	push	r3
    24ce:	4f 92       	push	r4
    24d0:	5f 92       	push	r5
    24d2:	6f 92       	push	r6
    24d4:	7f 92       	push	r7
    24d6:	8f 92       	push	r8
    24d8:	9f 92       	push	r9
    24da:	af 92       	push	r10
    24dc:	bf 92       	push	r11
    24de:	cf 92       	push	r12
    24e0:	df 92       	push	r13
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	ca 1b       	sub	r28, r26
    24f4:	db 0b       	sbc	r29, r27
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	09 94       	ijmp

00002502 <__epilogue_restores__>:
    2502:	2a 88       	ldd	r2, Y+18	; 0x12
    2504:	39 88       	ldd	r3, Y+17	; 0x11
    2506:	48 88       	ldd	r4, Y+16	; 0x10
    2508:	5f 84       	ldd	r5, Y+15	; 0x0f
    250a:	6e 84       	ldd	r6, Y+14	; 0x0e
    250c:	7d 84       	ldd	r7, Y+13	; 0x0d
    250e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2510:	9b 84       	ldd	r9, Y+11	; 0x0b
    2512:	aa 84       	ldd	r10, Y+10	; 0x0a
    2514:	b9 84       	ldd	r11, Y+9	; 0x09
    2516:	c8 84       	ldd	r12, Y+8	; 0x08
    2518:	df 80       	ldd	r13, Y+7	; 0x07
    251a:	ee 80       	ldd	r14, Y+6	; 0x06
    251c:	fd 80       	ldd	r15, Y+5	; 0x05
    251e:	0c 81       	ldd	r16, Y+4	; 0x04
    2520:	1b 81       	ldd	r17, Y+3	; 0x03
    2522:	aa 81       	ldd	r26, Y+2	; 0x02
    2524:	b9 81       	ldd	r27, Y+1	; 0x01
    2526:	ce 0f       	add	r28, r30
    2528:	d1 1d       	adc	r29, r1
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	ed 01       	movw	r28, r26
    2536:	08 95       	ret

00002538 <_exit>:
    2538:	f8 94       	cli

0000253a <__stop_program>:
    253a:	ff cf       	rjmp	.-2      	; 0x253a <__stop_program>
