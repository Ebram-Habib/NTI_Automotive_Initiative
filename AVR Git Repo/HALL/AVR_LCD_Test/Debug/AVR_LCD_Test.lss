
AVR_LCD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c6  00800060  00002f7a  0000300e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800126  00800126  000030d4  2**0
                  ALLOC
  3 .stab         00002694  00000000  00000000  000030d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010e9  00000000  00000000  00005768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006851  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006991  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000874a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009635  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 32       	cpi	r26, 0x26	; 38
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e2       	ldi	r26, 0x26	; 38
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 12 	call	0x2504	; 0x2504 <main>
      8a:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab eb       	ldi	r26, 0xBB	; 187
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b eb       	ldi	r24, 0xBB	; 187
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 17 	jmp	0x2f20	; 0x2f20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_voidSetPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_voidSetPinDirection+0x8>
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <DIO_voidSetPinDirection+0xa>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6b 83       	std	Y+3, r22	; 0x03
     b5a:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	3e 83       	std	Y+6, r19	; 0x06
     b64:	2d 83       	std	Y+5, r18	; 0x05
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	83 30       	cpi	r24, 0x03	; 3
     b6c:	91 05       	cpc	r25, r1
     b6e:	09 f4       	brne	.+2      	; 0xb72 <DIO_voidSetPinDirection+0x2c>
     b70:	51 c0       	rjmp	.+162    	; 0xc14 <DIO_voidSetPinDirection+0xce>
     b72:	2d 81       	ldd	r18, Y+5	; 0x05
     b74:	3e 81       	ldd	r19, Y+6	; 0x06
     b76:	24 30       	cpi	r18, 0x04	; 4
     b78:	31 05       	cpc	r19, r1
     b7a:	7c f4       	brge	.+30     	; 0xb9a <DIO_voidSetPinDirection+0x54>
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	91 05       	cpc	r25, r1
     b84:	71 f1       	breq	.+92     	; 0xbe2 <DIO_voidSetPinDirection+0x9c>
     b86:	2d 81       	ldd	r18, Y+5	; 0x05
     b88:	3e 81       	ldd	r19, Y+6	; 0x06
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 05       	cpc	r19, r1
     b8e:	ac f5       	brge	.+106    	; 0xbfa <DIO_voidSetPinDirection+0xb4>
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	d1 f0       	breq	.+52     	; 0xbcc <DIO_voidSetPinDirection+0x86>
     b98:	81 c0       	rjmp	.+258    	; 0xc9c <DIO_voidSetPinDirection+0x156>
     b9a:	2d 81       	ldd	r18, Y+5	; 0x05
     b9c:	3e 81       	ldd	r19, Y+6	; 0x06
     b9e:	25 30       	cpi	r18, 0x05	; 5
     ba0:	31 05       	cpc	r19, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <DIO_voidSetPinDirection+0x60>
     ba4:	52 c0       	rjmp	.+164    	; 0xc4a <DIO_voidSetPinDirection+0x104>
     ba6:	8d 81       	ldd	r24, Y+5	; 0x05
     ba8:	9e 81       	ldd	r25, Y+6	; 0x06
     baa:	85 30       	cpi	r24, 0x05	; 5
     bac:	91 05       	cpc	r25, r1
     bae:	0c f4       	brge	.+2      	; 0xbb2 <DIO_voidSetPinDirection+0x6c>
     bb0:	3f c0       	rjmp	.+126    	; 0xc30 <DIO_voidSetPinDirection+0xea>
     bb2:	2d 81       	ldd	r18, Y+5	; 0x05
     bb4:	3e 81       	ldd	r19, Y+6	; 0x06
     bb6:	26 30       	cpi	r18, 0x06	; 6
     bb8:	31 05       	cpc	r19, r1
     bba:	09 f4       	brne	.+2      	; 0xbbe <DIO_voidSetPinDirection+0x78>
     bbc:	54 c0       	rjmp	.+168    	; 0xc66 <DIO_voidSetPinDirection+0x120>
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	9e 81       	ldd	r25, Y+6	; 0x06
     bc2:	87 30       	cpi	r24, 0x07	; 7
     bc4:	91 05       	cpc	r25, r1
     bc6:	09 f4       	brne	.+2      	; 0xbca <DIO_voidSetPinDirection+0x84>
     bc8:	5d c0       	rjmp	.+186    	; 0xc84 <DIO_voidSetPinDirection+0x13e>
     bca:	68 c0       	rjmp	.+208    	; 0xc9c <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
     bcc:	8c 81       	ldd	r24, Y+4	; 0x04
     bce:	81 70       	andi	r24, 0x01	; 1
     bd0:	e9 81       	ldd	r30, Y+1	; 0x01
     bd2:	fa 81       	ldd	r31, Y+2	; 0x02
     bd4:	98 2f       	mov	r25, r24
     bd6:	91 70       	andi	r25, 0x01	; 1
     bd8:	81 81       	ldd	r24, Z+1	; 0x01
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	89 2b       	or	r24, r25
     bde:	81 83       	std	Z+1, r24	; 0x01
     be0:	5d c0       	rjmp	.+186    	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
     be2:	8c 81       	ldd	r24, Y+4	; 0x04
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	e9 81       	ldd	r30, Y+1	; 0x01
     be8:	fa 81       	ldd	r31, Y+2	; 0x02
     bea:	81 70       	andi	r24, 0x01	; 1
     bec:	98 2f       	mov	r25, r24
     bee:	99 0f       	add	r25, r25
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	89 2b       	or	r24, r25
     bf6:	81 83       	std	Z+1, r24	; 0x01
     bf8:	51 c0       	rjmp	.+162    	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	81 70       	andi	r24, 0x01	; 1
     bfe:	e9 81       	ldd	r30, Y+1	; 0x01
     c00:	fa 81       	ldd	r31, Y+2	; 0x02
     c02:	81 70       	andi	r24, 0x01	; 1
     c04:	98 2f       	mov	r25, r24
     c06:	99 0f       	add	r25, r25
     c08:	99 0f       	add	r25, r25
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	8b 7f       	andi	r24, 0xFB	; 251
     c0e:	89 2b       	or	r24, r25
     c10:	81 83       	std	Z+1, r24	; 0x01
     c12:	44 c0       	rjmp	.+136    	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	e9 81       	ldd	r30, Y+1	; 0x01
     c1a:	fa 81       	ldd	r31, Y+2	; 0x02
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	98 2f       	mov	r25, r24
     c20:	99 0f       	add	r25, r25
     c22:	99 0f       	add	r25, r25
     c24:	99 0f       	add	r25, r25
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	87 7f       	andi	r24, 0xF7	; 247
     c2a:	89 2b       	or	r24, r25
     c2c:	81 83       	std	Z+1, r24	; 0x01
     c2e:	36 c0       	rjmp	.+108    	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
     c30:	8c 81       	ldd	r24, Y+4	; 0x04
     c32:	81 70       	andi	r24, 0x01	; 1
     c34:	e9 81       	ldd	r30, Y+1	; 0x01
     c36:	fa 81       	ldd	r31, Y+2	; 0x02
     c38:	81 70       	andi	r24, 0x01	; 1
     c3a:	98 2f       	mov	r25, r24
     c3c:	92 95       	swap	r25
     c3e:	90 7f       	andi	r25, 0xF0	; 240
     c40:	81 81       	ldd	r24, Z+1	; 0x01
     c42:	8f 7e       	andi	r24, 0xEF	; 239
     c44:	89 2b       	or	r24, r25
     c46:	81 83       	std	Z+1, r24	; 0x01
     c48:	29 c0       	rjmp	.+82     	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	81 70       	andi	r24, 0x01	; 1
     c4e:	e9 81       	ldd	r30, Y+1	; 0x01
     c50:	fa 81       	ldd	r31, Y+2	; 0x02
     c52:	81 70       	andi	r24, 0x01	; 1
     c54:	98 2f       	mov	r25, r24
     c56:	92 95       	swap	r25
     c58:	99 0f       	add	r25, r25
     c5a:	90 7e       	andi	r25, 0xE0	; 224
     c5c:	81 81       	ldd	r24, Z+1	; 0x01
     c5e:	8f 7d       	andi	r24, 0xDF	; 223
     c60:	89 2b       	or	r24, r25
     c62:	81 83       	std	Z+1, r24	; 0x01
     c64:	1b c0       	rjmp	.+54     	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	81 70       	andi	r24, 0x01	; 1
     c6a:	e9 81       	ldd	r30, Y+1	; 0x01
     c6c:	fa 81       	ldd	r31, Y+2	; 0x02
     c6e:	81 70       	andi	r24, 0x01	; 1
     c70:	98 2f       	mov	r25, r24
     c72:	92 95       	swap	r25
     c74:	99 0f       	add	r25, r25
     c76:	99 0f       	add	r25, r25
     c78:	90 7c       	andi	r25, 0xC0	; 192
     c7a:	81 81       	ldd	r24, Z+1	; 0x01
     c7c:	8f 7b       	andi	r24, 0xBF	; 191
     c7e:	89 2b       	or	r24, r25
     c80:	81 83       	std	Z+1, r24	; 0x01
     c82:	0c c0       	rjmp	.+24     	; 0xc9c <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	81 70       	andi	r24, 0x01	; 1
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	98 2f       	mov	r25, r24
     c8e:	97 95       	ror	r25
     c90:	99 27       	eor	r25, r25
     c92:	97 95       	ror	r25
     c94:	81 81       	ldd	r24, Z+1	; 0x01
     c96:	8f 77       	andi	r24, 0x7F	; 127
     c98:	89 2b       	or	r24, r25
     c9a:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     c9c:	26 96       	adiw	r28, 0x06	; 6
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	00 d0       	rcall	.+0      	; 0xcb4 <DIO_voidSetPinValue+0x6>
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <DIO_voidSetPinValue+0x8>
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <DIO_voidSetPinValue+0xa>
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	9a 83       	std	Y+2, r25	; 0x02
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	6b 83       	std	Y+3, r22	; 0x03
     cc2:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	3e 83       	std	Y+6, r19	; 0x06
     ccc:	2d 83       	std	Y+5, r18	; 0x05
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	83 30       	cpi	r24, 0x03	; 3
     cd4:	91 05       	cpc	r25, r1
     cd6:	09 f4       	brne	.+2      	; 0xcda <DIO_voidSetPinValue+0x2c>
     cd8:	51 c0       	rjmp	.+162    	; 0xd7c <DIO_voidSetPinValue+0xce>
     cda:	2d 81       	ldd	r18, Y+5	; 0x05
     cdc:	3e 81       	ldd	r19, Y+6	; 0x06
     cde:	24 30       	cpi	r18, 0x04	; 4
     ce0:	31 05       	cpc	r19, r1
     ce2:	7c f4       	brge	.+30     	; 0xd02 <DIO_voidSetPinValue+0x54>
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	71 f1       	breq	.+92     	; 0xd4a <DIO_voidSetPinValue+0x9c>
     cee:	2d 81       	ldd	r18, Y+5	; 0x05
     cf0:	3e 81       	ldd	r19, Y+6	; 0x06
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	31 05       	cpc	r19, r1
     cf6:	ac f5       	brge	.+106    	; 0xd62 <DIO_voidSetPinValue+0xb4>
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	d1 f0       	breq	.+52     	; 0xd34 <DIO_voidSetPinValue+0x86>
     d00:	81 c0       	rjmp	.+258    	; 0xe04 <DIO_voidSetPinValue+0x156>
     d02:	2d 81       	ldd	r18, Y+5	; 0x05
     d04:	3e 81       	ldd	r19, Y+6	; 0x06
     d06:	25 30       	cpi	r18, 0x05	; 5
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <DIO_voidSetPinValue+0x60>
     d0c:	52 c0       	rjmp	.+164    	; 0xdb2 <DIO_voidSetPinValue+0x104>
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	85 30       	cpi	r24, 0x05	; 5
     d14:	91 05       	cpc	r25, r1
     d16:	0c f4       	brge	.+2      	; 0xd1a <DIO_voidSetPinValue+0x6c>
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <DIO_voidSetPinValue+0xea>
     d1a:	2d 81       	ldd	r18, Y+5	; 0x05
     d1c:	3e 81       	ldd	r19, Y+6	; 0x06
     d1e:	26 30       	cpi	r18, 0x06	; 6
     d20:	31 05       	cpc	r19, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_voidSetPinValue+0x78>
     d24:	54 c0       	rjmp	.+168    	; 0xdce <DIO_voidSetPinValue+0x120>
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	87 30       	cpi	r24, 0x07	; 7
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <DIO_voidSetPinValue+0x84>
     d30:	5d c0       	rjmp	.+186    	; 0xdec <DIO_voidSetPinValue+0x13e>
     d32:	68 c0       	rjmp	.+208    	; 0xe04 <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	81 70       	andi	r24, 0x01	; 1
     d38:	e9 81       	ldd	r30, Y+1	; 0x01
     d3a:	fa 81       	ldd	r31, Y+2	; 0x02
     d3c:	98 2f       	mov	r25, r24
     d3e:	91 70       	andi	r25, 0x01	; 1
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	89 2b       	or	r24, r25
     d46:	82 83       	std	Z+2, r24	; 0x02
     d48:	5d c0       	rjmp	.+186    	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	81 70       	andi	r24, 0x01	; 1
     d4e:	e9 81       	ldd	r30, Y+1	; 0x01
     d50:	fa 81       	ldd	r31, Y+2	; 0x02
     d52:	81 70       	andi	r24, 0x01	; 1
     d54:	98 2f       	mov	r25, r24
     d56:	99 0f       	add	r25, r25
     d58:	82 81       	ldd	r24, Z+2	; 0x02
     d5a:	8d 7f       	andi	r24, 0xFD	; 253
     d5c:	89 2b       	or	r24, r25
     d5e:	82 83       	std	Z+2, r24	; 0x02
     d60:	51 c0       	rjmp	.+162    	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	81 70       	andi	r24, 0x01	; 1
     d66:	e9 81       	ldd	r30, Y+1	; 0x01
     d68:	fa 81       	ldd	r31, Y+2	; 0x02
     d6a:	81 70       	andi	r24, 0x01	; 1
     d6c:	98 2f       	mov	r25, r24
     d6e:	99 0f       	add	r25, r25
     d70:	99 0f       	add	r25, r25
     d72:	82 81       	ldd	r24, Z+2	; 0x02
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	89 2b       	or	r24, r25
     d78:	82 83       	std	Z+2, r24	; 0x02
     d7a:	44 c0       	rjmp	.+136    	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	81 70       	andi	r24, 0x01	; 1
     d80:	e9 81       	ldd	r30, Y+1	; 0x01
     d82:	fa 81       	ldd	r31, Y+2	; 0x02
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	98 2f       	mov	r25, r24
     d88:	99 0f       	add	r25, r25
     d8a:	99 0f       	add	r25, r25
     d8c:	99 0f       	add	r25, r25
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	87 7f       	andi	r24, 0xF7	; 247
     d92:	89 2b       	or	r24, r25
     d94:	82 83       	std	Z+2, r24	; 0x02
     d96:	36 c0       	rjmp	.+108    	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	81 70       	andi	r24, 0x01	; 1
     d9c:	e9 81       	ldd	r30, Y+1	; 0x01
     d9e:	fa 81       	ldd	r31, Y+2	; 0x02
     da0:	81 70       	andi	r24, 0x01	; 1
     da2:	98 2f       	mov	r25, r24
     da4:	92 95       	swap	r25
     da6:	90 7f       	andi	r25, 0xF0	; 240
     da8:	82 81       	ldd	r24, Z+2	; 0x02
     daa:	8f 7e       	andi	r24, 0xEF	; 239
     dac:	89 2b       	or	r24, r25
     dae:	82 83       	std	Z+2, r24	; 0x02
     db0:	29 c0       	rjmp	.+82     	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	81 70       	andi	r24, 0x01	; 1
     db6:	e9 81       	ldd	r30, Y+1	; 0x01
     db8:	fa 81       	ldd	r31, Y+2	; 0x02
     dba:	81 70       	andi	r24, 0x01	; 1
     dbc:	98 2f       	mov	r25, r24
     dbe:	92 95       	swap	r25
     dc0:	99 0f       	add	r25, r25
     dc2:	90 7e       	andi	r25, 0xE0	; 224
     dc4:	82 81       	ldd	r24, Z+2	; 0x02
     dc6:	8f 7d       	andi	r24, 0xDF	; 223
     dc8:	89 2b       	or	r24, r25
     dca:	82 83       	std	Z+2, r24	; 0x02
     dcc:	1b c0       	rjmp	.+54     	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
     dce:	8c 81       	ldd	r24, Y+4	; 0x04
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	e9 81       	ldd	r30, Y+1	; 0x01
     dd4:	fa 81       	ldd	r31, Y+2	; 0x02
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	98 2f       	mov	r25, r24
     dda:	92 95       	swap	r25
     ddc:	99 0f       	add	r25, r25
     dde:	99 0f       	add	r25, r25
     de0:	90 7c       	andi	r25, 0xC0	; 192
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	8f 7b       	andi	r24, 0xBF	; 191
     de6:	89 2b       	or	r24, r25
     de8:	82 83       	std	Z+2, r24	; 0x02
     dea:	0c c0       	rjmp	.+24     	; 0xe04 <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	81 70       	andi	r24, 0x01	; 1
     df0:	e9 81       	ldd	r30, Y+1	; 0x01
     df2:	fa 81       	ldd	r31, Y+2	; 0x02
     df4:	98 2f       	mov	r25, r24
     df6:	97 95       	ror	r25
     df8:	99 27       	eor	r25, r25
     dfa:	97 95       	ror	r25
     dfc:	82 81       	ldd	r24, Z+2	; 0x02
     dfe:	8f 77       	andi	r24, 0x7F	; 127
     e00:	89 2b       	or	r24, r25
     e02:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
     e04:	26 96       	adiw	r28, 0x06	; 6
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	00 d0       	rcall	.+0      	; 0xe1c <DIO_voidGetPinValue+0x6>
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <DIO_voidGetPinValue+0x8>
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <DIO_voidGetPinValue+0xa>
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	9b 83       	std	Y+3, r25	; 0x03
     e26:	8a 83       	std	Y+2, r24	; 0x02
     e28:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	3e 83       	std	Y+6, r19	; 0x06
     e32:	2d 83       	std	Y+5, r18	; 0x05
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	91 05       	cpc	r25, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_voidGetPinValue+0x2a>
     e3e:	3e c0       	rjmp	.+124    	; 0xebc <DIO_voidGetPinValue+0xa6>
     e40:	2d 81       	ldd	r18, Y+5	; 0x05
     e42:	3e 81       	ldd	r19, Y+6	; 0x06
     e44:	24 30       	cpi	r18, 0x04	; 4
     e46:	31 05       	cpc	r19, r1
     e48:	7c f4       	brge	.+30     	; 0xe68 <DIO_voidGetPinValue+0x52>
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 05       	cpc	r25, r1
     e52:	29 f1       	breq	.+74     	; 0xe9e <DIO_voidGetPinValue+0x88>
     e54:	2d 81       	ldd	r18, Y+5	; 0x05
     e56:	3e 81       	ldd	r19, Y+6	; 0x06
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	3c f5       	brge	.+78     	; 0xeac <DIO_voidGetPinValue+0x96>
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	b1 f0       	breq	.+44     	; 0xe92 <DIO_voidGetPinValue+0x7c>
     e66:	55 c0       	rjmp	.+170    	; 0xf12 <DIO_voidGetPinValue+0xfc>
     e68:	2d 81       	ldd	r18, Y+5	; 0x05
     e6a:	3e 81       	ldd	r19, Y+6	; 0x06
     e6c:	25 30       	cpi	r18, 0x05	; 5
     e6e:	31 05       	cpc	r19, r1
     e70:	b1 f1       	breq	.+108    	; 0xede <DIO_voidGetPinValue+0xc8>
     e72:	8d 81       	ldd	r24, Y+5	; 0x05
     e74:	9e 81       	ldd	r25, Y+6	; 0x06
     e76:	85 30       	cpi	r24, 0x05	; 5
     e78:	91 05       	cpc	r25, r1
     e7a:	4c f1       	brlt	.+82     	; 0xece <DIO_voidGetPinValue+0xb8>
     e7c:	2d 81       	ldd	r18, Y+5	; 0x05
     e7e:	3e 81       	ldd	r19, Y+6	; 0x06
     e80:	26 30       	cpi	r18, 0x06	; 6
     e82:	31 05       	cpc	r19, r1
     e84:	a9 f1       	breq	.+106    	; 0xef0 <DIO_voidGetPinValue+0xda>
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	87 30       	cpi	r24, 0x07	; 7
     e8c:	91 05       	cpc	r25, r1
     e8e:	d1 f1       	breq	.+116    	; 0xf04 <DIO_voidGetPinValue+0xee>
     e90:	40 c0       	rjmp	.+128    	; 0xf12 <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
     e92:	ea 81       	ldd	r30, Y+2	; 0x02
     e94:	fb 81       	ldd	r31, Y+3	; 0x03
     e96:	80 81       	ld	r24, Z
     e98:	81 70       	andi	r24, 0x01	; 1
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	3a c0       	rjmp	.+116    	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
     e9e:	ea 81       	ldd	r30, Y+2	; 0x02
     ea0:	fb 81       	ldd	r31, Y+3	; 0x03
     ea2:	80 81       	ld	r24, Z
     ea4:	86 95       	lsr	r24
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	33 c0       	rjmp	.+102    	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
     eac:	ea 81       	ldd	r30, Y+2	; 0x02
     eae:	fb 81       	ldd	r31, Y+3	; 0x03
     eb0:	80 81       	ld	r24, Z
     eb2:	86 95       	lsr	r24
     eb4:	86 95       	lsr	r24
     eb6:	81 70       	andi	r24, 0x01	; 1
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	2b c0       	rjmp	.+86     	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
     ebc:	ea 81       	ldd	r30, Y+2	; 0x02
     ebe:	fb 81       	ldd	r31, Y+3	; 0x03
     ec0:	80 81       	ld	r24, Z
     ec2:	86 95       	lsr	r24
     ec4:	86 95       	lsr	r24
     ec6:	86 95       	lsr	r24
     ec8:	81 70       	andi	r24, 0x01	; 1
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	22 c0       	rjmp	.+68     	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
     ece:	ea 81       	ldd	r30, Y+2	; 0x02
     ed0:	fb 81       	ldd	r31, Y+3	; 0x03
     ed2:	80 81       	ld	r24, Z
     ed4:	82 95       	swap	r24
     ed6:	8f 70       	andi	r24, 0x0F	; 15
     ed8:	81 70       	andi	r24, 0x01	; 1
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	1a c0       	rjmp	.+52     	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
     ede:	ea 81       	ldd	r30, Y+2	; 0x02
     ee0:	fb 81       	ldd	r31, Y+3	; 0x03
     ee2:	80 81       	ld	r24, Z
     ee4:	82 95       	swap	r24
     ee6:	86 95       	lsr	r24
     ee8:	87 70       	andi	r24, 0x07	; 7
     eea:	81 70       	andi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	11 c0       	rjmp	.+34     	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
     ef0:	ea 81       	ldd	r30, Y+2	; 0x02
     ef2:	fb 81       	ldd	r31, Y+3	; 0x03
     ef4:	80 81       	ld	r24, Z
     ef6:	82 95       	swap	r24
     ef8:	86 95       	lsr	r24
     efa:	86 95       	lsr	r24
     efc:	83 70       	andi	r24, 0x03	; 3
     efe:	81 70       	andi	r24, 0x01	; 1
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
     f04:	ea 81       	ldd	r30, Y+2	; 0x02
     f06:	fb 81       	ldd	r31, Y+3	; 0x03
     f08:	80 81       	ld	r24, Z
     f0a:	88 1f       	adc	r24, r24
     f0c:	88 27       	eor	r24, r24
     f0e:	88 1f       	adc	r24, r24
     f10:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	26 96       	adiw	r28, 0x06	; 6
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_voidSetPortDirection+0x6>
     f2c:	0f 92       	push	r0
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
     f38:	e9 81       	ldd	r30, Y+1	; 0x01
     f3a:	fa 81       	ldd	r31, Y+2	; 0x02
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	81 83       	std	Z+1, r24	; 0x01
}
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <DIO_voidSetPortValue+0x6>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
     f5e:	e9 81       	ldd	r30, Y+1	; 0x01
     f60:	fa 81       	ldd	r31, Y+2	; 0x02
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	82 83       	std	Z+2, r24	; 0x02
}
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	00 d0       	rcall	.+0      	; 0xf78 <DIO_voidGetPortValue+0x6>
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
     f80:	e9 81       	ldd	r30, Y+1	; 0x01
     f82:	fa 81       	ldd	r31, Y+2	; 0x02
     f84:	80 81       	ld	r24, Z
}
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <KEYPAD_Init>:
#include "GPIO_Int.h"
#include "avr/delay.h"
#include "KeyPad.h"

void KEYPAD_Init(void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(pPORTC, pin2, output);
     f98:	80 91 21 01 	lds	r24, 0x0121
     f9c:	90 91 22 01 	lds	r25, 0x0122
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin3, output);
     fa8:	80 91 21 01 	lds	r24, 0x0121
     fac:	90 91 22 01 	lds	r25, 0x0122
     fb0:	63 e0       	ldi	r22, 0x03	; 3
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin4, output);
     fb8:	80 91 21 01 	lds	r24, 0x0121
     fbc:	90 91 22 01 	lds	r25, 0x0122
     fc0:	64 e0       	ldi	r22, 0x04	; 4
     fc2:	41 e0       	ldi	r20, 0x01	; 1
     fc4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin5, output);
     fc8:	80 91 21 01 	lds	r24, 0x0121
     fcc:	90 91 22 01 	lds	r25, 0x0122
     fd0:	65 e0       	ldi	r22, 0x05	; 5
     fd2:	41 e0       	ldi	r20, 0x01	; 1
     fd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(pPORTD, pin3, input);
     fd8:	80 91 23 01 	lds	r24, 0x0123
     fdc:	90 91 24 01 	lds	r25, 0x0124
     fe0:	63 e0       	ldi	r22, 0x03	; 3
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTD, pin5, input);
     fe8:	80 91 23 01 	lds	r24, 0x0123
     fec:	90 91 24 01 	lds	r25, 0x0124
     ff0:	65 e0       	ldi	r22, 0x05	; 5
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTD, pin6, input);
     ff8:	80 91 23 01 	lds	r24, 0x0123
     ffc:	90 91 24 01 	lds	r25, 0x0124
    1000:	66 e0       	ldi	r22, 0x06	; 6
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTD, pin7, input);
    1008:	80 91 23 01 	lds	r24, 0x0123
    100c:	90 91 24 01 	lds	r25, 0x0124
    1010:	67 e0       	ldi	r22, 0x07	; 7
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(pPORTC, pin2, high);
    1018:	80 91 21 01 	lds	r24, 0x0121
    101c:	90 91 22 01 	lds	r25, 0x0122
    1020:	62 e0       	ldi	r22, 0x02	; 2
    1022:	41 e0       	ldi	r20, 0x01	; 1
    1024:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin3, high);
    1028:	80 91 21 01 	lds	r24, 0x0121
    102c:	90 91 22 01 	lds	r25, 0x0122
    1030:	63 e0       	ldi	r22, 0x03	; 3
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin4, high);
    1038:	80 91 21 01 	lds	r24, 0x0121
    103c:	90 91 22 01 	lds	r25, 0x0122
    1040:	64 e0       	ldi	r22, 0x04	; 4
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin5, high);
    1048:	80 91 21 01 	lds	r24, 0x0121
    104c:	90 91 22 01 	lds	r25, 0x0122
    1050:	65 e0       	ldi	r22, 0x05	; 5
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>

	DIO_voidSetPinValue(pPORTD, pin3, high);
    1058:	80 91 23 01 	lds	r24, 0x0123
    105c:	90 91 24 01 	lds	r25, 0x0124
    1060:	63 e0       	ldi	r22, 0x03	; 3
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTD, pin5, high);
    1068:	80 91 23 01 	lds	r24, 0x0123
    106c:	90 91 24 01 	lds	r25, 0x0124
    1070:	65 e0       	ldi	r22, 0x05	; 5
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTD, pin6, high);
    1078:	80 91 23 01 	lds	r24, 0x0123
    107c:	90 91 24 01 	lds	r25, 0x0124
    1080:	66 e0       	ldi	r22, 0x06	; 6
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTD, pin7, high);
    1088:	80 91 23 01 	lds	r24, 0x0123
    108c:	90 91 24 01 	lds	r25, 0x0124
    1090:	67 e0       	ldi	r22, 0x07	; 7
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <KEYPAD_Get_Pressed_Key>:

u8 KEYPAD_Get_Pressed_Key(void)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    10a6:	a6 97       	sbiw	r28, 0x26	; 38
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
	u8  i,j;
	u8 rows[]={5,4,3,2};
    10b2:	85 e0       	ldi	r24, 0x05	; 5
    10b4:	8f 8f       	std	Y+31, r24	; 0x1f
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	88 a3       	std	Y+32, r24	; 0x20
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	89 a3       	std	Y+33, r24	; 0x21
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	8a a3       	std	Y+34, r24	; 0x22
	u8 cols[]={7,6,5,3};
    10c2:	87 e0       	ldi	r24, 0x07	; 7
    10c4:	8b a3       	std	Y+35, r24	; 0x23
    10c6:	86 e0       	ldi	r24, 0x06	; 6
    10c8:	8c a3       	std	Y+36, r24	; 0x24
    10ca:	85 e0       	ldi	r24, 0x05	; 5
    10cc:	8d a3       	std	Y+37, r24	; 0x25
    10ce:	83 e0       	ldi	r24, 0x03	; 3
    10d0:	8e a3       	std	Y+38, r24	; 0x26

	while(1)
	{
		for(i = 0; i<SIZE; i++)
    10d2:	1e 8e       	std	Y+30, r1	; 0x1e
    10d4:	4e c1       	rjmp	.+668    	; 0x1372 <KEYPAD_Get_Pressed_Key+0x2d4>
		{
			DIO_voidSetPinValue(pPORTC, rows[i], low);
    10d6:	40 91 21 01 	lds	r20, 0x0121
    10da:	50 91 22 01 	lds	r21, 0x0122
    10de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	ce 01       	movw	r24, r28
    10e6:	4f 96       	adiw	r24, 0x1f	; 31
    10e8:	fc 01       	movw	r30, r24
    10ea:	e2 0f       	add	r30, r18
    10ec:	f3 1f       	adc	r31, r19
    10ee:	20 81       	ld	r18, Z
    10f0:	ca 01       	movw	r24, r20
    10f2:	62 2f       	mov	r22, r18
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>

			for(j = 0; j<SIZE; j++)
    10fa:	1d 8e       	std	Y+29, r1	; 0x1d
    10fc:	af c0       	rjmp	.+350    	; 0x125c <KEYPAD_Get_Pressed_Key+0x1be>
			{
				if(DIO_voidGetPinValue(pPORTD, cols[j]) == low)
    10fe:	40 91 23 01 	lds	r20, 0x0123
    1102:	50 91 24 01 	lds	r21, 0x0124
    1106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	ce 01       	movw	r24, r28
    110e:	83 96       	adiw	r24, 0x23	; 35
    1110:	fc 01       	movw	r30, r24
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	20 81       	ld	r18, Z
    1118:	ca 01       	movw	r24, r20
    111a:	62 2f       	mov	r22, r18
    111c:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_voidGetPinValue>
    1120:	88 23       	and	r24, r24
    1122:	09 f0       	breq	.+2      	; 0x1126 <KEYPAD_Get_Pressed_Key+0x88>
    1124:	98 c0       	rjmp	.+304    	; 0x1256 <KEYPAD_Get_Pressed_Key+0x1b8>
    1126:	80 e0       	ldi	r24, 0x00	; 0
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a0 ef       	ldi	r26, 0xF0	; 240
    112c:	b1 e4       	ldi	r27, 0x41	; 65
    112e:	89 8f       	std	Y+25, r24	; 0x19
    1130:	9a 8f       	std	Y+26, r25	; 0x1a
    1132:	ab 8f       	std	Y+27, r26	; 0x1b
    1134:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1136:	69 8d       	ldd	r22, Y+25	; 0x19
    1138:	7a 8d       	ldd	r23, Y+26	; 0x1a
    113a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    113c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	4a e7       	ldi	r20, 0x7A	; 122
    1144:	55 e4       	ldi	r21, 0x45	; 69
    1146:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	8d 8b       	std	Y+21, r24	; 0x15
    1150:	9e 8b       	std	Y+22, r25	; 0x16
    1152:	af 8b       	std	Y+23, r26	; 0x17
    1154:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1156:	6d 89       	ldd	r22, Y+21	; 0x15
    1158:	7e 89       	ldd	r23, Y+22	; 0x16
    115a:	8f 89       	ldd	r24, Y+23	; 0x17
    115c:	98 8d       	ldd	r25, Y+24	; 0x18
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e8       	ldi	r20, 0x80	; 128
    1164:	5f e3       	ldi	r21, 0x3F	; 63
    1166:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116a:	88 23       	and	r24, r24
    116c:	2c f4       	brge	.+10     	; 0x1178 <KEYPAD_Get_Pressed_Key+0xda>
		__ticks = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	9c 8b       	std	Y+20, r25	; 0x14
    1174:	8b 8b       	std	Y+19, r24	; 0x13
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <KEYPAD_Get_Pressed_Key+0x158>
	else if (__tmp > 65535)
    1178:	6d 89       	ldd	r22, Y+21	; 0x15
    117a:	7e 89       	ldd	r23, Y+22	; 0x16
    117c:	8f 89       	ldd	r24, Y+23	; 0x17
    117e:	98 8d       	ldd	r25, Y+24	; 0x18
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	3f ef       	ldi	r19, 0xFF	; 255
    1184:	4f e7       	ldi	r20, 0x7F	; 127
    1186:	57 e4       	ldi	r21, 0x47	; 71
    1188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118c:	18 16       	cp	r1, r24
    118e:	4c f5       	brge	.+82     	; 0x11e2 <KEYPAD_Get_Pressed_Key+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1190:	69 8d       	ldd	r22, Y+25	; 0x19
    1192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9c 8b       	std	Y+20, r25	; 0x14
    11b6:	8b 8b       	std	Y+19, r24	; 0x13
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <KEYPAD_Get_Pressed_Key+0x13a>
    11ba:	80 e9       	ldi	r24, 0x90	; 144
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	9a 8b       	std	Y+18, r25	; 0x12
    11c0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11c2:	89 89       	ldd	r24, Y+17	; 0x11
    11c4:	9a 89       	ldd	r25, Y+18	; 0x12
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <KEYPAD_Get_Pressed_Key+0x128>
    11ca:	9a 8b       	std	Y+18, r25	; 0x12
    11cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ce:	8b 89       	ldd	r24, Y+19	; 0x13
    11d0:	9c 89       	ldd	r25, Y+20	; 0x14
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	69 f7       	brne	.-38     	; 0x11ba <KEYPAD_Get_Pressed_Key+0x11c>
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <KEYPAD_Get_Pressed_Key+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	6d 89       	ldd	r22, Y+21	; 0x15
    11e4:	7e 89       	ldd	r23, Y+22	; 0x16
    11e6:	8f 89       	ldd	r24, Y+23	; 0x17
    11e8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9c 8b       	std	Y+20, r25	; 0x14
    11f4:	8b 8b       	std	Y+19, r24	; 0x13
    11f6:	8b 89       	ldd	r24, Y+19	; 0x13
    11f8:	9c 89       	ldd	r25, Y+20	; 0x14
    11fa:	98 8b       	std	Y+16, r25	; 0x10
    11fc:	8f 87       	std	Y+15, r24	; 0x0f
    11fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1200:	98 89       	ldd	r25, Y+16	; 0x10
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <KEYPAD_Get_Pressed_Key+0x164>
    1206:	98 8b       	std	Y+16, r25	; 0x10
    1208:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(30);
					if(DIO_voidGetPinValue(pPORTD, cols[j]) == low)
    120a:	40 91 23 01 	lds	r20, 0x0123
    120e:	50 91 24 01 	lds	r21, 0x0124
    1212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	ce 01       	movw	r24, r28
    121a:	83 96       	adiw	r24, 0x23	; 35
    121c:	fc 01       	movw	r30, r24
    121e:	e2 0f       	add	r30, r18
    1220:	f3 1f       	adc	r31, r19
    1222:	20 81       	ld	r18, Z
    1224:	ca 01       	movw	r24, r20
    1226:	62 2f       	mov	r22, r18
    1228:	0e 94 0b 07 	call	0xe16	; 0xe16 <DIO_voidGetPinValue>
    122c:	88 23       	and	r24, r24
    122e:	99 f4       	brne	.+38     	; 0x1256 <KEYPAD_Get_Pressed_Key+0x1b8>
					{
						return ((i*SIZE) + (j));
    1230:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	98 2f       	mov	r25, r24
    1240:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1242:	89 0f       	add	r24, r25
		}

	}


}
    1244:	a6 96       	adiw	r28, 0x26	; 38
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret
	{
		for(i = 0; i<SIZE; i++)
		{
			DIO_voidSetPinValue(pPORTC, rows[i], low);

			for(j = 0; j<SIZE; j++)
    1256:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	8d 8f       	std	Y+29, r24	; 0x1d
    125c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	08 f4       	brcc	.+2      	; 0x1264 <KEYPAD_Get_Pressed_Key+0x1c6>
    1262:	4d cf       	rjmp	.-358    	; 0x10fe <KEYPAD_Get_Pressed_Key+0x60>
					{
						return ((i*SIZE) + (j));
					}
				}
			}
			DIO_voidSetPinValue(pPORTC, rows[i], high);
    1264:	40 91 21 01 	lds	r20, 0x0121
    1268:	50 91 22 01 	lds	r21, 0x0122
    126c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	ce 01       	movw	r24, r28
    1274:	4f 96       	adiw	r24, 0x1f	; 31
    1276:	fc 01       	movw	r30, r24
    1278:	e2 0f       	add	r30, r18
    127a:	f3 1f       	adc	r31, r19
    127c:	20 81       	ld	r18, Z
    127e:	ca 01       	movw	r24, r20
    1280:	62 2f       	mov	r22, r18
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 ea       	ldi	r26, 0xA0	; 160
    128e:	b0 e4       	ldi	r27, 0x40	; 64
    1290:	8b 87       	std	Y+11, r24	; 0x0b
    1292:	9c 87       	std	Y+12, r25	; 0x0c
    1294:	ad 87       	std	Y+13, r26	; 0x0d
    1296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1298:	6b 85       	ldd	r22, Y+11	; 0x0b
    129a:	7c 85       	ldd	r23, Y+12	; 0x0c
    129c:	8d 85       	ldd	r24, Y+13	; 0x0d
    129e:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	4a e7       	ldi	r20, 0x7A	; 122
    12a6:	55 e4       	ldi	r21, 0x45	; 69
    12a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	8f 83       	std	Y+7, r24	; 0x07
    12b2:	98 87       	std	Y+8, r25	; 0x08
    12b4:	a9 87       	std	Y+9, r26	; 0x09
    12b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e8       	ldi	r20, 0x80	; 128
    12c6:	5f e3       	ldi	r21, 0x3F	; 63
    12c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	2c f4       	brge	.+10     	; 0x12da <KEYPAD_Get_Pressed_Key+0x23c>
		__ticks = 1;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
    12d8:	3f c0       	rjmp	.+126    	; 0x1358 <KEYPAD_Get_Pressed_Key+0x2ba>
	else if (__tmp > 65535)
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	3f ef       	ldi	r19, 0xFF	; 255
    12e6:	4f e7       	ldi	r20, 0x7F	; 127
    12e8:	57 e4       	ldi	r21, 0x47	; 71
    12ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ee:	18 16       	cp	r1, r24
    12f0:	4c f5       	brge	.+82     	; 0x1344 <KEYPAD_Get_Pressed_Key+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e2       	ldi	r20, 0x20	; 32
    1300:	51 e4       	ldi	r21, 0x41	; 65
    1302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 83       	std	Y+5, r24	; 0x05
    131a:	0f c0       	rjmp	.+30     	; 0x133a <KEYPAD_Get_Pressed_Key+0x29c>
    131c:	80 e9       	ldi	r24, 0x90	; 144
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	9c 83       	std	Y+4, r25	; 0x04
    1322:	8b 83       	std	Y+3, r24	; 0x03
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <KEYPAD_Get_Pressed_Key+0x28a>
    132c:	9c 83       	std	Y+4, r25	; 0x04
    132e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	69 f7       	brne	.-38     	; 0x131c <KEYPAD_Get_Pressed_Key+0x27e>
    1342:	14 c0       	rjmp	.+40     	; 0x136c <KEYPAD_Get_Pressed_Key+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1344:	6f 81       	ldd	r22, Y+7	; 0x07
    1346:	78 85       	ldd	r23, Y+8	; 0x08
    1348:	89 85       	ldd	r24, Y+9	; 0x09
    134a:	9a 85       	ldd	r25, Y+10	; 0x0a
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	8d 81       	ldd	r24, Y+5	; 0x05
    135a:	9e 81       	ldd	r25, Y+6	; 0x06
    135c:	9a 83       	std	Y+2, r25	; 0x02
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	9a 81       	ldd	r25, Y+2	; 0x02
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <KEYPAD_Get_Pressed_Key+0x2c6>
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	u8 rows[]={5,4,3,2};
	u8 cols[]={7,6,5,3};

	while(1)
	{
		for(i = 0; i<SIZE; i++)
    136c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	8e 8f       	std	Y+30, r24	; 0x1e
    1372:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	08 f4       	brcc	.+2      	; 0x137a <KEYPAD_Get_Pressed_Key+0x2dc>
    1378:	ae ce       	rjmp	.-676    	; 0x10d6 <KEYPAD_Get_Pressed_Key+0x38>
    137a:	ab ce       	rjmp	.-682    	; 0x10d2 <KEYPAD_Get_Pressed_Key+0x34>

0000137c <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	2e 97       	sbiw	r28, 0x0e	; 14
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
    1390:	80 91 1d 01 	lds	r24, 0x011D
    1394:	90 91 1e 01 	lds	r25, 0x011E
    1398:	63 e0       	ldi	r22, 0x03	; 3
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
    13a0:	80 91 1d 01 	lds	r24, 0x011D
    13a4:	90 91 1e 01 	lds	r25, 0x011E
    13a8:	62 e0       	ldi	r22, 0x02	; 2
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidSetPinDirection>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a8 e4       	ldi	r26, 0x48	; 72
    13b6:	b2 e4       	ldi	r27, 0x42	; 66
    13b8:	8b 87       	std	Y+11, r24	; 0x0b
    13ba:	9c 87       	std	Y+12, r25	; 0x0c
    13bc:	ad 87       	std	Y+13, r26	; 0x0d
    13be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	4a e7       	ldi	r20, 0x7A	; 122
    13ce:	55 e4       	ldi	r21, 0x45	; 69
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	8f 83       	std	Y+7, r24	; 0x07
    13da:	98 87       	std	Y+8, r25	; 0x08
    13dc:	a9 87       	std	Y+9, r26	; 0x09
    13de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e0:	6f 81       	ldd	r22, Y+7	; 0x07
    13e2:	78 85       	ldd	r23, Y+8	; 0x08
    13e4:	89 85       	ldd	r24, Y+9	; 0x09
    13e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	5f e3       	ldi	r21, 0x3F	; 63
    13f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	2c f4       	brge	.+10     	; 0x1402 <H_LCD_void_Init+0x86>
		__ticks = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	3f ef       	ldi	r19, 0xFF	; 255
    140e:	4f e7       	ldi	r20, 0x7F	; 127
    1410:	57 e4       	ldi	r21, 0x47	; 71
    1412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1416:	18 16       	cp	r1, r24
    1418:	4c f5       	brge	.+82     	; 0x146c <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	6b 85       	ldd	r22, Y+11	; 0x0b
    141c:	7c 85       	ldd	r23, Y+12	; 0x0c
    141e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1420:	9e 85       	ldd	r25, Y+14	; 0x0e
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	40 e2       	ldi	r20, 0x20	; 32
    1428:	51 e4       	ldi	r21, 0x41	; 65
    142a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9e 83       	std	Y+6, r25	; 0x06
    1440:	8d 83       	std	Y+5, r24	; 0x05
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <H_LCD_void_Init+0xe6>
    1444:	80 e9       	ldi	r24, 0x90	; 144
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <H_LCD_void_Init+0xd4>
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9e 83       	std	Y+6, r25	; 0x06
    1460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	69 f7       	brne	.-38     	; 0x1444 <H_LCD_void_Init+0xc8>
    146a:	14 c0       	rjmp	.+40     	; 0x1494 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	6f 81       	ldd	r22, Y+7	; 0x07
    146e:	78 85       	ldd	r23, Y+8	; 0x08
    1470:	89 85       	ldd	r24, Y+9	; 0x09
    1472:	9a 85       	ldd	r25, Y+10	; 0x0a
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <H_LCD_void_Init+0x110>
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPortDirection(pPORTB, 0x17); /* 0b0001 0111 = 0x17 */
    1494:	80 91 1f 01 	lds	r24, 0x011F
    1498:	90 91 20 01 	lds	r25, 0x0120
    149c:	67 e1       	ldi	r22, 0x17	; 23
    149e:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_voidSetPortDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    14a2:	80 91 1d 01 	lds	r24, 0x011D
    14a6:	90 91 1e 01 	lds	r25, 0x011E
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    14b2:	82 e3       	ldi	r24, 0x32	; 50
    14b4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    14b8:	82 e3       	ldi	r24, 0x32	; 50
    14ba:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    14be:	88 e2       	ldi	r24, 0x28	; 40
    14c0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    14c4:	8e e0       	ldi	r24, 0x0E	; 14
    14c6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>


	/*
 #endif*/

}
    14d0:	2e 96       	adiw	r28, 0x0e	; 14
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	6d 97       	sbiw	r28, 0x1d	; 29
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	f8 94       	cli
    14f0:	de bf       	out	0x3e, r29	; 62
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    14f8:	80 91 1d 01 	lds	r24, 0x011D
    14fc:	90 91 1e 01 	lds	r25, 0x011E
    1500:	63 e0       	ldi	r22, 0x03	; 3
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a0 e8       	ldi	r26, 0x80	; 128
    150e:	bf e3       	ldi	r27, 0x3F	; 63
    1510:	89 8f       	std	Y+25, r24	; 0x19
    1512:	9a 8f       	std	Y+26, r25	; 0x1a
    1514:	ab 8f       	std	Y+27, r26	; 0x1b
    1516:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	69 8d       	ldd	r22, Y+25	; 0x19
    151a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    151e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	55 e4       	ldi	r21, 0x45	; 69
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8d 8b       	std	Y+21, r24	; 0x15
    1532:	9e 8b       	std	Y+22, r25	; 0x16
    1534:	af 8b       	std	Y+23, r26	; 0x17
    1536:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1538:	6d 89       	ldd	r22, Y+21	; 0x15
    153a:	7e 89       	ldd	r23, Y+22	; 0x16
    153c:	8f 89       	ldd	r24, Y+23	; 0x17
    153e:	98 8d       	ldd	r25, Y+24	; 0x18
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <H_LCD_void_sendData+0x78>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9c 8b       	std	Y+20, r25	; 0x14
    1556:	8b 8b       	std	Y+19, r24	; 0x13
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    155a:	6d 89       	ldd	r22, Y+21	; 0x15
    155c:	7e 89       	ldd	r23, Y+22	; 0x16
    155e:	8f 89       	ldd	r24, Y+23	; 0x17
    1560:	98 8d       	ldd	r25, Y+24	; 0x18
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	69 8d       	ldd	r22, Y+25	; 0x19
    1574:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1576:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1578:	9c 8d       	ldd	r25, Y+28	; 0x1c
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9c 8b       	std	Y+20, r25	; 0x14
    1598:	8b 8b       	std	Y+19, r24	; 0x13
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <H_LCD_void_sendData+0xd8>
    159c:	80 e9       	ldi	r24, 0x90	; 144
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	9a 8b       	std	Y+18, r25	; 0x12
    15a2:	89 8b       	std	Y+17, r24	; 0x11
    15a4:	89 89       	ldd	r24, Y+17	; 0x11
    15a6:	9a 89       	ldd	r25, Y+18	; 0x12
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <H_LCD_void_sendData+0xc6>
    15ac:	9a 8b       	std	Y+18, r25	; 0x12
    15ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8b 89       	ldd	r24, Y+19	; 0x13
    15bc:	9c 89       	ldd	r25, Y+20	; 0x14
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <H_LCD_void_sendData+0xba>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6d 89       	ldd	r22, Y+21	; 0x15
    15c6:	7e 89       	ldd	r23, Y+22	; 0x16
    15c8:	8f 89       	ldd	r24, Y+23	; 0x17
    15ca:	98 8d       	ldd	r25, Y+24	; 0x18
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9c 8b       	std	Y+20, r25	; 0x14
    15d6:	8b 8b       	std	Y+19, r24	; 0x13
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	98 8b       	std	Y+16, r25	; 0x10
    15de:	8f 87       	std	Y+15, r24	; 0x0f
    15e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e2:	98 89       	ldd	r25, Y+16	; 0x10
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <H_LCD_void_sendData+0x102>
    15e8:	98 8b       	std	Y+16, r25	; 0x10
    15ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    15ec:	80 91 1d 01 	lds	r24, 0x011D
    15f0:	90 91 1e 01 	lds	r25, 0x011E
    15f4:	62 e0       	ldi	r22, 0x02	; 2
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e8       	ldi	r26, 0x80	; 128
    1602:	bf e3       	ldi	r27, 0x3F	; 63
    1604:	8b 87       	std	Y+11, r24	; 0x0b
    1606:	9c 87       	std	Y+12, r25	; 0x0c
    1608:	ad 87       	std	Y+13, r26	; 0x0d
    160a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	6b 85       	ldd	r22, Y+11	; 0x0b
    160e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1610:	8d 85       	ldd	r24, Y+13	; 0x0d
    1612:	9e 85       	ldd	r25, Y+14	; 0x0e
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a e7       	ldi	r20, 0x7A	; 122
    161a:	55 e4       	ldi	r21, 0x45	; 69
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8f 83       	std	Y+7, r24	; 0x07
    1626:	98 87       	std	Y+8, r25	; 0x08
    1628:	a9 87       	std	Y+9, r26	; 0x09
    162a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162c:	6f 81       	ldd	r22, Y+7	; 0x07
    162e:	78 85       	ldd	r23, Y+8	; 0x08
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e8       	ldi	r20, 0x80	; 128
    163a:	5f e3       	ldi	r21, 0x3F	; 63
    163c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1640:	88 23       	and	r24, r24
    1642:	2c f4       	brge	.+10     	; 0x164e <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	3f c0       	rjmp	.+126    	; 0x16cc <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	3f ef       	ldi	r19, 0xFF	; 255
    165a:	4f e7       	ldi	r20, 0x7F	; 127
    165c:	57 e4       	ldi	r21, 0x47	; 71
    165e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1662:	18 16       	cp	r1, r24
    1664:	4c f5       	brge	.+82     	; 0x16b8 <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
    168e:	0f c0       	rjmp	.+30     	; 0x16ae <H_LCD_void_sendData+0x1cc>
    1690:	80 e9       	ldi	r24, 0x90	; 144
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	9c 83       	std	Y+4, r25	; 0x04
    1696:	8b 83       	std	Y+3, r24	; 0x03
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	9c 81       	ldd	r25, Y+4	; 0x04
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	f1 f7       	brne	.-4      	; 0x169c <H_LCD_void_sendData+0x1ba>
    16a0:	9c 83       	std	Y+4, r25	; 0x04
    16a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	9e 81       	ldd	r25, Y+6	; 0x06
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	69 f7       	brne	.-38     	; 0x1690 <H_LCD_void_sendData+0x1ae>
    16b6:	14 c0       	rjmp	.+40     	; 0x16e0 <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b8:	6f 81       	ldd	r22, Y+7	; 0x07
    16ba:	78 85       	ldd	r23, Y+8	; 0x08
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	8d 81       	ldd	r24, Y+5	; 0x05
    16ce:	9e 81       	ldd	r25, Y+6	; 0x06
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <H_LCD_void_sendData+0x1f6>
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    16e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16e2:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <H_LCD_void_latchByte>
}
    16e6:	6d 96       	adiw	r28, 0x1d	; 29
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
    1700:	6d 97       	sbiw	r28, 0x1d	; 29
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	f8 94       	cli
    1706:	de bf       	out	0x3e, r29	; 62
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	cd bf       	out	0x3d, r28	; 61
    170c:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    170e:	80 91 1d 01 	lds	r24, 0x011D
    1712:	90 91 1e 01 	lds	r25, 0x011E
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a0 e8       	ldi	r26, 0x80	; 128
    1724:	bf e3       	ldi	r27, 0x3F	; 63
    1726:	89 8f       	std	Y+25, r24	; 0x19
    1728:	9a 8f       	std	Y+26, r25	; 0x1a
    172a:	ab 8f       	std	Y+27, r26	; 0x1b
    172c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172e:	69 8d       	ldd	r22, Y+25	; 0x19
    1730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a e7       	ldi	r20, 0x7A	; 122
    173c:	55 e4       	ldi	r21, 0x45	; 69
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	8d 8b       	std	Y+21, r24	; 0x15
    1748:	9e 8b       	std	Y+22, r25	; 0x16
    174a:	af 8b       	std	Y+23, r26	; 0x17
    174c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    174e:	6d 89       	ldd	r22, Y+21	; 0x15
    1750:	7e 89       	ldd	r23, Y+22	; 0x16
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e8       	ldi	r20, 0x80	; 128
    175c:	5f e3       	ldi	r21, 0x3F	; 63
    175e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1762:	88 23       	and	r24, r24
    1764:	2c f4       	brge	.+10     	; 0x1770 <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9c 8b       	std	Y+20, r25	; 0x14
    176c:	8b 8b       	std	Y+19, r24	; 0x13
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	3f ef       	ldi	r19, 0xFF	; 255
    177c:	4f e7       	ldi	r20, 0x7F	; 127
    177e:	57 e4       	ldi	r21, 0x47	; 71
    1780:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1784:	18 16       	cp	r1, r24
    1786:	4c f5       	brge	.+82     	; 0x17da <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1788:	69 8d       	ldd	r22, Y+25	; 0x19
    178a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    178c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    178e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	9c 8b       	std	Y+20, r25	; 0x14
    17ae:	8b 8b       	std	Y+19, r24	; 0x13
    17b0:	0f c0       	rjmp	.+30     	; 0x17d0 <H_LCD_void_sendCommand+0xd8>
    17b2:	80 e9       	ldi	r24, 0x90	; 144
    17b4:	91 e0       	ldi	r25, 0x01	; 1
    17b6:	9a 8b       	std	Y+18, r25	; 0x12
    17b8:	89 8b       	std	Y+17, r24	; 0x11
    17ba:	89 89       	ldd	r24, Y+17	; 0x11
    17bc:	9a 89       	ldd	r25, Y+18	; 0x12
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <H_LCD_void_sendCommand+0xc6>
    17c2:	9a 8b       	std	Y+18, r25	; 0x12
    17c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c6:	8b 89       	ldd	r24, Y+19	; 0x13
    17c8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	9c 8b       	std	Y+20, r25	; 0x14
    17ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d0:	8b 89       	ldd	r24, Y+19	; 0x13
    17d2:	9c 89       	ldd	r25, Y+20	; 0x14
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	69 f7       	brne	.-38     	; 0x17b2 <H_LCD_void_sendCommand+0xba>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17da:	6d 89       	ldd	r22, Y+21	; 0x15
    17dc:	7e 89       	ldd	r23, Y+22	; 0x16
    17de:	8f 89       	ldd	r24, Y+23	; 0x17
    17e0:	98 8d       	ldd	r25, Y+24	; 0x18
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9c 8b       	std	Y+20, r25	; 0x14
    17ec:	8b 8b       	std	Y+19, r24	; 0x13
    17ee:	8b 89       	ldd	r24, Y+19	; 0x13
    17f0:	9c 89       	ldd	r25, Y+20	; 0x14
    17f2:	98 8b       	std	Y+16, r25	; 0x10
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f8:	98 89       	ldd	r25, Y+16	; 0x10
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	f1 f7       	brne	.-4      	; 0x17fa <H_LCD_void_sendCommand+0x102>
    17fe:	98 8b       	std	Y+16, r25	; 0x10
    1800:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1802:	80 91 1d 01 	lds	r24, 0x011D
    1806:	90 91 1e 01 	lds	r25, 0x011E
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e8       	ldi	r26, 0x80	; 128
    1818:	bf e3       	ldi	r27, 0x3F	; 63
    181a:	8b 87       	std	Y+11, r24	; 0x0b
    181c:	9c 87       	std	Y+12, r25	; 0x0c
    181e:	ad 87       	std	Y+13, r26	; 0x0d
    1820:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1822:	6b 85       	ldd	r22, Y+11	; 0x0b
    1824:	7c 85       	ldd	r23, Y+12	; 0x0c
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	9e 85       	ldd	r25, Y+14	; 0x0e
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a e7       	ldi	r20, 0x7A	; 122
    1830:	55 e4       	ldi	r21, 0x45	; 69
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	8f 83       	std	Y+7, r24	; 0x07
    183c:	98 87       	std	Y+8, r25	; 0x08
    183e:	a9 87       	std	Y+9, r26	; 0x09
    1840:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1842:	6f 81       	ldd	r22, Y+7	; 0x07
    1844:	78 85       	ldd	r23, Y+8	; 0x08
    1846:	89 85       	ldd	r24, Y+9	; 0x09
    1848:	9a 85       	ldd	r25, Y+10	; 0x0a
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1856:	88 23       	and	r24, r24
    1858:	2c f4       	brge	.+10     	; 0x1864 <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9e 83       	std	Y+6, r25	; 0x06
    1860:	8d 83       	std	Y+5, r24	; 0x05
    1862:	3f c0       	rjmp	.+126    	; 0x18e2 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	4f e7       	ldi	r20, 0x7F	; 127
    1872:	57 e4       	ldi	r21, 0x47	; 71
    1874:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1878:	18 16       	cp	r1, r24
    187a:	4c f5       	brge	.+82     	; 0x18ce <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187c:	6b 85       	ldd	r22, Y+11	; 0x0b
    187e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1880:	8d 85       	ldd	r24, Y+13	; 0x0d
    1882:	9e 85       	ldd	r25, Y+14	; 0x0e
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e2       	ldi	r20, 0x20	; 32
    188a:	51 e4       	ldi	r21, 0x41	; 65
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <H_LCD_void_sendCommand+0x1cc>
    18a6:	80 e9       	ldi	r24, 0x90	; 144
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	9c 83       	std	Y+4, r25	; 0x04
    18ac:	8b 83       	std	Y+3, r24	; 0x03
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <H_LCD_void_sendCommand+0x1ba>
    18b6:	9c 83       	std	Y+4, r25	; 0x04
    18b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	9e 83       	std	Y+6, r25	; 0x06
    18c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c4:	8d 81       	ldd	r24, Y+5	; 0x05
    18c6:	9e 81       	ldd	r25, Y+6	; 0x06
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	69 f7       	brne	.-38     	; 0x18a6 <H_LCD_void_sendCommand+0x1ae>
    18cc:	14 c0       	rjmp	.+40     	; 0x18f6 <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ce:	6f 81       	ldd	r22, Y+7	; 0x07
    18d0:	78 85       	ldd	r23, Y+8	; 0x08
    18d2:	89 85       	ldd	r24, Y+9	; 0x09
    18d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	9e 83       	std	Y+6, r25	; 0x06
    18e0:	8d 83       	std	Y+5, r24	; 0x05
    18e2:	8d 81       	ldd	r24, Y+5	; 0x05
    18e4:	9e 81       	ldd	r25, Y+6	; 0x06
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	f1 f7       	brne	.-4      	; 0x18ee <H_LCD_void_sendCommand+0x1f6>
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    18f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18f8:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <H_LCD_void_latchByte>
}
    18fc:	6d 96       	adiw	r28, 0x1d	; 29
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <H_LCD_void_sendString+0x6>
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9b 83       	std	Y+3, r25	; 0x03
    191c:	8a 83       	std	Y+2, r24	; 0x02
    191e:	0e c0       	rjmp	.+28     	; 0x193c <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	9b 81       	ldd	r25, Y+3	; 0x03
    192a:	fc 01       	movw	r30, r24
    192c:	e2 0f       	add	r30, r18
    192e:	f3 1f       	adc	r31, r19
    1930:	80 81       	ld	r24, Z
    1932:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
		i++;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	9b 81       	ldd	r25, Y+3	; 0x03
    1946:	fc 01       	movw	r30, r24
    1948:	e2 0f       	add	r30, r18
    194a:	f3 1f       	adc	r31, r19
    194c:	80 81       	ld	r24, Z
    194e:	88 23       	and	r24, r24
    1950:	39 f7       	brne	.-50     	; 0x1920 <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	08 95       	ret

0000195e <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	6c 97       	sbiw	r28, 0x1c	; 28
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1972:	80 91 1d 01 	lds	r24, 0x011D
    1976:	90 91 1e 01 	lds	r25, 0x011E
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	a0 e8       	ldi	r26, 0x80	; 128
    1988:	bf e3       	ldi	r27, 0x3F	; 63
    198a:	89 8f       	std	Y+25, r24	; 0x19
    198c:	9a 8f       	std	Y+26, r25	; 0x1a
    198e:	ab 8f       	std	Y+27, r26	; 0x1b
    1990:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1992:	69 8d       	ldd	r22, Y+25	; 0x19
    1994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	4a e7       	ldi	r20, 0x7A	; 122
    19a0:	55 e4       	ldi	r21, 0x45	; 69
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8d 8b       	std	Y+21, r24	; 0x15
    19ac:	9e 8b       	std	Y+22, r25	; 0x16
    19ae:	af 8b       	std	Y+23, r26	; 0x17
    19b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19b2:	6d 89       	ldd	r22, Y+21	; 0x15
    19b4:	7e 89       	ldd	r23, Y+22	; 0x16
    19b6:	8f 89       	ldd	r24, Y+23	; 0x17
    19b8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 e8       	ldi	r20, 0x80	; 128
    19c0:	5f e3       	ldi	r21, 0x3F	; 63
    19c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c6:	88 23       	and	r24, r24
    19c8:	2c f4       	brge	.+10     	; 0x19d4 <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	3f c0       	rjmp	.+126    	; 0x1a52 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    19d4:	6d 89       	ldd	r22, Y+21	; 0x15
    19d6:	7e 89       	ldd	r23, Y+22	; 0x16
    19d8:	8f 89       	ldd	r24, Y+23	; 0x17
    19da:	98 8d       	ldd	r25, Y+24	; 0x18
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	3f ef       	ldi	r19, 0xFF	; 255
    19e0:	4f e7       	ldi	r20, 0x7F	; 127
    19e2:	57 e4       	ldi	r21, 0x47	; 71
    19e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e8:	18 16       	cp	r1, r24
    19ea:	4c f5       	brge	.+82     	; 0x1a3e <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ec:	69 8d       	ldd	r22, Y+25	; 0x19
    19ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e2       	ldi	r20, 0x20	; 32
    19fa:	51 e4       	ldi	r21, 0x41	; 65
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	bc 01       	movw	r22, r24
    1a06:	cd 01       	movw	r24, r26
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
    1a14:	0f c0       	rjmp	.+30     	; 0x1a34 <H_LCD_void_clearDisplay+0xd6>
    1a16:	80 e9       	ldi	r24, 0x90	; 144
    1a18:	91 e0       	ldi	r25, 0x01	; 1
    1a1a:	9a 8b       	std	Y+18, r25	; 0x12
    1a1c:	89 8b       	std	Y+17, r24	; 0x11
    1a1e:	89 89       	ldd	r24, Y+17	; 0x11
    1a20:	9a 89       	ldd	r25, Y+18	; 0x12
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <H_LCD_void_clearDisplay+0xc4>
    1a26:	9a 8b       	std	Y+18, r25	; 0x12
    1a28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a34:	8b 89       	ldd	r24, Y+19	; 0x13
    1a36:	9c 89       	ldd	r25, Y+20	; 0x14
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	69 f7       	brne	.-38     	; 0x1a16 <H_LCD_void_clearDisplay+0xb8>
    1a3c:	14 c0       	rjmp	.+40     	; 0x1a66 <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9c 8b       	std	Y+20, r25	; 0x14
    1a50:	8b 8b       	std	Y+19, r24	; 0x13
    1a52:	8b 89       	ldd	r24, Y+19	; 0x13
    1a54:	9c 89       	ldd	r25, Y+20	; 0x14
    1a56:	98 8b       	std	Y+16, r25	; 0x10
    1a58:	8f 87       	std	Y+15, r24	; 0x0f
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 89       	ldd	r25, Y+16	; 0x10
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <H_LCD_void_clearDisplay+0x100>
    1a62:	98 8b       	std	Y+16, r25	; 0x10
    1a64:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1a66:	80 91 1d 01 	lds	r24, 0x011D
    1a6a:	90 91 1e 01 	lds	r25, 0x011E
    1a6e:	62 e0       	ldi	r22, 0x02	; 2
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e8       	ldi	r26, 0x80	; 128
    1a7c:	bf e3       	ldi	r27, 0x3F	; 63
    1a7e:	8b 87       	std	Y+11, r24	; 0x0b
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	ad 87       	std	Y+13, r26	; 0x0d
    1a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	55 e4       	ldi	r21, 0x45	; 69
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8f 83       	std	Y+7, r24	; 0x07
    1aa0:	98 87       	std	Y+8, r25	; 0x08
    1aa2:	a9 87       	std	Y+9, r26	; 0x09
    1aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <H_LCD_void_clearDisplay+0x1ca>
    1b0a:	80 e9       	ldi	r24, 0x90	; 144
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <H_LCD_void_clearDisplay+0x1b8>
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <H_LCD_void_clearDisplay+0x1ac>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <H_LCD_void_clearDisplay+0x1f4>
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <H_LCD_void_latchByte>
}
    1b60:	6c 96       	adiw	r28, 0x1c	; 28
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <H_LCD_void_gotoXY+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <H_LCD_void_gotoXY+0x8>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    1b82:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    1b84:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	3d 83       	std	Y+5, r19	; 0x05
    1b8e:	2c 83       	std	Y+4, r18	; 0x04
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	81 30       	cpi	r24, 0x01	; 1
    1b96:	91 05       	cpc	r25, r1
    1b98:	c1 f0       	breq	.+48     	; 0x1bca <H_LCD_void_gotoXY+0x58>
    1b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <H_LCD_void_gotoXY+0x3c>
    1ba4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	61 f0       	breq	.+24     	; 0x1bc4 <H_LCD_void_gotoXY+0x52>
    1bac:	19 c0       	rjmp	.+50     	; 0x1be0 <H_LCD_void_gotoXY+0x6e>
    1bae:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	22 30       	cpi	r18, 0x02	; 2
    1bb4:	31 05       	cpc	r19, r1
    1bb6:	69 f0       	breq	.+26     	; 0x1bd2 <H_LCD_void_gotoXY+0x60>
    1bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	83 30       	cpi	r24, 0x03	; 3
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	61 f0       	breq	.+24     	; 0x1bda <H_LCD_void_gotoXY+0x68>
    1bc2:	0e c0       	rjmp	.+28     	; 0x1be0 <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	0b c0       	rjmp	.+22     	; 0x1be0 <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	80 5c       	subi	r24, 0xC0	; 192
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	80 5f       	subi	r24, 0xF0	; 240
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	80 5b       	subi	r24, 0xB0	; 176
    1bde:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	80 68       	ori	r24, 0x80	; 128
    1be4:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	08 95       	ret

00001bf8 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	e9 97       	sbiw	r28, 0x39	; 57
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    1c0e:	20 91 1f 01 	lds	r18, 0x011F
    1c12:	30 91 20 01 	lds	r19, 0x0120
    1c16:	89 ad       	ldd	r24, Y+57	; 0x39
    1c18:	48 2f       	mov	r20, r24
    1c1a:	44 1f       	adc	r20, r20
    1c1c:	44 27       	eor	r20, r20
    1c1e:	44 1f       	adc	r20, r20
    1c20:	c9 01       	movw	r24, r18
    1c22:	64 e0       	ldi	r22, 0x04	; 4
    1c24:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    1c28:	20 91 1f 01 	lds	r18, 0x011F
    1c2c:	30 91 20 01 	lds	r19, 0x0120
    1c30:	89 ad       	ldd	r24, Y+57	; 0x39
    1c32:	82 95       	swap	r24
    1c34:	86 95       	lsr	r24
    1c36:	86 95       	lsr	r24
    1c38:	83 70       	andi	r24, 0x03	; 3
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	41 70       	andi	r20, 0x01	; 1
    1c3e:	c9 01       	movw	r24, r18
    1c40:	62 e0       	ldi	r22, 0x02	; 2
    1c42:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    1c46:	20 91 1f 01 	lds	r18, 0x011F
    1c4a:	30 91 20 01 	lds	r19, 0x0120
    1c4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1c50:	82 95       	swap	r24
    1c52:	86 95       	lsr	r24
    1c54:	87 70       	andi	r24, 0x07	; 7
    1c56:	48 2f       	mov	r20, r24
    1c58:	41 70       	andi	r20, 0x01	; 1
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    1c62:	20 91 1f 01 	lds	r18, 0x011F
    1c66:	30 91 20 01 	lds	r19, 0x0120
    1c6a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c6c:	82 95       	swap	r24
    1c6e:	8f 70       	andi	r24, 0x0F	; 15
    1c70:	48 2f       	mov	r20, r24
    1c72:	41 70       	andi	r20, 0x01	; 1
    1c74:	c9 01       	movw	r24, r18
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1c7c:	80 91 1d 01 	lds	r24, 0x011D
    1c80:	90 91 1e 01 	lds	r25, 0x011E
    1c84:	62 e0       	ldi	r22, 0x02	; 2
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e8       	ldi	r26, 0x80	; 128
    1c92:	bf e3       	ldi	r27, 0x3F	; 63
    1c94:	8d ab       	std	Y+53, r24	; 0x35
    1c96:	9e ab       	std	Y+54, r25	; 0x36
    1c98:	af ab       	std	Y+55, r26	; 0x37
    1c9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1ca0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a e7       	ldi	r20, 0x7A	; 122
    1caa:	55 e4       	ldi	r21, 0x45	; 69
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	89 ab       	std	Y+49, r24	; 0x31
    1cb6:	9a ab       	std	Y+50, r25	; 0x32
    1cb8:	ab ab       	std	Y+51, r26	; 0x33
    1cba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cbc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cbe:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	98 ab       	std	Y+48, r25	; 0x30
    1cda:	8f a7       	std	Y+47, r24	; 0x2f
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    1cde:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cfa:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	98 ab       	std	Y+48, r25	; 0x30
    1d1c:	8f a7       	std	Y+47, r24	; 0x2f
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <H_LCD_void_latchByte+0x146>
    1d20:	80 e9       	ldi	r24, 0x90	; 144
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	9e a7       	std	Y+46, r25	; 0x2e
    1d26:	8d a7       	std	Y+45, r24	; 0x2d
    1d28:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <H_LCD_void_latchByte+0x134>
    1d30:	9e a7       	std	Y+46, r25	; 0x2e
    1d32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d36:	98 a9       	ldd	r25, Y+48	; 0x30
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	98 ab       	std	Y+48, r25	; 0x30
    1d3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d40:	98 a9       	ldd	r25, Y+48	; 0x30
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <H_LCD_void_latchByte+0x128>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	69 a9       	ldd	r22, Y+49	; 0x31
    1d4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	98 ab       	std	Y+48, r25	; 0x30
    1d5a:	8f a7       	std	Y+47, r24	; 0x2f
    1d5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d60:	9c a7       	std	Y+44, r25	; 0x2c
    1d62:	8b a7       	std	Y+43, r24	; 0x2b
    1d64:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d66:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <H_LCD_void_latchByte+0x170>
    1d6c:	9c a7       	std	Y+44, r25	; 0x2c
    1d6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1d70:	80 91 1d 01 	lds	r24, 0x011D
    1d74:	90 91 1e 01 	lds	r25, 0x011E
    1d78:	62 e0       	ldi	r22, 0x02	; 2
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 ea       	ldi	r26, 0xA0	; 160
    1d86:	b0 e4       	ldi	r27, 0x40	; 64
    1d88:	8f a3       	std	Y+39, r24	; 0x27
    1d8a:	98 a7       	std	Y+40, r25	; 0x28
    1d8c:	a9 a7       	std	Y+41, r26	; 0x29
    1d8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	6f a1       	ldd	r22, Y+39	; 0x27
    1d92:	78 a5       	ldd	r23, Y+40	; 0x28
    1d94:	89 a5       	ldd	r24, Y+41	; 0x29
    1d96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a e7       	ldi	r20, 0x7A	; 122
    1d9e:	55 e4       	ldi	r21, 0x45	; 69
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8b a3       	std	Y+35, r24	; 0x23
    1daa:	9c a3       	std	Y+36, r25	; 0x24
    1dac:	ad a3       	std	Y+37, r26	; 0x25
    1dae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db0:	6b a1       	ldd	r22, Y+35	; 0x23
    1db2:	7c a1       	ldd	r23, Y+36	; 0x24
    1db4:	8d a1       	ldd	r24, Y+37	; 0x25
    1db6:	9e a1       	ldd	r25, Y+38	; 0x26
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9a a3       	std	Y+34, r25	; 0x22
    1dce:	89 a3       	std	Y+33, r24	; 0x21
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    1dd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	6f a1       	ldd	r22, Y+39	; 0x27
    1dec:	78 a5       	ldd	r23, Y+40	; 0x28
    1dee:	89 a5       	ldd	r24, Y+41	; 0x29
    1df0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <H_LCD_void_latchByte+0x23a>
    1e14:	80 e9       	ldi	r24, 0x90	; 144
    1e16:	91 e0       	ldi	r25, 0x01	; 1
    1e18:	98 a3       	std	Y+32, r25	; 0x20
    1e1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <H_LCD_void_latchByte+0x228>
    1e24:	98 a3       	std	Y+32, r25	; 0x20
    1e26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9a a3       	std	Y+34, r25	; 0x22
    1e30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	89 a1       	ldd	r24, Y+33	; 0x21
    1e34:	9a a1       	ldd	r25, Y+34	; 0x22
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <H_LCD_void_latchByte+0x21c>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e40:	8d a1       	ldd	r24, Y+37	; 0x25
    1e42:	9e a1       	ldd	r25, Y+38	; 0x26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9a a3       	std	Y+34, r25	; 0x22
    1e4e:	89 a3       	std	Y+33, r24	; 0x21
    1e50:	89 a1       	ldd	r24, Y+33	; 0x21
    1e52:	9a a1       	ldd	r25, Y+34	; 0x22
    1e54:	9e 8f       	std	Y+30, r25	; 0x1e
    1e56:	8d 8f       	std	Y+29, r24	; 0x1d
    1e58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <H_LCD_void_latchByte+0x264>
    1e60:	9e 8f       	std	Y+30, r25	; 0x1e
    1e62:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    1e64:	20 91 1f 01 	lds	r18, 0x011F
    1e68:	30 91 20 01 	lds	r19, 0x0120
    1e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6e:	86 95       	lsr	r24
    1e70:	86 95       	lsr	r24
    1e72:	86 95       	lsr	r24
    1e74:	48 2f       	mov	r20, r24
    1e76:	41 70       	andi	r20, 0x01	; 1
    1e78:	c9 01       	movw	r24, r18
    1e7a:	64 e0       	ldi	r22, 0x04	; 4
    1e7c:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    1e80:	20 91 1f 01 	lds	r18, 0x011F
    1e84:	30 91 20 01 	lds	r19, 0x0120
    1e88:	89 ad       	ldd	r24, Y+57	; 0x39
    1e8a:	86 95       	lsr	r24
    1e8c:	86 95       	lsr	r24
    1e8e:	48 2f       	mov	r20, r24
    1e90:	41 70       	andi	r20, 0x01	; 1
    1e92:	c9 01       	movw	r24, r18
    1e94:	62 e0       	ldi	r22, 0x02	; 2
    1e96:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    1e9a:	20 91 1f 01 	lds	r18, 0x011F
    1e9e:	30 91 20 01 	lds	r19, 0x0120
    1ea2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ea4:	86 95       	lsr	r24
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	41 70       	andi	r20, 0x01	; 1
    1eaa:	c9 01       	movw	r24, r18
    1eac:	61 e0       	ldi	r22, 0x01	; 1
    1eae:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    1eb2:	20 91 1f 01 	lds	r18, 0x011F
    1eb6:	30 91 20 01 	lds	r19, 0x0120
    1eba:	89 ad       	ldd	r24, Y+57	; 0x39
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	41 70       	andi	r20, 0x01	; 1
    1ec0:	c9 01       	movw	r24, r18
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1ec8:	80 91 1d 01 	lds	r24, 0x011D
    1ecc:	90 91 1e 01 	lds	r25, 0x011E
    1ed0:	62 e0       	ldi	r22, 0x02	; 2
    1ed2:	41 e0       	ldi	r20, 0x01	; 1
    1ed4:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e8       	ldi	r26, 0x80	; 128
    1ede:	bf e3       	ldi	r27, 0x3F	; 63
    1ee0:	89 8f       	std	Y+25, r24	; 0x19
    1ee2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ee4:	ab 8f       	std	Y+27, r26	; 0x1b
    1ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a e7       	ldi	r20, 0x7A	; 122
    1ef6:	55 e4       	ldi	r21, 0x45	; 69
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	8d 8b       	std	Y+21, r24	; 0x15
    1f02:	9e 8b       	std	Y+22, r25	; 0x16
    1f04:	af 8b       	std	Y+23, r26	; 0x17
    1f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 8b       	std	Y+20, r25	; 0x14
    1f26:	8b 8b       	std	Y+19, r24	; 0x13
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    1f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f30:	98 8d       	ldd	r25, Y+24	; 0x18
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	69 8d       	ldd	r22, Y+25	; 0x19
    1f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9c 8b       	std	Y+20, r25	; 0x14
    1f68:	8b 8b       	std	Y+19, r24	; 0x13
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <H_LCD_void_latchByte+0x392>
    1f6c:	80 e9       	ldi	r24, 0x90	; 144
    1f6e:	91 e0       	ldi	r25, 0x01	; 1
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	89 89       	ldd	r24, Y+17	; 0x11
    1f76:	9a 89       	ldd	r25, Y+18	; 0x12
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <H_LCD_void_latchByte+0x380>
    1f7c:	9a 8b       	std	Y+18, r25	; 0x12
    1f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9c 8b       	std	Y+20, r25	; 0x14
    1f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <H_LCD_void_latchByte+0x374>
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	6d 89       	ldd	r22, Y+21	; 0x15
    1f96:	7e 89       	ldd	r23, Y+22	; 0x16
    1f98:	8f 89       	ldd	r24, Y+23	; 0x17
    1f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9c 8b       	std	Y+20, r25	; 0x14
    1fa6:	8b 8b       	std	Y+19, r24	; 0x13
    1fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1faa:	9c 89       	ldd	r25, Y+20	; 0x14
    1fac:	98 8b       	std	Y+16, r25	; 0x10
    1fae:	8f 87       	std	Y+15, r24	; 0x0f
    1fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fb2:	98 89       	ldd	r25, Y+16	; 0x10
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <H_LCD_void_latchByte+0x3bc>
    1fb8:	98 8b       	std	Y+16, r25	; 0x10
    1fba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1fbc:	80 91 1d 01 	lds	r24, 0x011D
    1fc0:	90 91 1e 01 	lds	r25, 0x011E
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 57 06 	call	0xcae	; 0xcae <DIO_voidSetPinValue>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 ea       	ldi	r26, 0xA0	; 160
    1fd2:	b0 e4       	ldi	r27, 0x40	; 64
    1fd4:	8b 87       	std	Y+11, r24	; 0x0b
    1fd6:	9c 87       	std	Y+12, r25	; 0x0c
    1fd8:	ad 87       	std	Y+13, r26	; 0x0d
    1fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	55 e4       	ldi	r21, 0x45	; 69
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8f 83       	std	Y+7, r24	; 0x07
    1ff6:	98 87       	std	Y+8, r25	; 0x08
    1ff8:	a9 87       	std	Y+9, r26	; 0x09
    1ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	3f c0       	rjmp	.+126    	; 0x209c <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    201e:	6f 81       	ldd	r22, Y+7	; 0x07
    2020:	78 85       	ldd	r23, Y+8	; 0x08
    2022:	89 85       	ldd	r24, Y+9	; 0x09
    2024:	9a 85       	ldd	r25, Y+10	; 0x0a
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	6b 85       	ldd	r22, Y+11	; 0x0b
    2038:	7c 85       	ldd	r23, Y+12	; 0x0c
    203a:	8d 85       	ldd	r24, Y+13	; 0x0d
    203c:	9e 85       	ldd	r25, Y+14	; 0x0e
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	0f c0       	rjmp	.+30     	; 0x207e <H_LCD_void_latchByte+0x486>
    2060:	80 e9       	ldi	r24, 0x90	; 144
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	9c 83       	std	Y+4, r25	; 0x04
    2066:	8b 83       	std	Y+3, r24	; 0x03
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	9c 81       	ldd	r25, Y+4	; 0x04
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <H_LCD_void_latchByte+0x474>
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8d 81       	ldd	r24, Y+5	; 0x05
    2076:	9e 81       	ldd	r25, Y+6	; 0x06
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <H_LCD_void_latchByte+0x468>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	9a 83       	std	Y+2, r25	; 0x02
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <H_LCD_void_latchByte+0x4b0>
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    20b0:	e9 96       	adiw	r28, 0x39	; 57
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	08 95       	ret

000020c2 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    20c2:	df 93       	push	r29
    20c4:	cf 93       	push	r28
    20c6:	00 d0       	rcall	.+0      	; 0x20c8 <H_LCD_void_creatCustomChar+0x6>
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <H_LCD_void_creatCustomChar+0x8>
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
    20d2:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	88 30       	cpi	r24, 0x08	; 8
    20d8:	f8 f4       	brcc	.+62     	; 0x2118 <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    20da:	8c 81       	ldd	r24, Y+4	; 0x04
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	08 96       	adiw	r24, 0x08	; 8
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	88 0f       	add	r24, r24
    20e8:	99 1f       	adc	r25, r25
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    20f2:	19 82       	std	Y+1, r1	; 0x01
    20f4:	0e c0       	rjmp	.+28     	; 0x2112 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	fc 01       	movw	r30, r24
    2102:	e2 0f       	add	r30, r18
    2104:	f3 1f       	adc	r31, r19
    2106:	80 81       	ld	r24, Z
    2108:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	8f 5f       	subi	r24, 0xFF	; 255
    2110:	89 83       	std	Y+1, r24	; 0x01
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	88 30       	cpi	r24, 0x08	; 8
    2116:	78 f3       	brcs	.-34     	; 0x20f6 <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	0f 92       	push	r0
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	80 58       	subi	r24, 0x80	; 128
    2136:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    213a:	89 81       	ldd	r24, Y+1	; 0x01
    213c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>

}
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <H_LCD_void_displayHex+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <H_LCD_void_displayHex+0x8>
    2150:	00 d0       	rcall	.+0      	; 0x2152 <H_LCD_void_displayHex+0xa>
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    2158:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    215a:	80 e6       	ldi	r24, 0x60	; 96
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	82 95       	swap	r24
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	2d 83       	std	Y+5, r18	; 0x05
    2174:	8d 81       	ldd	r24, Y+5	; 0x05
    2176:	9e 81       	ldd	r25, Y+6	; 0x06
    2178:	8b 30       	cpi	r24, 0x0B	; 11
    217a:	91 05       	cpc	r25, r1
    217c:	69 f1       	breq	.+90     	; 0x21d8 <H_LCD_void_displayHex+0x90>
    217e:	2d 81       	ldd	r18, Y+5	; 0x05
    2180:	3e 81       	ldd	r19, Y+6	; 0x06
    2182:	2c 30       	cpi	r18, 0x0C	; 12
    2184:	31 05       	cpc	r19, r1
    2186:	54 f4       	brge	.+20     	; 0x219c <H_LCD_void_displayHex+0x54>
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	99 23       	and	r25, r25
    218e:	bc f1       	brlt	.+110    	; 0x21fe <H_LCD_void_displayHex+0xb6>
    2190:	2d 81       	ldd	r18, Y+5	; 0x05
    2192:	3e 81       	ldd	r19, Y+6	; 0x06
    2194:	2a 30       	cpi	r18, 0x0A	; 10
    2196:	31 05       	cpc	r19, r1
    2198:	b4 f0       	brlt	.+44     	; 0x21c6 <H_LCD_void_displayHex+0x7e>
    219a:	1a c0       	rjmp	.+52     	; 0x21d0 <H_LCD_void_displayHex+0x88>
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	8d 30       	cpi	r24, 0x0D	; 13
    21a2:	91 05       	cpc	r25, r1
    21a4:	09 f1       	breq	.+66     	; 0x21e8 <H_LCD_void_displayHex+0xa0>
    21a6:	2d 81       	ldd	r18, Y+5	; 0x05
    21a8:	3e 81       	ldd	r19, Y+6	; 0x06
    21aa:	2d 30       	cpi	r18, 0x0D	; 13
    21ac:	31 05       	cpc	r19, r1
    21ae:	c4 f0       	brlt	.+48     	; 0x21e0 <H_LCD_void_displayHex+0x98>
    21b0:	8d 81       	ldd	r24, Y+5	; 0x05
    21b2:	9e 81       	ldd	r25, Y+6	; 0x06
    21b4:	8e 30       	cpi	r24, 0x0E	; 14
    21b6:	91 05       	cpc	r25, r1
    21b8:	d9 f0       	breq	.+54     	; 0x21f0 <H_LCD_void_displayHex+0xa8>
    21ba:	2d 81       	ldd	r18, Y+5	; 0x05
    21bc:	3e 81       	ldd	r19, Y+6	; 0x06
    21be:	2f 30       	cpi	r18, 0x0F	; 15
    21c0:	31 05       	cpc	r19, r1
    21c2:	d1 f0       	breq	.+52     	; 0x21f8 <H_LCD_void_displayHex+0xb0>
    21c4:	1c c0       	rjmp	.+56     	; 0x21fe <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	80 5d       	subi	r24, 0xD0	; 208
    21ca:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    21ce:	17 c0       	rjmp	.+46     	; 0x21fe <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    21d0:	81 e4       	ldi	r24, 0x41	; 65
    21d2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    21d6:	13 c0       	rjmp	.+38     	; 0x21fe <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    21d8:	82 e4       	ldi	r24, 0x42	; 66
    21da:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    21e0:	83 e4       	ldi	r24, 0x43	; 67
    21e2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    21e6:	0b c0       	rjmp	.+22     	; 0x21fe <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    21e8:	84 e4       	ldi	r24, 0x44	; 68
    21ea:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    21f0:	85 e4       	ldi	r24, 0x45	; 69
    21f2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    21f6:	03 c0       	rjmp	.+6      	; 0x21fe <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    21f8:	86 e4       	ldi	r24, 0x46	; 70
    21fa:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	8f 70       	andi	r24, 0x0F	; 15
    2202:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	3c 83       	std	Y+4, r19	; 0x04
    220c:	2b 83       	std	Y+3, r18	; 0x03
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	9c 81       	ldd	r25, Y+4	; 0x04
    2212:	8b 30       	cpi	r24, 0x0B	; 11
    2214:	91 05       	cpc	r25, r1
    2216:	69 f1       	breq	.+90     	; 0x2272 <H_LCD_void_displayHex+0x12a>
    2218:	2b 81       	ldd	r18, Y+3	; 0x03
    221a:	3c 81       	ldd	r19, Y+4	; 0x04
    221c:	2c 30       	cpi	r18, 0x0C	; 12
    221e:	31 05       	cpc	r19, r1
    2220:	54 f4       	brge	.+20     	; 0x2236 <H_LCD_void_displayHex+0xee>
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	99 23       	and	r25, r25
    2228:	bc f1       	brlt	.+110    	; 0x2298 <H_LCD_void_displayHex+0x150>
    222a:	2b 81       	ldd	r18, Y+3	; 0x03
    222c:	3c 81       	ldd	r19, Y+4	; 0x04
    222e:	2a 30       	cpi	r18, 0x0A	; 10
    2230:	31 05       	cpc	r19, r1
    2232:	b4 f0       	brlt	.+44     	; 0x2260 <H_LCD_void_displayHex+0x118>
    2234:	1a c0       	rjmp	.+52     	; 0x226a <H_LCD_void_displayHex+0x122>
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	8d 30       	cpi	r24, 0x0D	; 13
    223c:	91 05       	cpc	r25, r1
    223e:	09 f1       	breq	.+66     	; 0x2282 <H_LCD_void_displayHex+0x13a>
    2240:	2b 81       	ldd	r18, Y+3	; 0x03
    2242:	3c 81       	ldd	r19, Y+4	; 0x04
    2244:	2d 30       	cpi	r18, 0x0D	; 13
    2246:	31 05       	cpc	r19, r1
    2248:	c4 f0       	brlt	.+48     	; 0x227a <H_LCD_void_displayHex+0x132>
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	8e 30       	cpi	r24, 0x0E	; 14
    2250:	91 05       	cpc	r25, r1
    2252:	d9 f0       	breq	.+54     	; 0x228a <H_LCD_void_displayHex+0x142>
    2254:	2b 81       	ldd	r18, Y+3	; 0x03
    2256:	3c 81       	ldd	r19, Y+4	; 0x04
    2258:	2f 30       	cpi	r18, 0x0F	; 15
    225a:	31 05       	cpc	r19, r1
    225c:	d1 f0       	breq	.+52     	; 0x2292 <H_LCD_void_displayHex+0x14a>
    225e:	1c c0       	rjmp	.+56     	; 0x2298 <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    2260:	89 81       	ldd	r24, Y+1	; 0x01
    2262:	80 5d       	subi	r24, 0xD0	; 208
    2264:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    2268:	17 c0       	rjmp	.+46     	; 0x2298 <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    226a:	81 e4       	ldi	r24, 0x41	; 65
    226c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    2270:	13 c0       	rjmp	.+38     	; 0x2298 <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    2272:	82 e4       	ldi	r24, 0x42	; 66
    2274:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    227a:	83 e4       	ldi	r24, 0x43	; 67
    227c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    2280:	0b c0       	rjmp	.+22     	; 0x2298 <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    2282:	84 e4       	ldi	r24, 0x44	; 68
    2284:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    2288:	07 c0       	rjmp	.+14     	; 0x2298 <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    228a:	85 e4       	ldi	r24, 0x45	; 69
    228c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
    2290:	03 c0       	rjmp	.+6      	; 0x2298 <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    2292:	86 e4       	ldi	r24, 0x46	; 70
    2294:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
		break;
	}
}
    2298:	26 96       	adiw	r28, 0x06	; 6
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <H_LCD_void_displayBinary+0x6>
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    22b6:	83 e6       	ldi	r24, 0x63	; 99
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    22be:	19 82       	std	Y+1, r1	; 0x01
    22c0:	18 c0       	rjmp	.+48     	; 0x22f2 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	48 2f       	mov	r20, r24
    22c6:	50 e0       	ldi	r21, 0x00	; 0
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	87 e0       	ldi	r24, 0x07	; 7
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	82 1b       	sub	r24, r18
    22d4:	93 0b       	sbc	r25, r19
    22d6:	9a 01       	movw	r18, r20
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <H_LCD_void_displayBinary+0x34>
    22da:	35 95       	asr	r19
    22dc:	27 95       	ror	r18
    22de:	8a 95       	dec	r24
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <H_LCD_void_displayBinary+0x30>
    22e2:	c9 01       	movw	r24, r18
    22e4:	81 70       	andi	r24, 0x01	; 1
    22e6:	80 5d       	subi	r24, 0xD0	; 208
    22e8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	88 30       	cpi	r24, 0x08	; 8
    22f6:	28 f3       	brcs	.-54     	; 0x22c2 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	2a 97       	sbiw	r28, 0x0a	; 10
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	6f 83       	std	Y+7, r22	; 0x07
    2318:	78 87       	std	Y+8, r23	; 0x08
    231a:	89 87       	std	Y+9, r24	; 0x09
    231c:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    231e:	1e 82       	std	Y+6, r1	; 0x06
    2320:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	98 85       	ldd	r25, Y+8	; 0x08
    2326:	a9 85       	ldd	r26, Y+9	; 0x09
    2328:	ba 85       	ldd	r27, Y+10	; 0x0a
    232a:	89 83       	std	Y+1, r24	; 0x01
    232c:	9a 83       	std	Y+2, r25	; 0x02
    232e:	ab 83       	std	Y+3, r26	; 0x03
    2330:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    2332:	6f 81       	ldd	r22, Y+7	; 0x07
    2334:	78 85       	ldd	r23, Y+8	; 0x08
    2336:	89 85       	ldd	r24, Y+9	; 0x09
    2338:	9a 85       	ldd	r25, Y+10	; 0x0a
    233a:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	aa 27       	eor	r26, r26
    2344:	97 fd       	sbrc	r25, 7
    2346:	a0 95       	com	r26
    2348:	ba 2f       	mov	r27, r26
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    2352:	8e e2       	ldi	r24, 0x2E	; 46
    2354:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
	if(val < 0)
    2358:	69 81       	ldd	r22, Y+1	; 0x01
    235a:	7a 81       	ldd	r23, Y+2	; 0x02
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e0       	ldi	r20, 0x00	; 0
    2366:	50 e0       	ldi	r21, 0x00	; 0
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	4c f4       	brge	.+18     	; 0x2382 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	ab 81       	ldd	r26, Y+3	; 0x03
    2376:	bc 81       	ldd	r27, Y+4	; 0x04
    2378:	b0 58       	subi	r27, 0x80	; 128
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	ab 83       	std	Y+3, r26	; 0x03
    2380:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    2382:	1e 82       	std	Y+6, r1	; 0x06
    2384:	2a c0       	rjmp	.+84     	; 0x23da <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    2386:	69 81       	ldd	r22, Y+1	; 0x01
    2388:	7a 81       	ldd	r23, Y+2	; 0x02
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	ab 83       	std	Y+3, r26	; 0x03
    23a4:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    23a6:	69 81       	ldd	r22, Y+1	; 0x01
    23a8:	7a 81       	ldd	r23, Y+2	; 0x02
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	9c 81       	ldd	r25, Y+4	; 0x04
    23ae:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	2a e0       	ldi	r18, 0x0A	; 10
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e0       	ldi	r20, 0x00	; 0
    23bc:	50 e0       	ldi	r21, 0x00	; 0
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__divmodsi4>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	80 5d       	subi	r24, 0xD0	; 208
    23d0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    23d4:	8e 81       	ldd	r24, Y+6	; 0x06
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	8e 83       	std	Y+6, r24	; 0x06
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	83 30       	cpi	r24, 0x03	; 3
    23de:	98 f2       	brcs	.-90     	; 0x2386 <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    23e0:	2a 96       	adiw	r28, 0x0a	; 10
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	6c 97       	sbiw	r28, 0x1c	; 28
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	69 8f       	std	Y+25, r22	; 0x19
    2408:	7a 8f       	std	Y+26, r23	; 0x1a
    240a:	8b 8f       	std	Y+27, r24	; 0x1b
    240c:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    240e:	84 e1       	ldi	r24, 0x14	; 20
    2410:	fe 01       	movw	r30, r28
    2412:	35 96       	adiw	r30, 0x05	; 5
    2414:	df 01       	movw	r26, r30
    2416:	98 2f       	mov	r25, r24
    2418:	1d 92       	st	X+, r1
    241a:	9a 95       	dec	r25
    241c:	e9 f7       	brne	.-6      	; 0x2418 <H_LCD_void_sendIntNum+0x26>
    241e:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    2420:	89 8d       	ldd	r24, Y+25	; 0x19
    2422:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	9a 81       	ldd	r25, Y+2	; 0x02
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	09 f4       	brne	.+2      	; 0x2432 <H_LCD_void_sendIntNum+0x40>
    2430:	5d c0       	rjmp	.+186    	; 0x24ec <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    2432:	89 81       	ldd	r24, Y+1	; 0x01
    2434:	9a 81       	ldd	r25, Y+2	; 0x02
    2436:	99 23       	and	r25, r25
    2438:	c4 f4       	brge	.+48     	; 0x246a <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    243a:	8d e2       	ldi	r24, 0x2D	; 45
    243c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
			val *=-1;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	90 95       	com	r25
    2446:	81 95       	neg	r24
    2448:	9f 4f       	sbci	r25, 0xFF	; 255
    244a:	9a 83       	std	Y+2, r25	; 0x02
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	0d c0       	rjmp	.+26     	; 0x246a <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	2a e0       	ldi	r18, 0x0A	; 10
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	b9 01       	movw	r22, r18
    2460:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__divmodhi4>
    2464:	cb 01       	movw	r24, r22
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	18 16       	cp	r1, r24
    2470:	19 06       	cpc	r1, r25
    2472:	74 f3       	brlt	.-36     	; 0x2450 <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    2474:	89 8d       	ldd	r24, Y+25	; 0x19
    2476:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	18 16       	cp	r1, r24
    2482:	19 06       	cpc	r1, r25
    2484:	3c f0       	brlt	.+14     	; 0x2494 <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	90 95       	com	r25
    248c:	81 95       	neg	r24
    248e:	9f 4f       	sbci	r25, 0xFF	; 255
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	81 50       	subi	r24, 0x01	; 1
    2498:	8c 83       	std	Y+4, r24	; 0x04
    249a:	20 c0       	rjmp	.+64     	; 0x24dc <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    249c:	8c 81       	ldd	r24, Y+4	; 0x04
    249e:	e8 2f       	mov	r30, r24
    24a0:	ff 27       	eor	r31, r31
    24a2:	e7 fd       	sbrc	r30, 7
    24a4:	f0 95       	com	r31
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	2a e0       	ldi	r18, 0x0A	; 10
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	b9 01       	movw	r22, r18
    24b0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__divmodhi4>
    24b4:	80 5d       	subi	r24, 0xD0	; 208
    24b6:	28 2f       	mov	r18, r24
    24b8:	ce 01       	movw	r24, r28
    24ba:	05 96       	adiw	r24, 0x05	; 5
    24bc:	e8 0f       	add	r30, r24
    24be:	f9 1f       	adc	r31, r25
    24c0:	20 83       	st	Z, r18
			val /= 10;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	2a e0       	ldi	r18, 0x0A	; 10
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	b9 01       	movw	r22, r18
    24cc:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__divmodhi4>
    24d0:	cb 01       	movw	r24, r22
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    24d6:	8c 81       	ldd	r24, Y+4	; 0x04
    24d8:	81 50       	subi	r24, 0x01	; 1
    24da:	8c 83       	std	Y+4, r24	; 0x04
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	88 23       	and	r24, r24
    24e0:	ec f6       	brge	.-70     	; 0x249c <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    24e2:	ce 01       	movw	r24, r28
    24e4:	05 96       	adiw	r24, 0x05	; 5
    24e6:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    24ec:	80 e3       	ldi	r24, 0x30	; 48
    24ee:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    24f2:	6c 96       	adiw	r28, 0x1c	; 28
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <main>:


u8 dataBaseCheck(void);

int main()
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62

	KEYPAD_Init();
    250c:	0e 94 c8 07 	call	0xf90	; 0xf90 <KEYPAD_Init>
	H_LCD_void_Init();
    2510:	0e 94 be 09 	call	0x137c	; 0x137c <H_LCD_void_Init>

	dataBaseCheck();
    2514:	0e 94 8d 12 	call	0x251a	; 0x251a <dataBaseCheck>
    2518:	ff cf       	rjmp	.-2      	; 0x2518 <main+0x14>

0000251a <dataBaseCheck>:
	}

}

u8 dataBaseCheck(void)
{
    251a:	0f 93       	push	r16
    251c:	1f 93       	push	r17
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	cb 55       	subi	r28, 0x5B	; 91
    2528:	d0 40       	sbci	r29, 0x00	; 0
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
	u8 i,digit = 0;
    2534:	fe 01       	movw	r30, r28
    2536:	e7 5a       	subi	r30, 0xA7	; 167
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	10 82       	st	Z, r1
	u16 pass = 0, id = 0;
    253c:	fe 01       	movw	r30, r28
    253e:	e9 5a       	subi	r30, 0xA9	; 169
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	10 82       	st	Z, r1
    2546:	fe 01       	movw	r30, r28
    2548:	eb 5a       	subi	r30, 0xAB	; 171
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	11 82       	std	Z+1, r1	; 0x01
    254e:	10 82       	st	Z, r1


	H_LCD_void_sendString("Please Enter ID:");
    2550:	86 e6       	ldi	r24, 0x66	; 102
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1, 0);
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	60 e0       	ldi	r22, 0x00	; 0
    255c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
	for(i=0 ; i<4 ; i++)
    2560:	fe 01       	movw	r30, r28
    2562:	e6 5a       	subi	r30, 0xA6	; 166
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	10 82       	st	Z, r1
    2568:	e5 c0       	rjmp	.+458    	; 0x2734 <dataBaseCheck+0x21a>
	{
		digit = KEYPAD_Get_Pressed_Key();
    256a:	0e 94 4f 08 	call	0x109e	; 0x109e <KEYPAD_Get_Pressed_Key>
    256e:	fe 01       	movw	r30, r28
    2570:	e7 5a       	subi	r30, 0xA7	; 167
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 83       	st	Z, r24
		H_LCD_void_sendData(digit+'0');
    2576:	fe 01       	movw	r30, r28
    2578:	e7 5a       	subi	r30, 0xA7	; 167
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	80 81       	ld	r24, Z
    257e:	80 5d       	subi	r24, 0xD0	; 208
    2580:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
		id = ((id*10) + digit);
    2584:	fe 01       	movw	r30, r28
    2586:	eb 5a       	subi	r30, 0xAB	; 171
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	9c 01       	movw	r18, r24
    2590:	22 0f       	add	r18, r18
    2592:	33 1f       	adc	r19, r19
    2594:	c9 01       	movw	r24, r18
    2596:	88 0f       	add	r24, r24
    2598:	99 1f       	adc	r25, r25
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	28 0f       	add	r18, r24
    25a0:	39 1f       	adc	r19, r25
    25a2:	fe 01       	movw	r30, r28
    25a4:	e7 5a       	subi	r30, 0xA7	; 167
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	80 81       	ld	r24, Z
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	fe 01       	movw	r30, r28
    25b0:	eb 5a       	subi	r30, 0xAB	; 171
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	82 0f       	add	r24, r18
    25b6:	93 1f       	adc	r25, r19
    25b8:	91 83       	std	Z+1, r25	; 0x01
    25ba:	80 83       	st	Z, r24
    25bc:	fe 01       	movw	r30, r28
    25be:	ef 5a       	subi	r30, 0xAF	; 175
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	aa ef       	ldi	r26, 0xFA	; 250
    25c8:	b3 e4       	ldi	r27, 0x43	; 67
    25ca:	80 83       	st	Z, r24
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	a2 83       	std	Z+2, r26	; 0x02
    25d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	8e 01       	movw	r16, r28
    25d4:	03 5b       	subi	r16, 0xB3	; 179
    25d6:	1f 4f       	sbci	r17, 0xFF	; 255
    25d8:	fe 01       	movw	r30, r28
    25da:	ef 5a       	subi	r30, 0xAF	; 175
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a e7       	ldi	r20, 0x7A	; 122
    25ec:	55 e4       	ldi	r21, 0x45	; 69
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	f8 01       	movw	r30, r16
    25f8:	80 83       	st	Z, r24
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	a2 83       	std	Z+2, r26	; 0x02
    25fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2600:	fe 01       	movw	r30, r28
    2602:	e3 5b       	subi	r30, 0xB3	; 179
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	44 f4       	brge	.+16     	; 0x262e <dataBaseCheck+0x114>
		__ticks = 1;
    261e:	fe 01       	movw	r30, r28
    2620:	e5 5b       	subi	r30, 0xB5	; 181
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	64 c0       	rjmp	.+200    	; 0x26f6 <dataBaseCheck+0x1dc>
	else if (__tmp > 65535)
    262e:	fe 01       	movw	r30, r28
    2630:	e3 5b       	subi	r30, 0xB3	; 179
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	0c f0       	brlt	.+2      	; 0x264e <dataBaseCheck+0x134>
    264c:	43 c0       	rjmp	.+134    	; 0x26d4 <dataBaseCheck+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	fe 01       	movw	r30, r28
    2650:	ef 5a       	subi	r30, 0xAF	; 175
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8e 01       	movw	r16, r28
    266e:	05 5b       	subi	r16, 0xB5	; 181
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	f8 01       	movw	r30, r16
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	80 83       	st	Z, r24
    2684:	1f c0       	rjmp	.+62     	; 0x26c4 <dataBaseCheck+0x1aa>
    2686:	fe 01       	movw	r30, r28
    2688:	e7 5b       	subi	r30, 0xB7	; 183
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 e9       	ldi	r24, 0x90	; 144
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	fe 01       	movw	r30, r28
    2696:	e7 5b       	subi	r30, 0xB7	; 183
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <dataBaseCheck+0x184>
    26a2:	fe 01       	movw	r30, r28
    26a4:	e7 5b       	subi	r30, 0xB7	; 183
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	de 01       	movw	r26, r28
    26ae:	a5 5b       	subi	r26, 0xB5	; 181
    26b0:	bf 4f       	sbci	r27, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	e5 5b       	subi	r30, 0xB5	; 181
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	11 96       	adiw	r26, 0x01	; 1
    26c0:	9c 93       	st	X, r25
    26c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	fe 01       	movw	r30, r28
    26c6:	e5 5b       	subi	r30, 0xB5	; 181
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	d1 f6       	brne	.-76     	; 0x2686 <dataBaseCheck+0x16c>
    26d2:	27 c0       	rjmp	.+78     	; 0x2722 <dataBaseCheck+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d4:	8e 01       	movw	r16, r28
    26d6:	05 5b       	subi	r16, 0xB5	; 181
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	e3 5b       	subi	r30, 0xB3	; 179
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	60 81       	ld	r22, Z
    26e2:	71 81       	ldd	r23, Z+1	; 0x01
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	f8 01       	movw	r30, r16
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	de 01       	movw	r26, r28
    26f8:	a9 5b       	subi	r26, 0xB9	; 185
    26fa:	bf 4f       	sbci	r27, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	e5 5b       	subi	r30, 0xB5	; 181
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	8d 93       	st	X+, r24
    2708:	9c 93       	st	X, r25
    270a:	fe 01       	movw	r30, r28
    270c:	e9 5b       	subi	r30, 0xB9	; 185
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <dataBaseCheck+0x1fa>
    2718:	fe 01       	movw	r30, r28
    271a:	e9 5b       	subi	r30, 0xB9	; 185
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
	u16 pass = 0, id = 0;


	H_LCD_void_sendString("Please Enter ID:");
	H_LCD_void_gotoXY(1, 0);
	for(i=0 ; i<4 ; i++)
    2722:	de 01       	movw	r26, r28
    2724:	a6 5a       	subi	r26, 0xA6	; 166
    2726:	bf 4f       	sbci	r27, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	e6 5a       	subi	r30, 0xA6	; 166
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	8f 5f       	subi	r24, 0xFF	; 255
    2732:	8c 93       	st	X, r24
    2734:	fe 01       	movw	r30, r28
    2736:	e6 5a       	subi	r30, 0xA6	; 166
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	84 30       	cpi	r24, 0x04	; 4
    273e:	08 f4       	brcc	.+2      	; 0x2742 <dataBaseCheck+0x228>
    2740:	14 cf       	rjmp	.-472    	; 0x256a <dataBaseCheck+0x50>
		H_LCD_void_sendData(digit+'0');
		id = ((id*10) + digit);
		_delay_ms(500);
	}

	if((id == D1.ID)|| (id == D2.ID))
    2742:	80 91 f7 00 	lds	r24, 0x00F7
    2746:	90 91 f8 00 	lds	r25, 0x00F8
    274a:	fe 01       	movw	r30, r28
    274c:	eb 5a       	subi	r30, 0xAB	; 171
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	20 81       	ld	r18, Z
    2752:	31 81       	ldd	r19, Z+1	; 0x01
    2754:	82 17       	cp	r24, r18
    2756:	93 07       	cpc	r25, r19
    2758:	69 f0       	breq	.+26     	; 0x2774 <dataBaseCheck+0x25a>
    275a:	80 91 0a 01 	lds	r24, 0x010A
    275e:	90 91 0b 01 	lds	r25, 0x010B
    2762:	fe 01       	movw	r30, r28
    2764:	eb 5a       	subi	r30, 0xAB	; 171
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	20 81       	ld	r18, Z
    276a:	31 81       	ldd	r19, Z+1	; 0x01
    276c:	82 17       	cp	r24, r18
    276e:	93 07       	cpc	r25, r19
    2770:	09 f0       	breq	.+2      	; 0x2774 <dataBaseCheck+0x25a>
    2772:	df c0       	rjmp	.+446    	; 0x2932 <dataBaseCheck+0x418>
	{
		H_LCD_void_clearDisplay();
    2774:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Please Enter Pass:");
    2780:	87 e7       	ldi	r24, 0x77	; 119
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
		H_LCD_void_gotoXY(1, 0);
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		for(i=0 ; i<4 ; i++)
    2790:	fe 01       	movw	r30, r28
    2792:	e6 5a       	subi	r30, 0xA6	; 166
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	10 82       	st	Z, r1
    2798:	b7 c0       	rjmp	.+366    	; 0x2908 <dataBaseCheck+0x3ee>
		{
			digit = KEYPAD_Get_Pressed_Key();
    279a:	0e 94 4f 08 	call	0x109e	; 0x109e <KEYPAD_Get_Pressed_Key>
    279e:	fe 01       	movw	r30, r28
    27a0:	e7 5a       	subi	r30, 0xA7	; 167
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 83       	st	Z, r24
			H_LCD_void_sendData(digit+'0');
    27a6:	fe 01       	movw	r30, r28
    27a8:	e7 5a       	subi	r30, 0xA7	; 167
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	80 5d       	subi	r24, 0xD0	; 208
    27b0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
			pass = ((pass*10) + digit);
    27b4:	fe 01       	movw	r30, r28
    27b6:	e9 5a       	subi	r30, 0xA9	; 169
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	9c 01       	movw	r18, r24
    27c0:	22 0f       	add	r18, r18
    27c2:	33 1f       	adc	r19, r19
    27c4:	c9 01       	movw	r24, r18
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	28 0f       	add	r18, r24
    27d0:	39 1f       	adc	r19, r25
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5a       	subi	r30, 0xA7	; 167
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	fe 01       	movw	r30, r28
    27e0:	e9 5a       	subi	r30, 0xA9	; 169
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	82 0f       	add	r24, r18
    27e6:	93 1f       	adc	r25, r19
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	fe 01       	movw	r30, r28
    27ee:	ed 5b       	subi	r30, 0xBD	; 189
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	aa ef       	ldi	r26, 0xFA	; 250
    27f8:	b3 e4       	ldi	r27, 0x43	; 67
    27fa:	80 83       	st	Z, r24
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	a2 83       	std	Z+2, r26	; 0x02
    2800:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	8e 01       	movw	r16, r28
    2804:	01 5c       	subi	r16, 0xC1	; 193
    2806:	1f 4f       	sbci	r17, 0xFF	; 255
    2808:	fe 01       	movw	r30, r28
    280a:	ed 5b       	subi	r30, 0xBD	; 189
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	60 81       	ld	r22, Z
    2810:	71 81       	ldd	r23, Z+1	; 0x01
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	4a e7       	ldi	r20, 0x7A	; 122
    281c:	55 e4       	ldi	r21, 0x45	; 69
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	f8 01       	movw	r30, r16
    2828:	80 83       	st	Z, r24
    282a:	91 83       	std	Z+1, r25	; 0x01
    282c:	a2 83       	std	Z+2, r26	; 0x02
    282e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2830:	fe 01       	movw	r30, r28
    2832:	ff 96       	adiw	r30, 0x3f	; 63
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <dataBaseCheck+0x33c>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9e af       	std	Y+62, r25	; 0x3e
    2852:	8d af       	std	Y+61, r24	; 0x3d
    2854:	46 c0       	rjmp	.+140    	; 0x28e2 <dataBaseCheck+0x3c8>
	else if (__tmp > 65535)
    2856:	fe 01       	movw	r30, r28
    2858:	ff 96       	adiw	r30, 0x3f	; 63
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	64 f5       	brge	.+88     	; 0x28ca <dataBaseCheck+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	fe 01       	movw	r30, r28
    2874:	ed 5b       	subi	r30, 0xBD	; 189
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	60 81       	ld	r22, Z
    287a:	71 81       	ldd	r23, Z+1	; 0x01
    287c:	82 81       	ldd	r24, Z+2	; 0x02
    287e:	93 81       	ldd	r25, Z+3	; 0x03
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e2       	ldi	r20, 0x20	; 32
    2886:	51 e4       	ldi	r21, 0x41	; 65
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	bc 01       	movw	r22, r24
    2892:	cd 01       	movw	r24, r26
    2894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	9e af       	std	Y+62, r25	; 0x3e
    289e:	8d af       	std	Y+61, r24	; 0x3d
    28a0:	0f c0       	rjmp	.+30     	; 0x28c0 <dataBaseCheck+0x3a6>
    28a2:	80 e9       	ldi	r24, 0x90	; 144
    28a4:	91 e0       	ldi	r25, 0x01	; 1
    28a6:	9c af       	std	Y+60, r25	; 0x3c
    28a8:	8b af       	std	Y+59, r24	; 0x3b
    28aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <dataBaseCheck+0x394>
    28b2:	9c af       	std	Y+60, r25	; 0x3c
    28b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	9e af       	std	Y+62, r25	; 0x3e
    28be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c4:	00 97       	sbiw	r24, 0x00	; 0
    28c6:	69 f7       	brne	.-38     	; 0x28a2 <dataBaseCheck+0x388>
    28c8:	16 c0       	rjmp	.+44     	; 0x28f6 <dataBaseCheck+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ca:	fe 01       	movw	r30, r28
    28cc:	ff 96       	adiw	r30, 0x3f	; 63
    28ce:	60 81       	ld	r22, Z
    28d0:	71 81       	ldd	r23, Z+1	; 0x01
    28d2:	82 81       	ldd	r24, Z+2	; 0x02
    28d4:	93 81       	ldd	r25, Z+3	; 0x03
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	9e af       	std	Y+62, r25	; 0x3e
    28e0:	8d af       	std	Y+61, r24	; 0x3d
    28e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e6:	9a af       	std	Y+58, r25	; 0x3a
    28e8:	89 af       	std	Y+57, r24	; 0x39
    28ea:	89 ad       	ldd	r24, Y+57	; 0x39
    28ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <dataBaseCheck+0x3d4>
    28f2:	9a af       	std	Y+58, r25	; 0x3a
    28f4:	89 af       	std	Y+57, r24	; 0x39
	{
		H_LCD_void_clearDisplay();
		H_LCD_void_gotoXY(0, 0);
		H_LCD_void_sendString("Please Enter Pass:");
		H_LCD_void_gotoXY(1, 0);
		for(i=0 ; i<4 ; i++)
    28f6:	de 01       	movw	r26, r28
    28f8:	a6 5a       	subi	r26, 0xA6	; 166
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	fe 01       	movw	r30, r28
    28fe:	e6 5a       	subi	r30, 0xA6	; 166
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 81       	ld	r24, Z
    2904:	8f 5f       	subi	r24, 0xFF	; 255
    2906:	8c 93       	st	X, r24
    2908:	fe 01       	movw	r30, r28
    290a:	e6 5a       	subi	r30, 0xA6	; 166
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	80 81       	ld	r24, Z
    2910:	84 30       	cpi	r24, 0x04	; 4
    2912:	08 f4       	brcc	.+2      	; 0x2916 <dataBaseCheck+0x3fc>
    2914:	42 cf       	rjmp	.-380    	; 0x279a <dataBaseCheck+0x280>
		H_LCD_void_gotoXY(0, 0);
		H_LCD_void_sendString("Wrong ID");
		_delay_ms(1000);
		return 0;
	}
	if((id == D1.ID )&&(pass == D1.Password))
    2916:	80 91 f7 00 	lds	r24, 0x00F7
    291a:	90 91 f8 00 	lds	r25, 0x00F8
    291e:	fe 01       	movw	r30, r28
    2920:	eb 5a       	subi	r30, 0xAB	; 171
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	20 81       	ld	r18, Z
    2926:	31 81       	ldd	r19, Z+1	; 0x01
    2928:	82 17       	cp	r24, r18
    292a:	93 07       	cpc	r25, r19
    292c:	09 f0       	breq	.+2      	; 0x2930 <dataBaseCheck+0x416>
    292e:	53 c1       	rjmp	.+678    	; 0x2bd6 <dataBaseCheck+0x6bc>
    2930:	80 c0       	rjmp	.+256    	; 0x2a32 <dataBaseCheck+0x518>
			_delay_ms(500);
		}
	}
	else
	{
		H_LCD_void_clearDisplay();
    2932:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Wrong ID");
    293e:	8a e8       	ldi	r24, 0x8A	; 138
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	aa e7       	ldi	r26, 0x7A	; 122
    294c:	b4 e4       	ldi	r27, 0x44	; 68
    294e:	8d ab       	std	Y+53, r24	; 0x35
    2950:	9e ab       	std	Y+54, r25	; 0x36
    2952:	af ab       	std	Y+55, r26	; 0x37
    2954:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2956:	6d a9       	ldd	r22, Y+53	; 0x35
    2958:	7e a9       	ldd	r23, Y+54	; 0x36
    295a:	8f a9       	ldd	r24, Y+55	; 0x37
    295c:	98 ad       	ldd	r25, Y+56	; 0x38
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a e7       	ldi	r20, 0x7A	; 122
    2964:	55 e4       	ldi	r21, 0x45	; 69
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	89 ab       	std	Y+49, r24	; 0x31
    2970:	9a ab       	std	Y+50, r25	; 0x32
    2972:	ab ab       	std	Y+51, r26	; 0x33
    2974:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2976:	69 a9       	ldd	r22, Y+49	; 0x31
    2978:	7a a9       	ldd	r23, Y+50	; 0x32
    297a:	8b a9       	ldd	r24, Y+51	; 0x33
    297c:	9c a9       	ldd	r25, Y+52	; 0x34
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e8       	ldi	r20, 0x80	; 128
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    298a:	88 23       	and	r24, r24
    298c:	2c f4       	brge	.+10     	; 0x2998 <dataBaseCheck+0x47e>
		__ticks = 1;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	98 ab       	std	Y+48, r25	; 0x30
    2994:	8f a7       	std	Y+47, r24	; 0x2f
    2996:	3f c0       	rjmp	.+126    	; 0x2a16 <dataBaseCheck+0x4fc>
	else if (__tmp > 65535)
    2998:	69 a9       	ldd	r22, Y+49	; 0x31
    299a:	7a a9       	ldd	r23, Y+50	; 0x32
    299c:	8b a9       	ldd	r24, Y+51	; 0x33
    299e:	9c a9       	ldd	r25, Y+52	; 0x34
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	3f ef       	ldi	r19, 0xFF	; 255
    29a4:	4f e7       	ldi	r20, 0x7F	; 127
    29a6:	57 e4       	ldi	r21, 0x47	; 71
    29a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ac:	18 16       	cp	r1, r24
    29ae:	4c f5       	brge	.+82     	; 0x2a02 <dataBaseCheck+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b0:	6d a9       	ldd	r22, Y+53	; 0x35
    29b2:	7e a9       	ldd	r23, Y+54	; 0x36
    29b4:	8f a9       	ldd	r24, Y+55	; 0x37
    29b6:	98 ad       	ldd	r25, Y+56	; 0x38
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e2       	ldi	r20, 0x20	; 32
    29be:	51 e4       	ldi	r21, 0x41	; 65
    29c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	bc 01       	movw	r22, r24
    29ca:	cd 01       	movw	r24, r26
    29cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	98 ab       	std	Y+48, r25	; 0x30
    29d6:	8f a7       	std	Y+47, r24	; 0x2f
    29d8:	0f c0       	rjmp	.+30     	; 0x29f8 <dataBaseCheck+0x4de>
    29da:	80 e9       	ldi	r24, 0x90	; 144
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	9e a7       	std	Y+46, r25	; 0x2e
    29e0:	8d a7       	std	Y+45, r24	; 0x2d
    29e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    29e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	f1 f7       	brne	.-4      	; 0x29e6 <dataBaseCheck+0x4cc>
    29ea:	9e a7       	std	Y+46, r25	; 0x2e
    29ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f0:	98 a9       	ldd	r25, Y+48	; 0x30
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	98 ab       	std	Y+48, r25	; 0x30
    29f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fa:	98 a9       	ldd	r25, Y+48	; 0x30
    29fc:	00 97       	sbiw	r24, 0x00	; 0
    29fe:	69 f7       	brne	.-38     	; 0x29da <dataBaseCheck+0x4c0>
    2a00:	14 c0       	rjmp	.+40     	; 0x2a2a <dataBaseCheck+0x510>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a02:	69 a9       	ldd	r22, Y+49	; 0x31
    2a04:	7a a9       	ldd	r23, Y+50	; 0x32
    2a06:	8b a9       	ldd	r24, Y+51	; 0x33
    2a08:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	98 ab       	std	Y+48, r25	; 0x30
    2a14:	8f a7       	std	Y+47, r24	; 0x2f
    2a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a18:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1a:	9c a7       	std	Y+44, r25	; 0x2c
    2a1c:	8b a7       	std	Y+43, r24	; 0x2b
    2a1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a20:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	f1 f7       	brne	.-4      	; 0x2a22 <dataBaseCheck+0x508>
    2a26:	9c a7       	std	Y+44, r25	; 0x2c
    2a28:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1000);
		return 0;
    2a2a:	6c 96       	adiw	r28, 0x1c	; 28
    2a2c:	1f ae       	std	Y+63, r1	; 0x3f
    2a2e:	6c 97       	sbiw	r28, 0x1c	; 28
    2a30:	f8 c1       	rjmp	.+1008   	; 0x2e22 <dataBaseCheck+0x908>
	}
	if((id == D1.ID )&&(pass == D1.Password))
    2a32:	80 91 f9 00 	lds	r24, 0x00F9
    2a36:	90 91 fa 00 	lds	r25, 0x00FA
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e9 5a       	subi	r30, 0xA9	; 169
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	20 81       	ld	r18, Z
    2a42:	31 81       	ldd	r19, Z+1	; 0x01
    2a44:	82 17       	cp	r24, r18
    2a46:	93 07       	cpc	r25, r19
    2a48:	09 f0       	breq	.+2      	; 0x2a4c <dataBaseCheck+0x532>
    2a4a:	c5 c0       	rjmp	.+394    	; 0x2bd6 <dataBaseCheck+0x6bc>
	{
		H_LCD_void_clearDisplay();
    2a4c:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Welcome, ");
    2a58:	83 e9       	ldi	r24, 0x93	; 147
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
		//H_LCD_void_gotoXY(1, 0);
		H_LCD_void_creatCustomChar(smilelyFace, 8);
    2a60:	8f ee       	ldi	r24, 0xEF	; 239
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	68 e0       	ldi	r22, 0x08	; 8
    2a66:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_LCD_void_creatCustomChar>
		H_LCD_void_displayCustomChar(8);
    2a6a:	88 e0       	ldi	r24, 0x08	; 8
    2a6c:	0e 94 93 10 	call	0x2126	; 0x2126 <H_LCD_void_displayCustomChar>
		H_LCD_void_sendData(' ');
    2a70:	80 e2       	ldi	r24, 0x20	; 32
    2a72:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <H_LCD_void_sendData>
		for(i=0;i<5;i++)
    2a76:	fe 01       	movw	r30, r28
    2a78:	e6 5a       	subi	r30, 0xA6	; 166
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	10 82       	st	Z, r1
    2a7e:	2a c0       	rjmp	.+84     	; 0x2ad4 <dataBaseCheck+0x5ba>
		{
			H_LCD_void_creatCustomChar(nameInArabic[i], i+10);
    2a80:	27 ec       	ldi	r18, 0xC7	; 199
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	fe 01       	movw	r30, r28
    2a86:	e6 5a       	subi	r30, 0xA6	; 166
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 2f       	mov	r24, r24
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	28 0f       	add	r18, r24
    2a9e:	39 1f       	adc	r19, r25
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e6 5a       	subi	r30, 0xA6	; 166
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	48 2f       	mov	r20, r24
    2aaa:	46 5f       	subi	r20, 0xF6	; 246
    2aac:	c9 01       	movw	r24, r18
    2aae:	64 2f       	mov	r22, r20
    2ab0:	0e 94 61 10 	call	0x20c2	; 0x20c2 <H_LCD_void_creatCustomChar>
			H_LCD_void_displayCustomChar(i+10);
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e6 5a       	subi	r30, 0xA6	; 166
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	86 5f       	subi	r24, 0xF6	; 246
    2abe:	0e 94 93 10 	call	0x2126	; 0x2126 <H_LCD_void_displayCustomChar>
		H_LCD_void_sendString("Welcome, ");
		//H_LCD_void_gotoXY(1, 0);
		H_LCD_void_creatCustomChar(smilelyFace, 8);
		H_LCD_void_displayCustomChar(8);
		H_LCD_void_sendData(' ');
		for(i=0;i<5;i++)
    2ac2:	de 01       	movw	r26, r28
    2ac4:	a6 5a       	subi	r26, 0xA6	; 166
    2ac6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e6 5a       	subi	r30, 0xA6	; 166
    2acc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ace:	80 81       	ld	r24, Z
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	8c 93       	st	X, r24
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e6 5a       	subi	r30, 0xA6	; 166
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	85 30       	cpi	r24, 0x05	; 5
    2ade:	80 f2       	brcs	.-96     	; 0x2a80 <dataBaseCheck+0x566>
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e4       	ldi	r25, 0x40	; 64
    2ae4:	ac e1       	ldi	r26, 0x1C	; 28
    2ae6:	b6 e4       	ldi	r27, 0x46	; 70
    2ae8:	8f a3       	std	Y+39, r24	; 0x27
    2aea:	98 a7       	std	Y+40, r25	; 0x28
    2aec:	a9 a7       	std	Y+41, r26	; 0x29
    2aee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	6f a1       	ldd	r22, Y+39	; 0x27
    2af2:	78 a5       	ldd	r23, Y+40	; 0x28
    2af4:	89 a5       	ldd	r24, Y+41	; 0x29
    2af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a e7       	ldi	r20, 0x7A	; 122
    2afe:	55 e4       	ldi	r21, 0x45	; 69
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8b a3       	std	Y+35, r24	; 0x23
    2b0a:	9c a3       	std	Y+36, r25	; 0x24
    2b0c:	ad a3       	std	Y+37, r26	; 0x25
    2b0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b10:	6b a1       	ldd	r22, Y+35	; 0x23
    2b12:	7c a1       	ldd	r23, Y+36	; 0x24
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	9e a1       	ldd	r25, Y+38	; 0x26
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <dataBaseCheck+0x618>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <dataBaseCheck+0x696>
	else if (__tmp > 65535)
    2b32:	6b a1       	ldd	r22, Y+35	; 0x23
    2b34:	7c a1       	ldd	r23, Y+36	; 0x24
    2b36:	8d a1       	ldd	r24, Y+37	; 0x25
    2b38:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <dataBaseCheck+0x682>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9a a3       	std	Y+34, r25	; 0x22
    2b70:	89 a3       	std	Y+33, r24	; 0x21
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <dataBaseCheck+0x678>
    2b74:	80 e9       	ldi	r24, 0x90	; 144
    2b76:	91 e0       	ldi	r25, 0x01	; 1
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <dataBaseCheck+0x666>
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	89 a1       	ldd	r24, Y+33	; 0x21
    2b94:	9a a1       	ldd	r25, Y+34	; 0x22
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <dataBaseCheck+0x65a>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <dataBaseCheck+0x6aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <dataBaseCheck+0x6a2>
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d
			H_LCD_void_creatCustomChar(nameInArabic[i], i+10);
			H_LCD_void_displayCustomChar(i+10);
		}
		_delay_ms(10000);
		//H_LCD_void_clearDisplay();
		H_LCD_void_gotoXY(0, 0);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	60 e0       	ldi	r22, 0x00	; 0
    2bc8:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		return 1;
    2bcc:	f1 e0       	ldi	r31, 0x01	; 1
    2bce:	6c 96       	adiw	r28, 0x1c	; 28
    2bd0:	ff af       	std	Y+63, r31	; 0x3f
    2bd2:	6c 97       	sbiw	r28, 0x1c	; 28
    2bd4:	26 c1       	rjmp	.+588    	; 0x2e22 <dataBaseCheck+0x908>
	}

	else if((id == D2.ID )&&(pass == D2.Password))
    2bd6:	80 91 0a 01 	lds	r24, 0x010A
    2bda:	90 91 0b 01 	lds	r25, 0x010B
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 5a       	subi	r30, 0xAB	; 171
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	20 81       	ld	r18, Z
    2be6:	31 81       	ldd	r19, Z+1	; 0x01
    2be8:	82 17       	cp	r24, r18
    2bea:	93 07       	cpc	r25, r19
    2bec:	09 f0       	breq	.+2      	; 0x2bf0 <dataBaseCheck+0x6d6>
    2bee:	94 c0       	rjmp	.+296    	; 0x2d18 <dataBaseCheck+0x7fe>
    2bf0:	80 91 0c 01 	lds	r24, 0x010C
    2bf4:	90 91 0d 01 	lds	r25, 0x010D
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e9 5a       	subi	r30, 0xA9	; 169
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	20 81       	ld	r18, Z
    2c00:	31 81       	ldd	r19, Z+1	; 0x01
    2c02:	82 17       	cp	r24, r18
    2c04:	93 07       	cpc	r25, r19
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <dataBaseCheck+0x6f0>
    2c08:	87 c0       	rjmp	.+270    	; 0x2d18 <dataBaseCheck+0x7fe>
	{
		H_LCD_void_clearDisplay();
    2c0a:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Welcome, Sara!");
    2c16:	8d e9       	ldi	r24, 0x9D	; 157
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	aa e7       	ldi	r26, 0x7A	; 122
    2c24:	b4 e4       	ldi	r27, 0x44	; 68
    2c26:	89 8f       	std	Y+25, r24	; 0x19
    2c28:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	4a e7       	ldi	r20, 0x7A	; 122
    2c3c:	55 e4       	ldi	r21, 0x45	; 69
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	8d 8b       	std	Y+21, r24	; 0x15
    2c48:	9e 8b       	std	Y+22, r25	; 0x16
    2c4a:	af 8b       	std	Y+23, r26	; 0x17
    2c4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c50:	7e 89       	ldd	r23, Y+22	; 0x16
    2c52:	8f 89       	ldd	r24, Y+23	; 0x17
    2c54:	98 8d       	ldd	r25, Y+24	; 0x18
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	2c f4       	brge	.+10     	; 0x2c70 <dataBaseCheck+0x756>
		__ticks = 1;
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	9c 8b       	std	Y+20, r25	; 0x14
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
    2c6e:	3f c0       	rjmp	.+126    	; 0x2cee <dataBaseCheck+0x7d4>
	else if (__tmp > 65535)
    2c70:	6d 89       	ldd	r22, Y+21	; 0x15
    2c72:	7e 89       	ldd	r23, Y+22	; 0x16
    2c74:	8f 89       	ldd	r24, Y+23	; 0x17
    2c76:	98 8d       	ldd	r25, Y+24	; 0x18
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	3f ef       	ldi	r19, 0xFF	; 255
    2c7c:	4f e7       	ldi	r20, 0x7F	; 127
    2c7e:	57 e4       	ldi	r21, 0x47	; 71
    2c80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c84:	18 16       	cp	r1, r24
    2c86:	4c f5       	brge	.+82     	; 0x2cda <dataBaseCheck+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	40 e2       	ldi	r20, 0x20	; 32
    2c96:	51 e4       	ldi	r21, 0x41	; 65
    2c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	bc 01       	movw	r22, r24
    2ca2:	cd 01       	movw	r24, r26
    2ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	9c 8b       	std	Y+20, r25	; 0x14
    2cae:	8b 8b       	std	Y+19, r24	; 0x13
    2cb0:	0f c0       	rjmp	.+30     	; 0x2cd0 <dataBaseCheck+0x7b6>
    2cb2:	80 e9       	ldi	r24, 0x90	; 144
    2cb4:	91 e0       	ldi	r25, 0x01	; 1
    2cb6:	9a 8b       	std	Y+18, r25	; 0x12
    2cb8:	89 8b       	std	Y+17, r24	; 0x11
    2cba:	89 89       	ldd	r24, Y+17	; 0x11
    2cbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <dataBaseCheck+0x7a4>
    2cc2:	9a 8b       	std	Y+18, r25	; 0x12
    2cc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	9c 8b       	std	Y+20, r25	; 0x14
    2cce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	69 f7       	brne	.-38     	; 0x2cb2 <dataBaseCheck+0x798>
    2cd8:	14 c0       	rjmp	.+40     	; 0x2d02 <dataBaseCheck+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cda:	6d 89       	ldd	r22, Y+21	; 0x15
    2cdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cde:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	9c 8b       	std	Y+20, r25	; 0x14
    2cec:	8b 8b       	std	Y+19, r24	; 0x13
    2cee:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf2:	98 8b       	std	Y+16, r25	; 0x10
    2cf4:	8f 87       	std	Y+15, r24	; 0x0f
    2cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf8:	98 89       	ldd	r25, Y+16	; 0x10
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <dataBaseCheck+0x7e0>
    2cfe:	98 8b       	std	Y+16, r25	; 0x10
    2d00:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		H_LCD_void_clearDisplay();
    2d02:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		return 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	6c 96       	adiw	r28, 0x1c	; 28
    2d12:	8f af       	std	Y+63, r24	; 0x3f
    2d14:	6c 97       	sbiw	r28, 0x1c	; 28
    2d16:	85 c0       	rjmp	.+266    	; 0x2e22 <dataBaseCheck+0x908>
	}
	else
	{
		H_LCD_void_clearDisplay();
    2d18:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Wrong password");
    2d24:	8c ea       	ldi	r24, 0xAC	; 172
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 87 0c 	call	0x190e	; 0x190e <H_LCD_void_sendString>
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	aa e7       	ldi	r26, 0x7A	; 122
    2d32:	b4 e4       	ldi	r27, 0x44	; 68
    2d34:	8b 87       	std	Y+11, r24	; 0x0b
    2d36:	9c 87       	std	Y+12, r25	; 0x0c
    2d38:	ad 87       	std	Y+13, r26	; 0x0d
    2d3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	4a e7       	ldi	r20, 0x7A	; 122
    2d4a:	55 e4       	ldi	r21, 0x45	; 69
    2d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8f 83       	std	Y+7, r24	; 0x07
    2d56:	98 87       	std	Y+8, r25	; 0x08
    2d58:	a9 87       	std	Y+9, r26	; 0x09
    2d5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e8       	ldi	r20, 0x80	; 128
    2d6a:	5f e3       	ldi	r21, 0x3F	; 63
    2d6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d70:	88 23       	and	r24, r24
    2d72:	2c f4       	brge	.+10     	; 0x2d7e <dataBaseCheck+0x864>
		__ticks = 1;
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	3f c0       	rjmp	.+126    	; 0x2dfc <dataBaseCheck+0x8e2>
	else if (__tmp > 65535)
    2d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d80:	78 85       	ldd	r23, Y+8	; 0x08
    2d82:	89 85       	ldd	r24, Y+9	; 0x09
    2d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d86:	20 e0       	ldi	r18, 0x00	; 0
    2d88:	3f ef       	ldi	r19, 0xFF	; 255
    2d8a:	4f e7       	ldi	r20, 0x7F	; 127
    2d8c:	57 e4       	ldi	r21, 0x47	; 71
    2d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d92:	18 16       	cp	r1, r24
    2d94:	4c f5       	brge	.+82     	; 0x2de8 <dataBaseCheck+0x8ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e2       	ldi	r20, 0x20	; 32
    2da4:	51 e4       	ldi	r21, 0x41	; 65
    2da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db6:	dc 01       	movw	r26, r24
    2db8:	cb 01       	movw	r24, r22
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
    2dbe:	0f c0       	rjmp	.+30     	; 0x2dde <dataBaseCheck+0x8c4>
    2dc0:	80 e9       	ldi	r24, 0x90	; 144
    2dc2:	91 e0       	ldi	r25, 0x01	; 1
    2dc4:	9c 83       	std	Y+4, r25	; 0x04
    2dc6:	8b 83       	std	Y+3, r24	; 0x03
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	9c 81       	ldd	r25, Y+4	; 0x04
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <dataBaseCheck+0x8b2>
    2dd0:	9c 83       	std	Y+4, r25	; 0x04
    2dd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd8:	01 97       	sbiw	r24, 0x01	; 1
    2dda:	9e 83       	std	Y+6, r25	; 0x06
    2ddc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	00 97       	sbiw	r24, 0x00	; 0
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <dataBaseCheck+0x8a6>
    2de6:	14 c0       	rjmp	.+40     	; 0x2e10 <dataBaseCheck+0x8f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	9a 83       	std	Y+2, r25	; 0x02
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	9a 81       	ldd	r25, Y+2	; 0x02
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	f1 f7       	brne	.-4      	; 0x2e08 <dataBaseCheck+0x8ee>
    2e0c:	9a 83       	std	Y+2, r25	; 0x02
    2e0e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		H_LCD_void_clearDisplay();
    2e10:	0e 94 af 0c 	call	0x195e	; 0x195e <H_LCD_void_clearDisplay>
		H_LCD_void_gotoXY(0, 0);
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	60 e0       	ldi	r22, 0x00	; 0
    2e18:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <H_LCD_void_gotoXY>
		return 0;
    2e1c:	6c 96       	adiw	r28, 0x1c	; 28
    2e1e:	1f ae       	std	Y+63, r1	; 0x3f
    2e20:	6c 97       	sbiw	r28, 0x1c	; 28
    2e22:	6c 96       	adiw	r28, 0x1c	; 28
    2e24:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e26:	6c 97       	sbiw	r28, 0x1c	; 28
	}
}
    2e28:	c5 5a       	subi	r28, 0xA5	; 165
    2e2a:	df 4f       	sbci	r29, 0xFF	; 255
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	1f 91       	pop	r17
    2e3c:	0f 91       	pop	r16
    2e3e:	08 95       	ret

00002e40 <__divmodhi4>:
    2e40:	97 fb       	bst	r25, 7
    2e42:	09 2e       	mov	r0, r25
    2e44:	07 26       	eor	r0, r23
    2e46:	0a d0       	rcall	.+20     	; 0x2e5c <__divmodhi4_neg1>
    2e48:	77 fd       	sbrc	r23, 7
    2e4a:	04 d0       	rcall	.+8      	; 0x2e54 <__divmodhi4_neg2>
    2e4c:	27 d0       	rcall	.+78     	; 0x2e9c <__udivmodhi4>
    2e4e:	06 d0       	rcall	.+12     	; 0x2e5c <__divmodhi4_neg1>
    2e50:	00 20       	and	r0, r0
    2e52:	1a f4       	brpl	.+6      	; 0x2e5a <__divmodhi4_exit>

00002e54 <__divmodhi4_neg2>:
    2e54:	70 95       	com	r23
    2e56:	61 95       	neg	r22
    2e58:	7f 4f       	sbci	r23, 0xFF	; 255

00002e5a <__divmodhi4_exit>:
    2e5a:	08 95       	ret

00002e5c <__divmodhi4_neg1>:
    2e5c:	f6 f7       	brtc	.-4      	; 0x2e5a <__divmodhi4_exit>
    2e5e:	90 95       	com	r25
    2e60:	81 95       	neg	r24
    2e62:	9f 4f       	sbci	r25, 0xFF	; 255
    2e64:	08 95       	ret

00002e66 <__divmodsi4>:
    2e66:	97 fb       	bst	r25, 7
    2e68:	09 2e       	mov	r0, r25
    2e6a:	05 26       	eor	r0, r21
    2e6c:	0e d0       	rcall	.+28     	; 0x2e8a <__divmodsi4_neg1>
    2e6e:	57 fd       	sbrc	r21, 7
    2e70:	04 d0       	rcall	.+8      	; 0x2e7a <__divmodsi4_neg2>
    2e72:	28 d0       	rcall	.+80     	; 0x2ec4 <__udivmodsi4>
    2e74:	0a d0       	rcall	.+20     	; 0x2e8a <__divmodsi4_neg1>
    2e76:	00 1c       	adc	r0, r0
    2e78:	38 f4       	brcc	.+14     	; 0x2e88 <__divmodsi4_exit>

00002e7a <__divmodsi4_neg2>:
    2e7a:	50 95       	com	r21
    2e7c:	40 95       	com	r20
    2e7e:	30 95       	com	r19
    2e80:	21 95       	neg	r18
    2e82:	3f 4f       	sbci	r19, 0xFF	; 255
    2e84:	4f 4f       	sbci	r20, 0xFF	; 255
    2e86:	5f 4f       	sbci	r21, 0xFF	; 255

00002e88 <__divmodsi4_exit>:
    2e88:	08 95       	ret

00002e8a <__divmodsi4_neg1>:
    2e8a:	f6 f7       	brtc	.-4      	; 0x2e88 <__divmodsi4_exit>
    2e8c:	90 95       	com	r25
    2e8e:	80 95       	com	r24
    2e90:	70 95       	com	r23
    2e92:	61 95       	neg	r22
    2e94:	7f 4f       	sbci	r23, 0xFF	; 255
    2e96:	8f 4f       	sbci	r24, 0xFF	; 255
    2e98:	9f 4f       	sbci	r25, 0xFF	; 255
    2e9a:	08 95       	ret

00002e9c <__udivmodhi4>:
    2e9c:	aa 1b       	sub	r26, r26
    2e9e:	bb 1b       	sub	r27, r27
    2ea0:	51 e1       	ldi	r21, 0x11	; 17
    2ea2:	07 c0       	rjmp	.+14     	; 0x2eb2 <__udivmodhi4_ep>

00002ea4 <__udivmodhi4_loop>:
    2ea4:	aa 1f       	adc	r26, r26
    2ea6:	bb 1f       	adc	r27, r27
    2ea8:	a6 17       	cp	r26, r22
    2eaa:	b7 07       	cpc	r27, r23
    2eac:	10 f0       	brcs	.+4      	; 0x2eb2 <__udivmodhi4_ep>
    2eae:	a6 1b       	sub	r26, r22
    2eb0:	b7 0b       	sbc	r27, r23

00002eb2 <__udivmodhi4_ep>:
    2eb2:	88 1f       	adc	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	5a 95       	dec	r21
    2eb8:	a9 f7       	brne	.-22     	; 0x2ea4 <__udivmodhi4_loop>
    2eba:	80 95       	com	r24
    2ebc:	90 95       	com	r25
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	08 95       	ret

00002ec4 <__udivmodsi4>:
    2ec4:	a1 e2       	ldi	r26, 0x21	; 33
    2ec6:	1a 2e       	mov	r1, r26
    2ec8:	aa 1b       	sub	r26, r26
    2eca:	bb 1b       	sub	r27, r27
    2ecc:	fd 01       	movw	r30, r26
    2ece:	0d c0       	rjmp	.+26     	; 0x2eea <__udivmodsi4_ep>

00002ed0 <__udivmodsi4_loop>:
    2ed0:	aa 1f       	adc	r26, r26
    2ed2:	bb 1f       	adc	r27, r27
    2ed4:	ee 1f       	adc	r30, r30
    2ed6:	ff 1f       	adc	r31, r31
    2ed8:	a2 17       	cp	r26, r18
    2eda:	b3 07       	cpc	r27, r19
    2edc:	e4 07       	cpc	r30, r20
    2ede:	f5 07       	cpc	r31, r21
    2ee0:	20 f0       	brcs	.+8      	; 0x2eea <__udivmodsi4_ep>
    2ee2:	a2 1b       	sub	r26, r18
    2ee4:	b3 0b       	sbc	r27, r19
    2ee6:	e4 0b       	sbc	r30, r20
    2ee8:	f5 0b       	sbc	r31, r21

00002eea <__udivmodsi4_ep>:
    2eea:	66 1f       	adc	r22, r22
    2eec:	77 1f       	adc	r23, r23
    2eee:	88 1f       	adc	r24, r24
    2ef0:	99 1f       	adc	r25, r25
    2ef2:	1a 94       	dec	r1
    2ef4:	69 f7       	brne	.-38     	; 0x2ed0 <__udivmodsi4_loop>
    2ef6:	60 95       	com	r22
    2ef8:	70 95       	com	r23
    2efa:	80 95       	com	r24
    2efc:	90 95       	com	r25
    2efe:	9b 01       	movw	r18, r22
    2f00:	ac 01       	movw	r20, r24
    2f02:	bd 01       	movw	r22, r26
    2f04:	cf 01       	movw	r24, r30
    2f06:	08 95       	ret

00002f08 <__prologue_saves__>:
    2f08:	2f 92       	push	r2
    2f0a:	3f 92       	push	r3
    2f0c:	4f 92       	push	r4
    2f0e:	5f 92       	push	r5
    2f10:	6f 92       	push	r6
    2f12:	7f 92       	push	r7
    2f14:	8f 92       	push	r8
    2f16:	9f 92       	push	r9
    2f18:	af 92       	push	r10
    2f1a:	bf 92       	push	r11
    2f1c:	cf 92       	push	r12
    2f1e:	df 92       	push	r13
    2f20:	ef 92       	push	r14
    2f22:	ff 92       	push	r15
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    2f28:	cf 93       	push	r28
    2f2a:	df 93       	push	r29
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	ca 1b       	sub	r28, r26
    2f32:	db 0b       	sbc	r29, r27
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
    2f3e:	09 94       	ijmp

00002f40 <__epilogue_restores__>:
    2f40:	2a 88       	ldd	r2, Y+18	; 0x12
    2f42:	39 88       	ldd	r3, Y+17	; 0x11
    2f44:	48 88       	ldd	r4, Y+16	; 0x10
    2f46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f52:	b9 84       	ldd	r11, Y+9	; 0x09
    2f54:	c8 84       	ldd	r12, Y+8	; 0x08
    2f56:	df 80       	ldd	r13, Y+7	; 0x07
    2f58:	ee 80       	ldd	r14, Y+6	; 0x06
    2f5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2f5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2f5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2f60:	aa 81       	ldd	r26, Y+2	; 0x02
    2f62:	b9 81       	ldd	r27, Y+1	; 0x01
    2f64:	ce 0f       	add	r28, r30
    2f66:	d1 1d       	adc	r29, r1
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	ed 01       	movw	r28, r26
    2f74:	08 95       	ret

00002f76 <_exit>:
    2f76:	f8 94       	cli

00002f78 <__stop_program>:
    2f78:	ff cf       	rjmp	.-2      	; 0x2f78 <__stop_program>
