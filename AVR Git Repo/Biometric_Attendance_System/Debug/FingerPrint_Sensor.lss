
FingerPrint_Sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003938  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00003938  000039cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000052  00800170  00800170  00003adc  2**0
                  ALLOC
  3 .stab         000038e8  00000000  00000000  00003adc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002044  00000000  00000000  000073c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000096b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b301  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000cf9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d389  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000db57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__vector_10>
      2c:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c1 1a 	call	0x3582	; 0x3582 <main>
      8a:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 ed       	ldi	r26, 0xD3	; 211
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 1c 	jmp	0x38c6	; 0x38c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 ed       	ldi	r24, 0xD3	; 211
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 1c 	jmp	0x38de	; 0x38de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 1c 	jmp	0x3916	; 0x3916 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <FingerPS_handShake>:
u8 ACK[50]={0};
u8 ACKCounter = 0;
u8 UsersCounter = 1;

u8 FingerPS_handShake(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	64 97       	sbiw	r28, 0x14	; 20
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	u8 i,ACKFRAMESIZE=12;
     b5a:	8c e0       	ldi	r24, 0x0C	; 12
     b5c:	89 83       	std	Y+1, r24	; 0x01

	/*							start		add
	/* Handshake Package Format  (EF 01) (FF FF FF FF) 01 00 03 40 00 44 */
	u8 HandShake[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x40,0x00,0x44};
     b5e:	ce 01       	movw	r24, r28
     b60:	03 96       	adiw	r24, 0x03	; 3
     b62:	99 8b       	std	Y+17, r25	; 0x11
     b64:	88 8b       	std	Y+16, r24	; 0x10
     b66:	e7 ee       	ldi	r30, 0xE7	; 231
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	fb 8b       	std	Y+19, r31	; 0x13
     b6c:	ea 8b       	std	Y+18, r30	; 0x12
     b6e:	fc e0       	ldi	r31, 0x0C	; 12
     b70:	fc 8b       	std	Y+20, r31	; 0x14
     b72:	ea 89       	ldd	r30, Y+18	; 0x12
     b74:	fb 89       	ldd	r31, Y+19	; 0x13
     b76:	00 80       	ld	r0, Z
     b78:	8a 89       	ldd	r24, Y+18	; 0x12
     b7a:	9b 89       	ldd	r25, Y+19	; 0x13
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	9b 8b       	std	Y+19, r25	; 0x13
     b80:	8a 8b       	std	Y+18, r24	; 0x12
     b82:	e8 89       	ldd	r30, Y+16	; 0x10
     b84:	f9 89       	ldd	r31, Y+17	; 0x11
     b86:	00 82       	st	Z, r0
     b88:	88 89       	ldd	r24, Y+16	; 0x10
     b8a:	99 89       	ldd	r25, Y+17	; 0x11
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	99 8b       	std	Y+17, r25	; 0x11
     b90:	88 8b       	std	Y+16, r24	; 0x10
     b92:	9c 89       	ldd	r25, Y+20	; 0x14
     b94:	91 50       	subi	r25, 0x01	; 1
     b96:	9c 8b       	std	Y+20, r25	; 0x14
     b98:	ec 89       	ldd	r30, Y+20	; 0x14
     b9a:	ee 23       	and	r30, r30
     b9c:	51 f7       	brne	.-44     	; 0xb72 <FingerPS_handShake+0x2c>

	for(i=0;i<sizeof(HandShake);i++)
     b9e:	1a 82       	std	Y+2, r1	; 0x02
     ba0:	0e c0       	rjmp	.+28     	; 0xbbe <FingerPS_handShake+0x78>
	{
		UART_sendByte(HandShake[i]);
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	ce 01       	movw	r24, r28
     baa:	03 96       	adiw	r24, 0x03	; 3
     bac:	fc 01       	movw	r30, r24
     bae:	e2 0f       	add	r30, r18
     bb0:	f3 1f       	adc	r31, r19
     bb2:	80 81       	ld	r24, Z
     bb4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>

	/*							start		add
	/* Handshake Package Format  (EF 01) (FF FF FF FF) 01 00 03 40 00 44 */
	u8 HandShake[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x40,0x00,0x44};

	for(i=0;i<sizeof(HandShake);i++)
     bb8:	8a 81       	ldd	r24, Y+2	; 0x02
     bba:	8f 5f       	subi	r24, 0xFF	; 255
     bbc:	8a 83       	std	Y+2, r24	; 0x02
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	8c 30       	cpi	r24, 0x0C	; 12
     bc2:	78 f3       	brcs	.-34     	; 0xba2 <FingerPS_handShake+0x5c>
	{
		UART_sendByte(HandShake[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
     bc4:	88 e2       	ldi	r24, 0x28	; 40
     bc6:	9a e0       	ldi	r25, 0x0A	; 10
     bc8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
     bcc:	65 e0       	ldi	r22, 0x05	; 5
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
     bd8:	90 91 a3 01 	lds	r25, 0x01A3
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	98 17       	cp	r25, r24
     be0:	09 f5       	brne	.+66     	; 0xc24 <FingerPS_handShake+0xde>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	88 2f       	mov	r24, r24
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 97       	sbiw	r24, 0x02	; 2
     bea:	fc 01       	movw	r30, r24
     bec:	ef 58       	subi	r30, 0x8F	; 143
     bee:	fe 4f       	sbci	r31, 0xFE	; 254
     bf0:	80 81       	ld	r24, Z
     bf2:	88 23       	and	r24, r24
     bf4:	b9 f4       	brne	.+46     	; 0xc24 <FingerPS_handShake+0xde>
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	fc 01       	movw	r30, r24
     c00:	ef 58       	subi	r30, 0x8F	; 143
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	80 81       	ld	r24, Z
     c06:	8a 30       	cpi	r24, 0x0A	; 10
     c08:	69 f4       	brne	.+26     	; 0xc24 <FingerPS_handShake+0xde>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	03 97       	sbiw	r24, 0x03	; 3
     c12:	fc 01       	movw	r30, r24
     c14:	ef 58       	subi	r30, 0x8F	; 143
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	80 81       	ld	r24, Z
     c1a:	88 23       	and	r24, r24
     c1c:	19 f4       	brne	.+6      	; 0xc24 <FingerPS_handShake+0xde>
			{
				return SUCCESS;
     c1e:	f1 e0       	ldi	r31, 0x01	; 1
     c20:	ff 87       	std	Y+15, r31	; 0x0f
     c22:	01 c0       	rjmp	.+2      	; 0xc26 <FingerPS_handShake+0xe0>
			}
		}
	}
	return ERROR;
     c24:	1f 86       	std	Y+15, r1	; 0x0f
     c26:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     c28:	64 96       	adiw	r28, 0x14	; 20
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <FingerPS_init>:

void FingerPS_init(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	UART_init();
     c42:	0e 94 db 19 	call	0x33b6	; 0x33b6 <UART_init>
}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <FingerPS_genImg>:
u8 FingerPS_genImg(void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	64 97       	sbiw	r28, 0x14	; 20
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
	u8 i,ACKFRAMESIZE=12;
     c60:	8c e0       	ldi	r24, 0x0C	; 12
     c62:	89 83       	std	Y+1, r24	; 0x01
	u8 GenImg[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x01,0x00,0x05};
     c64:	ce 01       	movw	r24, r28
     c66:	03 96       	adiw	r24, 0x03	; 3
     c68:	99 8b       	std	Y+17, r25	; 0x11
     c6a:	88 8b       	std	Y+16, r24	; 0x10
     c6c:	e3 ef       	ldi	r30, 0xF3	; 243
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	fb 8b       	std	Y+19, r31	; 0x13
     c72:	ea 8b       	std	Y+18, r30	; 0x12
     c74:	fc e0       	ldi	r31, 0x0C	; 12
     c76:	fc 8b       	std	Y+20, r31	; 0x14
     c78:	ea 89       	ldd	r30, Y+18	; 0x12
     c7a:	fb 89       	ldd	r31, Y+19	; 0x13
     c7c:	00 80       	ld	r0, Z
     c7e:	8a 89       	ldd	r24, Y+18	; 0x12
     c80:	9b 89       	ldd	r25, Y+19	; 0x13
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	9b 8b       	std	Y+19, r25	; 0x13
     c86:	8a 8b       	std	Y+18, r24	; 0x12
     c88:	e8 89       	ldd	r30, Y+16	; 0x10
     c8a:	f9 89       	ldd	r31, Y+17	; 0x11
     c8c:	00 82       	st	Z, r0
     c8e:	88 89       	ldd	r24, Y+16	; 0x10
     c90:	99 89       	ldd	r25, Y+17	; 0x11
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	99 8b       	std	Y+17, r25	; 0x11
     c96:	88 8b       	std	Y+16, r24	; 0x10
     c98:	9c 89       	ldd	r25, Y+20	; 0x14
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	9c 8b       	std	Y+20, r25	; 0x14
     c9e:	ec 89       	ldd	r30, Y+20	; 0x14
     ca0:	ee 23       	and	r30, r30
     ca2:	51 f7       	brne	.-44     	; 0xc78 <FingerPS_genImg+0x2c>

	FingerPS_AuraNormal();
     ca4:	0e 94 8b 08 	call	0x1116	; 0x1116 <FingerPS_AuraNormal>
	delayMilliSec(2000);
     ca8:	60 ed       	ldi	r22, 0xD0	; 208
     caa:	77 e0       	ldi	r23, 0x07	; 7
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	for(i=0;i<sizeof(GenImg);i++)
     cb4:	1a 82       	std	Y+2, r1	; 0x02
     cb6:	0e c0       	rjmp	.+28     	; 0xcd4 <FingerPS_genImg+0x88>
	{
		UART_sendByte(GenImg[i]);
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	ce 01       	movw	r24, r28
     cc0:	03 96       	adiw	r24, 0x03	; 3
     cc2:	fc 01       	movw	r30, r24
     cc4:	e2 0f       	add	r30, r18
     cc6:	f3 1f       	adc	r31, r19
     cc8:	80 81       	ld	r24, Z
     cca:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
	u8 GenImg[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x01,0x00,0x05};

	FingerPS_AuraNormal();
	delayMilliSec(2000);

	for(i=0;i<sizeof(GenImg);i++)
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	8c 30       	cpi	r24, 0x0C	; 12
     cd8:	78 f3       	brcs	.-34     	; 0xcb8 <FingerPS_genImg+0x6c>
	{
		UART_sendByte(GenImg[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
     cda:	88 e2       	ldi	r24, 0x28	; 40
     cdc:	9a e0       	ldi	r25, 0x0A	; 10
     cde:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
     ce2:	65 e0       	ldi	r22, 0x05	; 5
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
     cee:	90 91 a3 01 	lds	r25, 0x01A3
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	98 17       	cp	r25, r24
     cf6:	19 f5       	brne	.+70     	; 0xd3e <FingerPS_genImg+0xf2>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 97       	sbiw	r24, 0x02	; 2
     d00:	fc 01       	movw	r30, r24
     d02:	ef 58       	subi	r30, 0x8F	; 143
     d04:	fe 4f       	sbci	r31, 0xFE	; 254
     d06:	80 81       	ld	r24, Z
     d08:	88 23       	and	r24, r24
     d0a:	c9 f4       	brne	.+50     	; 0xd3e <FingerPS_genImg+0xf2>
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	88 2f       	mov	r24, r24
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	fc 01       	movw	r30, r24
     d16:	ef 58       	subi	r30, 0x8F	; 143
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	80 81       	ld	r24, Z
     d1c:	8a 30       	cpi	r24, 0x0A	; 10
     d1e:	79 f4       	brne	.+30     	; 0xd3e <FingerPS_genImg+0xf2>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	03 97       	sbiw	r24, 0x03	; 3
     d28:	fc 01       	movw	r30, r24
     d2a:	ef 58       	subi	r30, 0x8F	; 143
     d2c:	fe 4f       	sbci	r31, 0xFE	; 254
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	29 f4       	brne	.+10     	; 0xd3e <FingerPS_genImg+0xf2>
			{
				FingerPS_AuraSuccess();
     d34:	0e 94 05 09 	call	0x120a	; 0x120a <FingerPS_AuraSuccess>
				return SUCCESS;
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	ff 87       	std	Y+15, r31	; 0x0f
     d3c:	03 c0       	rjmp	.+6      	; 0xd44 <FingerPS_genImg+0xf8>
			}
		}
	}
	FingerPS_AuraError();
     d3e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <FingerPS_AuraError>
	return ERROR;
     d42:	1f 86       	std	Y+15, r1	; 0x0f
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f

}
     d46:	64 96       	adiw	r28, 0x14	; 20
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <FingerPS_convertImg2CharFile>:
u8 FingerPS_convertImg2CharFile(u8 buffID)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	66 97       	sbiw	r28, 0x16	; 22
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	88 8b       	std	Y+16, r24	; 0x10
	u8 i,ACKFRAMESIZE=12;
     d6e:	8c e0       	ldi	r24, 0x0C	; 12
     d70:	89 83       	std	Y+1, r24	; 0x01

	u8 Img2Tz []={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x04,0x02,0x00,0x00,0x08};
     d72:	ce 01       	movw	r24, r28
     d74:	03 96       	adiw	r24, 0x03	; 3
     d76:	9b 8b       	std	Y+19, r25	; 0x13
     d78:	8a 8b       	std	Y+18, r24	; 0x12
     d7a:	ef ef       	ldi	r30, 0xFF	; 255
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	fd 8b       	std	Y+21, r31	; 0x15
     d80:	ec 8b       	std	Y+20, r30	; 0x14
     d82:	fd e0       	ldi	r31, 0x0D	; 13
     d84:	fe 8b       	std	Y+22, r31	; 0x16
     d86:	ec 89       	ldd	r30, Y+20	; 0x14
     d88:	fd 89       	ldd	r31, Y+21	; 0x15
     d8a:	00 80       	ld	r0, Z
     d8c:	8c 89       	ldd	r24, Y+20	; 0x14
     d8e:	9d 89       	ldd	r25, Y+21	; 0x15
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	9d 8b       	std	Y+21, r25	; 0x15
     d94:	8c 8b       	std	Y+20, r24	; 0x14
     d96:	ea 89       	ldd	r30, Y+18	; 0x12
     d98:	fb 89       	ldd	r31, Y+19	; 0x13
     d9a:	00 82       	st	Z, r0
     d9c:	8a 89       	ldd	r24, Y+18	; 0x12
     d9e:	9b 89       	ldd	r25, Y+19	; 0x13
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	9b 8b       	std	Y+19, r25	; 0x13
     da4:	8a 8b       	std	Y+18, r24	; 0x12
     da6:	9e 89       	ldd	r25, Y+22	; 0x16
     da8:	91 50       	subi	r25, 0x01	; 1
     daa:	9e 8b       	std	Y+22, r25	; 0x16
     dac:	ee 89       	ldd	r30, Y+22	; 0x16
     dae:	ee 23       	and	r30, r30
     db0:	51 f7       	brne	.-44     	; 0xd86 <FingerPS_convertImg2CharFile+0x2e>

	/* insert the number of the chosen character file inside the frame */
	Img2Tz[sizeof(Img2Tz)-3] = buffID;
     db2:	88 89       	ldd	r24, Y+16	; 0x10
     db4:	8d 87       	std	Y+13, r24	; 0x0d

	for(i=0;i<sizeof(Img2Tz);i++)
     db6:	1a 82       	std	Y+2, r1	; 0x02
     db8:	0e c0       	rjmp	.+28     	; 0xdd6 <FingerPS_convertImg2CharFile+0x7e>
	{
		UART_sendByte(Img2Tz[i]);
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	ce 01       	movw	r24, r28
     dc2:	03 96       	adiw	r24, 0x03	; 3
     dc4:	fc 01       	movw	r30, r24
     dc6:	e2 0f       	add	r30, r18
     dc8:	f3 1f       	adc	r31, r19
     dca:	80 81       	ld	r24, Z
     dcc:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
	u8 Img2Tz []={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x04,0x02,0x00,0x00,0x08};

	/* insert the number of the chosen character file inside the frame */
	Img2Tz[sizeof(Img2Tz)-3] = buffID;

	for(i=0;i<sizeof(Img2Tz);i++)
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	8a 83       	std	Y+2, r24	; 0x02
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	8d 30       	cpi	r24, 0x0D	; 13
     dda:	78 f3       	brcs	.-34     	; 0xdba <FingerPS_convertImg2CharFile+0x62>
	{
		UART_sendByte(Img2Tz[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
     ddc:	88 e2       	ldi	r24, 0x28	; 40
     dde:	9a e0       	ldi	r25, 0x0A	; 10
     de0:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
     de4:	65 e0       	ldi	r22, 0x05	; 5
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
     df0:	90 91 a3 01 	lds	r25, 0x01A3
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	98 17       	cp	r25, r24
     df8:	09 f5       	brne	.+66     	; 0xe3c <FingerPS_convertImg2CharFile+0xe4>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 97       	sbiw	r24, 0x02	; 2
     e02:	fc 01       	movw	r30, r24
     e04:	ef 58       	subi	r30, 0x8F	; 143
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 81       	ld	r24, Z
     e0a:	88 23       	and	r24, r24
     e0c:	b9 f4       	brne	.+46     	; 0xe3c <FingerPS_convertImg2CharFile+0xe4>
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	88 2f       	mov	r24, r24
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	fc 01       	movw	r30, r24
     e18:	ef 58       	subi	r30, 0x8F	; 143
     e1a:	fe 4f       	sbci	r31, 0xFE	; 254
     e1c:	80 81       	ld	r24, Z
     e1e:	8a 30       	cpi	r24, 0x0A	; 10
     e20:	69 f4       	brne	.+26     	; 0xe3c <FingerPS_convertImg2CharFile+0xe4>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	03 97       	sbiw	r24, 0x03	; 3
     e2a:	fc 01       	movw	r30, r24
     e2c:	ef 58       	subi	r30, 0x8F	; 143
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	80 81       	ld	r24, Z
     e32:	88 23       	and	r24, r24
     e34:	19 f4       	brne	.+6      	; 0xe3c <FingerPS_convertImg2CharFile+0xe4>
			{

				return SUCCESS;
     e36:	f1 e0       	ldi	r31, 0x01	; 1
     e38:	f9 8b       	std	Y+17, r31	; 0x11
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <FingerPS_convertImg2CharFile+0xe6>
			}
		}
	}
	return ERROR;
     e3c:	19 8a       	std	Y+17, r1	; 0x11
     e3e:	89 89       	ldd	r24, Y+17	; 0x11
}
     e40:	66 96       	adiw	r28, 0x16	; 22
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <FingerPS_genTemplate>:
u8 FingerPS_genTemplate(void)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	64 97       	sbiw	r28, 0x14	; 20
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
	u8 i,ACKFRAMESIZE=12;
     e66:	8c e0       	ldi	r24, 0x0C	; 12
     e68:	89 83       	std	Y+1, r24	; 0x01

	u8 RegModel[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x05,0x00,0x09};
     e6a:	ce 01       	movw	r24, r28
     e6c:	03 96       	adiw	r24, 0x03	; 3
     e6e:	99 8b       	std	Y+17, r25	; 0x11
     e70:	88 8b       	std	Y+16, r24	; 0x10
     e72:	ec e0       	ldi	r30, 0x0C	; 12
     e74:	f1 e0       	ldi	r31, 0x01	; 1
     e76:	fb 8b       	std	Y+19, r31	; 0x13
     e78:	ea 8b       	std	Y+18, r30	; 0x12
     e7a:	fc e0       	ldi	r31, 0x0C	; 12
     e7c:	fc 8b       	std	Y+20, r31	; 0x14
     e7e:	ea 89       	ldd	r30, Y+18	; 0x12
     e80:	fb 89       	ldd	r31, Y+19	; 0x13
     e82:	00 80       	ld	r0, Z
     e84:	8a 89       	ldd	r24, Y+18	; 0x12
     e86:	9b 89       	ldd	r25, Y+19	; 0x13
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	9b 8b       	std	Y+19, r25	; 0x13
     e8c:	8a 8b       	std	Y+18, r24	; 0x12
     e8e:	e8 89       	ldd	r30, Y+16	; 0x10
     e90:	f9 89       	ldd	r31, Y+17	; 0x11
     e92:	00 82       	st	Z, r0
     e94:	88 89       	ldd	r24, Y+16	; 0x10
     e96:	99 89       	ldd	r25, Y+17	; 0x11
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	99 8b       	std	Y+17, r25	; 0x11
     e9c:	88 8b       	std	Y+16, r24	; 0x10
     e9e:	9c 89       	ldd	r25, Y+20	; 0x14
     ea0:	91 50       	subi	r25, 0x01	; 1
     ea2:	9c 8b       	std	Y+20, r25	; 0x14
     ea4:	ec 89       	ldd	r30, Y+20	; 0x14
     ea6:	ee 23       	and	r30, r30
     ea8:	51 f7       	brne	.-44     	; 0xe7e <FingerPS_genTemplate+0x2c>

	for(i=0;i<sizeof(RegModel);i++)
     eaa:	1a 82       	std	Y+2, r1	; 0x02
     eac:	0e c0       	rjmp	.+28     	; 0xeca <FingerPS_genTemplate+0x78>
	{
		UART_sendByte(RegModel[i]);
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	ce 01       	movw	r24, r28
     eb6:	03 96       	adiw	r24, 0x03	; 3
     eb8:	fc 01       	movw	r30, r24
     eba:	e2 0f       	add	r30, r18
     ebc:	f3 1f       	adc	r31, r19
     ebe:	80 81       	ld	r24, Z
     ec0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
{
	u8 i,ACKFRAMESIZE=12;

	u8 RegModel[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x03,0x05,0x00,0x09};

	for(i=0;i<sizeof(RegModel);i++)
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	8f 5f       	subi	r24, 0xFF	; 255
     ec8:	8a 83       	std	Y+2, r24	; 0x02
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	8c 30       	cpi	r24, 0x0C	; 12
     ece:	78 f3       	brcs	.-34     	; 0xeae <FingerPS_genTemplate+0x5c>
	{
		UART_sendByte(RegModel[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
     ed0:	88 e2       	ldi	r24, 0x28	; 40
     ed2:	9a e0       	ldi	r25, 0x0A	; 10
     ed4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
     ed8:	65 e0       	ldi	r22, 0x05	; 5
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
     ee4:	90 91 a3 01 	lds	r25, 0x01A3
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	98 17       	cp	r25, r24
     eec:	09 f5       	brne	.+66     	; 0xf30 <FingerPS_genTemplate+0xde>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	88 2f       	mov	r24, r24
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 97       	sbiw	r24, 0x02	; 2
     ef6:	fc 01       	movw	r30, r24
     ef8:	ef 58       	subi	r30, 0x8F	; 143
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	80 81       	ld	r24, Z
     efe:	88 23       	and	r24, r24
     f00:	b9 f4       	brne	.+46     	; 0xf30 <FingerPS_genTemplate+0xde>
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	fc 01       	movw	r30, r24
     f0c:	ef 58       	subi	r30, 0x8F	; 143
     f0e:	fe 4f       	sbci	r31, 0xFE	; 254
     f10:	80 81       	ld	r24, Z
     f12:	8a 30       	cpi	r24, 0x0A	; 10
     f14:	69 f4       	brne	.+26     	; 0xf30 <FingerPS_genTemplate+0xde>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	03 97       	sbiw	r24, 0x03	; 3
     f1e:	fc 01       	movw	r30, r24
     f20:	ef 58       	subi	r30, 0x8F	; 143
     f22:	fe 4f       	sbci	r31, 0xFE	; 254
     f24:	80 81       	ld	r24, Z
     f26:	88 23       	and	r24, r24
     f28:	19 f4       	brne	.+6      	; 0xf30 <FingerPS_genTemplate+0xde>
			{

				return SUCCESS;
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	ff 87       	std	Y+15, r31	; 0x0f
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <FingerPS_genTemplate+0xe0>
			}
		}
	}
	return ERROR;
     f30:	1f 86       	std	Y+15, r1	; 0x0f
     f32:	8f 85       	ldd	r24, Y+15	; 0x0f
}
     f34:	64 96       	adiw	r28, 0x14	; 20
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <FingerPS_strTemplate>:
u8 FingerPS_strTemplate(u8 ID)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	68 97       	sbiw	r28, 0x18	; 24
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	8a 8b       	std	Y+18, r24	; 0x12

	u8 i,ACKFRAMESIZE=12;
     f5c:	8c e0       	ldi	r24, 0x0C	; 12
     f5e:	89 83       	std	Y+1, r24	; 0x01

	u8 Store[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x06,0x06,0x01,0x00,0x01,0x00,0x0F};
     f60:	ce 01       	movw	r24, r28
     f62:	03 96       	adiw	r24, 0x03	; 3
     f64:	9d 8b       	std	Y+21, r25	; 0x15
     f66:	8c 8b       	std	Y+20, r24	; 0x14
     f68:	e8 e1       	ldi	r30, 0x18	; 24
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	ff 8b       	std	Y+23, r31	; 0x17
     f6e:	ee 8b       	std	Y+22, r30	; 0x16
     f70:	ff e0       	ldi	r31, 0x0F	; 15
     f72:	f8 8f       	std	Y+24, r31	; 0x18
     f74:	ee 89       	ldd	r30, Y+22	; 0x16
     f76:	ff 89       	ldd	r31, Y+23	; 0x17
     f78:	00 80       	ld	r0, Z
     f7a:	8e 89       	ldd	r24, Y+22	; 0x16
     f7c:	9f 89       	ldd	r25, Y+23	; 0x17
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	9f 8b       	std	Y+23, r25	; 0x17
     f82:	8e 8b       	std	Y+22, r24	; 0x16
     f84:	ec 89       	ldd	r30, Y+20	; 0x14
     f86:	fd 89       	ldd	r31, Y+21	; 0x15
     f88:	00 82       	st	Z, r0
     f8a:	8c 89       	ldd	r24, Y+20	; 0x14
     f8c:	9d 89       	ldd	r25, Y+21	; 0x15
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	9d 8b       	std	Y+21, r25	; 0x15
     f92:	8c 8b       	std	Y+20, r24	; 0x14
     f94:	98 8d       	ldd	r25, Y+24	; 0x18
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	98 8f       	std	Y+24, r25	; 0x18
     f9a:	e8 8d       	ldd	r30, Y+24	; 0x18
     f9c:	ee 23       	and	r30, r30
     f9e:	51 f7       	brne	.-44     	; 0xf74 <FingerPS_strTemplate+0x2e>

	Store[sizeof(Store)-3] = ID;
     fa0:	8a 89       	ldd	r24, Y+18	; 0x12
     fa2:	8f 87       	std	Y+15, r24	; 0x0f

	for(i=0;i<sizeof(Store);i++)
     fa4:	1a 82       	std	Y+2, r1	; 0x02
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <FingerPS_strTemplate+0x7e>
	{
		UART_sendByte(Store[i]);
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	ce 01       	movw	r24, r28
     fb0:	03 96       	adiw	r24, 0x03	; 3
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>

	u8 Store[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x06,0x06,0x01,0x00,0x01,0x00,0x0F};

	Store[sizeof(Store)-3] = ID;

	for(i=0;i<sizeof(Store);i++)
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	8a 83       	std	Y+2, r24	; 0x02
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	8f 30       	cpi	r24, 0x0F	; 15
     fc8:	78 f3       	brcs	.-34     	; 0xfa8 <FingerPS_strTemplate+0x62>
	{
		UART_sendByte(Store[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
     fca:	88 e2       	ldi	r24, 0x28	; 40
     fcc:	9a e0       	ldi	r25, 0x0A	; 10
     fce:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
     fd2:	65 e0       	ldi	r22, 0x05	; 5
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
     fde:	90 91 a3 01 	lds	r25, 0x01A3
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
     fe4:	98 17       	cp	r25, r24
     fe6:	31 f5       	brne	.+76     	; 0x1034 <FingerPS_strTemplate+0xee>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 97       	sbiw	r24, 0x02	; 2
     ff0:	fc 01       	movw	r30, r24
     ff2:	ef 58       	subi	r30, 0x8F	; 143
     ff4:	fe 4f       	sbci	r31, 0xFE	; 254
     ff6:	80 81       	ld	r24, Z
     ff8:	88 23       	and	r24, r24
     ffa:	e1 f4       	brne	.+56     	; 0x1034 <FingerPS_strTemplate+0xee>
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	fc 01       	movw	r30, r24
    1006:	ef 58       	subi	r30, 0x8F	; 143
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	80 81       	ld	r24, Z
    100c:	8a 30       	cpi	r24, 0x0A	; 10
    100e:	91 f4       	brne	.+36     	; 0x1034 <FingerPS_strTemplate+0xee>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	03 97       	sbiw	r24, 0x03	; 3
    1018:	fc 01       	movw	r30, r24
    101a:	ef 58       	subi	r30, 0x8F	; 143
    101c:	fe 4f       	sbci	r31, 0xFE	; 254
    101e:	80 81       	ld	r24, Z
    1020:	88 23       	and	r24, r24
    1022:	41 f4       	brne	.+16     	; 0x1034 <FingerPS_strTemplate+0xee>
			{
				UsersCounter++;
    1024:	80 91 e2 00 	lds	r24, 0x00E2
    1028:	8f 5f       	subi	r24, 0xFF	; 255
    102a:	80 93 e2 00 	sts	0x00E2, r24
				return SUCCESS;
    102e:	f1 e0       	ldi	r31, 0x01	; 1
    1030:	fb 8b       	std	Y+19, r31	; 0x13
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <FingerPS_strTemplate+0xf0>
			}
		}
	}
	return ERROR;
    1034:	1b 8a       	std	Y+19, r1	; 0x13
    1036:	8b 89       	ldd	r24, Y+19	; 0x13

}
    1038:	68 96       	adiw	r28, 0x18	; 24
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <FingerPS_searchFinger>:
u8 FingerPS_searchFinger(void)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	69 97       	sbiw	r28, 0x19	; 25
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
	u8 i,ACKFRAMESIZE=16;
    105e:	80 e1       	ldi	r24, 0x10	; 16
    1060:	89 83       	std	Y+1, r24	; 0x01

	u8 Search[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, 0x01, 0x00, 0x01 ,0x00 ,0x01 ,0x00,0x0E};
    1062:	ce 01       	movw	r24, r28
    1064:	03 96       	adiw	r24, 0x03	; 3
    1066:	9e 8b       	std	Y+22, r25	; 0x16
    1068:	8d 8b       	std	Y+21, r24	; 0x15
    106a:	e7 e2       	ldi	r30, 0x27	; 39
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	f8 8f       	std	Y+24, r31	; 0x18
    1070:	ef 8b       	std	Y+23, r30	; 0x17
    1072:	f1 e1       	ldi	r31, 0x11	; 17
    1074:	f9 8f       	std	Y+25, r31	; 0x19
    1076:	ef 89       	ldd	r30, Y+23	; 0x17
    1078:	f8 8d       	ldd	r31, Y+24	; 0x18
    107a:	00 80       	ld	r0, Z
    107c:	8f 89       	ldd	r24, Y+23	; 0x17
    107e:	98 8d       	ldd	r25, Y+24	; 0x18
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	98 8f       	std	Y+24, r25	; 0x18
    1084:	8f 8b       	std	Y+23, r24	; 0x17
    1086:	ed 89       	ldd	r30, Y+21	; 0x15
    1088:	fe 89       	ldd	r31, Y+22	; 0x16
    108a:	00 82       	st	Z, r0
    108c:	8d 89       	ldd	r24, Y+21	; 0x15
    108e:	9e 89       	ldd	r25, Y+22	; 0x16
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	9e 8b       	std	Y+22, r25	; 0x16
    1094:	8d 8b       	std	Y+21, r24	; 0x15
    1096:	99 8d       	ldd	r25, Y+25	; 0x19
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	99 8f       	std	Y+25, r25	; 0x19
    109c:	e9 8d       	ldd	r30, Y+25	; 0x19
    109e:	ee 23       	and	r30, r30
    10a0:	51 f7       	brne	.-44     	; 0x1076 <FingerPS_searchFinger+0x2c>

	for(i=0;i<sizeof(Search);i++)
    10a2:	1a 82       	std	Y+2, r1	; 0x02
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <FingerPS_searchFinger+0x78>
	{
		UART_sendByte(Search[i]);
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	ce 01       	movw	r24, r28
    10ae:	03 96       	adiw	r24, 0x03	; 3
    10b0:	fc 01       	movw	r30, r24
    10b2:	e2 0f       	add	r30, r18
    10b4:	f3 1f       	adc	r31, r19
    10b6:	80 81       	ld	r24, Z
    10b8:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
{
	u8 i,ACKFRAMESIZE=16;

	u8 Search[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, 0x01, 0x00, 0x01 ,0x00 ,0x01 ,0x00,0x0E};

	for(i=0;i<sizeof(Search);i++)
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	81 31       	cpi	r24, 0x11	; 17
    10c6:	78 f3       	brcs	.-34     	; 0x10a6 <FingerPS_searchFinger+0x5c>
	{
		UART_sendByte(Search[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
    10c8:	88 e2       	ldi	r24, 0x28	; 40
    10ca:	9a e0       	ldi	r25, 0x0A	; 10
    10cc:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
    10d0:	65 e0       	ldi	r22, 0x05	; 5
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
    10dc:	90 91 a3 01 	lds	r25, 0x01A3
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	98 17       	cp	r25, r24
    10e4:	69 f4       	brne	.+26     	; 0x1100 <FingerPS_searchFinger+0xb6>
	{
		/* We can't count on the checksum here since the MatchScore cannot be pre-determined */
//		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
//		{
			if(ACK[ACKFRAMESIZE-7] == 0x00)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	07 97       	sbiw	r24, 0x07	; 7
    10ee:	fc 01       	movw	r30, r24
    10f0:	ef 58       	subi	r30, 0x8F	; 143
    10f2:	fe 4f       	sbci	r31, 0xFE	; 254
    10f4:	80 81       	ld	r24, Z
    10f6:	88 23       	and	r24, r24
    10f8:	19 f4       	brne	.+6      	; 0x1100 <FingerPS_searchFinger+0xb6>
			{
				return SUCCESS;
    10fa:	f1 e0       	ldi	r31, 0x01	; 1
    10fc:	fc 8b       	std	Y+20, r31	; 0x14
    10fe:	01 c0       	rjmp	.+2      	; 0x1102 <FingerPS_searchFinger+0xb8>
			}
//		}
	}
	return ERROR;
    1100:	1c 8a       	std	Y+20, r1	; 0x14
    1102:	8c 89       	ldd	r24, Y+20	; 0x14
}
    1104:	69 96       	adiw	r28, 0x19	; 25
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <FingerPS_AuraNormal>:
u8 FingerPS_deleteFinger(void);
u8 FingerPS_LoadCharFile(void);
static u16 FingerPS_calcCheckSum(u8* frame);
u8 FingerPS_match(void);
u8 FingerPS_AuraNormal(void)
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	68 97       	sbiw	r28, 0x18	; 24
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
	u8 i,ACKFRAMESIZE=12;
    112a:	8c e0       	ldi	r24, 0x0C	; 12
    112c:	89 83       	std	Y+1, r24	; 0x01

	u8 AuraLedConfigPurple[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x35, 0x01, 0xF0, 0x03 ,0x00 ,0x01 ,0x31};
    112e:	ce 01       	movw	r24, r28
    1130:	03 96       	adiw	r24, 0x03	; 3
    1132:	9d 8b       	std	Y+21, r25	; 0x15
    1134:	8c 8b       	std	Y+20, r24	; 0x14
    1136:	e8 e3       	ldi	r30, 0x38	; 56
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	ff 8b       	std	Y+23, r31	; 0x17
    113c:	ee 8b       	std	Y+22, r30	; 0x16
    113e:	f0 e1       	ldi	r31, 0x10	; 16
    1140:	f8 8f       	std	Y+24, r31	; 0x18
    1142:	ee 89       	ldd	r30, Y+22	; 0x16
    1144:	ff 89       	ldd	r31, Y+23	; 0x17
    1146:	00 80       	ld	r0, Z
    1148:	8e 89       	ldd	r24, Y+22	; 0x16
    114a:	9f 89       	ldd	r25, Y+23	; 0x17
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	9f 8b       	std	Y+23, r25	; 0x17
    1150:	8e 8b       	std	Y+22, r24	; 0x16
    1152:	ec 89       	ldd	r30, Y+20	; 0x14
    1154:	fd 89       	ldd	r31, Y+21	; 0x15
    1156:	00 82       	st	Z, r0
    1158:	8c 89       	ldd	r24, Y+20	; 0x14
    115a:	9d 89       	ldd	r25, Y+21	; 0x15
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	9d 8b       	std	Y+21, r25	; 0x15
    1160:	8c 8b       	std	Y+20, r24	; 0x14
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	98 8f       	std	Y+24, r25	; 0x18
    1168:	e8 8d       	ldd	r30, Y+24	; 0x18
    116a:	ee 23       	and	r30, r30
    116c:	51 f7       	brne	.-44     	; 0x1142 <FingerPS_AuraNormal+0x2c>

	for(i=0;i<sizeof(AuraLedConfigPurple);i++)
    116e:	1a 82       	std	Y+2, r1	; 0x02
    1170:	0e c0       	rjmp	.+28     	; 0x118e <FingerPS_AuraNormal+0x78>
	{
		UART_sendByte(AuraLedConfigPurple[i]);
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	ce 01       	movw	r24, r28
    117a:	03 96       	adiw	r24, 0x03	; 3
    117c:	fc 01       	movw	r30, r24
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	80 81       	ld	r24, Z
    1184:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
{
	u8 i,ACKFRAMESIZE=12;

	u8 AuraLedConfigPurple[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x35, 0x01, 0xF0, 0x03 ,0x00 ,0x01 ,0x31};

	for(i=0;i<sizeof(AuraLedConfigPurple);i++)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	8a 83       	std	Y+2, r24	; 0x02
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	80 31       	cpi	r24, 0x10	; 16
    1192:	78 f3       	brcs	.-34     	; 0x1172 <FingerPS_AuraNormal+0x5c>
	{
		UART_sendByte(AuraLedConfigPurple[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
    1194:	88 e2       	ldi	r24, 0x28	; 40
    1196:	9a e0       	ldi	r25, 0x0A	; 10
    1198:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
    119c:	65 e0       	ldi	r22, 0x05	; 5
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
    11a8:	90 91 a3 01 	lds	r25, 0x01A3
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	98 17       	cp	r25, r24
    11b0:	09 f5       	brne	.+66     	; 0x11f4 <FingerPS_AuraNormal+0xde>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	02 97       	sbiw	r24, 0x02	; 2
    11ba:	fc 01       	movw	r30, r24
    11bc:	ef 58       	subi	r30, 0x8F	; 143
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	80 81       	ld	r24, Z
    11c2:	88 23       	and	r24, r24
    11c4:	b9 f4       	brne	.+46     	; 0x11f4 <FingerPS_AuraNormal+0xde>
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	fc 01       	movw	r30, r24
    11d0:	ef 58       	subi	r30, 0x8F	; 143
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	80 81       	ld	r24, Z
    11d6:	8a 30       	cpi	r24, 0x0A	; 10
    11d8:	69 f4       	brne	.+26     	; 0x11f4 <FingerPS_AuraNormal+0xde>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	03 97       	sbiw	r24, 0x03	; 3
    11e2:	fc 01       	movw	r30, r24
    11e4:	ef 58       	subi	r30, 0x8F	; 143
    11e6:	fe 4f       	sbci	r31, 0xFE	; 254
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	19 f4       	brne	.+6      	; 0x11f4 <FingerPS_AuraNormal+0xde>
			{
				return SUCCESS;
    11ee:	f1 e0       	ldi	r31, 0x01	; 1
    11f0:	fb 8b       	std	Y+19, r31	; 0x13
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <FingerPS_AuraNormal+0xe0>
			}
		}
	}
	return ERROR;
    11f4:	1b 8a       	std	Y+19, r1	; 0x13
    11f6:	8b 89       	ldd	r24, Y+19	; 0x13
}
    11f8:	68 96       	adiw	r28, 0x18	; 24
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <FingerPS_AuraSuccess>:
u8 FingerPS_AuraSuccess(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	68 97       	sbiw	r28, 0x18	; 24
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61

	u8 i,ACKFRAMESIZE=12;
    121e:	8c e0       	ldi	r24, 0x0C	; 12
    1220:	89 83       	std	Y+1, r24	; 0x01

	u8 AuraLedConfigBlue[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x35, 0x01, 0xF0, 0x02 ,0x00 ,0x01 ,0x30};
    1222:	ce 01       	movw	r24, r28
    1224:	03 96       	adiw	r24, 0x03	; 3
    1226:	9d 8b       	std	Y+21, r25	; 0x15
    1228:	8c 8b       	std	Y+20, r24	; 0x14
    122a:	e8 e4       	ldi	r30, 0x48	; 72
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	ff 8b       	std	Y+23, r31	; 0x17
    1230:	ee 8b       	std	Y+22, r30	; 0x16
    1232:	f0 e1       	ldi	r31, 0x10	; 16
    1234:	f8 8f       	std	Y+24, r31	; 0x18
    1236:	ee 89       	ldd	r30, Y+22	; 0x16
    1238:	ff 89       	ldd	r31, Y+23	; 0x17
    123a:	00 80       	ld	r0, Z
    123c:	8e 89       	ldd	r24, Y+22	; 0x16
    123e:	9f 89       	ldd	r25, Y+23	; 0x17
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	9f 8b       	std	Y+23, r25	; 0x17
    1244:	8e 8b       	std	Y+22, r24	; 0x16
    1246:	ec 89       	ldd	r30, Y+20	; 0x14
    1248:	fd 89       	ldd	r31, Y+21	; 0x15
    124a:	00 82       	st	Z, r0
    124c:	8c 89       	ldd	r24, Y+20	; 0x14
    124e:	9d 89       	ldd	r25, Y+21	; 0x15
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	9d 8b       	std	Y+21, r25	; 0x15
    1254:	8c 8b       	std	Y+20, r24	; 0x14
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	91 50       	subi	r25, 0x01	; 1
    125a:	98 8f       	std	Y+24, r25	; 0x18
    125c:	e8 8d       	ldd	r30, Y+24	; 0x18
    125e:	ee 23       	and	r30, r30
    1260:	51 f7       	brne	.-44     	; 0x1236 <FingerPS_AuraSuccess+0x2c>

	for(i=0;i<sizeof(AuraLedConfigBlue);i++)
    1262:	1a 82       	std	Y+2, r1	; 0x02
    1264:	0e c0       	rjmp	.+28     	; 0x1282 <FingerPS_AuraSuccess+0x78>
	{
		UART_sendByte(AuraLedConfigBlue[i]);
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	ce 01       	movw	r24, r28
    126e:	03 96       	adiw	r24, 0x03	; 3
    1270:	fc 01       	movw	r30, r24
    1272:	e2 0f       	add	r30, r18
    1274:	f3 1f       	adc	r31, r19
    1276:	80 81       	ld	r24, Z
    1278:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>

	u8 i,ACKFRAMESIZE=12;

	u8 AuraLedConfigBlue[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x35, 0x01, 0xF0, 0x02 ,0x00 ,0x01 ,0x30};

	for(i=0;i<sizeof(AuraLedConfigBlue);i++)
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	8a 83       	std	Y+2, r24	; 0x02
    1282:	8a 81       	ldd	r24, Y+2	; 0x02
    1284:	80 31       	cpi	r24, 0x10	; 16
    1286:	78 f3       	brcs	.-34     	; 0x1266 <FingerPS_AuraSuccess+0x5c>
	{
		UART_sendByte(AuraLedConfigBlue[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
    1288:	88 e2       	ldi	r24, 0x28	; 40
    128a:	9a e0       	ldi	r25, 0x0A	; 10
    128c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
    1290:	65 e0       	ldi	r22, 0x05	; 5
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
    129c:	90 91 a3 01 	lds	r25, 0x01A3
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	98 17       	cp	r25, r24
    12a4:	09 f5       	brne	.+66     	; 0x12e8 <FingerPS_AuraSuccess+0xde>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 97       	sbiw	r24, 0x02	; 2
    12ae:	fc 01       	movw	r30, r24
    12b0:	ef 58       	subi	r30, 0x8F	; 143
    12b2:	fe 4f       	sbci	r31, 0xFE	; 254
    12b4:	80 81       	ld	r24, Z
    12b6:	88 23       	and	r24, r24
    12b8:	b9 f4       	brne	.+46     	; 0x12e8 <FingerPS_AuraSuccess+0xde>
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	fc 01       	movw	r30, r24
    12c4:	ef 58       	subi	r30, 0x8F	; 143
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	80 81       	ld	r24, Z
    12ca:	8a 30       	cpi	r24, 0x0A	; 10
    12cc:	69 f4       	brne	.+26     	; 0x12e8 <FingerPS_AuraSuccess+0xde>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	03 97       	sbiw	r24, 0x03	; 3
    12d6:	fc 01       	movw	r30, r24
    12d8:	ef 58       	subi	r30, 0x8F	; 143
    12da:	fe 4f       	sbci	r31, 0xFE	; 254
    12dc:	80 81       	ld	r24, Z
    12de:	88 23       	and	r24, r24
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <FingerPS_AuraSuccess+0xde>
			{
				return SUCCESS;
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	fb 8b       	std	Y+19, r31	; 0x13
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <FingerPS_AuraSuccess+0xe0>
			}
		}
	}
	return ERROR;
    12e8:	1b 8a       	std	Y+19, r1	; 0x13
    12ea:	8b 89       	ldd	r24, Y+19	; 0x13

}
    12ec:	68 96       	adiw	r28, 0x18	; 24
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <FingerPS_AuraError>:
u8 FingerPS_AuraError(void)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	68 97       	sbiw	r28, 0x18	; 24
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
	u8 i,ACKFRAMESIZE=12;
    1312:	8c e0       	ldi	r24, 0x0C	; 12
    1314:	89 83       	std	Y+1, r24	; 0x01

	u8 AuraLedConfigBlue[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x02,0x80,0x01,0x80,0x01,0x3F};
    1316:	ce 01       	movw	r24, r28
    1318:	03 96       	adiw	r24, 0x03	; 3
    131a:	9d 8b       	std	Y+21, r25	; 0x15
    131c:	8c 8b       	std	Y+20, r24	; 0x14
    131e:	e8 e5       	ldi	r30, 0x58	; 88
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	ff 8b       	std	Y+23, r31	; 0x17
    1324:	ee 8b       	std	Y+22, r30	; 0x16
    1326:	f0 e1       	ldi	r31, 0x10	; 16
    1328:	f8 8f       	std	Y+24, r31	; 0x18
    132a:	ee 89       	ldd	r30, Y+22	; 0x16
    132c:	ff 89       	ldd	r31, Y+23	; 0x17
    132e:	00 80       	ld	r0, Z
    1330:	8e 89       	ldd	r24, Y+22	; 0x16
    1332:	9f 89       	ldd	r25, Y+23	; 0x17
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9f 8b       	std	Y+23, r25	; 0x17
    1338:	8e 8b       	std	Y+22, r24	; 0x16
    133a:	ec 89       	ldd	r30, Y+20	; 0x14
    133c:	fd 89       	ldd	r31, Y+21	; 0x15
    133e:	00 82       	st	Z, r0
    1340:	8c 89       	ldd	r24, Y+20	; 0x14
    1342:	9d 89       	ldd	r25, Y+21	; 0x15
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	9d 8b       	std	Y+21, r25	; 0x15
    1348:	8c 8b       	std	Y+20, r24	; 0x14
    134a:	98 8d       	ldd	r25, Y+24	; 0x18
    134c:	91 50       	subi	r25, 0x01	; 1
    134e:	98 8f       	std	Y+24, r25	; 0x18
    1350:	e8 8d       	ldd	r30, Y+24	; 0x18
    1352:	ee 23       	and	r30, r30
    1354:	51 f7       	brne	.-44     	; 0x132a <FingerPS_AuraError+0x2c>

	for(i=0;i<sizeof(AuraLedConfigBlue);i++)
    1356:	1a 82       	std	Y+2, r1	; 0x02
    1358:	0e c0       	rjmp	.+28     	; 0x1376 <FingerPS_AuraError+0x78>
	{
		UART_sendByte(AuraLedConfigBlue[i]);
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	ce 01       	movw	r24, r28
    1362:	03 96       	adiw	r24, 0x03	; 3
    1364:	fc 01       	movw	r30, r24
    1366:	e2 0f       	add	r30, r18
    1368:	f3 1f       	adc	r31, r19
    136a:	80 81       	ld	r24, Z
    136c:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
{
	u8 i,ACKFRAMESIZE=12;

	u8 AuraLedConfigBlue[]={0xEF,0x01,0xFF,0xFF,0xFF,0xFF,0x01,0x00,0x07,0x35,0x02,0x80,0x01,0x80,0x01,0x3F};

	for(i=0;i<sizeof(AuraLedConfigBlue);i++)
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	8f 5f       	subi	r24, 0xFF	; 255
    1374:	8a 83       	std	Y+2, r24	; 0x02
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 31       	cpi	r24, 0x10	; 16
    137a:	78 f3       	brcs	.-34     	; 0x135a <FingerPS_AuraError+0x5c>
	{
		UART_sendByte(AuraLedConfigBlue[i]);
	}
	UART_receiveByteAsynchCallBack(getByte);
    137c:	88 e2       	ldi	r24, 0x28	; 40
    137e:	9a e0       	ldi	r25, 0x0A	; 10
    1380:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <UART_receiveByteAsynchCallBack>

	delayMilliSec(5);
    1384:	65 e0       	ldi	r22, 0x05	; 5
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>

	if(ACKCounter == ACKFRAMESIZE)
    1390:	90 91 a3 01 	lds	r25, 0x01A3
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	98 17       	cp	r25, r24
    1398:	09 f5       	brne	.+66     	; 0x13dc <FingerPS_AuraError+0xde>
	{
		if((ACK[ACKFRAMESIZE-2] == 0x00) && (ACK[ACKFRAMESIZE-1] == 0x0A))
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 97       	sbiw	r24, 0x02	; 2
    13a2:	fc 01       	movw	r30, r24
    13a4:	ef 58       	subi	r30, 0x8F	; 143
    13a6:	fe 4f       	sbci	r31, 0xFE	; 254
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	b9 f4       	brne	.+46     	; 0x13dc <FingerPS_AuraError+0xde>
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	fc 01       	movw	r30, r24
    13b8:	ef 58       	subi	r30, 0x8F	; 143
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	80 81       	ld	r24, Z
    13be:	8a 30       	cpi	r24, 0x0A	; 10
    13c0:	69 f4       	brne	.+26     	; 0x13dc <FingerPS_AuraError+0xde>
		{
			if(ACK[ACKFRAMESIZE-3] == 0x00)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	03 97       	sbiw	r24, 0x03	; 3
    13ca:	fc 01       	movw	r30, r24
    13cc:	ef 58       	subi	r30, 0x8F	; 143
    13ce:	fe 4f       	sbci	r31, 0xFE	; 254
    13d0:	80 81       	ld	r24, Z
    13d2:	88 23       	and	r24, r24
    13d4:	19 f4       	brne	.+6      	; 0x13dc <FingerPS_AuraError+0xde>
			{
				return SUCCESS;
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
    13d8:	fb 8b       	std	Y+19, r31	; 0x13
    13da:	01 c0       	rjmp	.+2      	; 0x13de <FingerPS_AuraError+0xe0>
			}
		}
	}
	return ERROR;
    13dc:	1b 8a       	std	Y+19, r1	; 0x13
    13de:	8b 89       	ldd	r24, Y+19	; 0x13
}
    13e0:	68 96       	adiw	r28, 0x18	; 24
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	cf 91       	pop	r28
    13ee:	df 91       	pop	r29
    13f0:	08 95       	ret

000013f2 <delayCallBack>:

void delayCallBack(void)
{
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	80 93 70 01 	sts	0x0170, r24
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <delayMilliSec>:

void delayMilliSec(u32 millisec)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <delayMilliSec+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <delayMilliSec+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	69 83       	std	Y+1, r22	; 0x01
    1414:	7a 83       	std	Y+2, r23	; 0x02
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	9c 83       	std	Y+4, r25	; 0x04

	Timer0_SetCallBack(delayCallBack);
    141a:	89 ef       	ldi	r24, 0xF9	; 249
    141c:	99 e0       	ldi	r25, 0x09	; 9
    141e:	0e 94 05 19 	call	0x320a	; 0x320a <Timer0_SetCallBack>
	TIMER0_clearTimerValue();
    1422:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <TIMER0_clearTimerValue>
	Timer0_SetDelayTimeMilliSec(&config,5);
    1426:	8b ed       	ldi	r24, 0xDB	; 219
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	45 e0       	ldi	r20, 0x05	; 5
    142c:	50 e0       	ldi	r21, 0x00	; 0
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <Timer0_SetDelayTimeMilliSec>
	while(flag == 0);
    1436:	80 91 70 01 	lds	r24, 0x0170
    143a:	88 23       	and	r24, r24
    143c:	e1 f3       	breq	.-8      	; 0x1436 <delayMilliSec+0x30>
	flag = 0;
    143e:	10 92 70 01 	sts	0x0170, r1
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <getByte>:

void getByte(u8 byte)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	0f 92       	push	r0
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	89 83       	std	Y+1, r24	; 0x01
	ACK[ACKCounter] = byte;
    145c:	80 91 a3 01 	lds	r24, 0x01A3
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	fc 01       	movw	r30, r24
    1466:	ef 58       	subi	r30, 0x8F	; 143
    1468:	fe 4f       	sbci	r31, 0xFE	; 254
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	80 83       	st	Z, r24
	ACKCounter++;
    146e:	80 91 a3 01 	lds	r24, 0x01A3
    1472:	8f 5f       	subi	r24, 0xFF	; 255
    1474:	80 93 a3 01 	sts	0x01A3, r24
}
    1478:	0f 90       	pop	r0
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
    1488:	af e5       	ldi	r26, 0x5F	; 95
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	ef e5       	ldi	r30, 0x5F	; 95
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 68       	ori	r24, 0x80	; 128
    1494:	8c 93       	st	X, r24
}
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <GIE_Disable>:

void GIE_Disable(void)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
    14a4:	af e5       	ldi	r26, 0x5F	; 95
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	ef e5       	ldi	r30, 0x5F	; 95
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	8f 77       	andi	r24, 0x7F	; 127
    14b0:	8c 93       	st	X, r24
}
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <DIO_voidSetPinDirection>:
port* const pPORTB = (port*) 0x36;
port* const pPORTC = (port*) 0x33;
port* const pPORTD = (port*) 0x30;

void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	00 d0       	rcall	.+0      	; 0x14be <DIO_voidSetPinDirection+0x6>
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <DIO_voidSetPinDirection+0x8>
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <DIO_voidSetPinDirection+0xa>
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	9a 83       	std	Y+2, r25	; 0x02
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	6b 83       	std	Y+3, r22	; 0x03
    14cc:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3e 83       	std	Y+6, r19	; 0x06
    14d6:	2d 83       	std	Y+5, r18	; 0x05
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <DIO_voidSetPinDirection+0x2c>
    14e2:	51 c0       	rjmp	.+162    	; 0x1586 <DIO_voidSetPinDirection+0xce>
    14e4:	2d 81       	ldd	r18, Y+5	; 0x05
    14e6:	3e 81       	ldd	r19, Y+6	; 0x06
    14e8:	24 30       	cpi	r18, 0x04	; 4
    14ea:	31 05       	cpc	r19, r1
    14ec:	7c f4       	brge	.+30     	; 0x150c <DIO_voidSetPinDirection+0x54>
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	81 30       	cpi	r24, 0x01	; 1
    14f4:	91 05       	cpc	r25, r1
    14f6:	71 f1       	breq	.+92     	; 0x1554 <DIO_voidSetPinDirection+0x9c>
    14f8:	2d 81       	ldd	r18, Y+5	; 0x05
    14fa:	3e 81       	ldd	r19, Y+6	; 0x06
    14fc:	22 30       	cpi	r18, 0x02	; 2
    14fe:	31 05       	cpc	r19, r1
    1500:	ac f5       	brge	.+106    	; 0x156c <DIO_voidSetPinDirection+0xb4>
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	d1 f0       	breq	.+52     	; 0x153e <DIO_voidSetPinDirection+0x86>
    150a:	81 c0       	rjmp	.+258    	; 0x160e <DIO_voidSetPinDirection+0x156>
    150c:	2d 81       	ldd	r18, Y+5	; 0x05
    150e:	3e 81       	ldd	r19, Y+6	; 0x06
    1510:	25 30       	cpi	r18, 0x05	; 5
    1512:	31 05       	cpc	r19, r1
    1514:	09 f4       	brne	.+2      	; 0x1518 <DIO_voidSetPinDirection+0x60>
    1516:	52 c0       	rjmp	.+164    	; 0x15bc <DIO_voidSetPinDirection+0x104>
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	85 30       	cpi	r24, 0x05	; 5
    151e:	91 05       	cpc	r25, r1
    1520:	0c f4       	brge	.+2      	; 0x1524 <DIO_voidSetPinDirection+0x6c>
    1522:	3f c0       	rjmp	.+126    	; 0x15a2 <DIO_voidSetPinDirection+0xea>
    1524:	2d 81       	ldd	r18, Y+5	; 0x05
    1526:	3e 81       	ldd	r19, Y+6	; 0x06
    1528:	26 30       	cpi	r18, 0x06	; 6
    152a:	31 05       	cpc	r19, r1
    152c:	09 f4       	brne	.+2      	; 0x1530 <DIO_voidSetPinDirection+0x78>
    152e:	54 c0       	rjmp	.+168    	; 0x15d8 <DIO_voidSetPinDirection+0x120>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	87 30       	cpi	r24, 0x07	; 7
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <DIO_voidSetPinDirection+0x84>
    153a:	5d c0       	rjmp	.+186    	; 0x15f6 <DIO_voidSetPinDirection+0x13e>
    153c:	68 c0       	rjmp	.+208    	; 0x160e <DIO_voidSetPinDirection+0x156>
	{
	case pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
    153e:	8c 81       	ldd	r24, Y+4	; 0x04
    1540:	81 70       	andi	r24, 0x01	; 1
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	98 2f       	mov	r25, r24
    1548:	91 70       	andi	r25, 0x01	; 1
    154a:	81 81       	ldd	r24, Z+1	; 0x01
    154c:	8e 7f       	andi	r24, 0xFE	; 254
    154e:	89 2b       	or	r24, r25
    1550:	81 83       	std	Z+1, r24	; 0x01
    1552:	5d c0       	rjmp	.+186    	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	81 70       	andi	r24, 0x01	; 1
    1558:	e9 81       	ldd	r30, Y+1	; 0x01
    155a:	fa 81       	ldd	r31, Y+2	; 0x02
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	98 2f       	mov	r25, r24
    1560:	99 0f       	add	r25, r25
    1562:	81 81       	ldd	r24, Z+1	; 0x01
    1564:	8d 7f       	andi	r24, 0xFD	; 253
    1566:	89 2b       	or	r24, r25
    1568:	81 83       	std	Z+1, r24	; 0x01
    156a:	51 c0       	rjmp	.+162    	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
    156c:	8c 81       	ldd	r24, Y+4	; 0x04
    156e:	81 70       	andi	r24, 0x01	; 1
    1570:	e9 81       	ldd	r30, Y+1	; 0x01
    1572:	fa 81       	ldd	r31, Y+2	; 0x02
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	98 2f       	mov	r25, r24
    1578:	99 0f       	add	r25, r25
    157a:	99 0f       	add	r25, r25
    157c:	81 81       	ldd	r24, Z+1	; 0x01
    157e:	8b 7f       	andi	r24, 0xFB	; 251
    1580:	89 2b       	or	r24, r25
    1582:	81 83       	std	Z+1, r24	; 0x01
    1584:	44 c0       	rjmp	.+136    	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	81 70       	andi	r24, 0x01	; 1
    158a:	e9 81       	ldd	r30, Y+1	; 0x01
    158c:	fa 81       	ldd	r31, Y+2	; 0x02
    158e:	81 70       	andi	r24, 0x01	; 1
    1590:	98 2f       	mov	r25, r24
    1592:	99 0f       	add	r25, r25
    1594:	99 0f       	add	r25, r25
    1596:	99 0f       	add	r25, r25
    1598:	81 81       	ldd	r24, Z+1	; 0x01
    159a:	87 7f       	andi	r24, 0xF7	; 247
    159c:	89 2b       	or	r24, r25
    159e:	81 83       	std	Z+1, r24	; 0x01
    15a0:	36 c0       	rjmp	.+108    	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
    15a2:	8c 81       	ldd	r24, Y+4	; 0x04
    15a4:	81 70       	andi	r24, 0x01	; 1
    15a6:	e9 81       	ldd	r30, Y+1	; 0x01
    15a8:	fa 81       	ldd	r31, Y+2	; 0x02
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	98 2f       	mov	r25, r24
    15ae:	92 95       	swap	r25
    15b0:	90 7f       	andi	r25, 0xF0	; 240
    15b2:	81 81       	ldd	r24, Z+1	; 0x01
    15b4:	8f 7e       	andi	r24, 0xEF	; 239
    15b6:	89 2b       	or	r24, r25
    15b8:	81 83       	std	Z+1, r24	; 0x01
    15ba:	29 c0       	rjmp	.+82     	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	e9 81       	ldd	r30, Y+1	; 0x01
    15c2:	fa 81       	ldd	r31, Y+2	; 0x02
    15c4:	81 70       	andi	r24, 0x01	; 1
    15c6:	98 2f       	mov	r25, r24
    15c8:	92 95       	swap	r25
    15ca:	99 0f       	add	r25, r25
    15cc:	90 7e       	andi	r25, 0xE0	; 224
    15ce:	81 81       	ldd	r24, Z+1	; 0x01
    15d0:	8f 7d       	andi	r24, 0xDF	; 223
    15d2:	89 2b       	or	r24, r25
    15d4:	81 83       	std	Z+1, r24	; 0x01
    15d6:	1b c0       	rjmp	.+54     	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	81 70       	andi	r24, 0x01	; 1
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	98 2f       	mov	r25, r24
    15e4:	92 95       	swap	r25
    15e6:	99 0f       	add	r25, r25
    15e8:	99 0f       	add	r25, r25
    15ea:	90 7c       	andi	r25, 0xC0	; 192
    15ec:	81 81       	ldd	r24, Z+1	; 0x01
    15ee:	8f 7b       	andi	r24, 0xBF	; 191
    15f0:	89 2b       	or	r24, r25
    15f2:	81 83       	std	Z+1, r24	; 0x01
    15f4:	0c c0       	rjmp	.+24     	; 0x160e <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	81 70       	andi	r24, 0x01	; 1
    15fa:	e9 81       	ldd	r30, Y+1	; 0x01
    15fc:	fa 81       	ldd	r31, Y+2	; 0x02
    15fe:	98 2f       	mov	r25, r24
    1600:	97 95       	ror	r25
    1602:	99 27       	eor	r25, r25
    1604:	97 95       	ror	r25
    1606:	81 81       	ldd	r24, Z+1	; 0x01
    1608:	8f 77       	andi	r24, 0x7F	; 127
    160a:	89 2b       	or	r24, r25
    160c:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
    160e:	26 96       	adiw	r28, 0x06	; 6
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	00 d0       	rcall	.+0      	; 0x1626 <DIO_voidSetPinValue+0x6>
    1626:	00 d0       	rcall	.+0      	; 0x1628 <DIO_voidSetPinValue+0x8>
    1628:	00 d0       	rcall	.+0      	; 0x162a <DIO_voidSetPinValue+0xa>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	6b 83       	std	Y+3, r22	; 0x03
    1634:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	3e 83       	std	Y+6, r19	; 0x06
    163e:	2d 83       	std	Y+5, r18	; 0x05
    1640:	8d 81       	ldd	r24, Y+5	; 0x05
    1642:	9e 81       	ldd	r25, Y+6	; 0x06
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <DIO_voidSetPinValue+0x2c>
    164a:	51 c0       	rjmp	.+162    	; 0x16ee <DIO_voidSetPinValue+0xce>
    164c:	2d 81       	ldd	r18, Y+5	; 0x05
    164e:	3e 81       	ldd	r19, Y+6	; 0x06
    1650:	24 30       	cpi	r18, 0x04	; 4
    1652:	31 05       	cpc	r19, r1
    1654:	7c f4       	brge	.+30     	; 0x1674 <DIO_voidSetPinValue+0x54>
    1656:	8d 81       	ldd	r24, Y+5	; 0x05
    1658:	9e 81       	ldd	r25, Y+6	; 0x06
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	91 05       	cpc	r25, r1
    165e:	71 f1       	breq	.+92     	; 0x16bc <DIO_voidSetPinValue+0x9c>
    1660:	2d 81       	ldd	r18, Y+5	; 0x05
    1662:	3e 81       	ldd	r19, Y+6	; 0x06
    1664:	22 30       	cpi	r18, 0x02	; 2
    1666:	31 05       	cpc	r19, r1
    1668:	ac f5       	brge	.+106    	; 0x16d4 <DIO_voidSetPinValue+0xb4>
    166a:	8d 81       	ldd	r24, Y+5	; 0x05
    166c:	9e 81       	ldd	r25, Y+6	; 0x06
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	d1 f0       	breq	.+52     	; 0x16a6 <DIO_voidSetPinValue+0x86>
    1672:	81 c0       	rjmp	.+258    	; 0x1776 <DIO_voidSetPinValue+0x156>
    1674:	2d 81       	ldd	r18, Y+5	; 0x05
    1676:	3e 81       	ldd	r19, Y+6	; 0x06
    1678:	25 30       	cpi	r18, 0x05	; 5
    167a:	31 05       	cpc	r19, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <DIO_voidSetPinValue+0x60>
    167e:	52 c0       	rjmp	.+164    	; 0x1724 <DIO_voidSetPinValue+0x104>
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	85 30       	cpi	r24, 0x05	; 5
    1686:	91 05       	cpc	r25, r1
    1688:	0c f4       	brge	.+2      	; 0x168c <DIO_voidSetPinValue+0x6c>
    168a:	3f c0       	rjmp	.+126    	; 0x170a <DIO_voidSetPinValue+0xea>
    168c:	2d 81       	ldd	r18, Y+5	; 0x05
    168e:	3e 81       	ldd	r19, Y+6	; 0x06
    1690:	26 30       	cpi	r18, 0x06	; 6
    1692:	31 05       	cpc	r19, r1
    1694:	09 f4       	brne	.+2      	; 0x1698 <DIO_voidSetPinValue+0x78>
    1696:	54 c0       	rjmp	.+168    	; 0x1740 <DIO_voidSetPinValue+0x120>
    1698:	8d 81       	ldd	r24, Y+5	; 0x05
    169a:	9e 81       	ldd	r25, Y+6	; 0x06
    169c:	87 30       	cpi	r24, 0x07	; 7
    169e:	91 05       	cpc	r25, r1
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <DIO_voidSetPinValue+0x84>
    16a2:	5d c0       	rjmp	.+186    	; 0x175e <DIO_voidSetPinValue+0x13e>
    16a4:	68 c0       	rjmp	.+208    	; 0x1776 <DIO_voidSetPinValue+0x156>
	{
	case pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	81 70       	andi	r24, 0x01	; 1
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	98 2f       	mov	r25, r24
    16b0:	91 70       	andi	r25, 0x01	; 1
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	8e 7f       	andi	r24, 0xFE	; 254
    16b6:	89 2b       	or	r24, r25
    16b8:	82 83       	std	Z+2, r24	; 0x02
    16ba:	5d c0       	rjmp	.+186    	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	81 70       	andi	r24, 0x01	; 1
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	81 70       	andi	r24, 0x01	; 1
    16c6:	98 2f       	mov	r25, r24
    16c8:	99 0f       	add	r25, r25
    16ca:	82 81       	ldd	r24, Z+2	; 0x02
    16cc:	8d 7f       	andi	r24, 0xFD	; 253
    16ce:	89 2b       	or	r24, r25
    16d0:	82 83       	std	Z+2, r24	; 0x02
    16d2:	51 c0       	rjmp	.+162    	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	81 70       	andi	r24, 0x01	; 1
    16d8:	e9 81       	ldd	r30, Y+1	; 0x01
    16da:	fa 81       	ldd	r31, Y+2	; 0x02
    16dc:	81 70       	andi	r24, 0x01	; 1
    16de:	98 2f       	mov	r25, r24
    16e0:	99 0f       	add	r25, r25
    16e2:	99 0f       	add	r25, r25
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	8b 7f       	andi	r24, 0xFB	; 251
    16e8:	89 2b       	or	r24, r25
    16ea:	82 83       	std	Z+2, r24	; 0x02
    16ec:	44 c0       	rjmp	.+136    	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
    16ee:	8c 81       	ldd	r24, Y+4	; 0x04
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	e9 81       	ldd	r30, Y+1	; 0x01
    16f4:	fa 81       	ldd	r31, Y+2	; 0x02
    16f6:	81 70       	andi	r24, 0x01	; 1
    16f8:	98 2f       	mov	r25, r24
    16fa:	99 0f       	add	r25, r25
    16fc:	99 0f       	add	r25, r25
    16fe:	99 0f       	add	r25, r25
    1700:	82 81       	ldd	r24, Z+2	; 0x02
    1702:	87 7f       	andi	r24, 0xF7	; 247
    1704:	89 2b       	or	r24, r25
    1706:	82 83       	std	Z+2, r24	; 0x02
    1708:	36 c0       	rjmp	.+108    	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	e9 81       	ldd	r30, Y+1	; 0x01
    1710:	fa 81       	ldd	r31, Y+2	; 0x02
    1712:	81 70       	andi	r24, 0x01	; 1
    1714:	98 2f       	mov	r25, r24
    1716:	92 95       	swap	r25
    1718:	90 7f       	andi	r25, 0xF0	; 240
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	8f 7e       	andi	r24, 0xEF	; 239
    171e:	89 2b       	or	r24, r25
    1720:	82 83       	std	Z+2, r24	; 0x02
    1722:	29 c0       	rjmp	.+82     	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	81 70       	andi	r24, 0x01	; 1
    1728:	e9 81       	ldd	r30, Y+1	; 0x01
    172a:	fa 81       	ldd	r31, Y+2	; 0x02
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	98 2f       	mov	r25, r24
    1730:	92 95       	swap	r25
    1732:	99 0f       	add	r25, r25
    1734:	90 7e       	andi	r25, 0xE0	; 224
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	8f 7d       	andi	r24, 0xDF	; 223
    173a:	89 2b       	or	r24, r25
    173c:	82 83       	std	Z+2, r24	; 0x02
    173e:	1b c0       	rjmp	.+54     	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	81 70       	andi	r24, 0x01	; 1
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	81 70       	andi	r24, 0x01	; 1
    174a:	98 2f       	mov	r25, r24
    174c:	92 95       	swap	r25
    174e:	99 0f       	add	r25, r25
    1750:	99 0f       	add	r25, r25
    1752:	90 7c       	andi	r25, 0xC0	; 192
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	8f 7b       	andi	r24, 0xBF	; 191
    1758:	89 2b       	or	r24, r25
    175a:	82 83       	std	Z+2, r24	; 0x02
    175c:	0c c0       	rjmp	.+24     	; 0x1776 <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	81 70       	andi	r24, 0x01	; 1
    1762:	e9 81       	ldd	r30, Y+1	; 0x01
    1764:	fa 81       	ldd	r31, Y+2	; 0x02
    1766:	98 2f       	mov	r25, r24
    1768:	97 95       	ror	r25
    176a:	99 27       	eor	r25, r25
    176c:	97 95       	ror	r25
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	8f 77       	andi	r24, 0x7F	; 127
    1772:	89 2b       	or	r24, r25
    1774:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
    1776:	26 96       	adiw	r28, 0x06	; 6
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <DIO_voidGetPinValue+0x6>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_voidGetPinValue+0x8>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_voidGetPinValue+0xa>
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
    179a:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3e 83       	std	Y+6, r19	; 0x06
    17a4:	2d 83       	std	Y+5, r18	; 0x05
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	91 05       	cpc	r25, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <DIO_voidGetPinValue+0x2a>
    17b0:	3e c0       	rjmp	.+124    	; 0x182e <DIO_voidGetPinValue+0xa6>
    17b2:	2d 81       	ldd	r18, Y+5	; 0x05
    17b4:	3e 81       	ldd	r19, Y+6	; 0x06
    17b6:	24 30       	cpi	r18, 0x04	; 4
    17b8:	31 05       	cpc	r19, r1
    17ba:	7c f4       	brge	.+30     	; 0x17da <DIO_voidGetPinValue+0x52>
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	91 05       	cpc	r25, r1
    17c4:	29 f1       	breq	.+74     	; 0x1810 <DIO_voidGetPinValue+0x88>
    17c6:	2d 81       	ldd	r18, Y+5	; 0x05
    17c8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ca:	22 30       	cpi	r18, 0x02	; 2
    17cc:	31 05       	cpc	r19, r1
    17ce:	3c f5       	brge	.+78     	; 0x181e <DIO_voidGetPinValue+0x96>
    17d0:	8d 81       	ldd	r24, Y+5	; 0x05
    17d2:	9e 81       	ldd	r25, Y+6	; 0x06
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	b1 f0       	breq	.+44     	; 0x1804 <DIO_voidGetPinValue+0x7c>
    17d8:	55 c0       	rjmp	.+170    	; 0x1884 <DIO_voidGetPinValue+0xfc>
    17da:	2d 81       	ldd	r18, Y+5	; 0x05
    17dc:	3e 81       	ldd	r19, Y+6	; 0x06
    17de:	25 30       	cpi	r18, 0x05	; 5
    17e0:	31 05       	cpc	r19, r1
    17e2:	b1 f1       	breq	.+108    	; 0x1850 <DIO_voidGetPinValue+0xc8>
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	85 30       	cpi	r24, 0x05	; 5
    17ea:	91 05       	cpc	r25, r1
    17ec:	4c f1       	brlt	.+82     	; 0x1840 <DIO_voidGetPinValue+0xb8>
    17ee:	2d 81       	ldd	r18, Y+5	; 0x05
    17f0:	3e 81       	ldd	r19, Y+6	; 0x06
    17f2:	26 30       	cpi	r18, 0x06	; 6
    17f4:	31 05       	cpc	r19, r1
    17f6:	a9 f1       	breq	.+106    	; 0x1862 <DIO_voidGetPinValue+0xda>
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	87 30       	cpi	r24, 0x07	; 7
    17fe:	91 05       	cpc	r25, r1
    1800:	d1 f1       	breq	.+116    	; 0x1876 <DIO_voidGetPinValue+0xee>
    1802:	40 c0       	rjmp	.+128    	; 0x1884 <DIO_voidGetPinValue+0xfc>
	{
	case pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
    1804:	ea 81       	ldd	r30, Y+2	; 0x02
    1806:	fb 81       	ldd	r31, Y+3	; 0x03
    1808:	80 81       	ld	r24, Z
    180a:	81 70       	andi	r24, 0x01	; 1
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	3a c0       	rjmp	.+116    	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
    1810:	ea 81       	ldd	r30, Y+2	; 0x02
    1812:	fb 81       	ldd	r31, Y+3	; 0x03
    1814:	80 81       	ld	r24, Z
    1816:	86 95       	lsr	r24
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	33 c0       	rjmp	.+102    	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
    181e:	ea 81       	ldd	r30, Y+2	; 0x02
    1820:	fb 81       	ldd	r31, Y+3	; 0x03
    1822:	80 81       	ld	r24, Z
    1824:	86 95       	lsr	r24
    1826:	86 95       	lsr	r24
    1828:	81 70       	andi	r24, 0x01	; 1
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	2b c0       	rjmp	.+86     	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
    182e:	ea 81       	ldd	r30, Y+2	; 0x02
    1830:	fb 81       	ldd	r31, Y+3	; 0x03
    1832:	80 81       	ld	r24, Z
    1834:	86 95       	lsr	r24
    1836:	86 95       	lsr	r24
    1838:	86 95       	lsr	r24
    183a:	81 70       	andi	r24, 0x01	; 1
    183c:	89 83       	std	Y+1, r24	; 0x01
    183e:	22 c0       	rjmp	.+68     	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
    1840:	ea 81       	ldd	r30, Y+2	; 0x02
    1842:	fb 81       	ldd	r31, Y+3	; 0x03
    1844:	80 81       	ld	r24, Z
    1846:	82 95       	swap	r24
    1848:	8f 70       	andi	r24, 0x0F	; 15
    184a:	81 70       	andi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	1a c0       	rjmp	.+52     	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
    1850:	ea 81       	ldd	r30, Y+2	; 0x02
    1852:	fb 81       	ldd	r31, Y+3	; 0x03
    1854:	80 81       	ld	r24, Z
    1856:	82 95       	swap	r24
    1858:	86 95       	lsr	r24
    185a:	87 70       	andi	r24, 0x07	; 7
    185c:	81 70       	andi	r24, 0x01	; 1
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	11 c0       	rjmp	.+34     	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
    1862:	ea 81       	ldd	r30, Y+2	; 0x02
    1864:	fb 81       	ldd	r31, Y+3	; 0x03
    1866:	80 81       	ld	r24, Z
    1868:	82 95       	swap	r24
    186a:	86 95       	lsr	r24
    186c:	86 95       	lsr	r24
    186e:	83 70       	andi	r24, 0x03	; 3
    1870:	81 70       	andi	r24, 0x01	; 1
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	07 c0       	rjmp	.+14     	; 0x1884 <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
    1876:	ea 81       	ldd	r30, Y+2	; 0x02
    1878:	fb 81       	ldd	r31, Y+3	; 0x03
    187a:	80 81       	ld	r24, Z
    187c:	88 1f       	adc	r24, r24
    187e:	88 27       	eor	r24, r24
    1880:	88 1f       	adc	r24, r24
    1882:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
    1884:	89 81       	ldd	r24, Y+1	; 0x01
}
    1886:	26 96       	adiw	r28, 0x06	; 6
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <DIO_voidSetPortDirection+0x6>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
    18aa:	e9 81       	ldd	r30, Y+1	; 0x01
    18ac:	fa 81       	ldd	r31, Y+2	; 0x02
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	81 83       	std	Z+1, r24	; 0x01
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <DIO_voidSetPortValue+0x6>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
    18d0:	e9 81       	ldd	r30, Y+1	; 0x01
    18d2:	fa 81       	ldd	r31, Y+2	; 0x02
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	82 83       	std	Z+2, r24	; 0x02
}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <DIO_voidGetPortValue+0x6>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
    18f2:	e9 81       	ldd	r30, Y+1	; 0x01
    18f4:	fa 81       	ldd	r31, Y+2	; 0x02
    18f6:	80 81       	ld	r24, Z
}
    18f8:	0f 90       	pop	r0
    18fa:	0f 90       	pop	r0
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <KEYPAD_Init>:
#include "GPIO_Int.h"
#include "avr/delay.h"
#include "KeyPad.h"

void KEYPAD_Init(void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	/* Rows */
	DIO_voidSetPinDirection(pPORTC, pin0, output);
    190a:	80 91 6c 01 	lds	r24, 0x016C
    190e:	90 91 6d 01 	lds	r25, 0x016D
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin1, output);
    191a:	80 91 6c 01 	lds	r24, 0x016C
    191e:	90 91 6d 01 	lds	r25, 0x016D
    1922:	61 e0       	ldi	r22, 0x01	; 1
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin2, output);
    192a:	80 91 6c 01 	lds	r24, 0x016C
    192e:	90 91 6d 01 	lds	r25, 0x016D
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	41 e0       	ldi	r20, 0x01	; 1
    1936:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin3, output);
    193a:	80 91 6c 01 	lds	r24, 0x016C
    193e:	90 91 6d 01 	lds	r25, 0x016D
    1942:	63 e0       	ldi	r22, 0x03	; 3
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>

	/* Columns */
	DIO_voidSetPinDirection(pPORTC, pin4, input);
    194a:	80 91 6c 01 	lds	r24, 0x016C
    194e:	90 91 6d 01 	lds	r25, 0x016D
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin5, input);
    195a:	80 91 6c 01 	lds	r24, 0x016C
    195e:	90 91 6d 01 	lds	r25, 0x016D
    1962:	65 e0       	ldi	r22, 0x05	; 5
    1964:	40 e0       	ldi	r20, 0x00	; 0
    1966:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin6, input);
    196a:	80 91 6c 01 	lds	r24, 0x016C
    196e:	90 91 6d 01 	lds	r25, 0x016D
    1972:	66 e0       	ldi	r22, 0x06	; 6
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTC, pin7, input);
    197a:	80 91 6c 01 	lds	r24, 0x016C
    197e:	90 91 6d 01 	lds	r25, 0x016D
    1982:	67 e0       	ldi	r22, 0x07	; 7
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(pPORTC, pin0, high);
    198a:	80 91 6c 01 	lds	r24, 0x016C
    198e:	90 91 6d 01 	lds	r25, 0x016D
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin1, high);
    199a:	80 91 6c 01 	lds	r24, 0x016C
    199e:	90 91 6d 01 	lds	r25, 0x016D
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin2, high);
    19aa:	80 91 6c 01 	lds	r24, 0x016C
    19ae:	90 91 6d 01 	lds	r25, 0x016D
    19b2:	62 e0       	ldi	r22, 0x02	; 2
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTC, pin3, high);
    19ba:	80 91 6c 01 	lds	r24, 0x016C
    19be:	90 91 6d 01 	lds	r25, 0x016D
    19c2:	63 e0       	ldi	r22, 0x03	; 3
    19c4:	41 e0       	ldi	r20, 0x01	; 1
    19c6:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>

//	DIO_voidSetPinValue(pPORTC, pin4, high);
//	DIO_voidSetPinValue(pPORTC, pin5, high);
//	DIO_voidSetPinValue(pPORTC, pin6, high);
//	DIO_voidSetPinValue(pPORTC, pin7, high);
}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <KEYPAD_Get_Pressed_Key>:

u8 KEYPAD_Get_Pressed_Key(void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	a6 97       	sbiw	r28, 0x26	; 38
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
	u8  i,j;
	u8 rows[]={3,2,1,0};
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	8f 8f       	std	Y+31, r24	; 0x1f
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	88 a3       	std	Y+32, r24	; 0x20
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 a3       	std	Y+33, r24	; 0x21
    19f0:	1a a2       	std	Y+34, r1	; 0x22
	u8 cols[]={4,5,6,7};
    19f2:	84 e0       	ldi	r24, 0x04	; 4
    19f4:	8b a3       	std	Y+35, r24	; 0x23
    19f6:	85 e0       	ldi	r24, 0x05	; 5
    19f8:	8c a3       	std	Y+36, r24	; 0x24
    19fa:	86 e0       	ldi	r24, 0x06	; 6
    19fc:	8d a3       	std	Y+37, r24	; 0x25
    19fe:	87 e0       	ldi	r24, 0x07	; 7
    1a00:	8e a3       	std	Y+38, r24	; 0x26

	while(1)
	{

		for(i = 0; i<SIZE; i++)
    1a02:	1e 8e       	std	Y+30, r1	; 0x1e
    1a04:	4e c1       	rjmp	.+668    	; 0x1ca2 <KEYPAD_Get_Pressed_Key+0x2d2>
		{
			DIO_voidSetPinValue(pPORTC, rows[i], low);
    1a06:	40 91 6c 01 	lds	r20, 0x016C
    1a0a:	50 91 6d 01 	lds	r21, 0x016D
    1a0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	ce 01       	movw	r24, r28
    1a16:	4f 96       	adiw	r24, 0x1f	; 31
    1a18:	fc 01       	movw	r30, r24
    1a1a:	e2 0f       	add	r30, r18
    1a1c:	f3 1f       	adc	r31, r19
    1a1e:	20 81       	ld	r18, Z
    1a20:	ca 01       	movw	r24, r20
    1a22:	62 2f       	mov	r22, r18
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>

			for(j = 0; j<SIZE; j++)
    1a2a:	1d 8e       	std	Y+29, r1	; 0x1d
    1a2c:	af c0       	rjmp	.+350    	; 0x1b8c <KEYPAD_Get_Pressed_Key+0x1bc>
			{
				if(DIO_voidGetPinValue(pPORTC, cols[j]) == low)
    1a2e:	40 91 6c 01 	lds	r20, 0x016C
    1a32:	50 91 6d 01 	lds	r21, 0x016D
    1a36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	83 96       	adiw	r24, 0x23	; 35
    1a40:	fc 01       	movw	r30, r24
    1a42:	e2 0f       	add	r30, r18
    1a44:	f3 1f       	adc	r31, r19
    1a46:	20 81       	ld	r18, Z
    1a48:	ca 01       	movw	r24, r20
    1a4a:	62 2f       	mov	r22, r18
    1a4c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_voidGetPinValue>
    1a50:	88 23       	and	r24, r24
    1a52:	09 f0       	breq	.+2      	; 0x1a56 <KEYPAD_Get_Pressed_Key+0x86>
    1a54:	98 c0       	rjmp	.+304    	; 0x1b86 <KEYPAD_Get_Pressed_Key+0x1b6>
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 ef       	ldi	r26, 0xF0	; 240
    1a5c:	b1 e4       	ldi	r27, 0x41	; 65
    1a5e:	89 8f       	std	Y+25, r24	; 0x19
    1a60:	9a 8f       	std	Y+26, r25	; 0x1a
    1a62:	ab 8f       	std	Y+27, r26	; 0x1b
    1a64:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	69 8d       	ldd	r22, Y+25	; 0x19
    1a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a e7       	ldi	r20, 0x7A	; 122
    1a74:	55 e4       	ldi	r21, 0x45	; 69
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8d 8b       	std	Y+21, r24	; 0x15
    1a80:	9e 8b       	std	Y+22, r25	; 0x16
    1a82:	af 8b       	std	Y+23, r26	; 0x17
    1a84:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a86:	6d 89       	ldd	r22, Y+21	; 0x15
    1a88:	7e 89       	ldd	r23, Y+22	; 0x16
    1a8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e8       	ldi	r20, 0x80	; 128
    1a94:	5f e3       	ldi	r21, 0x3F	; 63
    1a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a9a:	88 23       	and	r24, r24
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <KEYPAD_Get_Pressed_Key+0xd8>
		__ticks = 1;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	9c 8b       	std	Y+20, r25	; 0x14
    1aa4:	8b 8b       	std	Y+19, r24	; 0x13
    1aa6:	3f c0       	rjmp	.+126    	; 0x1b26 <KEYPAD_Get_Pressed_Key+0x156>
	else if (__tmp > 65535)
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1abc:	18 16       	cp	r1, r24
    1abe:	4c f5       	brge	.+82     	; 0x1b12 <KEYPAD_Get_Pressed_Key+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ac2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ac4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e2       	ldi	r20, 0x20	; 32
    1ace:	51 e4       	ldi	r21, 0x41	; 65
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	bc 01       	movw	r22, r24
    1ada:	cd 01       	movw	r24, r26
    1adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	9c 8b       	std	Y+20, r25	; 0x14
    1ae6:	8b 8b       	std	Y+19, r24	; 0x13
    1ae8:	0f c0       	rjmp	.+30     	; 0x1b08 <KEYPAD_Get_Pressed_Key+0x138>
    1aea:	80 e9       	ldi	r24, 0x90	; 144
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	9a 8b       	std	Y+18, r25	; 0x12
    1af0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af2:	89 89       	ldd	r24, Y+17	; 0x11
    1af4:	9a 89       	ldd	r25, Y+18	; 0x12
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <KEYPAD_Get_Pressed_Key+0x126>
    1afa:	9a 8b       	std	Y+18, r25	; 0x12
    1afc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	01 97       	sbiw	r24, 0x01	; 1
    1b04:	9c 8b       	std	Y+20, r25	; 0x14
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f7       	brne	.-38     	; 0x1aea <KEYPAD_Get_Pressed_Key+0x11a>
    1b10:	14 c0       	rjmp	.+40     	; 0x1b3a <KEYPAD_Get_Pressed_Key+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9c 8b       	std	Y+20, r25	; 0x14
    1b24:	8b 8b       	std	Y+19, r24	; 0x13
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	98 8b       	std	Y+16, r25	; 0x10
    1b2c:	8f 87       	std	Y+15, r24	; 0x0f
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <KEYPAD_Get_Pressed_Key+0x162>
    1b36:	98 8b       	std	Y+16, r25	; 0x10
    1b38:	8f 87       	std	Y+15, r24	; 0x0f
				{
					_delay_ms(30);
					if(DIO_voidGetPinValue(pPORTC, cols[j]) == low)
    1b3a:	40 91 6c 01 	lds	r20, 0x016C
    1b3e:	50 91 6d 01 	lds	r21, 0x016D
    1b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	ce 01       	movw	r24, r28
    1b4a:	83 96       	adiw	r24, 0x23	; 35
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	20 81       	ld	r18, Z
    1b54:	ca 01       	movw	r24, r20
    1b56:	62 2f       	mov	r22, r18
    1b58:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_voidGetPinValue>
    1b5c:	88 23       	and	r24, r24
    1b5e:	99 f4       	brne	.+38     	; 0x1b86 <KEYPAD_Get_Pressed_Key+0x1b6>
					{
						return ((i*SIZE) + (j));
    1b60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	98 2f       	mov	r25, r24
    1b70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b72:	89 0f       	add	r24, r25
		//		}

	}


}
    1b74:	a6 96       	adiw	r28, 0x26	; 38
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	de bf       	out	0x3e, r29	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	cd bf       	out	0x3d, r28	; 61
    1b80:	cf 91       	pop	r28
    1b82:	df 91       	pop	r29
    1b84:	08 95       	ret

		for(i = 0; i<SIZE; i++)
		{
			DIO_voidSetPinValue(pPORTC, rows[i], low);

			for(j = 0; j<SIZE; j++)
    1b86:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b8e:	84 30       	cpi	r24, 0x04	; 4
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <KEYPAD_Get_Pressed_Key+0x1c4>
    1b92:	4d cf       	rjmp	.-358    	; 0x1a2e <KEYPAD_Get_Pressed_Key+0x5e>
					{
						return ((i*SIZE) + (j));
					}
				}
			}
			DIO_voidSetPinValue(pPORTC, rows[i], high);
    1b94:	40 91 6c 01 	lds	r20, 0x016C
    1b98:	50 91 6d 01 	lds	r21, 0x016D
    1b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	4f 96       	adiw	r24, 0x1f	; 31
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	20 81       	ld	r18, Z
    1bae:	ca 01       	movw	r24, r20
    1bb0:	62 2f       	mov	r22, r18
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	a0 ea       	ldi	r26, 0xA0	; 160
    1bbe:	b0 e4       	ldi	r27, 0x40	; 64
    1bc0:	8b 87       	std	Y+11, r24	; 0x0b
    1bc2:	9c 87       	std	Y+12, r25	; 0x0c
    1bc4:	ad 87       	std	Y+13, r26	; 0x0d
    1bc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a e7       	ldi	r20, 0x7A	; 122
    1bd6:	55 e4       	ldi	r21, 0x45	; 69
    1bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	8f 83       	std	Y+7, r24	; 0x07
    1be2:	98 87       	std	Y+8, r25	; 0x08
    1be4:	a9 87       	std	Y+9, r26	; 0x09
    1be6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <KEYPAD_Get_Pressed_Key+0x23a>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <KEYPAD_Get_Pressed_Key+0x2b8>
	else if (__tmp > 65535)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <KEYPAD_Get_Pressed_Key+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <KEYPAD_Get_Pressed_Key+0x29a>
    1c4c:	80 e9       	ldi	r24, 0x90	; 144
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <KEYPAD_Get_Pressed_Key+0x288>
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9e 83       	std	Y+6, r25	; 0x06
    1c68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <KEYPAD_Get_Pressed_Key+0x27c>
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <KEYPAD_Get_Pressed_Key+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9e 83       	std	Y+6, r25	; 0x06
    1c86:	8d 83       	std	Y+5, r24	; 0x05
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	9a 83       	std	Y+2, r25	; 0x02
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <KEYPAD_Get_Pressed_Key+0x2c4>
    1c98:	9a 83       	std	Y+2, r25	; 0x02
    1c9a:	89 83       	std	Y+1, r24	; 0x01
	u8 cols[]={4,5,6,7};

	while(1)
	{

		for(i = 0; i<SIZE; i++)
    1c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ca0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ca2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	08 f4       	brcc	.+2      	; 0x1caa <KEYPAD_Get_Pressed_Key+0x2da>
    1ca8:	ae ce       	rjmp	.-676    	; 0x1a06 <KEYPAD_Get_Pressed_Key+0x36>
    1caa:	ab ce       	rjmp	.-682    	; 0x1a02 <KEYPAD_Get_Pressed_Key+0x32>

00001cac <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	2e 97       	sbiw	r28, 0x0e	; 14
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
    1cc0:	80 91 68 01 	lds	r24, 0x0168
    1cc4:	90 91 69 01 	lds	r25, 0x0169
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
    1cd0:	80 91 68 01 	lds	r24, 0x0168
    1cd4:	90 91 69 01 	lds	r25, 0x0169
    1cd8:	62 e0       	ldi	r22, 0x02	; 2
    1cda:	41 e0       	ldi	r20, 0x01	; 1
    1cdc:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a8 e4       	ldi	r26, 0x48	; 72
    1ce6:	b2 e4       	ldi	r27, 0x42	; 66
    1ce8:	8b 87       	std	Y+11, r24	; 0x0b
    1cea:	9c 87       	std	Y+12, r25	; 0x0c
    1cec:	ad 87       	std	Y+13, r26	; 0x0d
    1cee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a e7       	ldi	r20, 0x7A	; 122
    1cfe:	55 e4       	ldi	r21, 0x45	; 69
    1d00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	8f 83       	std	Y+7, r24	; 0x07
    1d0a:	98 87       	std	Y+8, r25	; 0x08
    1d0c:	a9 87       	std	Y+9, r26	; 0x09
    1d0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d10:	6f 81       	ldd	r22, Y+7	; 0x07
    1d12:	78 85       	ldd	r23, Y+8	; 0x08
    1d14:	89 85       	ldd	r24, Y+9	; 0x09
    1d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	2c f4       	brge	.+10     	; 0x1d32 <H_LCD_void_Init+0x86>
		__ticks = 1;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
    1d30:	3f c0       	rjmp	.+126    	; 0x1db0 <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	3f ef       	ldi	r19, 0xFF	; 255
    1d3e:	4f e7       	ldi	r20, 0x7F	; 127
    1d40:	57 e4       	ldi	r21, 0x47	; 71
    1d42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d46:	18 16       	cp	r1, r24
    1d48:	4c f5       	brge	.+82     	; 0x1d9c <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e2       	ldi	r20, 0x20	; 32
    1d58:	51 e4       	ldi	r21, 0x41	; 65
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	bc 01       	movw	r22, r24
    1d64:	cd 01       	movw	r24, r26
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <H_LCD_void_Init+0xe6>
    1d74:	80 e9       	ldi	r24, 0x90	; 144
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	9c 83       	std	Y+4, r25	; 0x04
    1d7a:	8b 83       	std	Y+3, r24	; 0x03
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <H_LCD_void_Init+0xd4>
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	00 97       	sbiw	r24, 0x00	; 0
    1d98:	69 f7       	brne	.-38     	; 0x1d74 <H_LCD_void_Init+0xc8>
    1d9a:	14 c0       	rjmp	.+40     	; 0x1dc4 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9e:	78 85       	ldd	r23, Y+8	; 0x08
    1da0:	89 85       	ldd	r24, Y+9	; 0x09
    1da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	9a 83       	std	Y+2, r25	; 0x02
    1db6:	89 83       	std	Y+1, r24	; 0x01
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <H_LCD_void_Init+0x110>
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPinDirection(pPORTB, pin0, output);
    1dc4:	80 91 6a 01 	lds	r24, 0x016A
    1dc8:	90 91 6b 01 	lds	r25, 0x016B
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin1, output);
    1dd4:	80 91 6a 01 	lds	r24, 0x016A
    1dd8:	90 91 6b 01 	lds	r25, 0x016B
    1ddc:	61 e0       	ldi	r22, 0x01	; 1
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin2, output);
    1de4:	80 91 6a 01 	lds	r24, 0x016A
    1de8:	90 91 6b 01 	lds	r25, 0x016B
    1dec:	62 e0       	ldi	r22, 0x02	; 2
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTB, pin4, output);
    1df4:	80 91 6a 01 	lds	r24, 0x016A
    1df8:	90 91 6b 01 	lds	r25, 0x016B
    1dfc:	64 e0       	ldi	r22, 0x04	; 4
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <DIO_voidSetPinDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1e04:	80 91 68 01 	lds	r24, 0x0168
    1e08:	90 91 69 01 	lds	r25, 0x0169
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	40 e0       	ldi	r20, 0x00	; 0
    1e10:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1e14:	82 e3       	ldi	r24, 0x32	; 50
    1e16:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1e1a:	82 e3       	ldi	r24, 0x32	; 50
    1e1c:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1e20:	88 e2       	ldi	r24, 0x28	; 40
    1e22:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    1e26:	8e e0       	ldi	r24, 0x0E	; 14
    1e28:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>


	/*
 #endif*/

}
    1e32:	2e 96       	adiw	r28, 0x0e	; 14
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
    1e4c:	6d 97       	sbiw	r28, 0x1d	; 29
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    1e5a:	80 91 68 01 	lds	r24, 0x0168
    1e5e:	90 91 69 01 	lds	r25, 0x0169
    1e62:	63 e0       	ldi	r22, 0x03	; 3
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a0 e8       	ldi	r26, 0x80	; 128
    1e70:	bf e3       	ldi	r27, 0x3F	; 63
    1e72:	89 8f       	std	Y+25, r24	; 0x19
    1e74:	9a 8f       	std	Y+26, r25	; 0x1a
    1e76:	ab 8f       	std	Y+27, r26	; 0x1b
    1e78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a e7       	ldi	r20, 0x7A	; 122
    1e88:	55 e4       	ldi	r21, 0x45	; 69
    1e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	8d 8b       	std	Y+21, r24	; 0x15
    1e94:	9e 8b       	std	Y+22, r25	; 0x16
    1e96:	af 8b       	std	Y+23, r26	; 0x17
    1e98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <H_LCD_void_sendData+0x78>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9c 8b       	std	Y+20, r25	; 0x14
    1eb8:	8b 8b       	std	Y+19, r24	; 0x13
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    1ebc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ebe:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <H_LCD_void_sendData+0xd8>
    1efe:	80 e9       	ldi	r24, 0x90	; 144
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	9a 8b       	std	Y+18, r25	; 0x12
    1f04:	89 8b       	std	Y+17, r24	; 0x11
    1f06:	89 89       	ldd	r24, Y+17	; 0x11
    1f08:	9a 89       	ldd	r25, Y+18	; 0x12
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <H_LCD_void_sendData+0xc6>
    1f0e:	9a 8b       	std	Y+18, r25	; 0x12
    1f10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8b 89       	ldd	r24, Y+19	; 0x13
    1f14:	9c 89       	ldd	r25, Y+20	; 0x14
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <H_LCD_void_sendData+0xba>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	6d 89       	ldd	r22, Y+21	; 0x15
    1f28:	7e 89       	ldd	r23, Y+22	; 0x16
    1f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9c 8b       	std	Y+20, r25	; 0x14
    1f38:	8b 8b       	std	Y+19, r24	; 0x13
    1f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3e:	98 8b       	std	Y+16, r25	; 0x10
    1f40:	8f 87       	std	Y+15, r24	; 0x0f
    1f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f44:	98 89       	ldd	r25, Y+16	; 0x10
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <H_LCD_void_sendData+0x102>
    1f4a:	98 8b       	std	Y+16, r25	; 0x10
    1f4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1f4e:	80 91 68 01 	lds	r24, 0x0168
    1f52:	90 91 69 01 	lds	r25, 0x0169
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	a0 e8       	ldi	r26, 0x80	; 128
    1f64:	bf e3       	ldi	r27, 0x3F	; 63
    1f66:	8b 87       	std	Y+11, r24	; 0x0b
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	ad 87       	std	Y+13, r26	; 0x0d
    1f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a e7       	ldi	r20, 0x7A	; 122
    1f7c:	55 e4       	ldi	r21, 0x45	; 69
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8f 83       	std	Y+7, r24	; 0x07
    1f88:	98 87       	std	Y+8, r25	; 0x08
    1f8a:	a9 87       	std	Y+9, r26	; 0x09
    1f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	9e 83       	std	Y+6, r25	; 0x06
    1fac:	8d 83       	std	Y+5, r24	; 0x05
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    1fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb2:	78 85       	ldd	r23, Y+8	; 0x08
    1fb4:	89 85       	ldd	r24, Y+9	; 0x09
    1fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	4c f5       	brge	.+82     	; 0x201a <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <H_LCD_void_sendData+0x1cc>
    1ff2:	80 e9       	ldi	r24, 0x90	; 144
    1ff4:	91 e0       	ldi	r25, 0x01	; 1
    1ff6:	9c 83       	std	Y+4, r25	; 0x04
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <H_LCD_void_sendData+0x1ba>
    2002:	9c 83       	std	Y+4, r25	; 0x04
    2004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8d 81       	ldd	r24, Y+5	; 0x05
    2008:	9e 81       	ldd	r25, Y+6	; 0x06
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <H_LCD_void_sendData+0x1ae>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	6f 81       	ldd	r22, Y+7	; 0x07
    201c:	78 85       	ldd	r23, Y+8	; 0x08
    201e:	89 85       	ldd	r24, Y+9	; 0x09
    2020:	9a 85       	ldd	r25, Y+10	; 0x0a
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	9a 83       	std	Y+2, r25	; 0x02
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	9a 81       	ldd	r25, Y+2	; 0x02
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <H_LCD_void_sendData+0x1f6>
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    2042:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2044:	0e 94 ad 12 	call	0x255a	; 0x255a <H_LCD_void_latchByte>
}
    2048:	6d 96       	adiw	r28, 0x1d	; 29
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	6d 97       	sbiw	r28, 0x1d	; 29
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    2070:	80 91 68 01 	lds	r24, 0x0168
    2074:	90 91 69 01 	lds	r25, 0x0169
    2078:	63 e0       	ldi	r22, 0x03	; 3
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e8       	ldi	r26, 0x80	; 128
    2086:	bf e3       	ldi	r27, 0x3F	; 63
    2088:	89 8f       	std	Y+25, r24	; 0x19
    208a:	9a 8f       	std	Y+26, r25	; 0x1a
    208c:	ab 8f       	std	Y+27, r26	; 0x1b
    208e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	69 8d       	ldd	r22, Y+25	; 0x19
    2092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	55 e4       	ldi	r21, 0x45	; 69
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8d 8b       	std	Y+21, r24	; 0x15
    20aa:	9e 8b       	std	Y+22, r25	; 0x16
    20ac:	af 8b       	std	Y+23, r26	; 0x17
    20ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b0:	6d 89       	ldd	r22, Y+21	; 0x15
    20b2:	7e 89       	ldd	r23, Y+22	; 0x16
    20b4:	8f 89       	ldd	r24, Y+23	; 0x17
    20b6:	98 8d       	ldd	r25, Y+24	; 0x18
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 8b       	std	Y+20, r25	; 0x14
    20ce:	8b 8b       	std	Y+19, r24	; 0x13
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	69 8d       	ldd	r22, Y+25	; 0x19
    20ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <H_LCD_void_sendCommand+0xd8>
    2114:	80 e9       	ldi	r24, 0x90	; 144
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	9a 8b       	std	Y+18, r25	; 0x12
    211a:	89 8b       	std	Y+17, r24	; 0x11
    211c:	89 89       	ldd	r24, Y+17	; 0x11
    211e:	9a 89       	ldd	r25, Y+18	; 0x12
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <H_LCD_void_sendCommand+0xc6>
    2124:	9a 8b       	std	Y+18, r25	; 0x12
    2126:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
    212a:	9c 89       	ldd	r25, Y+20	; 0x14
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8b 89       	ldd	r24, Y+19	; 0x13
    2134:	9c 89       	ldd	r25, Y+20	; 0x14
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <H_LCD_void_sendCommand+0xba>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	9c 89       	ldd	r25, Y+20	; 0x14
    2154:	98 8b       	std	Y+16, r25	; 0x10
    2156:	8f 87       	std	Y+15, r24	; 0x0f
    2158:	8f 85       	ldd	r24, Y+15	; 0x0f
    215a:	98 89       	ldd	r25, Y+16	; 0x10
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <H_LCD_void_sendCommand+0x102>
    2160:	98 8b       	std	Y+16, r25	; 0x10
    2162:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    2164:	80 91 68 01 	lds	r24, 0x0168
    2168:	90 91 69 01 	lds	r25, 0x0169
    216c:	62 e0       	ldi	r22, 0x02	; 2
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a0 e8       	ldi	r26, 0x80	; 128
    217a:	bf e3       	ldi	r27, 0x3F	; 63
    217c:	8b 87       	std	Y+11, r24	; 0x0b
    217e:	9c 87       	std	Y+12, r25	; 0x0c
    2180:	ad 87       	std	Y+13, r26	; 0x0d
    2182:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6b 85       	ldd	r22, Y+11	; 0x0b
    2186:	7c 85       	ldd	r23, Y+12	; 0x0c
    2188:	8d 85       	ldd	r24, Y+13	; 0x0d
    218a:	9e 85       	ldd	r25, Y+14	; 0x0e
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a e7       	ldi	r20, 0x7A	; 122
    2192:	55 e4       	ldi	r21, 0x45	; 69
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	8f 83       	std	Y+7, r24	; 0x07
    219e:	98 87       	std	Y+8, r25	; 0x08
    21a0:	a9 87       	std	Y+9, r26	; 0x09
    21a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9e 83       	std	Y+6, r25	; 0x06
    2204:	8d 83       	std	Y+5, r24	; 0x05
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <H_LCD_void_sendCommand+0x1cc>
    2208:	80 e9       	ldi	r24, 0x90	; 144
    220a:	91 e0       	ldi	r25, 0x01	; 1
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <H_LCD_void_sendCommand+0x1ba>
    2218:	9c 83       	std	Y+4, r25	; 0x04
    221a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	9e 81       	ldd	r25, Y+6	; 0x06
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	9e 81       	ldd	r25, Y+6	; 0x06
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <H_LCD_void_sendCommand+0x1ae>
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	8d 81       	ldd	r24, Y+5	; 0x05
    2246:	9e 81       	ldd	r25, Y+6	; 0x06
    2248:	9a 83       	std	Y+2, r25	; 0x02
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <H_LCD_void_sendCommand+0x1f6>
    2254:	9a 83       	std	Y+2, r25	; 0x02
    2256:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    2258:	8d 8d       	ldd	r24, Y+29	; 0x1d
    225a:	0e 94 ad 12 	call	0x255a	; 0x255a <H_LCD_void_latchByte>
}
    225e:	6d 96       	adiw	r28, 0x1d	; 29
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	cf 91       	pop	r28
    226c:	df 91       	pop	r29
    226e:	08 95       	ret

00002270 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    2270:	df 93       	push	r29
    2272:	cf 93       	push	r28
    2274:	00 d0       	rcall	.+0      	; 0x2276 <H_LCD_void_sendString+0x6>
    2276:	0f 92       	push	r0
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	9b 83       	std	Y+3, r25	; 0x03
    227e:	8a 83       	std	Y+2, r24	; 0x02
    2280:	0e c0       	rjmp	.+28     	; 0x229e <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
    228a:	9b 81       	ldd	r25, Y+3	; 0x03
    228c:	fc 01       	movw	r30, r24
    228e:	e2 0f       	add	r30, r18
    2290:	f3 1f       	adc	r31, r19
    2292:	80 81       	ld	r24, Z
    2294:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
		i++;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	8a 81       	ldd	r24, Y+2	; 0x02
    22a6:	9b 81       	ldd	r25, Y+3	; 0x03
    22a8:	fc 01       	movw	r30, r24
    22aa:	e2 0f       	add	r30, r18
    22ac:	f3 1f       	adc	r31, r19
    22ae:	80 81       	ld	r24, Z
    22b0:	88 23       	and	r24, r24
    22b2:	39 f7       	brne	.-50     	; 0x2282 <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	6c 97       	sbiw	r28, 0x1c	; 28
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    22d4:	80 91 68 01 	lds	r24, 0x0168
    22d8:	90 91 69 01 	lds	r25, 0x0169
    22dc:	63 e0       	ldi	r22, 0x03	; 3
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	a0 e8       	ldi	r26, 0x80	; 128
    22ea:	bf e3       	ldi	r27, 0x3F	; 63
    22ec:	89 8f       	std	Y+25, r24	; 0x19
    22ee:	9a 8f       	std	Y+26, r25	; 0x1a
    22f0:	ab 8f       	std	Y+27, r26	; 0x1b
    22f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f4:	69 8d       	ldd	r22, Y+25	; 0x19
    22f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	4a e7       	ldi	r20, 0x7A	; 122
    2302:	55 e4       	ldi	r21, 0x45	; 69
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	8d 8b       	std	Y+21, r24	; 0x15
    230e:	9e 8b       	std	Y+22, r25	; 0x16
    2310:	af 8b       	std	Y+23, r26	; 0x17
    2312:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2314:	6d 89       	ldd	r22, Y+21	; 0x15
    2316:	7e 89       	ldd	r23, Y+22	; 0x16
    2318:	8f 89       	ldd	r24, Y+23	; 0x17
    231a:	98 8d       	ldd	r25, Y+24	; 0x18
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e8       	ldi	r20, 0x80	; 128
    2322:	5f e3       	ldi	r21, 0x3F	; 63
    2324:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2328:	88 23       	and	r24, r24
    232a:	2c f4       	brge	.+10     	; 0x2336 <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	3f c0       	rjmp	.+126    	; 0x23b4 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    2336:	6d 89       	ldd	r22, Y+21	; 0x15
    2338:	7e 89       	ldd	r23, Y+22	; 0x16
    233a:	8f 89       	ldd	r24, Y+23	; 0x17
    233c:	98 8d       	ldd	r25, Y+24	; 0x18
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	3f ef       	ldi	r19, 0xFF	; 255
    2342:	4f e7       	ldi	r20, 0x7F	; 127
    2344:	57 e4       	ldi	r21, 0x47	; 71
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234a:	18 16       	cp	r1, r24
    234c:	4c f5       	brge	.+82     	; 0x23a0 <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234e:	69 8d       	ldd	r22, Y+25	; 0x19
    2350:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2352:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2354:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e2       	ldi	r20, 0x20	; 32
    235c:	51 e4       	ldi	r21, 0x41	; 65
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	9c 8b       	std	Y+20, r25	; 0x14
    2374:	8b 8b       	std	Y+19, r24	; 0x13
    2376:	0f c0       	rjmp	.+30     	; 0x2396 <H_LCD_void_clearDisplay+0xd6>
    2378:	80 e9       	ldi	r24, 0x90	; 144
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	9a 8b       	std	Y+18, r25	; 0x12
    237e:	89 8b       	std	Y+17, r24	; 0x11
    2380:	89 89       	ldd	r24, Y+17	; 0x11
    2382:	9a 89       	ldd	r25, Y+18	; 0x12
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <H_LCD_void_clearDisplay+0xc4>
    2388:	9a 8b       	std	Y+18, r25	; 0x12
    238a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    238c:	8b 89       	ldd	r24, Y+19	; 0x13
    238e:	9c 89       	ldd	r25, Y+20	; 0x14
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	9c 8b       	std	Y+20, r25	; 0x14
    2394:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	69 f7       	brne	.-38     	; 0x2378 <H_LCD_void_clearDisplay+0xb8>
    239e:	14 c0       	rjmp	.+40     	; 0x23c8 <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a0:	6d 89       	ldd	r22, Y+21	; 0x15
    23a2:	7e 89       	ldd	r23, Y+22	; 0x16
    23a4:	8f 89       	ldd	r24, Y+23	; 0x17
    23a6:	98 8d       	ldd	r25, Y+24	; 0x18
    23a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	8b 89       	ldd	r24, Y+19	; 0x13
    23b6:	9c 89       	ldd	r25, Y+20	; 0x14
    23b8:	98 8b       	std	Y+16, r25	; 0x10
    23ba:	8f 87       	std	Y+15, r24	; 0x0f
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	98 89       	ldd	r25, Y+16	; 0x10
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <H_LCD_void_clearDisplay+0x100>
    23c4:	98 8b       	std	Y+16, r25	; 0x10
    23c6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    23c8:	80 91 68 01 	lds	r24, 0x0168
    23cc:	90 91 69 01 	lds	r25, 0x0169
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a0 e8       	ldi	r26, 0x80	; 128
    23de:	bf e3       	ldi	r27, 0x3F	; 63
    23e0:	8b 87       	std	Y+11, r24	; 0x0b
    23e2:	9c 87       	std	Y+12, r25	; 0x0c
    23e4:	ad 87       	std	Y+13, r26	; 0x0d
    23e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a e7       	ldi	r20, 0x7A	; 122
    23f6:	55 e4       	ldi	r21, 0x45	; 69
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8f 83       	std	Y+7, r24	; 0x07
    2402:	98 87       	std	Y+8, r25	; 0x08
    2404:	a9 87       	std	Y+9, r26	; 0x09
    2406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e8       	ldi	r20, 0x80	; 128
    2416:	5f e3       	ldi	r21, 0x3F	; 63
    2418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    241c:	88 23       	and	r24, r24
    241e:	2c f4       	brge	.+10     	; 0x242a <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	3f c0       	rjmp	.+126    	; 0x24a8 <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	4c f5       	brge	.+82     	; 0x2494 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2442:	6b 85       	ldd	r22, Y+11	; 0x0b
    2444:	7c 85       	ldd	r23, Y+12	; 0x0c
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	9e 85       	ldd	r25, Y+14	; 0x0e
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	0f c0       	rjmp	.+30     	; 0x248a <H_LCD_void_clearDisplay+0x1ca>
    246c:	80 e9       	ldi	r24, 0x90	; 144
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <H_LCD_void_clearDisplay+0x1b8>
    247c:	9c 83       	std	Y+4, r25	; 0x04
    247e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	69 f7       	brne	.-38     	; 0x246c <H_LCD_void_clearDisplay+0x1ac>
    2492:	14 c0       	rjmp	.+40     	; 0x24bc <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <H_LCD_void_clearDisplay+0x1f4>
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	0e 94 ad 12 	call	0x255a	; 0x255a <H_LCD_void_latchByte>
}
    24c2:	6c 96       	adiw	r28, 0x1c	; 28
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	00 d0       	rcall	.+0      	; 0x24da <H_LCD_void_gotoXY+0x6>
    24da:	00 d0       	rcall	.+0      	; 0x24dc <H_LCD_void_gotoXY+0x8>
    24dc:	0f 92       	push	r0
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	8a 83       	std	Y+2, r24	; 0x02
    24e4:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    24e6:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	3d 83       	std	Y+5, r19	; 0x05
    24f0:	2c 83       	std	Y+4, r18	; 0x04
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	91 05       	cpc	r25, r1
    24fa:	c1 f0       	breq	.+48     	; 0x252c <H_LCD_void_gotoXY+0x58>
    24fc:	2c 81       	ldd	r18, Y+4	; 0x04
    24fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2500:	22 30       	cpi	r18, 0x02	; 2
    2502:	31 05       	cpc	r19, r1
    2504:	2c f4       	brge	.+10     	; 0x2510 <H_LCD_void_gotoXY+0x3c>
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	9d 81       	ldd	r25, Y+5	; 0x05
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	61 f0       	breq	.+24     	; 0x2526 <H_LCD_void_gotoXY+0x52>
    250e:	19 c0       	rjmp	.+50     	; 0x2542 <H_LCD_void_gotoXY+0x6e>
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	69 f0       	breq	.+26     	; 0x2534 <H_LCD_void_gotoXY+0x60>
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	83 30       	cpi	r24, 0x03	; 3
    2520:	91 05       	cpc	r25, r1
    2522:	61 f0       	breq	.+24     	; 0x253c <H_LCD_void_gotoXY+0x68>
    2524:	0e c0       	rjmp	.+28     	; 0x2542 <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	0b c0       	rjmp	.+22     	; 0x2542 <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	80 5c       	subi	r24, 0xC0	; 192
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	07 c0       	rjmp	.+14     	; 0x2542 <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    2534:	8b 81       	ldd	r24, Y+3	; 0x03
    2536:	80 5f       	subi	r24, 0xF0	; 240
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	80 5b       	subi	r24, 0xB0	; 176
    2540:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	80 68       	ori	r24, 0x80	; 128
    2546:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
}
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	e9 97       	sbiw	r28, 0x39	; 57
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    2570:	20 91 6a 01 	lds	r18, 0x016A
    2574:	30 91 6b 01 	lds	r19, 0x016B
    2578:	89 ad       	ldd	r24, Y+57	; 0x39
    257a:	48 2f       	mov	r20, r24
    257c:	44 1f       	adc	r20, r20
    257e:	44 27       	eor	r20, r20
    2580:	44 1f       	adc	r20, r20
    2582:	c9 01       	movw	r24, r18
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    258a:	20 91 6a 01 	lds	r18, 0x016A
    258e:	30 91 6b 01 	lds	r19, 0x016B
    2592:	89 ad       	ldd	r24, Y+57	; 0x39
    2594:	82 95       	swap	r24
    2596:	86 95       	lsr	r24
    2598:	86 95       	lsr	r24
    259a:	83 70       	andi	r24, 0x03	; 3
    259c:	48 2f       	mov	r20, r24
    259e:	41 70       	andi	r20, 0x01	; 1
    25a0:	c9 01       	movw	r24, r18
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    25a8:	20 91 6a 01 	lds	r18, 0x016A
    25ac:	30 91 6b 01 	lds	r19, 0x016B
    25b0:	89 ad       	ldd	r24, Y+57	; 0x39
    25b2:	82 95       	swap	r24
    25b4:	86 95       	lsr	r24
    25b6:	87 70       	andi	r24, 0x07	; 7
    25b8:	48 2f       	mov	r20, r24
    25ba:	41 70       	andi	r20, 0x01	; 1
    25bc:	c9 01       	movw	r24, r18
    25be:	61 e0       	ldi	r22, 0x01	; 1
    25c0:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    25c4:	20 91 6a 01 	lds	r18, 0x016A
    25c8:	30 91 6b 01 	lds	r19, 0x016B
    25cc:	89 ad       	ldd	r24, Y+57	; 0x39
    25ce:	82 95       	swap	r24
    25d0:	8f 70       	andi	r24, 0x0F	; 15
    25d2:	48 2f       	mov	r20, r24
    25d4:	41 70       	andi	r20, 0x01	; 1
    25d6:	c9 01       	movw	r24, r18
    25d8:	60 e0       	ldi	r22, 0x00	; 0
    25da:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    25de:	80 91 68 01 	lds	r24, 0x0168
    25e2:	90 91 69 01 	lds	r25, 0x0169
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a0 e8       	ldi	r26, 0x80	; 128
    25f4:	bf e3       	ldi	r27, 0x3F	; 63
    25f6:	8d ab       	std	Y+53, r24	; 0x35
    25f8:	9e ab       	std	Y+54, r25	; 0x36
    25fa:	af ab       	std	Y+55, r26	; 0x37
    25fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2600:	7e a9       	ldd	r23, Y+54	; 0x36
    2602:	8f a9       	ldd	r24, Y+55	; 0x37
    2604:	98 ad       	ldd	r25, Y+56	; 0x38
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	4a e7       	ldi	r20, 0x7A	; 122
    260c:	55 e4       	ldi	r21, 0x45	; 69
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	89 ab       	std	Y+49, r24	; 0x31
    2618:	9a ab       	std	Y+50, r25	; 0x32
    261a:	ab ab       	std	Y+51, r26	; 0x33
    261c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    261e:	69 a9       	ldd	r22, Y+49	; 0x31
    2620:	7a a9       	ldd	r23, Y+50	; 0x32
    2622:	8b a9       	ldd	r24, Y+51	; 0x33
    2624:	9c a9       	ldd	r25, Y+52	; 0x34
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	2c f4       	brge	.+10     	; 0x2640 <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	98 ab       	std	Y+48, r25	; 0x30
    263c:	8f a7       	std	Y+47, r24	; 0x2f
    263e:	3f c0       	rjmp	.+126    	; 0x26be <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    2640:	69 a9       	ldd	r22, Y+49	; 0x31
    2642:	7a a9       	ldd	r23, Y+50	; 0x32
    2644:	8b a9       	ldd	r24, Y+51	; 0x33
    2646:	9c a9       	ldd	r25, Y+52	; 0x34
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	3f ef       	ldi	r19, 0xFF	; 255
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	57 e4       	ldi	r21, 0x47	; 71
    2650:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	4c f5       	brge	.+82     	; 0x26aa <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2658:	6d a9       	ldd	r22, Y+53	; 0x35
    265a:	7e a9       	ldd	r23, Y+54	; 0x36
    265c:	8f a9       	ldd	r24, Y+55	; 0x37
    265e:	98 ad       	ldd	r25, Y+56	; 0x38
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e2       	ldi	r20, 0x20	; 32
    2666:	51 e4       	ldi	r21, 0x41	; 65
    2668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266c:	dc 01       	movw	r26, r24
    266e:	cb 01       	movw	r24, r22
    2670:	bc 01       	movw	r22, r24
    2672:	cd 01       	movw	r24, r26
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	98 ab       	std	Y+48, r25	; 0x30
    267e:	8f a7       	std	Y+47, r24	; 0x2f
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <H_LCD_void_latchByte+0x146>
    2682:	80 e9       	ldi	r24, 0x90	; 144
    2684:	91 e0       	ldi	r25, 0x01	; 1
    2686:	9e a7       	std	Y+46, r25	; 0x2e
    2688:	8d a7       	std	Y+45, r24	; 0x2d
    268a:	8d a5       	ldd	r24, Y+45	; 0x2d
    268c:	9e a5       	ldd	r25, Y+46	; 0x2e
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	f1 f7       	brne	.-4      	; 0x268e <H_LCD_void_latchByte+0x134>
    2692:	9e a7       	std	Y+46, r25	; 0x2e
    2694:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2696:	8f a5       	ldd	r24, Y+47	; 0x2f
    2698:	98 a9       	ldd	r25, Y+48	; 0x30
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	98 ab       	std	Y+48, r25	; 0x30
    269e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a2:	98 a9       	ldd	r25, Y+48	; 0x30
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	69 f7       	brne	.-38     	; 0x2682 <H_LCD_void_latchByte+0x128>
    26a8:	14 c0       	rjmp	.+40     	; 0x26d2 <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26aa:	69 a9       	ldd	r22, Y+49	; 0x31
    26ac:	7a a9       	ldd	r23, Y+50	; 0x32
    26ae:	8b a9       	ldd	r24, Y+51	; 0x33
    26b0:	9c a9       	ldd	r25, Y+52	; 0x34
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	98 ab       	std	Y+48, r25	; 0x30
    26bc:	8f a7       	std	Y+47, r24	; 0x2f
    26be:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c0:	98 a9       	ldd	r25, Y+48	; 0x30
    26c2:	9c a7       	std	Y+44, r25	; 0x2c
    26c4:	8b a7       	std	Y+43, r24	; 0x2b
    26c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <H_LCD_void_latchByte+0x170>
    26ce:	9c a7       	std	Y+44, r25	; 0x2c
    26d0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    26d2:	80 91 68 01 	lds	r24, 0x0168
    26d6:	90 91 69 01 	lds	r25, 0x0169
    26da:	62 e0       	ldi	r22, 0x02	; 2
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	a0 ea       	ldi	r26, 0xA0	; 160
    26e8:	b0 e4       	ldi	r27, 0x40	; 64
    26ea:	8f a3       	std	Y+39, r24	; 0x27
    26ec:	98 a7       	std	Y+40, r25	; 0x28
    26ee:	a9 a7       	std	Y+41, r26	; 0x29
    26f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f2:	6f a1       	ldd	r22, Y+39	; 0x27
    26f4:	78 a5       	ldd	r23, Y+40	; 0x28
    26f6:	89 a5       	ldd	r24, Y+41	; 0x29
    26f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	4a e7       	ldi	r20, 0x7A	; 122
    2700:	55 e4       	ldi	r21, 0x45	; 69
    2702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	8b a3       	std	Y+35, r24	; 0x23
    270c:	9c a3       	std	Y+36, r25	; 0x24
    270e:	ad a3       	std	Y+37, r26	; 0x25
    2710:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2712:	6b a1       	ldd	r22, Y+35	; 0x23
    2714:	7c a1       	ldd	r23, Y+36	; 0x24
    2716:	8d a1       	ldd	r24, Y+37	; 0x25
    2718:	9e a1       	ldd	r25, Y+38	; 0x26
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e8       	ldi	r20, 0x80	; 128
    2720:	5f e3       	ldi	r21, 0x3F	; 63
    2722:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2726:	88 23       	and	r24, r24
    2728:	2c f4       	brge	.+10     	; 0x2734 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9a a3       	std	Y+34, r25	; 0x22
    2730:	89 a3       	std	Y+33, r24	; 0x21
    2732:	3f c0       	rjmp	.+126    	; 0x27b2 <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    2734:	6b a1       	ldd	r22, Y+35	; 0x23
    2736:	7c a1       	ldd	r23, Y+36	; 0x24
    2738:	8d a1       	ldd	r24, Y+37	; 0x25
    273a:	9e a1       	ldd	r25, Y+38	; 0x26
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	3f ef       	ldi	r19, 0xFF	; 255
    2740:	4f e7       	ldi	r20, 0x7F	; 127
    2742:	57 e4       	ldi	r21, 0x47	; 71
    2744:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2748:	18 16       	cp	r1, r24
    274a:	4c f5       	brge	.+82     	; 0x279e <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274c:	6f a1       	ldd	r22, Y+39	; 0x27
    274e:	78 a5       	ldd	r23, Y+40	; 0x28
    2750:	89 a5       	ldd	r24, Y+41	; 0x29
    2752:	9a a5       	ldd	r25, Y+42	; 0x2a
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	40 e2       	ldi	r20, 0x20	; 32
    275a:	51 e4       	ldi	r21, 0x41	; 65
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	9a a3       	std	Y+34, r25	; 0x22
    2772:	89 a3       	std	Y+33, r24	; 0x21
    2774:	0f c0       	rjmp	.+30     	; 0x2794 <H_LCD_void_latchByte+0x23a>
    2776:	80 e9       	ldi	r24, 0x90	; 144
    2778:	91 e0       	ldi	r25, 0x01	; 1
    277a:	98 a3       	std	Y+32, r25	; 0x20
    277c:	8f 8f       	std	Y+31, r24	; 0x1f
    277e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2780:	98 a1       	ldd	r25, Y+32	; 0x20
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <H_LCD_void_latchByte+0x228>
    2786:	98 a3       	std	Y+32, r25	; 0x20
    2788:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278a:	89 a1       	ldd	r24, Y+33	; 0x21
    278c:	9a a1       	ldd	r25, Y+34	; 0x22
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	69 f7       	brne	.-38     	; 0x2776 <H_LCD_void_latchByte+0x21c>
    279c:	14 c0       	rjmp	.+40     	; 0x27c6 <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	6b a1       	ldd	r22, Y+35	; 0x23
    27a0:	7c a1       	ldd	r23, Y+36	; 0x24
    27a2:	8d a1       	ldd	r24, Y+37	; 0x25
    27a4:	9e a1       	ldd	r25, Y+38	; 0x26
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	9a a3       	std	Y+34, r25	; 0x22
    27b0:	89 a3       	std	Y+33, r24	; 0x21
    27b2:	89 a1       	ldd	r24, Y+33	; 0x21
    27b4:	9a a1       	ldd	r25, Y+34	; 0x22
    27b6:	9e 8f       	std	Y+30, r25	; 0x1e
    27b8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27be:	01 97       	sbiw	r24, 0x01	; 1
    27c0:	f1 f7       	brne	.-4      	; 0x27be <H_LCD_void_latchByte+0x264>
    27c2:	9e 8f       	std	Y+30, r25	; 0x1e
    27c4:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    27c6:	20 91 6a 01 	lds	r18, 0x016A
    27ca:	30 91 6b 01 	lds	r19, 0x016B
    27ce:	89 ad       	ldd	r24, Y+57	; 0x39
    27d0:	86 95       	lsr	r24
    27d2:	86 95       	lsr	r24
    27d4:	86 95       	lsr	r24
    27d6:	48 2f       	mov	r20, r24
    27d8:	41 70       	andi	r20, 0x01	; 1
    27da:	c9 01       	movw	r24, r18
    27dc:	64 e0       	ldi	r22, 0x04	; 4
    27de:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    27e2:	20 91 6a 01 	lds	r18, 0x016A
    27e6:	30 91 6b 01 	lds	r19, 0x016B
    27ea:	89 ad       	ldd	r24, Y+57	; 0x39
    27ec:	86 95       	lsr	r24
    27ee:	86 95       	lsr	r24
    27f0:	48 2f       	mov	r20, r24
    27f2:	41 70       	andi	r20, 0x01	; 1
    27f4:	c9 01       	movw	r24, r18
    27f6:	62 e0       	ldi	r22, 0x02	; 2
    27f8:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    27fc:	20 91 6a 01 	lds	r18, 0x016A
    2800:	30 91 6b 01 	lds	r19, 0x016B
    2804:	89 ad       	ldd	r24, Y+57	; 0x39
    2806:	86 95       	lsr	r24
    2808:	48 2f       	mov	r20, r24
    280a:	41 70       	andi	r20, 0x01	; 1
    280c:	c9 01       	movw	r24, r18
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    2814:	20 91 6a 01 	lds	r18, 0x016A
    2818:	30 91 6b 01 	lds	r19, 0x016B
    281c:	89 ad       	ldd	r24, Y+57	; 0x39
    281e:	48 2f       	mov	r20, r24
    2820:	41 70       	andi	r20, 0x01	; 1
    2822:	c9 01       	movw	r24, r18
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    282a:	80 91 68 01 	lds	r24, 0x0168
    282e:	90 91 69 01 	lds	r25, 0x0169
    2832:	62 e0       	ldi	r22, 0x02	; 2
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a0 e8       	ldi	r26, 0x80	; 128
    2840:	bf e3       	ldi	r27, 0x3F	; 63
    2842:	89 8f       	std	Y+25, r24	; 0x19
    2844:	9a 8f       	std	Y+26, r25	; 0x1a
    2846:	ab 8f       	std	Y+27, r26	; 0x1b
    2848:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	4a e7       	ldi	r20, 0x7A	; 122
    2858:	55 e4       	ldi	r21, 0x45	; 69
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8d 8b       	std	Y+21, r24	; 0x15
    2864:	9e 8b       	std	Y+22, r25	; 0x16
    2866:	af 8b       	std	Y+23, r26	; 0x17
    2868:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    286a:	6d 89       	ldd	r22, Y+21	; 0x15
    286c:	7e 89       	ldd	r23, Y+22	; 0x16
    286e:	8f 89       	ldd	r24, Y+23	; 0x17
    2870:	98 8d       	ldd	r25, Y+24	; 0x18
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e8       	ldi	r20, 0x80	; 128
    2878:	5f e3       	ldi	r21, 0x3F	; 63
    287a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287e:	88 23       	and	r24, r24
    2880:	2c f4       	brge	.+10     	; 0x288c <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9c 8b       	std	Y+20, r25	; 0x14
    2888:	8b 8b       	std	Y+19, r24	; 0x13
    288a:	3f c0       	rjmp	.+126    	; 0x290a <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    288c:	6d 89       	ldd	r22, Y+21	; 0x15
    288e:	7e 89       	ldd	r23, Y+22	; 0x16
    2890:	8f 89       	ldd	r24, Y+23	; 0x17
    2892:	98 8d       	ldd	r25, Y+24	; 0x18
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	3f ef       	ldi	r19, 0xFF	; 255
    2898:	4f e7       	ldi	r20, 0x7F	; 127
    289a:	57 e4       	ldi	r21, 0x47	; 71
    289c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28a0:	18 16       	cp	r1, r24
    28a2:	4c f5       	brge	.+82     	; 0x28f6 <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a4:	69 8d       	ldd	r22, Y+25	; 0x19
    28a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e2       	ldi	r20, 0x20	; 32
    28b2:	51 e4       	ldi	r21, 0x41	; 65
    28b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9c 8b       	std	Y+20, r25	; 0x14
    28ca:	8b 8b       	std	Y+19, r24	; 0x13
    28cc:	0f c0       	rjmp	.+30     	; 0x28ec <H_LCD_void_latchByte+0x392>
    28ce:	80 e9       	ldi	r24, 0x90	; 144
    28d0:	91 e0       	ldi	r25, 0x01	; 1
    28d2:	9a 8b       	std	Y+18, r25	; 0x12
    28d4:	89 8b       	std	Y+17, r24	; 0x11
    28d6:	89 89       	ldd	r24, Y+17	; 0x11
    28d8:	9a 89       	ldd	r25, Y+18	; 0x12
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <H_LCD_void_latchByte+0x380>
    28de:	9a 8b       	std	Y+18, r25	; 0x12
    28e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e2:	8b 89       	ldd	r24, Y+19	; 0x13
    28e4:	9c 89       	ldd	r25, Y+20	; 0x14
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	9c 8b       	std	Y+20, r25	; 0x14
    28ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	69 f7       	brne	.-38     	; 0x28ce <H_LCD_void_latchByte+0x374>
    28f4:	14 c0       	rjmp	.+40     	; 0x291e <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f6:	6d 89       	ldd	r22, Y+21	; 0x15
    28f8:	7e 89       	ldd	r23, Y+22	; 0x16
    28fa:	8f 89       	ldd	r24, Y+23	; 0x17
    28fc:	98 8d       	ldd	r25, Y+24	; 0x18
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9c 8b       	std	Y+20, r25	; 0x14
    2908:	8b 8b       	std	Y+19, r24	; 0x13
    290a:	8b 89       	ldd	r24, Y+19	; 0x13
    290c:	9c 89       	ldd	r25, Y+20	; 0x14
    290e:	98 8b       	std	Y+16, r25	; 0x10
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    2912:	8f 85       	ldd	r24, Y+15	; 0x0f
    2914:	98 89       	ldd	r25, Y+16	; 0x10
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <H_LCD_void_latchByte+0x3bc>
    291a:	98 8b       	std	Y+16, r25	; 0x10
    291c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    291e:	80 91 68 01 	lds	r24, 0x0168
    2922:	90 91 69 01 	lds	r25, 0x0169
    2926:	62 e0       	ldi	r22, 0x02	; 2
    2928:	40 e0       	ldi	r20, 0x00	; 0
    292a:	0e 94 10 0b 	call	0x1620	; 0x1620 <DIO_voidSetPinValue>
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 ea       	ldi	r26, 0xA0	; 160
    2934:	b0 e4       	ldi	r27, 0x40	; 64
    2936:	8b 87       	std	Y+11, r24	; 0x0b
    2938:	9c 87       	std	Y+12, r25	; 0x0c
    293a:	ad 87       	std	Y+13, r26	; 0x0d
    293c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2940:	7c 85       	ldd	r23, Y+12	; 0x0c
    2942:	8d 85       	ldd	r24, Y+13	; 0x0d
    2944:	9e 85       	ldd	r25, Y+14	; 0x0e
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	4a e7       	ldi	r20, 0x7A	; 122
    294c:	55 e4       	ldi	r21, 0x45	; 69
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	8f 83       	std	Y+7, r24	; 0x07
    2958:	98 87       	std	Y+8, r25	; 0x08
    295a:	a9 87       	std	Y+9, r26	; 0x09
    295c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    295e:	6f 81       	ldd	r22, Y+7	; 0x07
    2960:	78 85       	ldd	r23, Y+8	; 0x08
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	9a 85       	ldd	r25, Y+10	; 0x0a
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e8       	ldi	r20, 0x80	; 128
    296c:	5f e3       	ldi	r21, 0x3F	; 63
    296e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2972:	88 23       	and	r24, r24
    2974:	2c f4       	brge	.+10     	; 0x2980 <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	9e 83       	std	Y+6, r25	; 0x06
    297c:	8d 83       	std	Y+5, r24	; 0x05
    297e:	3f c0       	rjmp	.+126    	; 0x29fe <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	3f ef       	ldi	r19, 0xFF	; 255
    298c:	4f e7       	ldi	r20, 0x7F	; 127
    298e:	57 e4       	ldi	r21, 0x47	; 71
    2990:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2994:	18 16       	cp	r1, r24
    2996:	4c f5       	brge	.+82     	; 0x29ea <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2998:	6b 85       	ldd	r22, Y+11	; 0x0b
    299a:	7c 85       	ldd	r23, Y+12	; 0x0c
    299c:	8d 85       	ldd	r24, Y+13	; 0x0d
    299e:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	40 e2       	ldi	r20, 0x20	; 32
    29a6:	51 e4       	ldi	r21, 0x41	; 65
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9e 83       	std	Y+6, r25	; 0x06
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	0f c0       	rjmp	.+30     	; 0x29e0 <H_LCD_void_latchByte+0x486>
    29c2:	80 e9       	ldi	r24, 0x90	; 144
    29c4:	91 e0       	ldi	r25, 0x01	; 1
    29c6:	9c 83       	std	Y+4, r25	; 0x04
    29c8:	8b 83       	std	Y+3, r24	; 0x03
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <H_LCD_void_latchByte+0x474>
    29d2:	9c 83       	std	Y+4, r25	; 0x04
    29d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
    29d8:	9e 81       	ldd	r25, Y+6	; 0x06
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9e 83       	std	Y+6, r25	; 0x06
    29de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e0:	8d 81       	ldd	r24, Y+5	; 0x05
    29e2:	9e 81       	ldd	r25, Y+6	; 0x06
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	69 f7       	brne	.-38     	; 0x29c2 <H_LCD_void_latchByte+0x468>
    29e8:	14 c0       	rjmp	.+40     	; 0x2a12 <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ea:	6f 81       	ldd	r22, Y+7	; 0x07
    29ec:	78 85       	ldd	r23, Y+8	; 0x08
    29ee:	89 85       	ldd	r24, Y+9	; 0x09
    29f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	9e 81       	ldd	r25, Y+6	; 0x06
    2a02:	9a 83       	std	Y+2, r25	; 0x02
    2a04:	89 83       	std	Y+1, r24	; 0x01
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <H_LCD_void_latchByte+0x4b0>
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    2a12:	e9 96       	adiw	r28, 0x39	; 57
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <H_LCD_void_creatCustomChar+0x6>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <H_LCD_void_creatCustomChar+0x8>
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
    2a30:	9b 83       	std	Y+3, r25	; 0x03
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	88 30       	cpi	r24, 0x08	; 8
    2a3a:	f8 f4       	brcc	.+62     	; 0x2a7a <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	88 2f       	mov	r24, r24
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	08 96       	adiw	r24, 0x08	; 8
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    2a54:	19 82       	std	Y+1, r1	; 0x01
    2a56:	0e c0       	rjmp	.+28     	; 0x2a74 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	80 81       	ld	r24, Z
    2a6a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	88 30       	cpi	r24, 0x08	; 8
    2a78:	78 f3       	brcs	.-34     	; 0x2a58 <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	80 58       	subi	r24, 0x80	; 128
    2a98:	0e 94 2d 10 	call	0x205a	; 0x205a <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>

}
    2aa2:	0f 90       	pop	r0
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <H_LCD_void_displayHex+0x6>
    2ab0:	00 d0       	rcall	.+0      	; 0x2ab2 <H_LCD_void_displayHex+0x8>
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <H_LCD_void_displayHex+0xa>
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    2aba:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    2abc:	80 e6       	ldi	r24, 0x60	; 96
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	82 95       	swap	r24
    2ac8:	8f 70       	andi	r24, 0x0F	; 15
    2aca:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	3e 83       	std	Y+6, r19	; 0x06
    2ad4:	2d 83       	std	Y+5, r18	; 0x05
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	8b 30       	cpi	r24, 0x0B	; 11
    2adc:	91 05       	cpc	r25, r1
    2ade:	69 f1       	breq	.+90     	; 0x2b3a <H_LCD_void_displayHex+0x90>
    2ae0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ae4:	2c 30       	cpi	r18, 0x0C	; 12
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	54 f4       	brge	.+20     	; 0x2afe <H_LCD_void_displayHex+0x54>
    2aea:	8d 81       	ldd	r24, Y+5	; 0x05
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	99 23       	and	r25, r25
    2af0:	bc f1       	brlt	.+110    	; 0x2b60 <H_LCD_void_displayHex+0xb6>
    2af2:	2d 81       	ldd	r18, Y+5	; 0x05
    2af4:	3e 81       	ldd	r19, Y+6	; 0x06
    2af6:	2a 30       	cpi	r18, 0x0A	; 10
    2af8:	31 05       	cpc	r19, r1
    2afa:	b4 f0       	brlt	.+44     	; 0x2b28 <H_LCD_void_displayHex+0x7e>
    2afc:	1a c0       	rjmp	.+52     	; 0x2b32 <H_LCD_void_displayHex+0x88>
    2afe:	8d 81       	ldd	r24, Y+5	; 0x05
    2b00:	9e 81       	ldd	r25, Y+6	; 0x06
    2b02:	8d 30       	cpi	r24, 0x0D	; 13
    2b04:	91 05       	cpc	r25, r1
    2b06:	09 f1       	breq	.+66     	; 0x2b4a <H_LCD_void_displayHex+0xa0>
    2b08:	2d 81       	ldd	r18, Y+5	; 0x05
    2b0a:	3e 81       	ldd	r19, Y+6	; 0x06
    2b0c:	2d 30       	cpi	r18, 0x0D	; 13
    2b0e:	31 05       	cpc	r19, r1
    2b10:	c4 f0       	brlt	.+48     	; 0x2b42 <H_LCD_void_displayHex+0x98>
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
    2b14:	9e 81       	ldd	r25, Y+6	; 0x06
    2b16:	8e 30       	cpi	r24, 0x0E	; 14
    2b18:	91 05       	cpc	r25, r1
    2b1a:	d9 f0       	breq	.+54     	; 0x2b52 <H_LCD_void_displayHex+0xa8>
    2b1c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b1e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b20:	2f 30       	cpi	r18, 0x0F	; 15
    2b22:	31 05       	cpc	r19, r1
    2b24:	d1 f0       	breq	.+52     	; 0x2b5a <H_LCD_void_displayHex+0xb0>
    2b26:	1c c0       	rjmp	.+56     	; 0x2b60 <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	80 5d       	subi	r24, 0xD0	; 208
    2b2c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2b30:	17 c0       	rjmp	.+46     	; 0x2b60 <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    2b32:	81 e4       	ldi	r24, 0x41	; 65
    2b34:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2b38:	13 c0       	rjmp	.+38     	; 0x2b60 <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    2b3a:	82 e4       	ldi	r24, 0x42	; 66
    2b3c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2b40:	0f c0       	rjmp	.+30     	; 0x2b60 <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    2b42:	83 e4       	ldi	r24, 0x43	; 67
    2b44:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2b48:	0b c0       	rjmp	.+22     	; 0x2b60 <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    2b4a:	84 e4       	ldi	r24, 0x44	; 68
    2b4c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2b50:	07 c0       	rjmp	.+14     	; 0x2b60 <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    2b52:	85 e4       	ldi	r24, 0x45	; 69
    2b54:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2b58:	03 c0       	rjmp	.+6      	; 0x2b60 <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    2b5a:	86 e4       	ldi	r24, 0x46	; 70
    2b5c:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	8f 70       	andi	r24, 0x0F	; 15
    2b64:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	3c 83       	std	Y+4, r19	; 0x04
    2b6e:	2b 83       	std	Y+3, r18	; 0x03
    2b70:	8b 81       	ldd	r24, Y+3	; 0x03
    2b72:	9c 81       	ldd	r25, Y+4	; 0x04
    2b74:	8b 30       	cpi	r24, 0x0B	; 11
    2b76:	91 05       	cpc	r25, r1
    2b78:	69 f1       	breq	.+90     	; 0x2bd4 <H_LCD_void_displayHex+0x12a>
    2b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b7e:	2c 30       	cpi	r18, 0x0C	; 12
    2b80:	31 05       	cpc	r19, r1
    2b82:	54 f4       	brge	.+20     	; 0x2b98 <H_LCD_void_displayHex+0xee>
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	9c 81       	ldd	r25, Y+4	; 0x04
    2b88:	99 23       	and	r25, r25
    2b8a:	bc f1       	brlt	.+110    	; 0x2bfa <H_LCD_void_displayHex+0x150>
    2b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    2b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    2b90:	2a 30       	cpi	r18, 0x0A	; 10
    2b92:	31 05       	cpc	r19, r1
    2b94:	b4 f0       	brlt	.+44     	; 0x2bc2 <H_LCD_void_displayHex+0x118>
    2b96:	1a c0       	rjmp	.+52     	; 0x2bcc <H_LCD_void_displayHex+0x122>
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9c:	8d 30       	cpi	r24, 0x0D	; 13
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	09 f1       	breq	.+66     	; 0x2be4 <H_LCD_void_displayHex+0x13a>
    2ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    2ba6:	2d 30       	cpi	r18, 0x0D	; 13
    2ba8:	31 05       	cpc	r19, r1
    2baa:	c4 f0       	brlt	.+48     	; 0x2bdc <H_LCD_void_displayHex+0x132>
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb0:	8e 30       	cpi	r24, 0x0E	; 14
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	d9 f0       	breq	.+54     	; 0x2bec <H_LCD_void_displayHex+0x142>
    2bb6:	2b 81       	ldd	r18, Y+3	; 0x03
    2bb8:	3c 81       	ldd	r19, Y+4	; 0x04
    2bba:	2f 30       	cpi	r18, 0x0F	; 15
    2bbc:	31 05       	cpc	r19, r1
    2bbe:	d1 f0       	breq	.+52     	; 0x2bf4 <H_LCD_void_displayHex+0x14a>
    2bc0:	1c c0       	rjmp	.+56     	; 0x2bfa <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	80 5d       	subi	r24, 0xD0	; 208
    2bc6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2bca:	17 c0       	rjmp	.+46     	; 0x2bfa <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    2bcc:	81 e4       	ldi	r24, 0x41	; 65
    2bce:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2bd2:	13 c0       	rjmp	.+38     	; 0x2bfa <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    2bd4:	82 e4       	ldi	r24, 0x42	; 66
    2bd6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2bda:	0f c0       	rjmp	.+30     	; 0x2bfa <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    2bdc:	83 e4       	ldi	r24, 0x43	; 67
    2bde:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2be2:	0b c0       	rjmp	.+22     	; 0x2bfa <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    2be4:	84 e4       	ldi	r24, 0x44	; 68
    2be6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2bea:	07 c0       	rjmp	.+14     	; 0x2bfa <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    2bec:	85 e4       	ldi	r24, 0x45	; 69
    2bee:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
    2bf2:	03 c0       	rjmp	.+6      	; 0x2bfa <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    2bf4:	86 e4       	ldi	r24, 0x46	; 70
    2bf6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
		break;
	}
}
    2bfa:	26 96       	adiw	r28, 0x06	; 6
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <H_LCD_void_displayBinary+0x6>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    2c18:	83 e6       	ldi	r24, 0x63	; 99
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    2c20:	19 82       	std	Y+1, r1	; 0x01
    2c22:	18 c0       	rjmp	.+48     	; 0x2c54 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	48 2f       	mov	r20, r24
    2c28:	50 e0       	ldi	r21, 0x00	; 0
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	87 e0       	ldi	r24, 0x07	; 7
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	82 1b       	sub	r24, r18
    2c36:	93 0b       	sbc	r25, r19
    2c38:	9a 01       	movw	r18, r20
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <H_LCD_void_displayBinary+0x34>
    2c3c:	35 95       	asr	r19
    2c3e:	27 95       	ror	r18
    2c40:	8a 95       	dec	r24
    2c42:	e2 f7       	brpl	.-8      	; 0x2c3c <H_LCD_void_displayBinary+0x30>
    2c44:	c9 01       	movw	r24, r18
    2c46:	81 70       	andi	r24, 0x01	; 1
    2c48:	80 5d       	subi	r24, 0xD0	; 208
    2c4a:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	8f 5f       	subi	r24, 0xFF	; 255
    2c52:	89 83       	std	Y+1, r24	; 0x01
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	88 30       	cpi	r24, 0x08	; 8
    2c58:	28 f3       	brcs	.-54     	; 0x2c24 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	2a 97       	sbiw	r28, 0x0a	; 10
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	6f 83       	std	Y+7, r22	; 0x07
    2c7a:	78 87       	std	Y+8, r23	; 0x08
    2c7c:	89 87       	std	Y+9, r24	; 0x09
    2c7e:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    2c80:	1e 82       	std	Y+6, r1	; 0x06
    2c82:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    2c84:	8f 81       	ldd	r24, Y+7	; 0x07
    2c86:	98 85       	ldd	r25, Y+8	; 0x08
    2c88:	a9 85       	ldd	r26, Y+9	; 0x09
    2c8a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	ab 83       	std	Y+3, r26	; 0x03
    2c92:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	aa 27       	eor	r26, r26
    2ca6:	97 fd       	sbrc	r25, 7
    2ca8:	a0 95       	com	r26
    2caa:	ba 2f       	mov	r27, r26
    2cac:	bc 01       	movw	r22, r24
    2cae:	cd 01       	movw	r24, r26
    2cb0:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    2cb4:	8e e2       	ldi	r24, 0x2E	; 46
    2cb6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
	if(val < 0)
    2cba:	69 81       	ldd	r22, Y+1	; 0x01
    2cbc:	7a 81       	ldd	r23, Y+2	; 0x02
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e0       	ldi	r20, 0x00	; 0
    2cc8:	50 e0       	ldi	r21, 0x00	; 0
    2cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cce:	88 23       	and	r24, r24
    2cd0:	4c f4       	brge	.+18     	; 0x2ce4 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd6:	ab 81       	ldd	r26, Y+3	; 0x03
    2cd8:	bc 81       	ldd	r27, Y+4	; 0x04
    2cda:	b0 58       	subi	r27, 0x80	; 128
    2cdc:	89 83       	std	Y+1, r24	; 0x01
    2cde:	9a 83       	std	Y+2, r25	; 0x02
    2ce0:	ab 83       	std	Y+3, r26	; 0x03
    2ce2:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    2ce4:	1e 82       	std	Y+6, r1	; 0x06
    2ce6:	2a c0       	rjmp	.+84     	; 0x2d3c <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    2ce8:	69 81       	ldd	r22, Y+1	; 0x01
    2cea:	7a 81       	ldd	r23, Y+2	; 0x02
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e2       	ldi	r20, 0x20	; 32
    2cf6:	51 e4       	ldi	r21, 0x41	; 65
    2cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	9a 83       	std	Y+2, r25	; 0x02
    2d04:	ab 83       	std	Y+3, r26	; 0x03
    2d06:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    2d08:	69 81       	ldd	r22, Y+1	; 0x01
    2d0a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	2a e0       	ldi	r18, 0x0A	; 10
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	50 e0       	ldi	r21, 0x00	; 0
    2d20:	bc 01       	movw	r22, r24
    2d22:	cd 01       	movw	r24, r26
    2d24:	0e 94 12 1c 	call	0x3824	; 0x3824 <__divmodsi4>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	80 5d       	subi	r24, 0xD0	; 208
    2d32:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    2d36:	8e 81       	ldd	r24, Y+6	; 0x06
    2d38:	8f 5f       	subi	r24, 0xFF	; 255
    2d3a:	8e 83       	std	Y+6, r24	; 0x06
    2d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d3e:	83 30       	cpi	r24, 0x03	; 3
    2d40:	98 f2       	brcs	.-90     	; 0x2ce8 <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    2d42:	2a 96       	adiw	r28, 0x0a	; 10
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	6c 97       	sbiw	r28, 0x1c	; 28
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	69 8f       	std	Y+25, r22	; 0x19
    2d6a:	7a 8f       	std	Y+26, r23	; 0x1a
    2d6c:	8b 8f       	std	Y+27, r24	; 0x1b
    2d6e:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    2d70:	84 e1       	ldi	r24, 0x14	; 20
    2d72:	fe 01       	movw	r30, r28
    2d74:	35 96       	adiw	r30, 0x05	; 5
    2d76:	df 01       	movw	r26, r30
    2d78:	98 2f       	mov	r25, r24
    2d7a:	1d 92       	st	X+, r1
    2d7c:	9a 95       	dec	r25
    2d7e:	e9 f7       	brne	.-6      	; 0x2d7a <H_LCD_void_sendIntNum+0x26>
    2d80:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    2d82:	89 8d       	ldd	r24, Y+25	; 0x19
    2d84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	00 97       	sbiw	r24, 0x00	; 0
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <H_LCD_void_sendIntNum+0x40>
    2d92:	5d c0       	rjmp	.+186    	; 0x2e4e <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	9a 81       	ldd	r25, Y+2	; 0x02
    2d98:	99 23       	and	r25, r25
    2d9a:	c4 f4       	brge	.+48     	; 0x2dcc <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    2d9c:	8d e2       	ldi	r24, 0x2D	; 45
    2d9e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
			val *=-1;
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	9a 81       	ldd	r25, Y+2	; 0x02
    2da6:	90 95       	com	r25
    2da8:	81 95       	neg	r24
    2daa:	9f 4f       	sbci	r25, 0xFF	; 255
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	0d c0       	rjmp	.+26     	; 0x2dcc <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    2db2:	8b 81       	ldd	r24, Y+3	; 0x03
    2db4:	8f 5f       	subi	r24, 0xFF	; 255
    2db6:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	9a 81       	ldd	r25, Y+2	; 0x02
    2dbc:	2a e0       	ldi	r18, 0x0A	; 10
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	b9 01       	movw	r22, r18
    2dc2:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd0:	18 16       	cp	r1, r24
    2dd2:	19 06       	cpc	r1, r25
    2dd4:	74 f3       	brlt	.-36     	; 0x2db2 <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    2dd6:	89 8d       	ldd	r24, Y+25	; 0x19
    2dd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	18 16       	cp	r1, r24
    2de4:	19 06       	cpc	r1, r25
    2de6:	3c f0       	brlt	.+14     	; 0x2df6 <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	9a 81       	ldd	r25, Y+2	; 0x02
    2dec:	90 95       	com	r25
    2dee:	81 95       	neg	r24
    2df0:	9f 4f       	sbci	r25, 0xFF	; 255
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	81 50       	subi	r24, 0x01	; 1
    2dfa:	8c 83       	std	Y+4, r24	; 0x04
    2dfc:	20 c0       	rjmp	.+64     	; 0x2e3e <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    2dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    2e00:	e8 2f       	mov	r30, r24
    2e02:	ff 27       	eor	r31, r31
    2e04:	e7 fd       	sbrc	r30, 7
    2e06:	f0 95       	com	r31
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0c:	2a e0       	ldi	r18, 0x0A	; 10
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	b9 01       	movw	r22, r18
    2e12:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    2e16:	80 5d       	subi	r24, 0xD0	; 208
    2e18:	28 2f       	mov	r18, r24
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	05 96       	adiw	r24, 0x05	; 5
    2e1e:	e8 0f       	add	r30, r24
    2e20:	f9 1f       	adc	r31, r25
    2e22:	20 83       	st	Z, r18
			val /= 10;
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	9a 81       	ldd	r25, Y+2	; 0x02
    2e28:	2a e0       	ldi	r18, 0x0A	; 10
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	b9 01       	movw	r22, r18
    2e2e:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    2e32:	cb 01       	movw	r24, r22
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    2e38:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3a:	81 50       	subi	r24, 0x01	; 1
    2e3c:	8c 83       	std	Y+4, r24	; 0x04
    2e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e40:	88 23       	and	r24, r24
    2e42:	ec f6       	brge	.-70     	; 0x2dfe <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    2e44:	ce 01       	movw	r24, r28
    2e46:	05 96       	adiw	r24, 0x05	; 5
    2e48:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
    2e4c:	03 c0       	rjmp	.+6      	; 0x2e54 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    2e4e:	80 e3       	ldi	r24, 0x30	; 48
    2e50:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    2e54:	6c 96       	adiw	r28, 0x1c	; 28
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	cf 91       	pop	r28
    2e62:	df 91       	pop	r29
    2e64:	08 95       	ret

00002e66 <Timer0_Init>:
u8 remCounter = 0;

void(*ptrCallBack)(void) = NULL_PTR;

void Timer0_Init(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <Timer0_Init+0x6>
    2e6c:	00 d0       	rcall	.+0      	; 0x2e6e <Timer0_Init+0x8>
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	9a 83       	std	Y+2, r25	; 0x02
    2e74:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Mode)
    2e76:	e9 81       	ldd	r30, Y+1	; 0x01
    2e78:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7a:	84 81       	ldd	r24, Z+4	; 0x04
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	3c 83       	std	Y+4, r19	; 0x04
    2e82:	2b 83       	std	Y+3, r18	; 0x03
    2e84:	8b 81       	ldd	r24, Y+3	; 0x03
    2e86:	9c 81       	ldd	r25, Y+4	; 0x04
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <Timer0_Init+0x2a>
    2e8e:	41 c0       	rjmp	.+130    	; 0x2f12 <Timer0_Init+0xac>
    2e90:	2b 81       	ldd	r18, Y+3	; 0x03
    2e92:	3c 81       	ldd	r19, Y+4	; 0x04
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <Timer0_Init+0x3e>
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	71 f0       	breq	.+28     	; 0x2ebe <Timer0_Init+0x58>
    2ea2:	a8 c0       	rjmp	.+336    	; 0x2ff4 <Timer0_Init+0x18e>
    2ea4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <Timer0_Init+0x4a>
    2eae:	55 c0       	rjmp	.+170    	; 0x2f5a <Timer0_Init+0xf4>
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <Timer0_Init+0x56>
    2eba:	79 c0       	rjmp	.+242    	; 0x2fae <Timer0_Init+0x148>
    2ebc:	9b c0       	rjmp	.+310    	; 0x2ff4 <Timer0_Init+0x18e>
	{
	case TIMER0_NORMAL_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    2ebe:	e3 e5       	ldi	r30, 0x53	; 83
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	80 68       	ori	r24, 0x80	; 128
    2ec6:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2ec8:	a3 e5       	ldi	r26, 0x53	; 83
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ece:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed0:	80 81       	ld	r24, Z
    2ed2:	86 95       	lsr	r24
    2ed4:	81 70       	andi	r24, 0x01	; 1
    2ed6:	81 70       	andi	r24, 0x01	; 1
    2ed8:	98 2f       	mov	r25, r24
    2eda:	92 95       	swap	r25
    2edc:	99 0f       	add	r25, r25
    2ede:	90 7e       	andi	r25, 0xE0	; 224
    2ee0:	8c 91       	ld	r24, X
    2ee2:	8f 7d       	andi	r24, 0xDF	; 223
    2ee4:	89 2b       	or	r24, r25
    2ee6:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2ee8:	a3 e5       	ldi	r26, 0x53	; 83
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	e9 81       	ldd	r30, Y+1	; 0x01
    2eee:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef0:	80 81       	ld	r24, Z
    2ef2:	81 70       	andi	r24, 0x01	; 1
    2ef4:	81 70       	andi	r24, 0x01	; 1
    2ef6:	98 2f       	mov	r25, r24
    2ef8:	92 95       	swap	r25
    2efa:	90 7f       	andi	r25, 0xF0	; 240
    2efc:	8c 91       	ld	r24, X
    2efe:	8f 7e       	andi	r24, 0xEF	; 239
    2f00:	89 2b       	or	r24, r25
    2f02:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    2f04:	ac e5       	ldi	r26, 0x5C	; 92
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0c:	86 81       	ldd	r24, Z+6	; 0x06
    2f0e:	8c 93       	st	X, r24
    2f10:	71 c0       	rjmp	.+226    	; 0x2ff4 <Timer0_Init+0x18e>
		break;
	case TIMER0_PHASE_CORRECT_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    2f12:	e3 e5       	ldi	r30, 0x53	; 83
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	8f 77       	andi	r24, 0x7F	; 127
    2f1a:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>1);
    2f1c:	a3 e5       	ldi	r26, 0x53	; 83
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e9 81       	ldd	r30, Y+1	; 0x01
    2f22:	fa 81       	ldd	r31, Y+2	; 0x02
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	86 95       	lsr	r24
    2f28:	81 70       	andi	r24, 0x01	; 1
    2f2a:	81 70       	andi	r24, 0x01	; 1
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	92 95       	swap	r25
    2f30:	99 0f       	add	r25, r25
    2f32:	90 7e       	andi	r25, 0xE0	; 224
    2f34:	8c 91       	ld	r24, X
    2f36:	8f 7d       	andi	r24, 0xDF	; 223
    2f38:	89 2b       	or	r24, r25
    2f3a:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Phase_Correct_PWM>>0);
    2f3c:	a3 e5       	ldi	r26, 0x53	; 83
    2f3e:	b0 e0       	ldi	r27, 0x00	; 0
    2f40:	e9 81       	ldd	r30, Y+1	; 0x01
    2f42:	fa 81       	ldd	r31, Y+2	; 0x02
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	81 70       	andi	r24, 0x01	; 1
    2f48:	81 70       	andi	r24, 0x01	; 1
    2f4a:	98 2f       	mov	r25, r24
    2f4c:	92 95       	swap	r25
    2f4e:	90 7f       	andi	r25, 0xF0	; 240
    2f50:	8c 91       	ld	r24, X
    2f52:	8f 7e       	andi	r24, 0xEF	; 239
    2f54:	89 2b       	or	r24, r25
    2f56:	8c 93       	st	X, r24
    2f58:	4d c0       	rjmp	.+154    	; 0x2ff4 <Timer0_Init+0x18e>
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	case TIMER0_CTC_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_HIGH;
    2f5a:	e3 e5       	ldi	r30, 0x53	; 83
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	80 81       	ld	r24, Z
    2f60:	80 68       	ori	r24, 0x80	; 128
    2f62:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Non_PWM>>1);
    2f64:	a3 e5       	ldi	r26, 0x53	; 83
    2f66:	b0 e0       	ldi	r27, 0x00	; 0
    2f68:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6c:	80 81       	ld	r24, Z
    2f6e:	86 95       	lsr	r24
    2f70:	81 70       	andi	r24, 0x01	; 1
    2f72:	81 70       	andi	r24, 0x01	; 1
    2f74:	98 2f       	mov	r25, r24
    2f76:	92 95       	swap	r25
    2f78:	99 0f       	add	r25, r25
    2f7a:	90 7e       	andi	r25, 0xE0	; 224
    2f7c:	8c 91       	ld	r24, X
    2f7e:	8f 7d       	andi	r24, 0xDF	; 223
    2f80:	89 2b       	or	r24, r25
    2f82:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Non_PWM>>0);
    2f84:	a3 e5       	ldi	r26, 0x53	; 83
    2f86:	b0 e0       	ldi	r27, 0x00	; 0
    2f88:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8c:	80 81       	ld	r24, Z
    2f8e:	81 70       	andi	r24, 0x01	; 1
    2f90:	81 70       	andi	r24, 0x01	; 1
    2f92:	98 2f       	mov	r25, r24
    2f94:	92 95       	swap	r25
    2f96:	90 7f       	andi	r25, 0xF0	; 240
    2f98:	8c 91       	ld	r24, X
    2f9a:	8f 7e       	andi	r24, 0xEF	; 239
    2f9c:	89 2b       	or	r24, r25
    2f9e:	8c 93       	st	X, r24
		OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
    2fa0:	ac e5       	ldi	r26, 0x5C	; 92
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa8:	86 81       	ldd	r24, Z+6	; 0x06
    2faa:	8c 93       	st	X, r24
    2fac:	23 c0       	rjmp	.+70     	; 0x2ff4 <Timer0_Init+0x18e>
		break;
	case TIMER0_FAST_PWM_MODE:
		TCCR0_REG->bits.FOC0_BIT = LOGIC_LOW;
    2fae:	e3 e5       	ldi	r30, 0x53	; 83
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8f 77       	andi	r24, 0x7F	; 127
    2fb6:	80 83       	st	Z, r24
		TCCR0_REG->bits.COM01_BIT = (Config_Ptr->Compare_output_Fast_PWM>>1);
    2fb8:	a3 e5       	ldi	r26, 0x53	; 83
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	81 81       	ldd	r24, Z+1	; 0x01
    2fc2:	86 95       	lsr	r24
    2fc4:	81 70       	andi	r24, 0x01	; 1
    2fc6:	81 70       	andi	r24, 0x01	; 1
    2fc8:	98 2f       	mov	r25, r24
    2fca:	92 95       	swap	r25
    2fcc:	99 0f       	add	r25, r25
    2fce:	90 7e       	andi	r25, 0xE0	; 224
    2fd0:	8c 91       	ld	r24, X
    2fd2:	8f 7d       	andi	r24, 0xDF	; 223
    2fd4:	89 2b       	or	r24, r25
    2fd6:	8c 93       	st	X, r24
		TCCR0_REG->bits.COM00_BIT = (Config_Ptr->Compare_output_Fast_PWM>>0);
    2fd8:	a3 e5       	ldi	r26, 0x53	; 83
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fde:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe0:	81 81       	ldd	r24, Z+1	; 0x01
    2fe2:	81 70       	andi	r24, 0x01	; 1
    2fe4:	81 70       	andi	r24, 0x01	; 1
    2fe6:	98 2f       	mov	r25, r24
    2fe8:	92 95       	swap	r25
    2fea:	90 7f       	andi	r25, 0xF0	; 240
    2fec:	8c 91       	ld	r24, X
    2fee:	8f 7e       	andi	r24, 0xEF	; 239
    2ff0:	89 2b       	or	r24, r25
    2ff2:	8c 93       	st	X, r24
		//OCR0_REG = Config_Ptr->TIMER0_COMPARE_VALUE;
		break;
	}
	TCNT0_REG = Config_Ptr->TIMER0_INITIAL_VALUE;
    2ff4:	a2 e5       	ldi	r26, 0x52	; 82
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffa:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffc:	85 81       	ldd	r24, Z+5	; 0x05
    2ffe:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM01_BIT = (Config_Ptr->Mode>>1);
    3000:	a3 e5       	ldi	r26, 0x53	; 83
    3002:	b0 e0       	ldi	r27, 0x00	; 0
    3004:	e9 81       	ldd	r30, Y+1	; 0x01
    3006:	fa 81       	ldd	r31, Y+2	; 0x02
    3008:	84 81       	ldd	r24, Z+4	; 0x04
    300a:	86 95       	lsr	r24
    300c:	81 70       	andi	r24, 0x01	; 1
    300e:	81 70       	andi	r24, 0x01	; 1
    3010:	98 2f       	mov	r25, r24
    3012:	99 0f       	add	r25, r25
    3014:	99 0f       	add	r25, r25
    3016:	99 0f       	add	r25, r25
    3018:	8c 91       	ld	r24, X
    301a:	87 7f       	andi	r24, 0xF7	; 247
    301c:	89 2b       	or	r24, r25
    301e:	8c 93       	st	X, r24
	TCCR0_REG->bits.WGM00_BIT = (Config_Ptr->Mode>>0);
    3020:	a3 e5       	ldi	r26, 0x53	; 83
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e9 81       	ldd	r30, Y+1	; 0x01
    3026:	fa 81       	ldd	r31, Y+2	; 0x02
    3028:	84 81       	ldd	r24, Z+4	; 0x04
    302a:	81 70       	andi	r24, 0x01	; 1
    302c:	81 70       	andi	r24, 0x01	; 1
    302e:	98 2f       	mov	r25, r24
    3030:	92 95       	swap	r25
    3032:	99 0f       	add	r25, r25
    3034:	99 0f       	add	r25, r25
    3036:	90 7c       	andi	r25, 0xC0	; 192
    3038:	8c 91       	ld	r24, X
    303a:	8f 7b       	andi	r24, 0xBF	; 191
    303c:	89 2b       	or	r24, r25
    303e:	8c 93       	st	X, r24
	//TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
}
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <Timer0_Start>:
void Timer0_Start(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <Timer0_Start+0x6>
    3054:	cd b7       	in	r28, 0x3d	; 61
    3056:	de b7       	in	r29, 0x3e	; 62
    3058:	9a 83       	std	Y+2, r25	; 0x02
    305a:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (Config_Ptr->Clock_Select));
    305c:	a3 e5       	ldi	r26, 0x53	; 83
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e3 e5       	ldi	r30, 0x53	; 83
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	98 2f       	mov	r25, r24
    3068:	98 7f       	andi	r25, 0xF8	; 248
    306a:	e9 81       	ldd	r30, Y+1	; 0x01
    306c:	fa 81       	ldd	r31, Y+2	; 0x02
    306e:	83 81       	ldd	r24, Z+3	; 0x03
    3070:	89 2b       	or	r24, r25
    3072:	8c 93       	st	X, r24
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <Timer0_Stop>:
void Timer0_Stop(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	00 d0       	rcall	.+0      	; 0x3084 <Timer0_Stop+0x6>
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	9a 83       	std	Y+2, r25	; 0x02
    308a:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG->FULL_REG = ((TCCR0_REG->FULL_REG & CLOCK_SELECT_MASK) | (NO_CLOCK));
    308c:	a3 e5       	ldi	r26, 0x53	; 83
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e3 e5       	ldi	r30, 0x53	; 83
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	88 7f       	andi	r24, 0xF8	; 248
    3098:	8c 93       	st	X, r24
}
    309a:	0f 90       	pop	r0
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <Timer0_GetCounts>:
u8 Timer0_GetCounts(void)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
    30ac:	e2 e5       	ldi	r30, 0x52	; 82
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	80 81       	ld	r24, Z
}
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <Timer0_SetDelayTimeMilliSec>:
void Timer0_SetDelayTimeMilliSec(const TIMER0_INIT_CONFIG* Config_Ptr, u32 copy_u32TimeMS)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <Timer0_SetDelayTimeMilliSec+0x6>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <Timer0_SetDelayTimeMilliSec+0x8>
    30c0:	00 d0       	rcall	.+0      	; 0x30c2 <Timer0_SetDelayTimeMilliSec+0xa>
    30c2:	cd b7       	in	r28, 0x3d	; 61
    30c4:	de b7       	in	r29, 0x3e	; 62
    30c6:	9a 83       	std	Y+2, r25	; 0x02
    30c8:	89 83       	std	Y+1, r24	; 0x01
    30ca:	4b 83       	std	Y+3, r20	; 0x03
    30cc:	5c 83       	std	Y+4, r21	; 0x04
    30ce:	6d 83       	std	Y+5, r22	; 0x05
    30d0:	7e 83       	std	Y+6, r23	; 0x06
	/* Assuming we are using 16MHz FCPU and Prescaler 1024  Tick time = 2 Micro seconds */
	switch(Config_Ptr->Mode)
    30d2:	e9 81       	ldd	r30, Y+1	; 0x01
    30d4:	fa 81       	ldd	r31, Y+2	; 0x02
    30d6:	84 81       	ldd	r24, Z+4	; 0x04
    30d8:	88 2f       	mov	r24, r24
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	09 f0       	breq	.+2      	; 0x30e2 <Timer0_SetDelayTimeMilliSec+0x2a>
    30e0:	3f c0       	rjmp	.+126    	; 0x3160 <Timer0_SetDelayTimeMilliSec+0xa8>
	{
	case TIMER0_NORMAL_MODE:
		overFlowCounter = (((copy_u32TimeMS * 1000)/TIMER0_TICK_TIME) / TOP_VALUE);
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	ad 81       	ldd	r26, Y+5	; 0x05
    30e8:	be 81       	ldd	r27, Y+6	; 0x06
    30ea:	28 ee       	ldi	r18, 0xE8	; 232
    30ec:	33 e0       	ldi	r19, 0x03	; 3
    30ee:	40 e0       	ldi	r20, 0x00	; 0
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	bc 01       	movw	r22, r24
    30f4:	cd 01       	movw	r24, r26
    30f6:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__mulsi3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	07 2e       	mov	r0, r23
    3100:	7f e0       	ldi	r23, 0x0F	; 15
    3102:	b6 95       	lsr	r27
    3104:	a7 95       	ror	r26
    3106:	97 95       	ror	r25
    3108:	87 95       	ror	r24
    310a:	7a 95       	dec	r23
    310c:	d1 f7       	brne	.-12     	; 0x3102 <Timer0_SetDelayTimeMilliSec+0x4a>
    310e:	70 2d       	mov	r23, r0
    3110:	80 93 b8 01 	sts	0x01B8, r24
    3114:	90 93 b9 01 	sts	0x01B9, r25
    3118:	a0 93 ba 01 	sts	0x01BA, r26
    311c:	b0 93 bb 01 	sts	0x01BB, r27
		remCounter = (u8)(((copy_u32TimeMS * 1000)/TIMER0_TICK_TIME) % TOP_VALUE);
    3120:	8b 81       	ldd	r24, Y+3	; 0x03
    3122:	9c 81       	ldd	r25, Y+4	; 0x04
    3124:	ad 81       	ldd	r26, Y+5	; 0x05
    3126:	be 81       	ldd	r27, Y+6	; 0x06
    3128:	28 ee       	ldi	r18, 0xE8	; 232
    312a:	33 e0       	ldi	r19, 0x03	; 3
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	50 e0       	ldi	r21, 0x00	; 0
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__mulsi3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	68 94       	set
    313e:	16 f8       	bld	r1, 6
    3140:	b6 95       	lsr	r27
    3142:	a7 95       	ror	r26
    3144:	97 95       	ror	r25
    3146:	87 95       	ror	r24
    3148:	16 94       	lsr	r1
    314a:	d1 f7       	brne	.-12     	; 0x3140 <Timer0_SetDelayTimeMilliSec+0x88>
    314c:	80 93 bc 01 	sts	0x01BC, r24
		Timer0_IntEnable(Config_Ptr);
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	9a 81       	ldd	r25, Y+2	; 0x02
    3154:	0e 94 b9 18 	call	0x3172	; 0x3172 <Timer0_IntEnable>
		Timer0_Start(Config_Ptr);
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	9a 81       	ldd	r25, Y+2	; 0x02
    315c:	0e 94 27 18 	call	0x304e	; 0x304e <Timer0_Start>
	case TIMER0_CTC_MODE:

		break;

	}
}
    3160:	26 96       	adiw	r28, 0x06	; 6
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <Timer0_IntEnable>:
void Timer0_IntEnable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	00 d0       	rcall	.+0      	; 0x3178 <Timer0_IntEnable+0x6>
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
    317c:	9a 83       	std	Y+2, r25	; 0x02
    317e:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	84 81       	ldd	r24, Z+4	; 0x04
    3186:	88 23       	and	r24, r24
    3188:	31 f4       	brne	.+12     	; 0x3196 <Timer0_IntEnable+0x24>
	{
		TIMSK_REG->bits.TOIE0_BIT = LOGIC_HIGH;
    318a:	e9 e5       	ldi	r30, 0x59	; 89
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	81 60       	ori	r24, 0x01	; 1
    3192:	80 83       	st	Z, r24
    3194:	0a c0       	rjmp	.+20     	; 0x31aa <Timer0_IntEnable+0x38>
	}
	else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    3196:	e9 81       	ldd	r30, Y+1	; 0x01
    3198:	fa 81       	ldd	r31, Y+2	; 0x02
    319a:	84 81       	ldd	r24, Z+4	; 0x04
    319c:	82 30       	cpi	r24, 0x02	; 2
    319e:	29 f4       	brne	.+10     	; 0x31aa <Timer0_IntEnable+0x38>
	{
		TIMSK_REG->bits.OCIE0_BIT = LOGIC_HIGH;
    31a0:	e9 e5       	ldi	r30, 0x59	; 89
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	82 60       	ori	r24, 0x02	; 2
    31a8:	80 83       	st	Z, r24
	}
	else
	{
		//return error;
	}
}
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	cf 91       	pop	r28
    31b0:	df 91       	pop	r29
    31b2:	08 95       	ret

000031b4 <Timer0_IntDisable>:
void Timer0_IntDisable(const TIMER0_INIT_CONFIG* Config_Ptr)
{
    31b4:	df 93       	push	r29
    31b6:	cf 93       	push	r28
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <Timer0_IntDisable+0x6>
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->Mode == TIMER0_NORMAL_MODE)
    31c2:	e9 81       	ldd	r30, Y+1	; 0x01
    31c4:	fa 81       	ldd	r31, Y+2	; 0x02
    31c6:	84 81       	ldd	r24, Z+4	; 0x04
    31c8:	88 23       	and	r24, r24
    31ca:	31 f4       	brne	.+12     	; 0x31d8 <Timer0_IntDisable+0x24>
		{
			TIMSK_REG->bits.TOIE0_BIT = LOGIC_LOW;
    31cc:	e9 e5       	ldi	r30, 0x59	; 89
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	8e 7f       	andi	r24, 0xFE	; 254
    31d4:	80 83       	st	Z, r24
    31d6:	0a c0       	rjmp	.+20     	; 0x31ec <Timer0_IntDisable+0x38>
		}
		else if (Config_Ptr->Mode == TIMER0_CTC_MODE)
    31d8:	e9 81       	ldd	r30, Y+1	; 0x01
    31da:	fa 81       	ldd	r31, Y+2	; 0x02
    31dc:	84 81       	ldd	r24, Z+4	; 0x04
    31de:	82 30       	cpi	r24, 0x02	; 2
    31e0:	29 f4       	brne	.+10     	; 0x31ec <Timer0_IntDisable+0x38>
		{
			TIMSK_REG->bits.OCIE0_BIT = LOGIC_LOW;
    31e2:	e9 e5       	ldi	r30, 0x59	; 89
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	8d 7f       	andi	r24, 0xFD	; 253
    31ea:	80 83       	st	Z, r24
		}
		else
		{
			//return error;
		}
}
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <TIMER0_clearTimerValue>:
void TIMER0_clearTimerValue(void)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
	TCNT0_REG = 0;
    31fe:	e2 e5       	ldi	r30, 0x52	; 82
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	10 82       	st	Z, r1
}
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <Timer0_SetCallBack>:

void Timer0_SetCallBack(void(*ptrfn)(void))
{
    320a:	df 93       	push	r29
    320c:	cf 93       	push	r28
    320e:	00 d0       	rcall	.+0      	; 0x3210 <Timer0_SetCallBack+0x6>
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62
    3214:	9a 83       	std	Y+2, r25	; 0x02
    3216:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	90 93 be 01 	sts	0x01BE, r25
    3220:	80 93 bd 01 	sts	0x01BD, r24
}
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <Timer0_SetFastPWM>:
void Timer0_SetFastPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty)
{
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	00 d0       	rcall	.+0      	; 0x3234 <Timer0_SetFastPWM+0x6>
    3234:	0f 92       	push	r0
    3236:	cd b7       	in	r28, 0x3d	; 61
    3238:	de b7       	in	r29, 0x3e	; 62
    323a:	9a 83       	std	Y+2, r25	; 0x02
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	6b 83       	std	Y+3, r22	; 0x03
	/* pwm freq = FCPU/(prescaler*256) */

	/* duty cycle */
	OCR0_REG = (u8)((duty*255)/100);
    3240:	ec e5       	ldi	r30, 0x5C	; 92
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	48 2f       	mov	r20, r24
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	ca 01       	movw	r24, r20
    324c:	9c 01       	movw	r18, r24
    324e:	22 0f       	add	r18, r18
    3250:	33 1f       	adc	r19, r19
    3252:	c9 01       	movw	r24, r18
    3254:	96 95       	lsr	r25
    3256:	98 2f       	mov	r25, r24
    3258:	88 27       	eor	r24, r24
    325a:	97 95       	ror	r25
    325c:	87 95       	ror	r24
    325e:	82 1b       	sub	r24, r18
    3260:	93 0b       	sbc	r25, r19
    3262:	84 0f       	add	r24, r20
    3264:	95 1f       	adc	r25, r21
    3266:	24 e6       	ldi	r18, 0x64	; 100
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	b9 01       	movw	r22, r18
    326c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__divmodhi4>
    3270:	cb 01       	movw	r24, r22
    3272:	80 83       	st	Z, r24

}
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <__vector_11>:
void Timer0_SetPhaseCorrectPWM(const TIMER0_INIT_CONFIG* Config_Ptr, u8 duty);

ISR(TIMER0_OVF_vect)
{
    3280:	1f 92       	push	r1
    3282:	0f 92       	push	r0
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	0f 92       	push	r0
    3288:	11 24       	eor	r1, r1
    328a:	2f 93       	push	r18
    328c:	3f 93       	push	r19
    328e:	4f 93       	push	r20
    3290:	5f 93       	push	r21
    3292:	6f 93       	push	r22
    3294:	7f 93       	push	r23
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	ef 93       	push	r30
    32a0:	ff 93       	push	r31
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
	overFlowCounter--;
    32aa:	80 91 b8 01 	lds	r24, 0x01B8
    32ae:	90 91 b9 01 	lds	r25, 0x01B9
    32b2:	a0 91 ba 01 	lds	r26, 0x01BA
    32b6:	b0 91 bb 01 	lds	r27, 0x01BB
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	a1 09       	sbc	r26, r1
    32be:	b1 09       	sbc	r27, r1
    32c0:	80 93 b8 01 	sts	0x01B8, r24
    32c4:	90 93 b9 01 	sts	0x01B9, r25
    32c8:	a0 93 ba 01 	sts	0x01BA, r26
    32cc:	b0 93 bb 01 	sts	0x01BB, r27

	if(overFlowCounter == 0)
    32d0:	80 91 b8 01 	lds	r24, 0x01B8
    32d4:	90 91 b9 01 	lds	r25, 0x01B9
    32d8:	a0 91 ba 01 	lds	r26, 0x01BA
    32dc:	b0 91 bb 01 	lds	r27, 0x01BB
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	a1 05       	cpc	r26, r1
    32e4:	b1 05       	cpc	r27, r1
    32e6:	31 f4       	brne	.+12     	; 0x32f4 <__vector_11+0x74>
	{
		TCNT0_REG = (256 - remCounter);
    32e8:	e2 e5       	ldi	r30, 0x52	; 82
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 91 bc 01 	lds	r24, 0x01BC
    32f0:	81 95       	neg	r24
    32f2:	80 83       	st	Z, r24
	}
	if((ptrCallBack != NULL_PTR) && (overFlowCounter == -1))
    32f4:	80 91 bd 01 	lds	r24, 0x01BD
    32f8:	90 91 be 01 	lds	r25, 0x01BE
    32fc:	00 97       	sbiw	r24, 0x00	; 0
    32fe:	a9 f0       	breq	.+42     	; 0x332a <__vector_11+0xaa>
    3300:	80 91 b8 01 	lds	r24, 0x01B8
    3304:	90 91 b9 01 	lds	r25, 0x01B9
    3308:	a0 91 ba 01 	lds	r26, 0x01BA
    330c:	b0 91 bb 01 	lds	r27, 0x01BB
    3310:	8f 3f       	cpi	r24, 0xFF	; 255
    3312:	2f ef       	ldi	r18, 0xFF	; 255
    3314:	92 07       	cpc	r25, r18
    3316:	2f ef       	ldi	r18, 0xFF	; 255
    3318:	a2 07       	cpc	r26, r18
    331a:	2f ef       	ldi	r18, 0xFF	; 255
    331c:	b2 07       	cpc	r27, r18
    331e:	29 f4       	brne	.+10     	; 0x332a <__vector_11+0xaa>
	{
		(*ptrCallBack)();
    3320:	e0 91 bd 01 	lds	r30, 0x01BD
    3324:	f0 91 be 01 	lds	r31, 0x01BE
    3328:	09 95       	icall
	}
}
    332a:	cf 91       	pop	r28
    332c:	df 91       	pop	r29
    332e:	ff 91       	pop	r31
    3330:	ef 91       	pop	r30
    3332:	bf 91       	pop	r27
    3334:	af 91       	pop	r26
    3336:	9f 91       	pop	r25
    3338:	8f 91       	pop	r24
    333a:	7f 91       	pop	r23
    333c:	6f 91       	pop	r22
    333e:	5f 91       	pop	r21
    3340:	4f 91       	pop	r20
    3342:	3f 91       	pop	r19
    3344:	2f 91       	pop	r18
    3346:	0f 90       	pop	r0
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	0f 90       	pop	r0
    334c:	1f 90       	pop	r1
    334e:	18 95       	reti

00003350 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    3350:	1f 92       	push	r1
    3352:	0f 92       	push	r0
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	0f 92       	push	r0
    3358:	11 24       	eor	r1, r1
    335a:	2f 93       	push	r18
    335c:	3f 93       	push	r19
    335e:	4f 93       	push	r20
    3360:	5f 93       	push	r21
    3362:	6f 93       	push	r22
    3364:	7f 93       	push	r23
    3366:	8f 93       	push	r24
    3368:	9f 93       	push	r25
    336a:	af 93       	push	r26
    336c:	bf 93       	push	r27
    336e:	ef 93       	push	r30
    3370:	ff 93       	push	r31
    3372:	df 93       	push	r29
    3374:	cf 93       	push	r28
    3376:	cd b7       	in	r28, 0x3d	; 61
    3378:	de b7       	in	r29, 0x3e	; 62
	if(ptrCallBack != NULL_PTR)
    337a:	80 91 bd 01 	lds	r24, 0x01BD
    337e:	90 91 be 01 	lds	r25, 0x01BE
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	29 f0       	breq	.+10     	; 0x3390 <__vector_10+0x40>
	{
		(*ptrCallBack)();
    3386:	e0 91 bd 01 	lds	r30, 0x01BD
    338a:	f0 91 be 01 	lds	r31, 0x01BE
    338e:	09 95       	icall
	}
}
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	ff 91       	pop	r31
    3396:	ef 91       	pop	r30
    3398:	bf 91       	pop	r27
    339a:	af 91       	pop	r26
    339c:	9f 91       	pop	r25
    339e:	8f 91       	pop	r24
    33a0:	7f 91       	pop	r23
    33a2:	6f 91       	pop	r22
    33a4:	5f 91       	pop	r21
    33a6:	4f 91       	pop	r20
    33a8:	3f 91       	pop	r19
    33aa:	2f 91       	pop	r18
    33ac:	0f 90       	pop	r0
    33ae:	0f be       	out	0x3f, r0	; 63
    33b0:	0f 90       	pop	r0
    33b2:	1f 90       	pop	r1
    33b4:	18 95       	reti

000033b6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(void)
{
    33b6:	df 93       	push	r29
    33b8:	cf 93       	push	r28
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <UART_init+0x6>
    33bc:	0f 92       	push	r0
    33be:	cd b7       	in	r28, 0x3d	; 61
    33c0:	de b7       	in	r29, 0x3e	; 62
	u8 regVal = 0;
    33c2:	1b 82       	std	Y+3, r1	; 0x03
	u16 ubrr_value = 0;
    33c4:	1a 82       	std	Y+2, r1	; 0x02
    33c6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA_REG = (UART_TRANSMISSION_SPEED<<U2X_BIT);
    33c8:	eb e2       	ldi	r30, 0x2B	; 43
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	82 e0       	ldi	r24, 0x02	; 2
    33ce:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 5:9 bits data modes
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	regVal = 0;
    33d0:	1b 82       	std	Y+3, r1	; 0x03
	regVal = (1<<RXEN_BIT) | (1<<TXEN_BIT) | ((UART_BitData>>2)<<UCSZ2_BIT);
    33d2:	88 e1       	ldi	r24, 0x18	; 24
    33d4:	8b 83       	std	Y+3, r24	; 0x03
	UCSRB_REG = regVal;
    33d6:	ea e2       	ldi	r30, 0x2A	; 42
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	8b 81       	ldd	r24, Y+3	; 0x03
    33dc:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit
	 * USBS    = stop bit
	 * UCSZ1:0 = 5:9 bits data modes
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	regVal = 0;
    33de:	1b 82       	std	Y+3, r1	; 0x03
	regVal= (1 <<URSEL_BIT) | (((UART_BitData & 0x02)>>1)<<UCSZ1_BIT) | ((UART_BitData & 0x01)<<UCSZ0_BIT) | ((UART_Parity & 0x01)<<UPM0_BIT) | ((UART_Parity & 0x02)<<UPM1_BIT) | ((UART_StopBit)<<USBS_BIT);
    33e0:	86 e8       	ldi	r24, 0x86	; 134
    33e2:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC_REG = regVal;
    33e4:	e0 e4       	ldi	r30, 0x40	; 64
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (u16)(((F_CPU / (UART_BaudRate * 8UL))) - 1);
    33ec:	81 e2       	ldi	r24, 0x21	; 33
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9a 83       	std	Y+2, r25	; 0x02
    33f2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_REG = ubrr_value>>8;
    33f4:	e0 e4       	ldi	r30, 0x40	; 64
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	89 81       	ldd	r24, Y+1	; 0x01
    33fa:	9a 81       	ldd	r25, Y+2	; 0x02
    33fc:	89 2f       	mov	r24, r25
    33fe:	99 27       	eor	r25, r25
    3400:	80 83       	st	Z, r24
	UBRRL_REG = ubrr_value;
    3402:	e9 e2       	ldi	r30, 0x29	; 41
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	80 83       	st	Z, r24

}
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const u8 data)
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	0f 92       	push	r0
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(!(UCSRA_REG & (1<<UDRE_BIT)));
    3422:	eb e2       	ldi	r30, 0x2B	; 43
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	88 2f       	mov	r24, r24
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	80 72       	andi	r24, 0x20	; 32
    342e:	90 70       	andi	r25, 0x00	; 0
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	b9 f3       	breq	.-18     	; 0x3422 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR_REG = data;
    3434:	ec e2       	ldi	r30, 0x2C	; 44
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	80 83       	st	Z, r24
}
    343c:	0f 90       	pop	r0
    343e:	cf 91       	pop	r28
    3440:	df 91       	pop	r29
    3442:	08 95       	ret

00003444 <UART_recieveByteSynchNonBlocking>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
void UART_recieveByteSynchNonBlocking(u8* data)
{
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	00 d0       	rcall	.+0      	; 0x344a <UART_recieveByteSynchNonBlocking+0x6>
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(!(UCSRA_REG & (1<<RXC_BIT)));
    3452:	eb e2       	ldi	r30, 0x2B	; 43
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	80 81       	ld	r24, Z
    3458:	88 23       	and	r24, r24
    345a:	dc f7       	brge	.-10     	; 0x3452 <UART_recieveByteSynchNonBlocking+0xe>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	*data = UDR_REG;
    345c:	ec e2       	ldi	r30, 0x2C	; 44
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	80 83       	st	Z, r24
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8 *Str)
{
    3472:	df 93       	push	r29
    3474:	cf 93       	push	r28
    3476:	00 d0       	rcall	.+0      	; 0x3478 <UART_sendString+0x6>
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	9a 83       	std	Y+2, r25	; 0x02
    347e:	89 83       	std	Y+1, r24	; 0x01
    3480:	0a c0       	rjmp	.+20     	; 0x3496 <UART_sendString+0x24>

	/* Sending the whole string one character after the other till we find the null character */
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    3482:	e9 81       	ldd	r30, Y+1	; 0x01
    3484:	fa 81       	ldd	r31, Y+2	; 0x02
    3486:	80 81       	ld	r24, Z
    3488:	0e 94 0b 1a 	call	0x3416	; 0x3416 <UART_sendByte>
		Str++;
    348c:	89 81       	ldd	r24, Y+1	; 0x01
    348e:	9a 81       	ldd	r25, Y+2	; 0x02
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const u8 *Str)
{

	/* Sending the whole string one character after the other till we find the null character */
	while(*Str != '\0')
    3496:	e9 81       	ldd	r30, Y+1	; 0x01
    3498:	fa 81       	ldd	r31, Y+2	; 0x02
    349a:	80 81       	ld	r24, Z
    349c:	88 23       	and	r24, r24
    349e:	89 f7       	brne	.-30     	; 0x3482 <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    34a0:	0f 90       	pop	r0
    34a2:	0f 90       	pop	r0
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <UART_receiveStringAsynchCallBack>:
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveStringAsynchCallBack(void(*ptrfn)(u8)) // Receive until #

{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	00 d0       	rcall	.+0      	; 0x34b0 <UART_receiveStringAsynchCallBack+0x6>
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
    34b4:	9a 83       	std	Y+2, r25	; 0x02
    34b6:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	9a 81       	ldd	r25, Y+2	; 0x02
    34bc:	90 93 c0 01 	sts	0x01C0, r25
    34c0:	80 93 bf 01 	sts	0x01BF, r24
	UCSRB_REG |= (1<<RXCIE_BIT);
    34c4:	aa e2       	ldi	r26, 0x2A	; 42
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	ea e2       	ldi	r30, 0x2A	; 42
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	80 68       	ori	r24, 0x80	; 128
    34d0:	8c 93       	st	X, r24
}
    34d2:	0f 90       	pop	r0
    34d4:	0f 90       	pop	r0
    34d6:	cf 91       	pop	r28
    34d8:	df 91       	pop	r29
    34da:	08 95       	ret

000034dc <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void(*ptrfn)(u8))
{
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	00 d0       	rcall	.+0      	; 0x34e2 <UART_receiveByteAsynchCallBack+0x6>
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	9a 83       	std	Y+2, r25	; 0x02
    34e8:	89 83       	std	Y+1, r24	; 0x01
	ptrCallBack = ptrfn;
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	9a 81       	ldd	r25, Y+2	; 0x02
    34ee:	90 93 c0 01 	sts	0x01C0, r25
    34f2:	80 93 bf 01 	sts	0x01BF, r24
	UCSRB_REG |= (1<<RXCIE_BIT);
    34f6:	aa e2       	ldi	r26, 0x2A	; 42
    34f8:	b0 e0       	ldi	r27, 0x00	; 0
    34fa:	ea e2       	ldi	r30, 0x2A	; 42
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	80 68       	ori	r24, 0x80	; 128
    3502:	8c 93       	st	X, r24
}
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <__vector_13>:

ISR(USART_RXC_vect)
{
    350e:	1f 92       	push	r1
    3510:	0f 92       	push	r0
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	0f 92       	push	r0
    3516:	11 24       	eor	r1, r1
    3518:	2f 93       	push	r18
    351a:	3f 93       	push	r19
    351c:	4f 93       	push	r20
    351e:	5f 93       	push	r21
    3520:	6f 93       	push	r22
    3522:	7f 93       	push	r23
    3524:	8f 93       	push	r24
    3526:	9f 93       	push	r25
    3528:	af 93       	push	r26
    352a:	bf 93       	push	r27
    352c:	ef 93       	push	r30
    352e:	ff 93       	push	r31
    3530:	df 93       	push	r29
    3532:	cf 93       	push	r28
    3534:	cd b7       	in	r28, 0x3d	; 61
    3536:	de b7       	in	r29, 0x3e	; 62
	static u8 byte = 0;

	byte = UDR_REG;
    3538:	ec e2       	ldi	r30, 0x2C	; 44
    353a:	f0 e0       	ldi	r31, 0x00	; 0
    353c:	80 81       	ld	r24, Z
    353e:	80 93 c1 01 	sts	0x01C1, r24

	if((*ptrCallBack) != NULL_PTR)
    3542:	80 91 bf 01 	lds	r24, 0x01BF
    3546:	90 91 c0 01 	lds	r25, 0x01C0
    354a:	00 97       	sbiw	r24, 0x00	; 0
    354c:	39 f0       	breq	.+14     	; 0x355c <__vector_13+0x4e>
	{
		(*ptrCallBack)(byte);
    354e:	e0 91 bf 01 	lds	r30, 0x01BF
    3552:	f0 91 c0 01 	lds	r31, 0x01C0
    3556:	80 91 c1 01 	lds	r24, 0x01C1
    355a:	09 95       	icall
	}
}
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	ff 91       	pop	r31
    3562:	ef 91       	pop	r30
    3564:	bf 91       	pop	r27
    3566:	af 91       	pop	r26
    3568:	9f 91       	pop	r25
    356a:	8f 91       	pop	r24
    356c:	7f 91       	pop	r23
    356e:	6f 91       	pop	r22
    3570:	5f 91       	pop	r21
    3572:	4f 91       	pop	r20
    3574:	3f 91       	pop	r19
    3576:	2f 91       	pop	r18
    3578:	0f 90       	pop	r0
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	0f 90       	pop	r0
    357e:	1f 90       	pop	r1
    3580:	18 95       	reti

00003582 <main>:

u8 APP_Enroll(void);
u8 APP_Login(void);

int main()
{
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	00 d0       	rcall	.+0      	; 0x3588 <main+0x6>
    3588:	0f 92       	push	r0
    358a:	cd b7       	in	r28, 0x3d	; 61
    358c:	de b7       	in	r29, 0x3e	; 62
	u8 choice = 0;
    358e:	19 82       	std	Y+1, r1	; 0x01

	KEYPAD_Init();
    3590:	0e 94 81 0c 	call	0x1902	; 0x1902 <KEYPAD_Init>
	H_LCD_void_Init();
    3594:	0e 94 56 0e 	call	0x1cac	; 0x1cac <H_LCD_void_Init>
	FingerPS_init();
    3598:	0e 94 1d 06 	call	0xc3a	; 0xc3a <FingerPS_init>
	GIE_Enable();
    359c:	0e 94 40 0a 	call	0x1480	; 0x1480 <GIE_Enable>


	while(1)
	{
		H_LCD_void_clearDisplay();
    35a0:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
		H_LCD_void_sendString("Plz Choose Mode:");
    35a4:	86 e6       	ldi	r24, 0x66	; 102
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
		H_LCD_void_gotoXY(1, 0);
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	60 e0       	ldi	r22, 0x00	; 0
    35b0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("1- Enroll   2- Login");
    35b4:	87 e7       	ldi	r24, 0x77	; 119
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
		choice = KEYPAD_Get_Pressed_Key();
    35bc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <KEYPAD_Get_Pressed_Key>
    35c0:	89 83       	std	Y+1, r24	; 0x01

		switch(choice)
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	3b 83       	std	Y+3, r19	; 0x03
    35ca:	2a 83       	std	Y+2, r18	; 0x02
    35cc:	8a 81       	ldd	r24, Y+2	; 0x02
    35ce:	9b 81       	ldd	r25, Y+3	; 0x03
    35d0:	81 30       	cpi	r24, 0x01	; 1
    35d2:	91 05       	cpc	r25, r1
    35d4:	31 f0       	breq	.+12     	; 0x35e2 <main+0x60>
    35d6:	2a 81       	ldd	r18, Y+2	; 0x02
    35d8:	3b 81       	ldd	r19, Y+3	; 0x03
    35da:	22 30       	cpi	r18, 0x02	; 2
    35dc:	31 05       	cpc	r19, r1
    35de:	21 f0       	breq	.+8      	; 0x35e8 <main+0x66>
    35e0:	df cf       	rjmp	.-66     	; 0x35a0 <main+0x1e>
		{
		case 1:
			APP_Enroll();
    35e2:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <APP_Enroll>
    35e6:	dc cf       	rjmp	.-72     	; 0x35a0 <main+0x1e>
			break;
		case 2:
			APP_Login();
    35e8:	0e 94 91 1b 	call	0x3722	; 0x3722 <APP_Login>
    35ec:	d9 cf       	rjmp	.-78     	; 0x35a0 <main+0x1e>

000035ee <APP_Enroll>:

	}
}

u8 APP_Enroll(void)
{
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	0f 92       	push	r0
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
	if(FingerPS_handShake() == ERROR)
    35f8:	0e 94 a3 05 	call	0xb46	; 0xb46 <FingerPS_handShake>
    35fc:	88 23       	and	r24, r24
    35fe:	71 f4       	brne	.+28     	; 0x361c <APP_Enroll+0x2e>
	{
		H_LCD_void_clearDisplay();
    3600:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
		H_LCD_void_sendString("Error, plz try again");
    3604:	8c e8       	ldi	r24, 0x8C	; 140
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
		delayMilliSec(1000);
    360c:	68 ee       	ldi	r22, 0xE8	; 232
    360e:	73 e0       	ldi	r23, 0x03	; 3
    3610:	80 e0       	ldi	r24, 0x00	; 0
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
		return ERROR;
    3618:	19 82       	std	Y+1, r1	; 0x01
    361a:	7e c0       	rjmp	.+252    	; 0x3718 <APP_Enroll+0x12a>
	}
	else
	{
		if(FingerPS_genImg() == ERROR)
    361c:	0e 94 26 06 	call	0xc4c	; 0xc4c <FingerPS_genImg>
    3620:	88 23       	and	r24, r24
    3622:	71 f4       	brne	.+28     	; 0x3640 <APP_Enroll+0x52>
		{
			H_LCD_void_clearDisplay();
    3624:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
			H_LCD_void_sendString("Error, plz try again");
    3628:	8c e8       	ldi	r24, 0x8C	; 140
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
			delayMilliSec(1000);
    3630:	68 ee       	ldi	r22, 0xE8	; 232
    3632:	73 e0       	ldi	r23, 0x03	; 3
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
			return ERROR;
    363c:	19 82       	std	Y+1, r1	; 0x01
    363e:	6c c0       	rjmp	.+216    	; 0x3718 <APP_Enroll+0x12a>
		}
		else
		{
			if(FingerPS_convertImg2CharFile(CHARACTERFILE1) == ERROR)
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	0e 94 ac 06 	call	0xd58	; 0xd58 <FingerPS_convertImg2CharFile>
    3646:	88 23       	and	r24, r24
    3648:	71 f4       	brne	.+28     	; 0x3666 <APP_Enroll+0x78>
			{
				H_LCD_void_clearDisplay();
    364a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
				H_LCD_void_sendString("Error, plz try again");
    364e:	8c e8       	ldi	r24, 0x8C	; 140
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
				delayMilliSec(1000);
    3656:	68 ee       	ldi	r22, 0xE8	; 232
    3658:	73 e0       	ldi	r23, 0x03	; 3
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
				return ERROR;
    3662:	19 82       	std	Y+1, r1	; 0x01
    3664:	59 c0       	rjmp	.+178    	; 0x3718 <APP_Enroll+0x12a>
			}
			else
			{
				if(FingerPS_genImg() == ERROR)
    3666:	0e 94 26 06 	call	0xc4c	; 0xc4c <FingerPS_genImg>
    366a:	88 23       	and	r24, r24
    366c:	71 f4       	brne	.+28     	; 0x368a <APP_Enroll+0x9c>
				{
					H_LCD_void_clearDisplay();
    366e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
					H_LCD_void_sendString("Error, plz try again");
    3672:	8c e8       	ldi	r24, 0x8C	; 140
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
					delayMilliSec(1000);
    367a:	68 ee       	ldi	r22, 0xE8	; 232
    367c:	73 e0       	ldi	r23, 0x03	; 3
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
					return ERROR;
    3686:	19 82       	std	Y+1, r1	; 0x01
    3688:	47 c0       	rjmp	.+142    	; 0x3718 <APP_Enroll+0x12a>
				}
				else
				{
					if(FingerPS_convertImg2CharFile(CHARACTERFILE2) == ERROR)
    368a:	82 e0       	ldi	r24, 0x02	; 2
    368c:	0e 94 ac 06 	call	0xd58	; 0xd58 <FingerPS_convertImg2CharFile>
    3690:	88 23       	and	r24, r24
    3692:	71 f4       	brne	.+28     	; 0x36b0 <APP_Enroll+0xc2>
					{
						H_LCD_void_clearDisplay();
    3694:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
						H_LCD_void_sendString("Error, plz try again");
    3698:	8c e8       	ldi	r24, 0x8C	; 140
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
						delayMilliSec(1000);
    36a0:	68 ee       	ldi	r22, 0xE8	; 232
    36a2:	73 e0       	ldi	r23, 0x03	; 3
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
						return ERROR;
    36ac:	19 82       	std	Y+1, r1	; 0x01
    36ae:	34 c0       	rjmp	.+104    	; 0x3718 <APP_Enroll+0x12a>
					}
					else
					{
						if(FingerPS_genTemplate() == ERROR)
    36b0:	0e 94 29 07 	call	0xe52	; 0xe52 <FingerPS_genTemplate>
    36b4:	88 23       	and	r24, r24
    36b6:	71 f4       	brne	.+28     	; 0x36d4 <APP_Enroll+0xe6>
						{
							H_LCD_void_clearDisplay();
    36b8:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
							H_LCD_void_sendString("Error, plz try again");
    36bc:	8c e8       	ldi	r24, 0x8C	; 140
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
							delayMilliSec(1000);
    36c4:	68 ee       	ldi	r22, 0xE8	; 232
    36c6:	73 e0       	ldi	r23, 0x03	; 3
    36c8:	80 e0       	ldi	r24, 0x00	; 0
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
							return ERROR;
    36d0:	19 82       	std	Y+1, r1	; 0x01
    36d2:	22 c0       	rjmp	.+68     	; 0x3718 <APP_Enroll+0x12a>
						}
						else
						{
							if(FingerPS_strTemplate(UsersCounter) == ERROR)
    36d4:	80 91 e2 00 	lds	r24, 0x00E2
    36d8:	0e 94 a3 07 	call	0xf46	; 0xf46 <FingerPS_strTemplate>
    36dc:	88 23       	and	r24, r24
    36de:	71 f4       	brne	.+28     	; 0x36fc <APP_Enroll+0x10e>
							{
								H_LCD_void_clearDisplay();
    36e0:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
								H_LCD_void_sendString("Error, plz try again");
    36e4:	8c e8       	ldi	r24, 0x8C	; 140
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
								delayMilliSec(1000);
    36ec:	68 ee       	ldi	r22, 0xE8	; 232
    36ee:	73 e0       	ldi	r23, 0x03	; 3
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
								return ERROR;
    36f8:	19 82       	std	Y+1, r1	; 0x01
    36fa:	0e c0       	rjmp	.+28     	; 0x3718 <APP_Enroll+0x12a>
							}
							else
							{
								/* Display "Enrolled" on LCD */
								H_LCD_void_clearDisplay();
    36fc:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
								H_LCD_void_sendString("Enroll Successful");
    3700:	81 ea       	ldi	r24, 0xA1	; 161
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
								delayMilliSec(1000);
    3708:	68 ee       	ldi	r22, 0xE8	; 232
    370a:	73 e0       	ldi	r23, 0x03	; 3
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
								return SUCCESS;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	89 83       	std	Y+1, r24	; 0x01
    3718:	89 81       	ldd	r24, Y+1	; 0x01
			}
		}

	}

}
    371a:	0f 90       	pop	r0
    371c:	cf 91       	pop	r28
    371e:	df 91       	pop	r29
    3720:	08 95       	ret

00003722 <APP_Login>:

u8 APP_Login(void)
{
    3722:	df 93       	push	r29
    3724:	cf 93       	push	r28
    3726:	0f 92       	push	r0
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
	if(FingerPS_genImg() == ERROR)
    372c:	0e 94 26 06 	call	0xc4c	; 0xc4c <FingerPS_genImg>
    3730:	88 23       	and	r24, r24
    3732:	71 f4       	brne	.+28     	; 0x3750 <APP_Login+0x2e>
	{
		H_LCD_void_clearDisplay();
    3734:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
		H_LCD_void_sendString("Error, plz try again");
    3738:	8c e8       	ldi	r24, 0x8C	; 140
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
		delayMilliSec(1000);
    3740:	68 ee       	ldi	r22, 0xE8	; 232
    3742:	73 e0       	ldi	r23, 0x03	; 3
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
		return ERROR;
    374c:	19 82       	std	Y+1, r1	; 0x01
    374e:	33 c0       	rjmp	.+102    	; 0x37b6 <APP_Login+0x94>
	}
	else
	{
		if(FingerPS_convertImg2CharFile(CHARACTERFILE1) == ERROR)
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	0e 94 ac 06 	call	0xd58	; 0xd58 <FingerPS_convertImg2CharFile>
    3756:	88 23       	and	r24, r24
    3758:	71 f4       	brne	.+28     	; 0x3776 <APP_Login+0x54>
		{
			H_LCD_void_clearDisplay();
    375a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
			H_LCD_void_sendString("Error, plz try again");
    375e:	8c e8       	ldi	r24, 0x8C	; 140
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
			delayMilliSec(1000);
    3766:	68 ee       	ldi	r22, 0xE8	; 232
    3768:	73 e0       	ldi	r23, 0x03	; 3
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
			return ERROR;
    3772:	19 82       	std	Y+1, r1	; 0x01
    3774:	20 c0       	rjmp	.+64     	; 0x37b6 <APP_Login+0x94>
		}
		else
		{
			if(FingerPS_searchFinger() == ERROR)
    3776:	0e 94 25 08 	call	0x104a	; 0x104a <FingerPS_searchFinger>
    377a:	88 23       	and	r24, r24
    377c:	71 f4       	brne	.+28     	; 0x379a <APP_Login+0x78>
			{
				H_LCD_void_clearDisplay();
    377e:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
				H_LCD_void_sendString("User Not Found");
    3782:	83 eb       	ldi	r24, 0xB3	; 179
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
				delayMilliSec(1000);
    378a:	68 ee       	ldi	r22, 0xE8	; 232
    378c:	73 e0       	ldi	r23, 0x03	; 3
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
				return ERROR;
    3796:	19 82       	std	Y+1, r1	; 0x01
    3798:	0e c0       	rjmp	.+28     	; 0x37b6 <APP_Login+0x94>
			}
			else
			{
				/* user found */
				H_LCD_void_clearDisplay();
    379a:	0e 94 60 11 	call	0x22c0	; 0x22c0 <H_LCD_void_clearDisplay>
				H_LCD_void_sendString("Login Successful");
    379e:	82 ec       	ldi	r24, 0xC2	; 194
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 38 11 	call	0x2270	; 0x2270 <H_LCD_void_sendString>
				delayMilliSec(1000);
    37a6:	68 ee       	ldi	r22, 0xE8	; 232
    37a8:	73 e0       	ldi	r23, 0x03	; 3
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	0e 94 03 0a 	call	0x1406	; 0x1406 <delayMilliSec>
				return SUCCESS;
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	89 83       	std	Y+1, r24	; 0x01
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
			}
		}
	}
}
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <__mulsi3>:
    37c0:	62 9f       	mul	r22, r18
    37c2:	d0 01       	movw	r26, r0
    37c4:	73 9f       	mul	r23, r19
    37c6:	f0 01       	movw	r30, r0
    37c8:	82 9f       	mul	r24, r18
    37ca:	e0 0d       	add	r30, r0
    37cc:	f1 1d       	adc	r31, r1
    37ce:	64 9f       	mul	r22, r20
    37d0:	e0 0d       	add	r30, r0
    37d2:	f1 1d       	adc	r31, r1
    37d4:	92 9f       	mul	r25, r18
    37d6:	f0 0d       	add	r31, r0
    37d8:	83 9f       	mul	r24, r19
    37da:	f0 0d       	add	r31, r0
    37dc:	74 9f       	mul	r23, r20
    37de:	f0 0d       	add	r31, r0
    37e0:	65 9f       	mul	r22, r21
    37e2:	f0 0d       	add	r31, r0
    37e4:	99 27       	eor	r25, r25
    37e6:	72 9f       	mul	r23, r18
    37e8:	b0 0d       	add	r27, r0
    37ea:	e1 1d       	adc	r30, r1
    37ec:	f9 1f       	adc	r31, r25
    37ee:	63 9f       	mul	r22, r19
    37f0:	b0 0d       	add	r27, r0
    37f2:	e1 1d       	adc	r30, r1
    37f4:	f9 1f       	adc	r31, r25
    37f6:	bd 01       	movw	r22, r26
    37f8:	cf 01       	movw	r24, r30
    37fa:	11 24       	eor	r1, r1
    37fc:	08 95       	ret

000037fe <__divmodhi4>:
    37fe:	97 fb       	bst	r25, 7
    3800:	09 2e       	mov	r0, r25
    3802:	07 26       	eor	r0, r23
    3804:	0a d0       	rcall	.+20     	; 0x381a <__divmodhi4_neg1>
    3806:	77 fd       	sbrc	r23, 7
    3808:	04 d0       	rcall	.+8      	; 0x3812 <__divmodhi4_neg2>
    380a:	27 d0       	rcall	.+78     	; 0x385a <__udivmodhi4>
    380c:	06 d0       	rcall	.+12     	; 0x381a <__divmodhi4_neg1>
    380e:	00 20       	and	r0, r0
    3810:	1a f4       	brpl	.+6      	; 0x3818 <__divmodhi4_exit>

00003812 <__divmodhi4_neg2>:
    3812:	70 95       	com	r23
    3814:	61 95       	neg	r22
    3816:	7f 4f       	sbci	r23, 0xFF	; 255

00003818 <__divmodhi4_exit>:
    3818:	08 95       	ret

0000381a <__divmodhi4_neg1>:
    381a:	f6 f7       	brtc	.-4      	; 0x3818 <__divmodhi4_exit>
    381c:	90 95       	com	r25
    381e:	81 95       	neg	r24
    3820:	9f 4f       	sbci	r25, 0xFF	; 255
    3822:	08 95       	ret

00003824 <__divmodsi4>:
    3824:	97 fb       	bst	r25, 7
    3826:	09 2e       	mov	r0, r25
    3828:	05 26       	eor	r0, r21
    382a:	0e d0       	rcall	.+28     	; 0x3848 <__divmodsi4_neg1>
    382c:	57 fd       	sbrc	r21, 7
    382e:	04 d0       	rcall	.+8      	; 0x3838 <__divmodsi4_neg2>
    3830:	28 d0       	rcall	.+80     	; 0x3882 <__udivmodsi4>
    3832:	0a d0       	rcall	.+20     	; 0x3848 <__divmodsi4_neg1>
    3834:	00 1c       	adc	r0, r0
    3836:	38 f4       	brcc	.+14     	; 0x3846 <__divmodsi4_exit>

00003838 <__divmodsi4_neg2>:
    3838:	50 95       	com	r21
    383a:	40 95       	com	r20
    383c:	30 95       	com	r19
    383e:	21 95       	neg	r18
    3840:	3f 4f       	sbci	r19, 0xFF	; 255
    3842:	4f 4f       	sbci	r20, 0xFF	; 255
    3844:	5f 4f       	sbci	r21, 0xFF	; 255

00003846 <__divmodsi4_exit>:
    3846:	08 95       	ret

00003848 <__divmodsi4_neg1>:
    3848:	f6 f7       	brtc	.-4      	; 0x3846 <__divmodsi4_exit>
    384a:	90 95       	com	r25
    384c:	80 95       	com	r24
    384e:	70 95       	com	r23
    3850:	61 95       	neg	r22
    3852:	7f 4f       	sbci	r23, 0xFF	; 255
    3854:	8f 4f       	sbci	r24, 0xFF	; 255
    3856:	9f 4f       	sbci	r25, 0xFF	; 255
    3858:	08 95       	ret

0000385a <__udivmodhi4>:
    385a:	aa 1b       	sub	r26, r26
    385c:	bb 1b       	sub	r27, r27
    385e:	51 e1       	ldi	r21, 0x11	; 17
    3860:	07 c0       	rjmp	.+14     	; 0x3870 <__udivmodhi4_ep>

00003862 <__udivmodhi4_loop>:
    3862:	aa 1f       	adc	r26, r26
    3864:	bb 1f       	adc	r27, r27
    3866:	a6 17       	cp	r26, r22
    3868:	b7 07       	cpc	r27, r23
    386a:	10 f0       	brcs	.+4      	; 0x3870 <__udivmodhi4_ep>
    386c:	a6 1b       	sub	r26, r22
    386e:	b7 0b       	sbc	r27, r23

00003870 <__udivmodhi4_ep>:
    3870:	88 1f       	adc	r24, r24
    3872:	99 1f       	adc	r25, r25
    3874:	5a 95       	dec	r21
    3876:	a9 f7       	brne	.-22     	; 0x3862 <__udivmodhi4_loop>
    3878:	80 95       	com	r24
    387a:	90 95       	com	r25
    387c:	bc 01       	movw	r22, r24
    387e:	cd 01       	movw	r24, r26
    3880:	08 95       	ret

00003882 <__udivmodsi4>:
    3882:	a1 e2       	ldi	r26, 0x21	; 33
    3884:	1a 2e       	mov	r1, r26
    3886:	aa 1b       	sub	r26, r26
    3888:	bb 1b       	sub	r27, r27
    388a:	fd 01       	movw	r30, r26
    388c:	0d c0       	rjmp	.+26     	; 0x38a8 <__udivmodsi4_ep>

0000388e <__udivmodsi4_loop>:
    388e:	aa 1f       	adc	r26, r26
    3890:	bb 1f       	adc	r27, r27
    3892:	ee 1f       	adc	r30, r30
    3894:	ff 1f       	adc	r31, r31
    3896:	a2 17       	cp	r26, r18
    3898:	b3 07       	cpc	r27, r19
    389a:	e4 07       	cpc	r30, r20
    389c:	f5 07       	cpc	r31, r21
    389e:	20 f0       	brcs	.+8      	; 0x38a8 <__udivmodsi4_ep>
    38a0:	a2 1b       	sub	r26, r18
    38a2:	b3 0b       	sbc	r27, r19
    38a4:	e4 0b       	sbc	r30, r20
    38a6:	f5 0b       	sbc	r31, r21

000038a8 <__udivmodsi4_ep>:
    38a8:	66 1f       	adc	r22, r22
    38aa:	77 1f       	adc	r23, r23
    38ac:	88 1f       	adc	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	1a 94       	dec	r1
    38b2:	69 f7       	brne	.-38     	; 0x388e <__udivmodsi4_loop>
    38b4:	60 95       	com	r22
    38b6:	70 95       	com	r23
    38b8:	80 95       	com	r24
    38ba:	90 95       	com	r25
    38bc:	9b 01       	movw	r18, r22
    38be:	ac 01       	movw	r20, r24
    38c0:	bd 01       	movw	r22, r26
    38c2:	cf 01       	movw	r24, r30
    38c4:	08 95       	ret

000038c6 <__prologue_saves__>:
    38c6:	2f 92       	push	r2
    38c8:	3f 92       	push	r3
    38ca:	4f 92       	push	r4
    38cc:	5f 92       	push	r5
    38ce:	6f 92       	push	r6
    38d0:	7f 92       	push	r7
    38d2:	8f 92       	push	r8
    38d4:	9f 92       	push	r9
    38d6:	af 92       	push	r10
    38d8:	bf 92       	push	r11
    38da:	cf 92       	push	r12
    38dc:	df 92       	push	r13
    38de:	ef 92       	push	r14
    38e0:	ff 92       	push	r15
    38e2:	0f 93       	push	r16
    38e4:	1f 93       	push	r17
    38e6:	cf 93       	push	r28
    38e8:	df 93       	push	r29
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	ca 1b       	sub	r28, r26
    38f0:	db 0b       	sbc	r29, r27
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
    38fc:	09 94       	ijmp

000038fe <__epilogue_restores__>:
    38fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3900:	39 88       	ldd	r3, Y+17	; 0x11
    3902:	48 88       	ldd	r4, Y+16	; 0x10
    3904:	5f 84       	ldd	r5, Y+15	; 0x0f
    3906:	6e 84       	ldd	r6, Y+14	; 0x0e
    3908:	7d 84       	ldd	r7, Y+13	; 0x0d
    390a:	8c 84       	ldd	r8, Y+12	; 0x0c
    390c:	9b 84       	ldd	r9, Y+11	; 0x0b
    390e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3910:	b9 84       	ldd	r11, Y+9	; 0x09
    3912:	c8 84       	ldd	r12, Y+8	; 0x08
    3914:	df 80       	ldd	r13, Y+7	; 0x07
    3916:	ee 80       	ldd	r14, Y+6	; 0x06
    3918:	fd 80       	ldd	r15, Y+5	; 0x05
    391a:	0c 81       	ldd	r16, Y+4	; 0x04
    391c:	1b 81       	ldd	r17, Y+3	; 0x03
    391e:	aa 81       	ldd	r26, Y+2	; 0x02
    3920:	b9 81       	ldd	r27, Y+1	; 0x01
    3922:	ce 0f       	add	r28, r30
    3924:	d1 1d       	adc	r29, r1
    3926:	0f b6       	in	r0, 0x3f	; 63
    3928:	f8 94       	cli
    392a:	de bf       	out	0x3e, r29	; 62
    392c:	0f be       	out	0x3f, r0	; 63
    392e:	cd bf       	out	0x3d, r28	; 61
    3930:	ed 01       	movw	r28, r26
    3932:	08 95       	ret

00003934 <_exit>:
    3934:	f8 94       	cli

00003936 <__stop_program>:
    3936:	ff cf       	rjmp	.-2      	; 0x3936 <__stop_program>
