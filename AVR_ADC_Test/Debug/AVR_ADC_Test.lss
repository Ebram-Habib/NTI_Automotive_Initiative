
AVR_ADC_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002592  00002626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800084  00800084  0000264a  2**0
                  ALLOC
  3 .stab         00002154  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000173c  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a62b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 11 	call	0x23ea	; 0x23ea <main>
      8a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_Init>:
void(*ptrCallBack)(u16) = NULL_PTR;
u16 value = 0;


void ADC_Init(const ADC_INIT_CONFIG* adc_config)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ADC_Init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
		 * REFS1:0 = 01 to choose AVCC = 5v as reference voltage
		 * ADLAR   = 0 right adjusted
		 * MUX4:0  = 00000 to choose channel 0 as initialization
		 */
		ADMUX = (1<<REFS0);
     b54:	e7 e2       	ldi	r30, 0x27	; 39
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	80 83       	st	Z, r24
		 * ADEN    = 1 Enable ADC
		 * ADIE    = 0 Disable ADC Interrupt
		 * ADATE   = 0 Disable Auto Trigger
		 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
		 */
		ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     b5c:	e6 e2       	ldi	r30, 0x26	; 38
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	87 e8       	ldi	r24, 0x87	; 135
     b62:	80 83       	st	Z, r24
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <ADC_getDigitalValueSynchNonBlocking>:

u16 ADC_getDigitalValueSynchNonBlocking(u8 ADC_SINGLE_ENDED_CHANNELS)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	00 d0       	rcall	.+0      	; 0xb74 <ADC_getDigitalValueSynchNonBlocking+0x6>
     b74:	0f 92       	push	r0
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01

	ADMUX_REG->FULL_REG |= (0x1F & ADC_SINGLE_ENDED_CHANNELS);
     b7c:	a7 e2       	ldi	r26, 0x27	; 39
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e7 e2       	ldi	r30, 0x27	; 39
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	98 2f       	mov	r25, r24
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	8f 71       	andi	r24, 0x1F	; 31
     b8c:	89 2b       	or	r24, r25
     b8e:	8c 93       	st	X, r24

	ADCSRA_REG->bits.ADSC_BIT = LOGIC_HIGH;
     b90:	e6 e2       	ldi	r30, 0x26	; 38
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	80 81       	ld	r24, Z
     b96:	80 64       	ori	r24, 0x40	; 64
     b98:	80 83       	st	Z, r24

	if(ADCSRA_REG->bits.ADIF_BIT == LOGIC_HIGH)
     b9a:	e6 e2       	ldi	r30, 0x26	; 38
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	80 71       	andi	r24, 0x10	; 16
     ba2:	88 23       	and	r24, r24
     ba4:	09 f4       	brne	.+2      	; 0xba8 <ADC_getDigitalValueSynchNonBlocking+0x3a>
     ba6:	5b c0       	rjmp	.+182    	; 0xc5e <ADC_getDigitalValueSynchNonBlocking+0xf0>
	{
		if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_LOW)
     ba8:	e7 e2       	ldi	r30, 0x27	; 39
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	80 72       	andi	r24, 0x20	; 32
     bb0:	88 23       	and	r24, r24
     bb2:	29 f5       	brne	.+74     	; 0xbfe <ADC_getDigitalValueSynchNonBlocking+0x90>
		{
			value = (0x03 & ADCH);
     bb4:	e5 e2       	ldi	r30, 0x25	; 37
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	83 70       	andi	r24, 0x03	; 3
     bc0:	90 70       	andi	r25, 0x00	; 0
     bc2:	90 93 87 00 	sts	0x0087, r25
     bc6:	80 93 86 00 	sts	0x0086, r24
			value = (value << 8);
     bca:	80 91 86 00 	lds	r24, 0x0086
     bce:	90 91 87 00 	lds	r25, 0x0087
     bd2:	98 2f       	mov	r25, r24
     bd4:	88 27       	eor	r24, r24
     bd6:	90 93 87 00 	sts	0x0087, r25
     bda:	80 93 86 00 	sts	0x0086, r24
			value |= ADCL;
     bde:	e4 e2       	ldi	r30, 0x24	; 36
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	80 91 86 00 	lds	r24, 0x0086
     bec:	90 91 87 00 	lds	r25, 0x0087
     bf0:	82 2b       	or	r24, r18
     bf2:	93 2b       	or	r25, r19
     bf4:	90 93 87 00 	sts	0x0087, r25
     bf8:	80 93 86 00 	sts	0x0086, r24
     bfc:	24 c0       	rjmp	.+72     	; 0xc46 <ADC_getDigitalValueSynchNonBlocking+0xd8>
		}
		else if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_HIGH)
     bfe:	e7 e2       	ldi	r30, 0x27	; 39
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 72       	andi	r24, 0x20	; 32
     c06:	88 23       	and	r24, r24
     c08:	f1 f0       	breq	.+60     	; 0xc46 <ADC_getDigitalValueSynchNonBlocking+0xd8>
		{
			value = ADCH;
     c0a:	e5 e2       	ldi	r30, 0x25	; 37
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	90 93 87 00 	sts	0x0087, r25
     c18:	80 93 86 00 	sts	0x0086, r24
			value = ((ADCL>> 6) | (value << 8));
     c1c:	e4 e2       	ldi	r30, 0x24	; 36
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	82 95       	swap	r24
     c24:	86 95       	lsr	r24
     c26:	86 95       	lsr	r24
     c28:	83 70       	andi	r24, 0x03	; 3
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	80 91 86 00 	lds	r24, 0x0086
     c32:	90 91 87 00 	lds	r25, 0x0087
     c36:	98 2f       	mov	r25, r24
     c38:	88 27       	eor	r24, r24
     c3a:	82 2b       	or	r24, r18
     c3c:	93 2b       	or	r25, r19
     c3e:	90 93 87 00 	sts	0x0087, r25
     c42:	80 93 86 00 	sts	0x0086, r24
		}
		ADCSRA_REG->bits.ADIF_BIT = LOGIC_HIGH;
     c46:	e6 e2       	ldi	r30, 0x26	; 38
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 61       	ori	r24, 0x10	; 16
     c4e:	80 83       	st	Z, r24

		return value;
     c50:	80 91 86 00 	lds	r24, 0x0086
     c54:	90 91 87 00 	lds	r25, 0x0087
     c58:	9b 83       	std	Y+3, r25	; 0x03
     c5a:	8a 83       	std	Y+2, r24	; 0x02
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <ADC_getDigitalValueSynchNonBlocking+0xfc>
	}
	return value;
     c5e:	80 91 86 00 	lds	r24, 0x0086
     c62:	90 91 87 00 	lds	r25, 0x0087
     c66:	9b 83       	std	Y+3, r25	; 0x03
     c68:	8a 83       	std	Y+2, r24	; 0x02
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <ADC_getDigitalValueAsynchCallBack>:
void ADC_getDigitalValueAsynchCallBack(u8 ADC_SINGLE_ENDED_CHANNELS, void(*ptrfn)(u16))
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <ADC_getDigitalValueAsynchCallBack+0x6>
     c80:	0f 92       	push	r0
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	89 83       	std	Y+1, r24	; 0x01
     c88:	7b 83       	std	Y+3, r23	; 0x03
     c8a:	6a 83       	std	Y+2, r22	; 0x02
	ADMUX_REG->FULL_REG |= (0x1F & ADC_SINGLE_ENDED_CHANNELS);
     c8c:	a7 e2       	ldi	r26, 0x27	; 39
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e7 e2       	ldi	r30, 0x27	; 39
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	98 2f       	mov	r25, r24
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	8f 71       	andi	r24, 0x1F	; 31
     c9c:	89 2b       	or	r24, r25
     c9e:	8c 93       	st	X, r24

	ADCSRA_REG->bits.ADIE_BIT = ADC_INT_ENABLE;
     ca0:	e6 e2       	ldi	r30, 0x26	; 38
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	80 83       	st	Z, r24
	ptrCallBack = ptrfn;
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	90 93 85 00 	sts	0x0085, r25
     cb2:	80 93 84 00 	sts	0x0084, r24
	ADCSRA_REG->bits.ADSC_BIT = LOGIC_HIGH;
     cb6:	e6 e2       	ldi	r30, 0x26	; 38
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	80 64       	ori	r24, 0x40	; 64
     cbe:	80 83       	st	Z, r24
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <__vector_16>:

ISR(ADC_vect)
{
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	2f 93       	push	r18
     cd8:	3f 93       	push	r19
     cda:	4f 93       	push	r20
     cdc:	5f 93       	push	r21
     cde:	6f 93       	push	r22
     ce0:	7f 93       	push	r23
     ce2:	8f 93       	push	r24
     ce4:	9f 93       	push	r25
     ce6:	af 93       	push	r26
     ce8:	bf 93       	push	r27
     cea:	ef 93       	push	r30
     cec:	ff 93       	push	r31
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	cd b7       	in	r28, 0x3d	; 61
     cf4:	de b7       	in	r29, 0x3e	; 62
	if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_LOW)
     cf6:	e7 e2       	ldi	r30, 0x27	; 39
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	80 72       	andi	r24, 0x20	; 32
     cfe:	88 23       	and	r24, r24
     d00:	29 f5       	brne	.+74     	; 0xd4c <__vector_16+0x80>
		{
			value = (0x03 & ADCH);
     d02:	e5 e2       	ldi	r30, 0x25	; 37
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	83 70       	andi	r24, 0x03	; 3
     d0e:	90 70       	andi	r25, 0x00	; 0
     d10:	90 93 87 00 	sts	0x0087, r25
     d14:	80 93 86 00 	sts	0x0086, r24
			value = (value << 8);
     d18:	80 91 86 00 	lds	r24, 0x0086
     d1c:	90 91 87 00 	lds	r25, 0x0087
     d20:	98 2f       	mov	r25, r24
     d22:	88 27       	eor	r24, r24
     d24:	90 93 87 00 	sts	0x0087, r25
     d28:	80 93 86 00 	sts	0x0086, r24
			value |= ADCL;
     d2c:	e4 e2       	ldi	r30, 0x24	; 36
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	80 91 86 00 	lds	r24, 0x0086
     d3a:	90 91 87 00 	lds	r25, 0x0087
     d3e:	82 2b       	or	r24, r18
     d40:	93 2b       	or	r25, r19
     d42:	90 93 87 00 	sts	0x0087, r25
     d46:	80 93 86 00 	sts	0x0086, r24
     d4a:	24 c0       	rjmp	.+72     	; 0xd94 <__vector_16+0xc8>
		}
		else if(ADMUX_REG->bits.ADLAR_BIT == LOGIC_HIGH)
     d4c:	e7 e2       	ldi	r30, 0x27	; 39
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 72       	andi	r24, 0x20	; 32
     d54:	88 23       	and	r24, r24
     d56:	f1 f0       	breq	.+60     	; 0xd94 <__vector_16+0xc8>
		{
			value = ADCH;
     d58:	e5 e2       	ldi	r30, 0x25	; 37
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	90 93 87 00 	sts	0x0087, r25
     d66:	80 93 86 00 	sts	0x0086, r24
			value = ((ADCL>> 6) | (value << 8));
     d6a:	e4 e2       	ldi	r30, 0x24	; 36
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	82 95       	swap	r24
     d72:	86 95       	lsr	r24
     d74:	86 95       	lsr	r24
     d76:	83 70       	andi	r24, 0x03	; 3
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	80 91 86 00 	lds	r24, 0x0086
     d80:	90 91 87 00 	lds	r25, 0x0087
     d84:	98 2f       	mov	r25, r24
     d86:	88 27       	eor	r24, r24
     d88:	82 2b       	or	r24, r18
     d8a:	93 2b       	or	r25, r19
     d8c:	90 93 87 00 	sts	0x0087, r25
     d90:	80 93 86 00 	sts	0x0086, r24
		}

	if(ptrCallBack != NULL_PTR)
     d94:	80 91 84 00 	lds	r24, 0x0084
     d98:	90 91 85 00 	lds	r25, 0x0085
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <__vector_16+0xe6>
	{
		ptrCallBack(value);
     da0:	e0 91 84 00 	lds	r30, 0x0084
     da4:	f0 91 85 00 	lds	r31, 0x0085
     da8:	80 91 86 00 	lds	r24, 0x0086
     dac:	90 91 87 00 	lds	r25, 0x0087
     db0:	09 95       	icall
	}
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	0f 90       	pop	r0
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	0f 90       	pop	r0
     dd4:	1f 90       	pop	r1
     dd6:	18 95       	reti

00000dd8 <GIE_Enable>:

#include "GIE_priv.h"
#include "GIE_int.h"

void GIE_Enable(void)
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
	SREG_REG |= (1<<I_Bit);
     de0:	af e5       	ldi	r26, 0x5F	; 95
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	ef e5       	ldi	r30, 0x5F	; 95
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	80 68       	ori	r24, 0x80	; 128
     dec:	8c 93       	st	X, r24
}
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <GIE_Disable>:

void GIE_Disable(void)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	SREG_REG &= ~(1<<I_Bit);
     dfc:	af e5       	ldi	r26, 0x5F	; 95
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ef e5       	ldi	r30, 0x5F	; 95
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	8c 93       	st	X, r24
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <DIO_voidSetPinDirection>:

#include "GPIO_Int.h"


void DIO_voidSetPinDirection(port* Ptr_PortId,u8 PIN_ID,u8 DIRECTION)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <DIO_voidSetPinDirection+0x6>
     e16:	00 d0       	rcall	.+0      	; 0xe18 <DIO_voidSetPinDirection+0x8>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <DIO_voidSetPinDirection+0xa>
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	9a 83       	std	Y+2, r25	; 0x02
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	6b 83       	std	Y+3, r22	; 0x03
     e24:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     e26:	8b 81       	ldd	r24, Y+3	; 0x03
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	3e 83       	std	Y+6, r19	; 0x06
     e2e:	2d 83       	std	Y+5, r18	; 0x05
     e30:	8d 81       	ldd	r24, Y+5	; 0x05
     e32:	9e 81       	ldd	r25, Y+6	; 0x06
     e34:	83 30       	cpi	r24, 0x03	; 3
     e36:	91 05       	cpc	r25, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <DIO_voidSetPinDirection+0x2c>
     e3a:	51 c0       	rjmp	.+162    	; 0xede <DIO_voidSetPinDirection+0xce>
     e3c:	2d 81       	ldd	r18, Y+5	; 0x05
     e3e:	3e 81       	ldd	r19, Y+6	; 0x06
     e40:	24 30       	cpi	r18, 0x04	; 4
     e42:	31 05       	cpc	r19, r1
     e44:	7c f4       	brge	.+30     	; 0xe64 <DIO_voidSetPinDirection+0x54>
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	91 05       	cpc	r25, r1
     e4e:	71 f1       	breq	.+92     	; 0xeac <DIO_voidSetPinDirection+0x9c>
     e50:	2d 81       	ldd	r18, Y+5	; 0x05
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	ac f5       	brge	.+106    	; 0xec4 <DIO_voidSetPinDirection+0xb4>
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	d1 f0       	breq	.+52     	; 0xe96 <DIO_voidSetPinDirection+0x86>
     e62:	81 c0       	rjmp	.+258    	; 0xf66 <DIO_voidSetPinDirection+0x156>
     e64:	2d 81       	ldd	r18, Y+5	; 0x05
     e66:	3e 81       	ldd	r19, Y+6	; 0x06
     e68:	25 30       	cpi	r18, 0x05	; 5
     e6a:	31 05       	cpc	r19, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <DIO_voidSetPinDirection+0x60>
     e6e:	52 c0       	rjmp	.+164    	; 0xf14 <DIO_voidSetPinDirection+0x104>
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	85 30       	cpi	r24, 0x05	; 5
     e76:	91 05       	cpc	r25, r1
     e78:	0c f4       	brge	.+2      	; 0xe7c <DIO_voidSetPinDirection+0x6c>
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <DIO_voidSetPinDirection+0xea>
     e7c:	2d 81       	ldd	r18, Y+5	; 0x05
     e7e:	3e 81       	ldd	r19, Y+6	; 0x06
     e80:	26 30       	cpi	r18, 0x06	; 6
     e82:	31 05       	cpc	r19, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <DIO_voidSetPinDirection+0x78>
     e86:	54 c0       	rjmp	.+168    	; 0xf30 <DIO_voidSetPinDirection+0x120>
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	87 30       	cpi	r24, 0x07	; 7
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_voidSetPinDirection+0x84>
     e92:	5d c0       	rjmp	.+186    	; 0xf4e <DIO_voidSetPinDirection+0x13e>
     e94:	68 c0       	rjmp	.+208    	; 0xf66 <DIO_voidSetPinDirection+0x156>
	{
	case Pin0:
		Ptr_PortId->DDR_reg.bits.bit0 = DIRECTION;
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	81 70       	andi	r24, 0x01	; 1
     e9a:	e9 81       	ldd	r30, Y+1	; 0x01
     e9c:	fa 81       	ldd	r31, Y+2	; 0x02
     e9e:	98 2f       	mov	r25, r24
     ea0:	91 70       	andi	r25, 0x01	; 1
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
     ea4:	8e 7f       	andi	r24, 0xFE	; 254
     ea6:	89 2b       	or	r24, r25
     ea8:	81 83       	std	Z+1, r24	; 0x01
     eaa:	5d c0       	rjmp	.+186    	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin1:
		Ptr_PortId->DDR_reg.bits.bit1 = DIRECTION;
     eac:	8c 81       	ldd	r24, Y+4	; 0x04
     eae:	81 70       	andi	r24, 0x01	; 1
     eb0:	e9 81       	ldd	r30, Y+1	; 0x01
     eb2:	fa 81       	ldd	r31, Y+2	; 0x02
     eb4:	81 70       	andi	r24, 0x01	; 1
     eb6:	98 2f       	mov	r25, r24
     eb8:	99 0f       	add	r25, r25
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	8d 7f       	andi	r24, 0xFD	; 253
     ebe:	89 2b       	or	r24, r25
     ec0:	81 83       	std	Z+1, r24	; 0x01
     ec2:	51 c0       	rjmp	.+162    	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin2:
		Ptr_PortId->DDR_reg.bits.bit2 = DIRECTION;
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	81 70       	andi	r24, 0x01	; 1
     ec8:	e9 81       	ldd	r30, Y+1	; 0x01
     eca:	fa 81       	ldd	r31, Y+2	; 0x02
     ecc:	81 70       	andi	r24, 0x01	; 1
     ece:	98 2f       	mov	r25, r24
     ed0:	99 0f       	add	r25, r25
     ed2:	99 0f       	add	r25, r25
     ed4:	81 81       	ldd	r24, Z+1	; 0x01
     ed6:	8b 7f       	andi	r24, 0xFB	; 251
     ed8:	89 2b       	or	r24, r25
     eda:	81 83       	std	Z+1, r24	; 0x01
     edc:	44 c0       	rjmp	.+136    	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin3:
		Ptr_PortId->DDR_reg.bits.bit3 = DIRECTION;
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	81 70       	andi	r24, 0x01	; 1
     ee2:	e9 81       	ldd	r30, Y+1	; 0x01
     ee4:	fa 81       	ldd	r31, Y+2	; 0x02
     ee6:	81 70       	andi	r24, 0x01	; 1
     ee8:	98 2f       	mov	r25, r24
     eea:	99 0f       	add	r25, r25
     eec:	99 0f       	add	r25, r25
     eee:	99 0f       	add	r25, r25
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	87 7f       	andi	r24, 0xF7	; 247
     ef4:	89 2b       	or	r24, r25
     ef6:	81 83       	std	Z+1, r24	; 0x01
     ef8:	36 c0       	rjmp	.+108    	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin4:
		Ptr_PortId->DDR_reg.bits.bit4 = DIRECTION;
     efa:	8c 81       	ldd	r24, Y+4	; 0x04
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	98 2f       	mov	r25, r24
     f06:	92 95       	swap	r25
     f08:	90 7f       	andi	r25, 0xF0	; 240
     f0a:	81 81       	ldd	r24, Z+1	; 0x01
     f0c:	8f 7e       	andi	r24, 0xEF	; 239
     f0e:	89 2b       	or	r24, r25
     f10:	81 83       	std	Z+1, r24	; 0x01
     f12:	29 c0       	rjmp	.+82     	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin5:
		Ptr_PortId->DDR_reg.bits.bit5 = DIRECTION;
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	81 70       	andi	r24, 0x01	; 1
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	98 2f       	mov	r25, r24
     f20:	92 95       	swap	r25
     f22:	99 0f       	add	r25, r25
     f24:	90 7e       	andi	r25, 0xE0	; 224
     f26:	81 81       	ldd	r24, Z+1	; 0x01
     f28:	8f 7d       	andi	r24, 0xDF	; 223
     f2a:	89 2b       	or	r24, r25
     f2c:	81 83       	std	Z+1, r24	; 0x01
     f2e:	1b c0       	rjmp	.+54     	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin6:
		Ptr_PortId->DDR_reg.bits.bit6 = DIRECTION;
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	81 70       	andi	r24, 0x01	; 1
     f34:	e9 81       	ldd	r30, Y+1	; 0x01
     f36:	fa 81       	ldd	r31, Y+2	; 0x02
     f38:	81 70       	andi	r24, 0x01	; 1
     f3a:	98 2f       	mov	r25, r24
     f3c:	92 95       	swap	r25
     f3e:	99 0f       	add	r25, r25
     f40:	99 0f       	add	r25, r25
     f42:	90 7c       	andi	r25, 0xC0	; 192
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	8f 7b       	andi	r24, 0xBF	; 191
     f48:	89 2b       	or	r24, r25
     f4a:	81 83       	std	Z+1, r24	; 0x01
     f4c:	0c c0       	rjmp	.+24     	; 0xf66 <DIO_voidSetPinDirection+0x156>
		break;
	case pin7:
		Ptr_PortId->DDR_reg.bits.bit7 = DIRECTION;
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	e9 81       	ldd	r30, Y+1	; 0x01
     f54:	fa 81       	ldd	r31, Y+2	; 0x02
     f56:	98 2f       	mov	r25, r24
     f58:	97 95       	ror	r25
     f5a:	99 27       	eor	r25, r25
     f5c:	97 95       	ror	r25
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	8f 77       	andi	r24, 0x7F	; 127
     f62:	89 2b       	or	r24, r25
     f64:	81 83       	std	Z+1, r24	; 0x01
		break;
	}
}
     f66:	26 96       	adiw	r28, 0x06	; 6
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(port* Ptr_PortId, u8 PIN_ID, u8 PIN_VAL)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <DIO_voidSetPinValue+0x6>
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <DIO_voidSetPinValue+0x8>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <DIO_voidSetPinValue+0xa>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	6b 83       	std	Y+3, r22	; 0x03
     f8c:	4c 83       	std	Y+4, r20	; 0x04
	switch(PIN_ID)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3e 83       	std	Y+6, r19	; 0x06
     f96:	2d 83       	std	Y+5, r18	; 0x05
     f98:	8d 81       	ldd	r24, Y+5	; 0x05
     f9a:	9e 81       	ldd	r25, Y+6	; 0x06
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_voidSetPinValue+0x2c>
     fa2:	51 c0       	rjmp	.+162    	; 0x1046 <DIO_voidSetPinValue+0xce>
     fa4:	2d 81       	ldd	r18, Y+5	; 0x05
     fa6:	3e 81       	ldd	r19, Y+6	; 0x06
     fa8:	24 30       	cpi	r18, 0x04	; 4
     faa:	31 05       	cpc	r19, r1
     fac:	7c f4       	brge	.+30     	; 0xfcc <DIO_voidSetPinValue+0x54>
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	91 05       	cpc	r25, r1
     fb6:	71 f1       	breq	.+92     	; 0x1014 <DIO_voidSetPinValue+0x9c>
     fb8:	2d 81       	ldd	r18, Y+5	; 0x05
     fba:	3e 81       	ldd	r19, Y+6	; 0x06
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	ac f5       	brge	.+106    	; 0x102c <DIO_voidSetPinValue+0xb4>
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	d1 f0       	breq	.+52     	; 0xffe <DIO_voidSetPinValue+0x86>
     fca:	81 c0       	rjmp	.+258    	; 0x10ce <DIO_voidSetPinValue+0x156>
     fcc:	2d 81       	ldd	r18, Y+5	; 0x05
     fce:	3e 81       	ldd	r19, Y+6	; 0x06
     fd0:	25 30       	cpi	r18, 0x05	; 5
     fd2:	31 05       	cpc	r19, r1
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <DIO_voidSetPinValue+0x60>
     fd6:	52 c0       	rjmp	.+164    	; 0x107c <DIO_voidSetPinValue+0x104>
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	85 30       	cpi	r24, 0x05	; 5
     fde:	91 05       	cpc	r25, r1
     fe0:	0c f4       	brge	.+2      	; 0xfe4 <DIO_voidSetPinValue+0x6c>
     fe2:	3f c0       	rjmp	.+126    	; 0x1062 <DIO_voidSetPinValue+0xea>
     fe4:	2d 81       	ldd	r18, Y+5	; 0x05
     fe6:	3e 81       	ldd	r19, Y+6	; 0x06
     fe8:	26 30       	cpi	r18, 0x06	; 6
     fea:	31 05       	cpc	r19, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <DIO_voidSetPinValue+0x78>
     fee:	54 c0       	rjmp	.+168    	; 0x1098 <DIO_voidSetPinValue+0x120>
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	87 30       	cpi	r24, 0x07	; 7
     ff6:	91 05       	cpc	r25, r1
     ff8:	09 f4       	brne	.+2      	; 0xffc <DIO_voidSetPinValue+0x84>
     ffa:	5d c0       	rjmp	.+186    	; 0x10b6 <DIO_voidSetPinValue+0x13e>
     ffc:	68 c0       	rjmp	.+208    	; 0x10ce <DIO_voidSetPinValue+0x156>
	{
	case Pin0:
		Ptr_PortId->PORT_reg.bits.bit0 = PIN_VAL;
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	98 2f       	mov	r25, r24
    1008:	91 70       	andi	r25, 0x01	; 1
    100a:	82 81       	ldd	r24, Z+2	; 0x02
    100c:	8e 7f       	andi	r24, 0xFE	; 254
    100e:	89 2b       	or	r24, r25
    1010:	82 83       	std	Z+2, r24	; 0x02
    1012:	5d c0       	rjmp	.+186    	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin1:
		Ptr_PortId->PORT_reg.bits.bit1 = PIN_VAL;
    1014:	8c 81       	ldd	r24, Y+4	; 0x04
    1016:	81 70       	andi	r24, 0x01	; 1
    1018:	e9 81       	ldd	r30, Y+1	; 0x01
    101a:	fa 81       	ldd	r31, Y+2	; 0x02
    101c:	81 70       	andi	r24, 0x01	; 1
    101e:	98 2f       	mov	r25, r24
    1020:	99 0f       	add	r25, r25
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	8d 7f       	andi	r24, 0xFD	; 253
    1026:	89 2b       	or	r24, r25
    1028:	82 83       	std	Z+2, r24	; 0x02
    102a:	51 c0       	rjmp	.+162    	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin2:
		Ptr_PortId->PORT_reg.bits.bit2 = PIN_VAL;
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	81 70       	andi	r24, 0x01	; 1
    1036:	98 2f       	mov	r25, r24
    1038:	99 0f       	add	r25, r25
    103a:	99 0f       	add	r25, r25
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	8b 7f       	andi	r24, 0xFB	; 251
    1040:	89 2b       	or	r24, r25
    1042:	82 83       	std	Z+2, r24	; 0x02
    1044:	44 c0       	rjmp	.+136    	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin3:
		Ptr_PortId->PORT_reg.bits.bit3 = PIN_VAL;
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	81 70       	andi	r24, 0x01	; 1
    104a:	e9 81       	ldd	r30, Y+1	; 0x01
    104c:	fa 81       	ldd	r31, Y+2	; 0x02
    104e:	81 70       	andi	r24, 0x01	; 1
    1050:	98 2f       	mov	r25, r24
    1052:	99 0f       	add	r25, r25
    1054:	99 0f       	add	r25, r25
    1056:	99 0f       	add	r25, r25
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	87 7f       	andi	r24, 0xF7	; 247
    105c:	89 2b       	or	r24, r25
    105e:	82 83       	std	Z+2, r24	; 0x02
    1060:	36 c0       	rjmp	.+108    	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin4:
		Ptr_PortId->PORT_reg.bits.bit4 = PIN_VAL;
    1062:	8c 81       	ldd	r24, Y+4	; 0x04
    1064:	81 70       	andi	r24, 0x01	; 1
    1066:	e9 81       	ldd	r30, Y+1	; 0x01
    1068:	fa 81       	ldd	r31, Y+2	; 0x02
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	98 2f       	mov	r25, r24
    106e:	92 95       	swap	r25
    1070:	90 7f       	andi	r25, 0xF0	; 240
    1072:	82 81       	ldd	r24, Z+2	; 0x02
    1074:	8f 7e       	andi	r24, 0xEF	; 239
    1076:	89 2b       	or	r24, r25
    1078:	82 83       	std	Z+2, r24	; 0x02
    107a:	29 c0       	rjmp	.+82     	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin5:
		Ptr_PortId->PORT_reg.bits.bit5 = PIN_VAL;
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	81 70       	andi	r24, 0x01	; 1
    1080:	e9 81       	ldd	r30, Y+1	; 0x01
    1082:	fa 81       	ldd	r31, Y+2	; 0x02
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	98 2f       	mov	r25, r24
    1088:	92 95       	swap	r25
    108a:	99 0f       	add	r25, r25
    108c:	90 7e       	andi	r25, 0xE0	; 224
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	8f 7d       	andi	r24, 0xDF	; 223
    1092:	89 2b       	or	r24, r25
    1094:	82 83       	std	Z+2, r24	; 0x02
    1096:	1b c0       	rjmp	.+54     	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin6:
		Ptr_PortId->PORT_reg.bits.bit6 = PIN_VAL;
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	e9 81       	ldd	r30, Y+1	; 0x01
    109e:	fa 81       	ldd	r31, Y+2	; 0x02
    10a0:	81 70       	andi	r24, 0x01	; 1
    10a2:	98 2f       	mov	r25, r24
    10a4:	92 95       	swap	r25
    10a6:	99 0f       	add	r25, r25
    10a8:	99 0f       	add	r25, r25
    10aa:	90 7c       	andi	r25, 0xC0	; 192
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	8f 7b       	andi	r24, 0xBF	; 191
    10b0:	89 2b       	or	r24, r25
    10b2:	82 83       	std	Z+2, r24	; 0x02
    10b4:	0c c0       	rjmp	.+24     	; 0x10ce <DIO_voidSetPinValue+0x156>
		break;
	case pin7:
		Ptr_PortId->PORT_reg.bits.bit7 = PIN_VAL;
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	81 70       	andi	r24, 0x01	; 1
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	98 2f       	mov	r25, r24
    10c0:	97 95       	ror	r25
    10c2:	99 27       	eor	r25, r25
    10c4:	97 95       	ror	r25
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	8f 77       	andi	r24, 0x7F	; 127
    10ca:	89 2b       	or	r24, r25
    10cc:	82 83       	std	Z+2, r24	; 0x02
		break;
	}
}
    10ce:	26 96       	adiw	r28, 0x06	; 6
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DIO_voidGetPinValue>:

u8 DIO_voidGetPinValue(port* Ptr_PortId, u8 PIN_ID)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_voidGetPinValue+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DIO_voidGetPinValue+0x8>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DIO_voidGetPinValue+0xa>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	9b 83       	std	Y+3, r25	; 0x03
    10f0:	8a 83       	std	Y+2, r24	; 0x02
    10f2:	6c 83       	std	Y+4, r22	; 0x04
	u8 u8PinValue;

	switch(PIN_ID)
    10f4:	8c 81       	ldd	r24, Y+4	; 0x04
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3e 83       	std	Y+6, r19	; 0x06
    10fc:	2d 83       	std	Y+5, r18	; 0x05
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <DIO_voidGetPinValue+0x2a>
    1108:	3e c0       	rjmp	.+124    	; 0x1186 <DIO_voidGetPinValue+0xa6>
    110a:	2d 81       	ldd	r18, Y+5	; 0x05
    110c:	3e 81       	ldd	r19, Y+6	; 0x06
    110e:	24 30       	cpi	r18, 0x04	; 4
    1110:	31 05       	cpc	r19, r1
    1112:	7c f4       	brge	.+30     	; 0x1132 <DIO_voidGetPinValue+0x52>
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	91 05       	cpc	r25, r1
    111c:	29 f1       	breq	.+74     	; 0x1168 <DIO_voidGetPinValue+0x88>
    111e:	2d 81       	ldd	r18, Y+5	; 0x05
    1120:	3e 81       	ldd	r19, Y+6	; 0x06
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	3c f5       	brge	.+78     	; 0x1176 <DIO_voidGetPinValue+0x96>
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	b1 f0       	breq	.+44     	; 0x115c <DIO_voidGetPinValue+0x7c>
    1130:	55 c0       	rjmp	.+170    	; 0x11dc <DIO_voidGetPinValue+0xfc>
    1132:	2d 81       	ldd	r18, Y+5	; 0x05
    1134:	3e 81       	ldd	r19, Y+6	; 0x06
    1136:	25 30       	cpi	r18, 0x05	; 5
    1138:	31 05       	cpc	r19, r1
    113a:	b1 f1       	breq	.+108    	; 0x11a8 <DIO_voidGetPinValue+0xc8>
    113c:	8d 81       	ldd	r24, Y+5	; 0x05
    113e:	9e 81       	ldd	r25, Y+6	; 0x06
    1140:	85 30       	cpi	r24, 0x05	; 5
    1142:	91 05       	cpc	r25, r1
    1144:	4c f1       	brlt	.+82     	; 0x1198 <DIO_voidGetPinValue+0xb8>
    1146:	2d 81       	ldd	r18, Y+5	; 0x05
    1148:	3e 81       	ldd	r19, Y+6	; 0x06
    114a:	26 30       	cpi	r18, 0x06	; 6
    114c:	31 05       	cpc	r19, r1
    114e:	a9 f1       	breq	.+106    	; 0x11ba <DIO_voidGetPinValue+0xda>
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	91 05       	cpc	r25, r1
    1158:	d1 f1       	breq	.+116    	; 0x11ce <DIO_voidGetPinValue+0xee>
    115a:	40 c0       	rjmp	.+128    	; 0x11dc <DIO_voidGetPinValue+0xfc>
	{
	case Pin0:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit0;
    115c:	ea 81       	ldd	r30, Y+2	; 0x02
    115e:	fb 81       	ldd	r31, Y+3	; 0x03
    1160:	80 81       	ld	r24, Z
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	3a c0       	rjmp	.+116    	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin1:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit1;
    1168:	ea 81       	ldd	r30, Y+2	; 0x02
    116a:	fb 81       	ldd	r31, Y+3	; 0x03
    116c:	80 81       	ld	r24, Z
    116e:	86 95       	lsr	r24
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	33 c0       	rjmp	.+102    	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin2:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit2;
    1176:	ea 81       	ldd	r30, Y+2	; 0x02
    1178:	fb 81       	ldd	r31, Y+3	; 0x03
    117a:	80 81       	ld	r24, Z
    117c:	86 95       	lsr	r24
    117e:	86 95       	lsr	r24
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	2b c0       	rjmp	.+86     	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin3:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit3;
    1186:	ea 81       	ldd	r30, Y+2	; 0x02
    1188:	fb 81       	ldd	r31, Y+3	; 0x03
    118a:	80 81       	ld	r24, Z
    118c:	86 95       	lsr	r24
    118e:	86 95       	lsr	r24
    1190:	86 95       	lsr	r24
    1192:	81 70       	andi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	22 c0       	rjmp	.+68     	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin4:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit4;
    1198:	ea 81       	ldd	r30, Y+2	; 0x02
    119a:	fb 81       	ldd	r31, Y+3	; 0x03
    119c:	80 81       	ld	r24, Z
    119e:	82 95       	swap	r24
    11a0:	8f 70       	andi	r24, 0x0F	; 15
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	1a c0       	rjmp	.+52     	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin5:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit5;
    11a8:	ea 81       	ldd	r30, Y+2	; 0x02
    11aa:	fb 81       	ldd	r31, Y+3	; 0x03
    11ac:	80 81       	ld	r24, Z
    11ae:	82 95       	swap	r24
    11b0:	86 95       	lsr	r24
    11b2:	87 70       	andi	r24, 0x07	; 7
    11b4:	81 70       	andi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	11 c0       	rjmp	.+34     	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin6:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit6;
    11ba:	ea 81       	ldd	r30, Y+2	; 0x02
    11bc:	fb 81       	ldd	r31, Y+3	; 0x03
    11be:	80 81       	ld	r24, Z
    11c0:	82 95       	swap	r24
    11c2:	86 95       	lsr	r24
    11c4:	86 95       	lsr	r24
    11c6:	83 70       	andi	r24, 0x03	; 3
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <DIO_voidGetPinValue+0xfc>
		break;
	case pin7:
		u8PinValue = Ptr_PortId->PIN_reg.bits.bit7;
    11ce:	ea 81       	ldd	r30, Y+2	; 0x02
    11d0:	fb 81       	ldd	r31, Y+3	; 0x03
    11d2:	80 81       	ld	r24, Z
    11d4:	88 1f       	adc	r24, r24
    11d6:	88 27       	eor	r24, r24
    11d8:	88 1f       	adc	r24, r24
    11da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return u8PinValue;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11de:	26 96       	adiw	r28, 0x06	; 6
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	f8 94       	cli
    11e4:	de bf       	out	0x3e, r29	; 62
    11e6:	0f be       	out	0x3f, r0	; 63
    11e8:	cd bf       	out	0x3d, r28	; 61
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(port* Ptr_PortId, u8 Copy_u8Direction)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <DIO_voidSetPortDirection+0x6>
    11f6:	0f 92       	push	r0
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->DDR_reg.Full_Reg = Copy_u8Direction;
    1202:	e9 81       	ldd	r30, Y+1	; 0x01
    1204:	fa 81       	ldd	r31, Y+2	; 0x02
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	81 83       	std	Z+1, r24	; 0x01
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(port* Ptr_PortId, u8 Copy_u8Value)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <DIO_voidSetPortValue+0x6>
    121c:	0f 92       	push	r0
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6b 83       	std	Y+3, r22	; 0x03
	Ptr_PortId->PORT_reg.Full_Reg = Copy_u8Value;
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	82 83       	std	Z+2, r24	; 0x02
}
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <DIO_voidGetPortValue>:

u8 DIO_voidGetPortValue(port* Ptr_PortId)
{
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	00 d0       	rcall	.+0      	; 0x1242 <DIO_voidGetPortValue+0x6>
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	9a 83       	std	Y+2, r25	; 0x02
    1248:	89 83       	std	Y+1, r24	; 0x01
	return Ptr_PortId->PIN_reg.Full_Reg;
    124a:	e9 81       	ldd	r30, Y+1	; 0x01
    124c:	fa 81       	ldd	r31, Y+2	; 0x02
    124e:	80 81       	ld	r24, Z
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <H_LCD_void_Init>:

u8 u8LCD_DataPins[4] = {LCD_D4_PIN,LCD_D5_PIN,LCD_D6_PIN,LCD_D7_PIN};
s8 digit [20] = {0};

void H_LCD_void_Init(void)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	2e 97       	sbiw	r28, 0x0e	; 14
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61

	//To Be Implemented*/
	/*
#elif (LCD_MODE == _4_BIT_MODE)
	 */
	DIO_voidSetPinDirection(pPORTA, LCD_RS_PIN, output);
    126e:	80 91 7c 00 	lds	r24, 0x007C
    1272:	90 91 7d 00 	lds	r25, 0x007D
    1276:	63 e0       	ldi	r22, 0x03	; 3
    1278:	41 e0       	ldi	r20, 0x01	; 1
    127a:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(pPORTA, LCD_EN_PIN, output);
    127e:	80 91 7c 00 	lds	r24, 0x007C
    1282:	90 91 7d 00 	lds	r25, 0x007D
    1286:	62 e0       	ldi	r22, 0x02	; 2
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_voidSetPinDirection>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a8 e4       	ldi	r26, 0x48	; 72
    1294:	b2 e4       	ldi	r27, 0x42	; 66
    1296:	8b 87       	std	Y+11, r24	; 0x0b
    1298:	9c 87       	std	Y+12, r25	; 0x0c
    129a:	ad 87       	std	Y+13, r26	; 0x0d
    129c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    129e:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	4a e7       	ldi	r20, 0x7A	; 122
    12ac:	55 e4       	ldi	r21, 0x45	; 69
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	8f 83       	std	Y+7, r24	; 0x07
    12b8:	98 87       	std	Y+8, r25	; 0x08
    12ba:	a9 87       	std	Y+9, r26	; 0x09
    12bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e8       	ldi	r20, 0x80	; 128
    12cc:	5f e3       	ldi	r21, 0x3F	; 63
    12ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12d2:	88 23       	and	r24, r24
    12d4:	2c f4       	brge	.+10     	; 0x12e0 <H_LCD_void_Init+0x86>
		__ticks = 1;
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9e 83       	std	Y+6, r25	; 0x06
    12dc:	8d 83       	std	Y+5, r24	; 0x05
    12de:	3f c0       	rjmp	.+126    	; 0x135e <H_LCD_void_Init+0x104>
	else if (__tmp > 65535)
    12e0:	6f 81       	ldd	r22, Y+7	; 0x07
    12e2:	78 85       	ldd	r23, Y+8	; 0x08
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	4f e7       	ldi	r20, 0x7F	; 127
    12ee:	57 e4       	ldi	r21, 0x47	; 71
    12f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12f4:	18 16       	cp	r1, r24
    12f6:	4c f5       	brge	.+82     	; 0x134a <H_LCD_void_Init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e2       	ldi	r20, 0x20	; 32
    1306:	51 e4       	ldi	r21, 0x41	; 65
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	bc 01       	movw	r22, r24
    1312:	cd 01       	movw	r24, r26
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	0f c0       	rjmp	.+30     	; 0x1340 <H_LCD_void_Init+0xe6>
    1322:	80 e9       	ldi	r24, 0x90	; 144
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <H_LCD_void_Init+0xd4>
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	69 f7       	brne	.-38     	; 0x1322 <H_LCD_void_Init+0xc8>
    1348:	14 c0       	rjmp	.+40     	; 0x1372 <H_LCD_void_Init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134a:	6f 81       	ldd	r22, Y+7	; 0x07
    134c:	78 85       	ldd	r23, Y+8	; 0x08
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	9a 83       	std	Y+2, r25	; 0x02
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	9a 81       	ldd	r25, Y+2	; 0x02
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	f1 f7       	brne	.-4      	; 0x136a <H_LCD_void_Init+0x110>
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

	DIO_voidSetPortDirection(pPORTB, 0x17); /* 0b0001 0111 = 0x17 */
    1372:	80 91 7e 00 	lds	r24, 0x007E
    1376:	90 91 7f 00 	lds	r25, 0x007F
    137a:	67 e1       	ldi	r22, 0x17	; 23
    137c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_voidSetPortDirection>
	//DIO_voidSetPortValue(pPORTB, 0x00);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1380:	80 91 7c 00 	lds	r24, 0x007C
    1384:	90 91 7d 00 	lds	r25, 0x007D
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>


	/* Initializing the LCD */
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1390:	82 e3       	ldi	r24, 0x32	; 50
    1392:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1396:	82 e3       	ldi	r24, 0x32	; 50
    1398:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    139c:	88 e2       	ldi	r24, 0x28	; 40
    139e:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CURSOR_ON);
    13a2:	8e e0       	ldi	r24, 0x0E	; 14
    13a4:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
	H_LCD_void_gotoXY(0,0);
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <H_LCD_void_gotoXY>

	/*
 #endif*/

}
    13b6:	2e 96       	adiw	r28, 0x0e	; 14
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	de bf       	out	0x3e, r29	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	cd bf       	out	0x3d, r28	; 61
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	6d 97       	sbiw	r28, 0x1d	; 29
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, high);
    13de:	80 91 7c 00 	lds	r24, 0x007C
    13e2:	90 91 7d 00 	lds	r25, 0x007D
    13e6:	63 e0       	ldi	r22, 0x03	; 3
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a0 e8       	ldi	r26, 0x80	; 128
    13f4:	bf e3       	ldi	r27, 0x3F	; 63
    13f6:	89 8f       	std	Y+25, r24	; 0x19
    13f8:	9a 8f       	std	Y+26, r25	; 0x1a
    13fa:	ab 8f       	std	Y+27, r26	; 0x1b
    13fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1400:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1402:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1404:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a e7       	ldi	r20, 0x7A	; 122
    140c:	55 e4       	ldi	r21, 0x45	; 69
    140e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	8d 8b       	std	Y+21, r24	; 0x15
    1418:	9e 8b       	std	Y+22, r25	; 0x16
    141a:	af 8b       	std	Y+23, r26	; 0x17
    141c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e8       	ldi	r20, 0x80	; 128
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1432:	88 23       	and	r24, r24
    1434:	2c f4       	brge	.+10     	; 0x1440 <H_LCD_void_sendData+0x78>
		__ticks = 1;
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9c 8b       	std	Y+20, r25	; 0x14
    143c:	8b 8b       	std	Y+19, r24	; 0x13
    143e:	3f c0       	rjmp	.+126    	; 0x14be <H_LCD_void_sendData+0xf6>
	else if (__tmp > 65535)
    1440:	6d 89       	ldd	r22, Y+21	; 0x15
    1442:	7e 89       	ldd	r23, Y+22	; 0x16
    1444:	8f 89       	ldd	r24, Y+23	; 0x17
    1446:	98 8d       	ldd	r25, Y+24	; 0x18
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	3f ef       	ldi	r19, 0xFF	; 255
    144c:	4f e7       	ldi	r20, 0x7F	; 127
    144e:	57 e4       	ldi	r21, 0x47	; 71
    1450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1454:	18 16       	cp	r1, r24
    1456:	4c f5       	brge	.+82     	; 0x14aa <H_LCD_void_sendData+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1458:	69 8d       	ldd	r22, Y+25	; 0x19
    145a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    145c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    145e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e2       	ldi	r20, 0x20	; 32
    1466:	51 e4       	ldi	r21, 0x41	; 65
    1468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	bc 01       	movw	r22, r24
    1472:	cd 01       	movw	r24, r26
    1474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9c 8b       	std	Y+20, r25	; 0x14
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	0f c0       	rjmp	.+30     	; 0x14a0 <H_LCD_void_sendData+0xd8>
    1482:	80 e9       	ldi	r24, 0x90	; 144
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	9a 8b       	std	Y+18, r25	; 0x12
    1488:	89 8b       	std	Y+17, r24	; 0x11
    148a:	89 89       	ldd	r24, Y+17	; 0x11
    148c:	9a 89       	ldd	r25, Y+18	; 0x12
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	f1 f7       	brne	.-4      	; 0x148e <H_LCD_void_sendData+0xc6>
    1492:	9a 8b       	std	Y+18, r25	; 0x12
    1494:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	9c 8b       	std	Y+20, r25	; 0x14
    149e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a0:	8b 89       	ldd	r24, Y+19	; 0x13
    14a2:	9c 89       	ldd	r25, Y+20	; 0x14
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	69 f7       	brne	.-38     	; 0x1482 <H_LCD_void_sendData+0xba>
    14a8:	14 c0       	rjmp	.+40     	; 0x14d2 <H_LCD_void_sendData+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14aa:	6d 89       	ldd	r22, Y+21	; 0x15
    14ac:	7e 89       	ldd	r23, Y+22	; 0x16
    14ae:	8f 89       	ldd	r24, Y+23	; 0x17
    14b0:	98 8d       	ldd	r25, Y+24	; 0x18
    14b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	9c 8b       	std	Y+20, r25	; 0x14
    14bc:	8b 8b       	std	Y+19, r24	; 0x13
    14be:	8b 89       	ldd	r24, Y+19	; 0x13
    14c0:	9c 89       	ldd	r25, Y+20	; 0x14
    14c2:	98 8b       	std	Y+16, r25	; 0x10
    14c4:	8f 87       	std	Y+15, r24	; 0x0f
    14c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c8:	98 89       	ldd	r25, Y+16	; 0x10
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <H_LCD_void_sendData+0x102>
    14ce:	98 8b       	std	Y+16, r25	; 0x10
    14d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    14d2:	80 91 7c 00 	lds	r24, 0x007C
    14d6:	90 91 7d 00 	lds	r25, 0x007D
    14da:	62 e0       	ldi	r22, 0x02	; 2
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	a0 e8       	ldi	r26, 0x80	; 128
    14e8:	bf e3       	ldi	r27, 0x3F	; 63
    14ea:	8b 87       	std	Y+11, r24	; 0x0b
    14ec:	9c 87       	std	Y+12, r25	; 0x0c
    14ee:	ad 87       	std	Y+13, r26	; 0x0d
    14f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	4a e7       	ldi	r20, 0x7A	; 122
    1500:	55 e4       	ldi	r21, 0x45	; 69
    1502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	8f 83       	std	Y+7, r24	; 0x07
    150c:	98 87       	std	Y+8, r25	; 0x08
    150e:	a9 87       	std	Y+9, r26	; 0x09
    1510:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1512:	6f 81       	ldd	r22, Y+7	; 0x07
    1514:	78 85       	ldd	r23, Y+8	; 0x08
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e8       	ldi	r20, 0x80	; 128
    1520:	5f e3       	ldi	r21, 0x3F	; 63
    1522:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1526:	88 23       	and	r24, r24
    1528:	2c f4       	brge	.+10     	; 0x1534 <H_LCD_void_sendData+0x16c>
		__ticks = 1;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	3f c0       	rjmp	.+126    	; 0x15b2 <H_LCD_void_sendData+0x1ea>
	else if (__tmp > 65535)
    1534:	6f 81       	ldd	r22, Y+7	; 0x07
    1536:	78 85       	ldd	r23, Y+8	; 0x08
    1538:	89 85       	ldd	r24, Y+9	; 0x09
    153a:	9a 85       	ldd	r25, Y+10	; 0x0a
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	3f ef       	ldi	r19, 0xFF	; 255
    1540:	4f e7       	ldi	r20, 0x7F	; 127
    1542:	57 e4       	ldi	r21, 0x47	; 71
    1544:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1548:	18 16       	cp	r1, r24
    154a:	4c f5       	brge	.+82     	; 0x159e <H_LCD_void_sendData+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154c:	6b 85       	ldd	r22, Y+11	; 0x0b
    154e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1550:	8d 85       	ldd	r24, Y+13	; 0x0d
    1552:	9e 85       	ldd	r25, Y+14	; 0x0e
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	51 e4       	ldi	r21, 0x41	; 65
    155c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <H_LCD_void_sendData+0x1cc>
    1576:	80 e9       	ldi	r24, 0x90	; 144
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	9c 83       	std	Y+4, r25	; 0x04
    157c:	8b 83       	std	Y+3, r24	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <H_LCD_void_sendData+0x1ba>
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	69 f7       	brne	.-38     	; 0x1576 <H_LCD_void_sendData+0x1ae>
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <H_LCD_void_sendData+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159e:	6f 81       	ldd	r22, Y+7	; 0x07
    15a0:	78 85       	ldd	r23, Y+8	; 0x08
    15a2:	89 85       	ldd	r24, Y+9	; 0x09
    15a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9e 83       	std	Y+6, r25	; 0x06
    15b0:	8d 83       	std	Y+5, r24	; 0x05
    15b2:	8d 81       	ldd	r24, Y+5	; 0x05
    15b4:	9e 81       	ldd	r25, Y+6	; 0x06
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	01 97       	sbiw	r24, 0x01	; 1
    15c0:	f1 f7       	brne	.-4      	; 0x15be <H_LCD_void_sendData+0x1f6>
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8data);
    15c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15c8:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <H_LCD_void_latchByte>
}
    15cc:	6d 96       	adiw	r28, 0x1d	; 29
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	6d 97       	sbiw	r28, 0x1d	; 29
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    15f4:	80 91 7c 00 	lds	r24, 0x007C
    15f8:	90 91 7d 00 	lds	r25, 0x007D
    15fc:	63 e0       	ldi	r22, 0x03	; 3
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e8       	ldi	r26, 0x80	; 128
    160a:	bf e3       	ldi	r27, 0x3F	; 63
    160c:	89 8f       	std	Y+25, r24	; 0x19
    160e:	9a 8f       	std	Y+26, r25	; 0x1a
    1610:	ab 8f       	std	Y+27, r26	; 0x1b
    1612:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	69 8d       	ldd	r22, Y+25	; 0x19
    1616:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1618:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a e7       	ldi	r20, 0x7A	; 122
    1622:	55 e4       	ldi	r21, 0x45	; 69
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8d 8b       	std	Y+21, r24	; 0x15
    162e:	9e 8b       	std	Y+22, r25	; 0x16
    1630:	af 8b       	std	Y+23, r26	; 0x17
    1632:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1634:	6d 89       	ldd	r22, Y+21	; 0x15
    1636:	7e 89       	ldd	r23, Y+22	; 0x16
    1638:	8f 89       	ldd	r24, Y+23	; 0x17
    163a:	98 8d       	ldd	r25, Y+24	; 0x18
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <H_LCD_void_sendCommand+0x78>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9c 8b       	std	Y+20, r25	; 0x14
    1652:	8b 8b       	std	Y+19, r24	; 0x13
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <H_LCD_void_sendCommand+0xf6>
	else if (__tmp > 65535)
    1656:	6d 89       	ldd	r22, Y+21	; 0x15
    1658:	7e 89       	ldd	r23, Y+22	; 0x16
    165a:	8f 89       	ldd	r24, Y+23	; 0x17
    165c:	98 8d       	ldd	r25, Y+24	; 0x18
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <H_LCD_void_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	69 8d       	ldd	r22, Y+25	; 0x19
    1670:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1672:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1674:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9c 8b       	std	Y+20, r25	; 0x14
    1694:	8b 8b       	std	Y+19, r24	; 0x13
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <H_LCD_void_sendCommand+0xd8>
    1698:	80 e9       	ldi	r24, 0x90	; 144
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	9a 8b       	std	Y+18, r25	; 0x12
    169e:	89 8b       	std	Y+17, r24	; 0x11
    16a0:	89 89       	ldd	r24, Y+17	; 0x11
    16a2:	9a 89       	ldd	r25, Y+18	; 0x12
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <H_LCD_void_sendCommand+0xc6>
    16a8:	9a 8b       	std	Y+18, r25	; 0x12
    16aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	8b 89       	ldd	r24, Y+19	; 0x13
    16ae:	9c 89       	ldd	r25, Y+20	; 0x14
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <H_LCD_void_sendCommand+0xba>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <H_LCD_void_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	6d 89       	ldd	r22, Y+21	; 0x15
    16c2:	7e 89       	ldd	r23, Y+22	; 0x16
    16c4:	8f 89       	ldd	r24, Y+23	; 0x17
    16c6:	98 8d       	ldd	r25, Y+24	; 0x18
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
    16d2:	8b 8b       	std	Y+19, r24	; 0x13
    16d4:	8b 89       	ldd	r24, Y+19	; 0x13
    16d6:	9c 89       	ldd	r25, Y+20	; 0x14
    16d8:	98 8b       	std	Y+16, r25	; 0x10
    16da:	8f 87       	std	Y+15, r24	; 0x0f
    16dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16de:	98 89       	ldd	r25, Y+16	; 0x10
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <H_LCD_void_sendCommand+0x102>
    16e4:	98 8b       	std	Y+16, r25	; 0x10
    16e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    16e8:	80 91 7c 00 	lds	r24, 0x007C
    16ec:	90 91 7d 00 	lds	r25, 0x007D
    16f0:	62 e0       	ldi	r22, 0x02	; 2
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a0 e8       	ldi	r26, 0x80	; 128
    16fe:	bf e3       	ldi	r27, 0x3F	; 63
    1700:	8b 87       	std	Y+11, r24	; 0x0b
    1702:	9c 87       	std	Y+12, r25	; 0x0c
    1704:	ad 87       	std	Y+13, r26	; 0x0d
    1706:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	55 e4       	ldi	r21, 0x45	; 69
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	8f 83       	std	Y+7, r24	; 0x07
    1722:	98 87       	std	Y+8, r25	; 0x08
    1724:	a9 87       	std	Y+9, r26	; 0x09
    1726:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <H_LCD_void_sendCommand+0x16c>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e 83       	std	Y+6, r25	; 0x06
    1746:	8d 83       	std	Y+5, r24	; 0x05
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <H_LCD_void_sendCommand+0x1ea>
	else if (__tmp > 65535)
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <H_LCD_void_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9e 83       	std	Y+6, r25	; 0x06
    1788:	8d 83       	std	Y+5, r24	; 0x05
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <H_LCD_void_sendCommand+0x1cc>
    178c:	80 e9       	ldi	r24, 0x90	; 144
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	8b 83       	std	Y+3, r24	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <H_LCD_void_sendCommand+0x1ba>
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <H_LCD_void_sendCommand+0x1ae>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <H_LCD_void_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <H_LCD_void_sendCommand+0x1f6>
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(copy_u8command);
    17dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17de:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <H_LCD_void_latchByte>
}
    17e2:	6d 96       	adiw	r28, 0x1d	; 29
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <H_LCD_void_sendString>:
void H_LCD_void_sendString(const u8 * pstr)
{
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <H_LCD_void_sendString+0x6>
    17fa:	0f 92       	push	r0
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	9b 83       	std	Y+3, r25	; 0x03
    1802:	8a 83       	std	Y+2, r24	; 0x02
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <H_LCD_void_sendString+0x2e>
	u8 i;
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	fc 01       	movw	r30, r24
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	80 81       	ld	r24, Z
    1818:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
		i++;
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	8f 5f       	subi	r24, 0xFF	; 255
    1820:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_latchByte(copy_u8command);
}
void H_LCD_void_sendString(const u8 * pstr)
{
	u8 i;
	while(pstr[i] != '\0')
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	fc 01       	movw	r30, r24
    182e:	e2 0f       	add	r30, r18
    1830:	f3 1f       	adc	r31, r19
    1832:	80 81       	ld	r24, Z
    1834:	88 23       	and	r24, r24
    1836:	39 f7       	brne	.-50     	; 0x1806 <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <H_LCD_void_clearDisplay>:

void H_LCD_void_clearDisplay(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	6c 97       	sbiw	r28, 0x1c	; 28
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(pPORTA, LCD_RS_PIN, low);
    1858:	80 91 7c 00 	lds	r24, 0x007C
    185c:	90 91 7d 00 	lds	r25, 0x007D
    1860:	63 e0       	ldi	r22, 0x03	; 3
    1862:	40 e0       	ldi	r20, 0x00	; 0
    1864:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e8       	ldi	r26, 0x80	; 128
    186e:	bf e3       	ldi	r27, 0x3F	; 63
    1870:	89 8f       	std	Y+25, r24	; 0x19
    1872:	9a 8f       	std	Y+26, r25	; 0x1a
    1874:	ab 8f       	std	Y+27, r26	; 0x1b
    1876:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	69 8d       	ldd	r22, Y+25	; 0x19
    187a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	55 e4       	ldi	r21, 0x45	; 69
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8d 8b       	std	Y+21, r24	; 0x15
    1892:	9e 8b       	std	Y+22, r25	; 0x16
    1894:	af 8b       	std	Y+23, r26	; 0x17
    1896:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1898:	6d 89       	ldd	r22, Y+21	; 0x15
    189a:	7e 89       	ldd	r23, Y+22	; 0x16
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <H_LCD_void_clearDisplay+0x76>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <H_LCD_void_clearDisplay+0xf4>
	else if (__tmp > 65535)
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <H_LCD_void_clearDisplay+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	69 8d       	ldd	r22, Y+25	; 0x19
    18d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <H_LCD_void_clearDisplay+0xd6>
    18fc:	80 e9       	ldi	r24, 0x90	; 144
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	9a 89       	ldd	r25, Y+18	; 0x12
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <H_LCD_void_clearDisplay+0xc4>
    190c:	9a 8b       	std	Y+18, r25	; 0x12
    190e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <H_LCD_void_clearDisplay+0xb8>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <H_LCD_void_clearDisplay+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6d 89       	ldd	r22, Y+21	; 0x15
    1926:	7e 89       	ldd	r23, Y+22	; 0x16
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	98 89       	ldd	r25, Y+16	; 0x10
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <H_LCD_void_clearDisplay+0x100>
    1948:	98 8b       	std	Y+16, r25	; 0x10
    194a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    194c:	80 91 7c 00 	lds	r24, 0x007C
    1950:	90 91 7d 00 	lds	r25, 0x007D
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e8       	ldi	r26, 0x80	; 128
    1962:	bf e3       	ldi	r27, 0x3F	; 63
    1964:	8b 87       	std	Y+11, r24	; 0x0b
    1966:	9c 87       	std	Y+12, r25	; 0x0c
    1968:	ad 87       	std	Y+13, r26	; 0x0d
    196a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	6b 85       	ldd	r22, Y+11	; 0x0b
    196e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1970:	8d 85       	ldd	r24, Y+13	; 0x0d
    1972:	9e 85       	ldd	r25, Y+14	; 0x0e
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	4a e7       	ldi	r20, 0x7A	; 122
    197a:	55 e4       	ldi	r21, 0x45	; 69
    197c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	8f 83       	std	Y+7, r24	; 0x07
    1986:	98 87       	std	Y+8, r25	; 0x08
    1988:	a9 87       	std	Y+9, r26	; 0x09
    198a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e8       	ldi	r20, 0x80	; 128
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <H_LCD_void_clearDisplay+0x16a>
		__ticks = 1;
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	9e 83       	std	Y+6, r25	; 0x06
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <H_LCD_void_clearDisplay+0x1e8>
	else if (__tmp > 65535)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	3f ef       	ldi	r19, 0xFF	; 255
    19ba:	4f e7       	ldi	r20, 0x7F	; 127
    19bc:	57 e4       	ldi	r21, 0x47	; 71
    19be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19c2:	18 16       	cp	r1, r24
    19c4:	4c f5       	brge	.+82     	; 0x1a18 <H_LCD_void_clearDisplay+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    19cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e2       	ldi	r20, 0x20	; 32
    19d4:	51 e4       	ldi	r21, 0x41	; 65
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	9e 83       	std	Y+6, r25	; 0x06
    19ec:	8d 83       	std	Y+5, r24	; 0x05
    19ee:	0f c0       	rjmp	.+30     	; 0x1a0e <H_LCD_void_clearDisplay+0x1ca>
    19f0:	80 e9       	ldi	r24, 0x90	; 144
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	9c 83       	std	Y+4, r25	; 0x04
    19f6:	8b 83       	std	Y+3, r24	; 0x03
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	01 97       	sbiw	r24, 0x01	; 1
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <H_LCD_void_clearDisplay+0x1b8>
    1a00:	9c 83       	std	Y+4, r25	; 0x04
    1a02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	01 97       	sbiw	r24, 0x01	; 1
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f7       	brne	.-38     	; 0x19f0 <H_LCD_void_clearDisplay+0x1ac>
    1a16:	14 c0       	rjmp	.+40     	; 0x1a40 <H_LCD_void_clearDisplay+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a18:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1a:	78 85       	ldd	r23, Y+8	; 0x08
    1a1c:	89 85       	ldd	r24, Y+9	; 0x09
    1a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	9a 81       	ldd	r25, Y+2	; 0x02
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	f1 f7       	brne	.-4      	; 0x1a38 <H_LCD_void_clearDisplay+0x1f4>
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	H_LCD_void_latchByte(LCD_CLEAR);
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <H_LCD_void_latchByte>
}
    1a46:	6c 96       	adiw	r28, 0x1c	; 28
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <H_LCD_void_gotoXY>:
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <H_LCD_void_gotoXY+0x6>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <H_LCD_void_gotoXY+0x8>
    1a60:	0f 92       	push	r0
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	6b 83       	std	Y+3, r22	; 0x03
	u8 location = 0;
    1a6a:	19 82       	std	Y+1, r1	; 0x01

	switch(copy_u8Row)
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3d 83       	std	Y+5, r19	; 0x05
    1a74:	2c 83       	std	Y+4, r18	; 0x04
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	c1 f0       	breq	.+48     	; 0x1ab0 <H_LCD_void_gotoXY+0x58>
    1a80:	2c 81       	ldd	r18, Y+4	; 0x04
    1a82:	3d 81       	ldd	r19, Y+5	; 0x05
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	2c f4       	brge	.+10     	; 0x1a94 <H_LCD_void_gotoXY+0x3c>
    1a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <H_LCD_void_gotoXY+0x52>
    1a92:	19 c0       	rjmp	.+50     	; 0x1ac6 <H_LCD_void_gotoXY+0x6e>
    1a94:	2c 81       	ldd	r18, Y+4	; 0x04
    1a96:	3d 81       	ldd	r19, Y+5	; 0x05
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <H_LCD_void_gotoXY+0x60>
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	61 f0       	breq	.+24     	; 0x1ac0 <H_LCD_void_gotoXY+0x68>
    1aa8:	0e c0       	rjmp	.+28     	; 0x1ac6 <H_LCD_void_gotoXY+0x6e>
	{
	case 0:
		location = copy_u8Col;
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	0b c0       	rjmp	.+22     	; 0x1ac6 <H_LCD_void_gotoXY+0x6e>
		break;
	case 1:
		location = copy_u8Col + 0x40;
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	80 5c       	subi	r24, 0xC0	; 192
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	07 c0       	rjmp	.+14     	; 0x1ac6 <H_LCD_void_gotoXY+0x6e>
		break;
	case 2:
		location = copy_u8Col + 0x10;
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	80 5f       	subi	r24, 0xF0	; 240
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <H_LCD_void_gotoXY+0x6e>
		break;
	case 3:
		location = copy_u8Col + 0x50;
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	80 5b       	subi	r24, 0xB0	; 176
    1ac4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	H_LCD_void_sendCommand((location | LCD_SET_CURSOR_LOCATION));
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	e9 97       	sbiw	r28, 0x39	; 57
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(7))&(0x01)));
    1af4:	20 91 7e 00 	lds	r18, 0x007E
    1af8:	30 91 7f 00 	lds	r19, 0x007F
    1afc:	89 ad       	ldd	r24, Y+57	; 0x39
    1afe:	48 2f       	mov	r20, r24
    1b00:	44 1f       	adc	r20, r20
    1b02:	44 27       	eor	r20, r20
    1b04:	44 1f       	adc	r20, r20
    1b06:	c9 01       	movw	r24, r18
    1b08:	64 e0       	ldi	r22, 0x04	; 4
    1b0a:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(6))&(0x01)));
    1b0e:	20 91 7e 00 	lds	r18, 0x007E
    1b12:	30 91 7f 00 	lds	r19, 0x007F
    1b16:	89 ad       	ldd	r24, Y+57	; 0x39
    1b18:	82 95       	swap	r24
    1b1a:	86 95       	lsr	r24
    1b1c:	86 95       	lsr	r24
    1b1e:	83 70       	andi	r24, 0x03	; 3
    1b20:	48 2f       	mov	r20, r24
    1b22:	41 70       	andi	r20, 0x01	; 1
    1b24:	c9 01       	movw	r24, r18
    1b26:	62 e0       	ldi	r22, 0x02	; 2
    1b28:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(5))&(0x01)));
    1b2c:	20 91 7e 00 	lds	r18, 0x007E
    1b30:	30 91 7f 00 	lds	r19, 0x007F
    1b34:	89 ad       	ldd	r24, Y+57	; 0x39
    1b36:	82 95       	swap	r24
    1b38:	86 95       	lsr	r24
    1b3a:	87 70       	andi	r24, 0x07	; 7
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	41 70       	andi	r20, 0x01	; 1
    1b40:	c9 01       	movw	r24, r18
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(4))&(0x01)));
    1b48:	20 91 7e 00 	lds	r18, 0x007E
    1b4c:	30 91 7f 00 	lds	r19, 0x007F
    1b50:	89 ad       	ldd	r24, Y+57	; 0x39
    1b52:	82 95       	swap	r24
    1b54:	8f 70       	andi	r24, 0x0F	; 15
    1b56:	48 2f       	mov	r20, r24
    1b58:	41 70       	andi	r20, 0x01	; 1
    1b5a:	c9 01       	movw	r24, r18
    1b5c:	60 e0       	ldi	r22, 0x00	; 0
    1b5e:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	for(i = 7,j=3; i>=4 ; i--,j--)
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}
	 */
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1b62:	80 91 7c 00 	lds	r24, 0x007C
    1b66:	90 91 7d 00 	lds	r25, 0x007D
    1b6a:	62 e0       	ldi	r22, 0x02	; 2
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	a0 e8       	ldi	r26, 0x80	; 128
    1b78:	bf e3       	ldi	r27, 0x3F	; 63
    1b7a:	8d ab       	std	Y+53, r24	; 0x35
    1b7c:	9e ab       	std	Y+54, r25	; 0x36
    1b7e:	af ab       	std	Y+55, r26	; 0x37
    1b80:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b82:	6d a9       	ldd	r22, Y+53	; 0x35
    1b84:	7e a9       	ldd	r23, Y+54	; 0x36
    1b86:	8f a9       	ldd	r24, Y+55	; 0x37
    1b88:	98 ad       	ldd	r25, Y+56	; 0x38
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a e7       	ldi	r20, 0x7A	; 122
    1b90:	55 e4       	ldi	r21, 0x45	; 69
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	89 ab       	std	Y+49, r24	; 0x31
    1b9c:	9a ab       	std	Y+50, r25	; 0x32
    1b9e:	ab ab       	std	Y+51, r26	; 0x33
    1ba0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba8:	9c a9       	ldd	r25, Y+52	; 0x34
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	2c f4       	brge	.+10     	; 0x1bc4 <H_LCD_void_latchByte+0xe6>
		__ticks = 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	98 ab       	std	Y+48, r25	; 0x30
    1bc0:	8f a7       	std	Y+47, r24	; 0x2f
    1bc2:	3f c0       	rjmp	.+126    	; 0x1c42 <H_LCD_void_latchByte+0x164>
	else if (__tmp > 65535)
    1bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bca:	9c a9       	ldd	r25, Y+52	; 0x34
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f e7       	ldi	r20, 0x7F	; 127
    1bd2:	57 e4       	ldi	r21, 0x47	; 71
    1bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	4c f5       	brge	.+82     	; 0x1c2e <H_LCD_void_latchByte+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bdc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bde:	7e a9       	ldd	r23, Y+54	; 0x36
    1be0:	8f a9       	ldd	r24, Y+55	; 0x37
    1be2:	98 ad       	ldd	r25, Y+56	; 0x38
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	98 ab       	std	Y+48, r25	; 0x30
    1c02:	8f a7       	std	Y+47, r24	; 0x2f
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <H_LCD_void_latchByte+0x146>
    1c06:	80 e9       	ldi	r24, 0x90	; 144
    1c08:	91 e0       	ldi	r25, 0x01	; 1
    1c0a:	9e a7       	std	Y+46, r25	; 0x2e
    1c0c:	8d a7       	std	Y+45, r24	; 0x2d
    1c0e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c10:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <H_LCD_void_latchByte+0x134>
    1c16:	9e a7       	std	Y+46, r25	; 0x2e
    1c18:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	98 ab       	std	Y+48, r25	; 0x30
    1c22:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c26:	98 a9       	ldd	r25, Y+48	; 0x30
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	69 f7       	brne	.-38     	; 0x1c06 <H_LCD_void_latchByte+0x128>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <H_LCD_void_latchByte+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c30:	7a a9       	ldd	r23, Y+50	; 0x32
    1c32:	8b a9       	ldd	r24, Y+51	; 0x33
    1c34:	9c a9       	ldd	r25, Y+52	; 0x34
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	98 ab       	std	Y+48, r25	; 0x30
    1c40:	8f a7       	std	Y+47, r24	; 0x2f
    1c42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c44:	98 a9       	ldd	r25, Y+48	; 0x30
    1c46:	9c a7       	std	Y+44, r25	; 0x2c
    1c48:	8b a7       	std	Y+43, r24	; 0x2b
    1c4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <H_LCD_void_latchByte+0x170>
    1c52:	9c a7       	std	Y+44, r25	; 0x2c
    1c54:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1c56:	80 91 7c 00 	lds	r24, 0x007C
    1c5a:	90 91 7d 00 	lds	r25, 0x007D
    1c5e:	62 e0       	ldi	r22, 0x02	; 2
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 ea       	ldi	r26, 0xA0	; 160
    1c6c:	b0 e4       	ldi	r27, 0x40	; 64
    1c6e:	8f a3       	std	Y+39, r24	; 0x27
    1c70:	98 a7       	std	Y+40, r25	; 0x28
    1c72:	a9 a7       	std	Y+41, r26	; 0x29
    1c74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	55 e4       	ldi	r21, 0x45	; 69
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8b a3       	std	Y+35, r24	; 0x23
    1c90:	9c a3       	std	Y+36, r25	; 0x24
    1c92:	ad a3       	std	Y+37, r26	; 0x25
    1c94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c96:	6b a1       	ldd	r22, Y+35	; 0x23
    1c98:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <H_LCD_void_latchByte+0x1da>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a a3       	std	Y+34, r25	; 0x22
    1cb4:	89 a3       	std	Y+33, r24	; 0x21
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <H_LCD_void_latchByte+0x258>
	else if (__tmp > 65535)
    1cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cba:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <H_LCD_void_latchByte+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <H_LCD_void_latchByte+0x23a>
    1cfa:	80 e9       	ldi	r24, 0x90	; 144
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	98 a3       	std	Y+32, r25	; 0x20
    1d00:	8f 8f       	std	Y+31, r24	; 0x1f
    1d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d04:	98 a1       	ldd	r25, Y+32	; 0x20
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <H_LCD_void_latchByte+0x228>
    1d0a:	98 a3       	std	Y+32, r25	; 0x20
    1d0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <H_LCD_void_latchByte+0x21c>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <H_LCD_void_latchByte+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <H_LCD_void_latchByte+0x264>
    1d46:	9e 8f       	std	Y+30, r25	; 0x1e
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		DIO_voidSetPinValue(pPORTB, u8LCD_DataPins[j], ((copy_u8Byte>>i)&0x01));
	}

	 */
	DIO_voidSetPinValue(pPORTB, LCD_D7_PIN, (((copy_u8Byte)>>(3))&(0x01)));
    1d4a:	20 91 7e 00 	lds	r18, 0x007E
    1d4e:	30 91 7f 00 	lds	r19, 0x007F
    1d52:	89 ad       	ldd	r24, Y+57	; 0x39
    1d54:	86 95       	lsr	r24
    1d56:	86 95       	lsr	r24
    1d58:	86 95       	lsr	r24
    1d5a:	48 2f       	mov	r20, r24
    1d5c:	41 70       	andi	r20, 0x01	; 1
    1d5e:	c9 01       	movw	r24, r18
    1d60:	64 e0       	ldi	r22, 0x04	; 4
    1d62:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D6_PIN, (((copy_u8Byte)>>(2))&(0x01)));
    1d66:	20 91 7e 00 	lds	r18, 0x007E
    1d6a:	30 91 7f 00 	lds	r19, 0x007F
    1d6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d70:	86 95       	lsr	r24
    1d72:	86 95       	lsr	r24
    1d74:	48 2f       	mov	r20, r24
    1d76:	41 70       	andi	r20, 0x01	; 1
    1d78:	c9 01       	movw	r24, r18
    1d7a:	62 e0       	ldi	r22, 0x02	; 2
    1d7c:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D5_PIN, (((copy_u8Byte)>>(1))&(0x01)));
    1d80:	20 91 7e 00 	lds	r18, 0x007E
    1d84:	30 91 7f 00 	lds	r19, 0x007F
    1d88:	89 ad       	ldd	r24, Y+57	; 0x39
    1d8a:	86 95       	lsr	r24
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	41 70       	andi	r20, 0x01	; 1
    1d90:	c9 01       	movw	r24, r18
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(pPORTB, LCD_D4_PIN, (((copy_u8Byte)>>(0))&(0x01)));
    1d98:	20 91 7e 00 	lds	r18, 0x007E
    1d9c:	30 91 7f 00 	lds	r19, 0x007F
    1da0:	89 ad       	ldd	r24, Y+57	; 0x39
    1da2:	48 2f       	mov	r20, r24
    1da4:	41 70       	andi	r20, 0x01	; 1
    1da6:	c9 01       	movw	r24, r18
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, high);
    1dae:	80 91 7c 00 	lds	r24, 0x007C
    1db2:	90 91 7d 00 	lds	r25, 0x007D
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e8       	ldi	r26, 0x80	; 128
    1dc4:	bf e3       	ldi	r27, 0x3F	; 63
    1dc6:	89 8f       	std	Y+25, r24	; 0x19
    1dc8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dca:	ab 8f       	std	Y+27, r26	; 0x1b
    1dcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a e7       	ldi	r20, 0x7A	; 122
    1ddc:	55 e4       	ldi	r21, 0x45	; 69
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8d 8b       	std	Y+21, r24	; 0x15
    1de8:	9e 8b       	std	Y+22, r25	; 0x16
    1dea:	af 8b       	std	Y+23, r26	; 0x17
    1dec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dee:	6d 89       	ldd	r22, Y+21	; 0x15
    1df0:	7e 89       	ldd	r23, Y+22	; 0x16
    1df2:	8f 89       	ldd	r24, Y+23	; 0x17
    1df4:	98 8d       	ldd	r25, Y+24	; 0x18
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <H_LCD_void_latchByte+0x332>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9c 8b       	std	Y+20, r25	; 0x14
    1e0c:	8b 8b       	std	Y+19, r24	; 0x13
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <H_LCD_void_latchByte+0x3b0>
	else if (__tmp > 65535)
    1e10:	6d 89       	ldd	r22, Y+21	; 0x15
    1e12:	7e 89       	ldd	r23, Y+22	; 0x16
    1e14:	8f 89       	ldd	r24, Y+23	; 0x17
    1e16:	98 8d       	ldd	r25, Y+24	; 0x18
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <H_LCD_void_latchByte+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <H_LCD_void_latchByte+0x392>
    1e52:	80 e9       	ldi	r24, 0x90	; 144
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	89 8b       	std	Y+17, r24	; 0x11
    1e5a:	89 89       	ldd	r24, Y+17	; 0x11
    1e5c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <H_LCD_void_latchByte+0x380>
    1e62:	9a 8b       	std	Y+18, r25	; 0x12
    1e64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8b 89       	ldd	r24, Y+19	; 0x13
    1e72:	9c 89       	ldd	r25, Y+20	; 0x14
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <H_LCD_void_latchByte+0x374>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <H_LCD_void_latchByte+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e80:	98 8d       	ldd	r25, Y+24	; 0x18
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9c 8b       	std	Y+20, r25	; 0x14
    1e8c:	8b 8b       	std	Y+19, r24	; 0x13
    1e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e90:	9c 89       	ldd	r25, Y+20	; 0x14
    1e92:	98 8b       	std	Y+16, r25	; 0x10
    1e94:	8f 87       	std	Y+15, r24	; 0x0f
    1e96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e98:	98 89       	ldd	r25, Y+16	; 0x10
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <H_LCD_void_latchByte+0x3bc>
    1e9e:	98 8b       	std	Y+16, r25	; 0x10
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(pPORTA, LCD_EN_PIN, low);
    1ea2:	80 91 7c 00 	lds	r24, 0x007C
    1ea6:	90 91 7d 00 	lds	r25, 0x007D
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 bc 07 	call	0xf78	; 0xf78 <DIO_voidSetPinValue>
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 ea       	ldi	r26, 0xA0	; 160
    1eb8:	b0 e4       	ldi	r27, 0x40	; 64
    1eba:	8b 87       	std	Y+11, r24	; 0x0b
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	ad 87       	std	Y+13, r26	; 0x0d
    1ec0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a e7       	ldi	r20, 0x7A	; 122
    1ed0:	55 e4       	ldi	r21, 0x45	; 69
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8f 83       	std	Y+7, r24	; 0x07
    1edc:	98 87       	std	Y+8, r25	; 0x08
    1ede:	a9 87       	std	Y+9, r26	; 0x09
    1ee0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ee2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee4:	78 85       	ldd	r23, Y+8	; 0x08
    1ee6:	89 85       	ldd	r24, Y+9	; 0x09
    1ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	2c f4       	brge	.+10     	; 0x1f04 <H_LCD_void_latchByte+0x426>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	9e 83       	std	Y+6, r25	; 0x06
    1f00:	8d 83       	std	Y+5, r24	; 0x05
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <H_LCD_void_latchByte+0x4a4>
	else if (__tmp > 65535)
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	3f ef       	ldi	r19, 0xFF	; 255
    1f10:	4f e7       	ldi	r20, 0x7F	; 127
    1f12:	57 e4       	ldi	r21, 0x47	; 71
    1f14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f18:	18 16       	cp	r1, r24
    1f1a:	4c f5       	brge	.+82     	; 0x1f6e <H_LCD_void_latchByte+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e2       	ldi	r20, 0x20	; 32
    1f2a:	51 e4       	ldi	r21, 0x41	; 65
    1f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e 83       	std	Y+6, r25	; 0x06
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	0f c0       	rjmp	.+30     	; 0x1f64 <H_LCD_void_latchByte+0x486>
    1f46:	80 e9       	ldi	r24, 0x90	; 144
    1f48:	91 e0       	ldi	r25, 0x01	; 1
    1f4a:	9c 83       	std	Y+4, r25	; 0x04
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	9c 81       	ldd	r25, Y+4	; 0x04
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	f1 f7       	brne	.-4      	; 0x1f52 <H_LCD_void_latchByte+0x474>
    1f56:	9c 83       	std	Y+4, r25	; 0x04
    1f58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f64:	8d 81       	ldd	r24, Y+5	; 0x05
    1f66:	9e 81       	ldd	r25, Y+6	; 0x06
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	69 f7       	brne	.-38     	; 0x1f46 <H_LCD_void_latchByte+0x468>
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <H_LCD_void_latchByte+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	8d 81       	ldd	r24, Y+5	; 0x05
    1f84:	9e 81       	ldd	r25, Y+6	; 0x06
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <H_LCD_void_latchByte+0x4b0>
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    1f96:	e9 96       	adiw	r28, 0x39	; 57
    1f98:	0f b6       	in	r0, 0x3f	; 63
    1f9a:	f8 94       	cli
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	0f be       	out	0x3f, r0	; 63
    1fa0:	cd bf       	out	0x3d, r28	; 61
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <H_LCD_void_creatCustomChar>:



void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charLocation)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <H_LCD_void_creatCustomChar+0x6>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <H_LCD_void_creatCustomChar+0x8>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
    1fb8:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;

	if(copy_u8charLocation < 8)
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	88 30       	cpi	r24, 0x08	; 8
    1fbe:	f8 f4       	brcc	.+62     	; 0x1ffe <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	88 2f       	mov	r24, r24
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	08 96       	adiw	r24, 0x08	; 8
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	88 0f       	add	r24, r24
    1fce:	99 1f       	adc	r25, r25
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
		for(i=0 ; i<8 ; i++)
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <H_LCD_void_creatCustomChar+0x50>
		{
			H_LCD_void_sendData(ArrPattern[i]);
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e2 0f       	add	r30, r18
    1fea:	f3 1f       	adc	r31, r19
    1fec:	80 81       	ld	r24, Z
    1fee:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
	unsigned char i;

	if(copy_u8charLocation < 8)
	{
		H_LCD_void_sendCommand(0X40 + (copy_u8charLocation*8));
		for(i=0 ; i<8 ; i++)
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
    1ffa:	88 30       	cpi	r24, 0x08	; 8
    1ffc:	78 f3       	brcs	.-34     	; 0x1fdc <H_LCD_void_creatCustomChar+0x34>
	}
	else
	{

	}
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charLocation)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	0f 92       	push	r0
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0X80 + copy_u8charLocation);
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	80 58       	subi	r24, 0x80	; 128
    201c:	0e 94 ef 0a 	call	0x15de	; 0x15de <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charLocation);
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>

}
    2026:	0f 90       	pop	r0
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <H_LCD_void_displayHex>:

void H_LCD_void_displayHex(u8 copy_u8charCode)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <H_LCD_void_displayHex+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <H_LCD_void_displayHex+0x8>
    2036:	00 d0       	rcall	.+0      	; 0x2038 <H_LCD_void_displayHex+0xa>
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char val = 0;
    203e:	19 82       	std	Y+1, r1	; 0x01
	H_LCD_void_sendString("0x");
    2040:	80 e6       	ldi	r24, 0x60	; 96
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <H_LCD_void_sendString>

	val = ((0xF0 & copy_u8charCode)>>4);
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	82 95       	swap	r24
    204c:	8f 70       	andi	r24, 0x0F	; 15
    204e:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	28 2f       	mov	r18, r24
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	3e 83       	std	Y+6, r19	; 0x06
    2058:	2d 83       	std	Y+5, r18	; 0x05
    205a:	8d 81       	ldd	r24, Y+5	; 0x05
    205c:	9e 81       	ldd	r25, Y+6	; 0x06
    205e:	8b 30       	cpi	r24, 0x0B	; 11
    2060:	91 05       	cpc	r25, r1
    2062:	69 f1       	breq	.+90     	; 0x20be <H_LCD_void_displayHex+0x90>
    2064:	2d 81       	ldd	r18, Y+5	; 0x05
    2066:	3e 81       	ldd	r19, Y+6	; 0x06
    2068:	2c 30       	cpi	r18, 0x0C	; 12
    206a:	31 05       	cpc	r19, r1
    206c:	54 f4       	brge	.+20     	; 0x2082 <H_LCD_void_displayHex+0x54>
    206e:	8d 81       	ldd	r24, Y+5	; 0x05
    2070:	9e 81       	ldd	r25, Y+6	; 0x06
    2072:	99 23       	and	r25, r25
    2074:	bc f1       	brlt	.+110    	; 0x20e4 <H_LCD_void_displayHex+0xb6>
    2076:	2d 81       	ldd	r18, Y+5	; 0x05
    2078:	3e 81       	ldd	r19, Y+6	; 0x06
    207a:	2a 30       	cpi	r18, 0x0A	; 10
    207c:	31 05       	cpc	r19, r1
    207e:	b4 f0       	brlt	.+44     	; 0x20ac <H_LCD_void_displayHex+0x7e>
    2080:	1a c0       	rjmp	.+52     	; 0x20b6 <H_LCD_void_displayHex+0x88>
    2082:	8d 81       	ldd	r24, Y+5	; 0x05
    2084:	9e 81       	ldd	r25, Y+6	; 0x06
    2086:	8d 30       	cpi	r24, 0x0D	; 13
    2088:	91 05       	cpc	r25, r1
    208a:	09 f1       	breq	.+66     	; 0x20ce <H_LCD_void_displayHex+0xa0>
    208c:	2d 81       	ldd	r18, Y+5	; 0x05
    208e:	3e 81       	ldd	r19, Y+6	; 0x06
    2090:	2d 30       	cpi	r18, 0x0D	; 13
    2092:	31 05       	cpc	r19, r1
    2094:	c4 f0       	brlt	.+48     	; 0x20c6 <H_LCD_void_displayHex+0x98>
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	8e 30       	cpi	r24, 0x0E	; 14
    209c:	91 05       	cpc	r25, r1
    209e:	d9 f0       	breq	.+54     	; 0x20d6 <H_LCD_void_displayHex+0xa8>
    20a0:	2d 81       	ldd	r18, Y+5	; 0x05
    20a2:	3e 81       	ldd	r19, Y+6	; 0x06
    20a4:	2f 30       	cpi	r18, 0x0F	; 15
    20a6:	31 05       	cpc	r19, r1
    20a8:	d1 f0       	breq	.+52     	; 0x20de <H_LCD_void_displayHex+0xb0>
    20aa:	1c c0       	rjmp	.+56     	; 0x20e4 <H_LCD_void_displayHex+0xb6>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	80 5d       	subi	r24, 0xD0	; 208
    20b0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    20b4:	17 c0       	rjmp	.+46     	; 0x20e4 <H_LCD_void_displayHex+0xb6>
		break;
	case 10:
		H_LCD_void_sendData('A');
    20b6:	81 e4       	ldi	r24, 0x41	; 65
    20b8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    20bc:	13 c0       	rjmp	.+38     	; 0x20e4 <H_LCD_void_displayHex+0xb6>
		break;
	case 11:
		H_LCD_void_sendData('B');
    20be:	82 e4       	ldi	r24, 0x42	; 66
    20c0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <H_LCD_void_displayHex+0xb6>
		break;
	case 12:
		H_LCD_void_sendData('C');
    20c6:	83 e4       	ldi	r24, 0x43	; 67
    20c8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    20cc:	0b c0       	rjmp	.+22     	; 0x20e4 <H_LCD_void_displayHex+0xb6>
		break;
	case 13:
		H_LCD_void_sendData('D');
    20ce:	84 e4       	ldi	r24, 0x44	; 68
    20d0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    20d4:	07 c0       	rjmp	.+14     	; 0x20e4 <H_LCD_void_displayHex+0xb6>
		break;
	case 14:
		H_LCD_void_sendData('E');
    20d6:	85 e4       	ldi	r24, 0x45	; 69
    20d8:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    20dc:	03 c0       	rjmp	.+6      	; 0x20e4 <H_LCD_void_displayHex+0xb6>
		break;
	case 15:
		H_LCD_void_sendData('F');
    20de:	86 e4       	ldi	r24, 0x46	; 70
    20e0:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
		break;
	}

	val = (0x0F & copy_u8charCode);
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	8f 70       	andi	r24, 0x0F	; 15
    20e8:	89 83       	std	Y+1, r24	; 0x01

	switch(val)
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	3c 83       	std	Y+4, r19	; 0x04
    20f2:	2b 83       	std	Y+3, r18	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	8b 30       	cpi	r24, 0x0B	; 11
    20fa:	91 05       	cpc	r25, r1
    20fc:	69 f1       	breq	.+90     	; 0x2158 <H_LCD_void_displayHex+0x12a>
    20fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2100:	3c 81       	ldd	r19, Y+4	; 0x04
    2102:	2c 30       	cpi	r18, 0x0C	; 12
    2104:	31 05       	cpc	r19, r1
    2106:	54 f4       	brge	.+20     	; 0x211c <H_LCD_void_displayHex+0xee>
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	99 23       	and	r25, r25
    210e:	bc f1       	brlt	.+110    	; 0x217e <H_LCD_void_displayHex+0x150>
    2110:	2b 81       	ldd	r18, Y+3	; 0x03
    2112:	3c 81       	ldd	r19, Y+4	; 0x04
    2114:	2a 30       	cpi	r18, 0x0A	; 10
    2116:	31 05       	cpc	r19, r1
    2118:	b4 f0       	brlt	.+44     	; 0x2146 <H_LCD_void_displayHex+0x118>
    211a:	1a c0       	rjmp	.+52     	; 0x2150 <H_LCD_void_displayHex+0x122>
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	8d 30       	cpi	r24, 0x0D	; 13
    2122:	91 05       	cpc	r25, r1
    2124:	09 f1       	breq	.+66     	; 0x2168 <H_LCD_void_displayHex+0x13a>
    2126:	2b 81       	ldd	r18, Y+3	; 0x03
    2128:	3c 81       	ldd	r19, Y+4	; 0x04
    212a:	2d 30       	cpi	r18, 0x0D	; 13
    212c:	31 05       	cpc	r19, r1
    212e:	c4 f0       	brlt	.+48     	; 0x2160 <H_LCD_void_displayHex+0x132>
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	8e 30       	cpi	r24, 0x0E	; 14
    2136:	91 05       	cpc	r25, r1
    2138:	d9 f0       	breq	.+54     	; 0x2170 <H_LCD_void_displayHex+0x142>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	2f 30       	cpi	r18, 0x0F	; 15
    2140:	31 05       	cpc	r19, r1
    2142:	d1 f0       	breq	.+52     	; 0x2178 <H_LCD_void_displayHex+0x14a>
    2144:	1c c0       	rjmp	.+56     	; 0x217e <H_LCD_void_displayHex+0x150>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		H_LCD_void_sendData(val+'0');
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	80 5d       	subi	r24, 0xD0	; 208
    214a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    214e:	17 c0       	rjmp	.+46     	; 0x217e <H_LCD_void_displayHex+0x150>
		break;
	case 10:
		H_LCD_void_sendData('A');
    2150:	81 e4       	ldi	r24, 0x41	; 65
    2152:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    2156:	13 c0       	rjmp	.+38     	; 0x217e <H_LCD_void_displayHex+0x150>
		break;
	case 11:
		H_LCD_void_sendData('B');
    2158:	82 e4       	ldi	r24, 0x42	; 66
    215a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    215e:	0f c0       	rjmp	.+30     	; 0x217e <H_LCD_void_displayHex+0x150>
		break;
	case 12:
		H_LCD_void_sendData('C');
    2160:	83 e4       	ldi	r24, 0x43	; 67
    2162:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    2166:	0b c0       	rjmp	.+22     	; 0x217e <H_LCD_void_displayHex+0x150>
		break;
	case 13:
		H_LCD_void_sendData('D');
    2168:	84 e4       	ldi	r24, 0x44	; 68
    216a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    216e:	07 c0       	rjmp	.+14     	; 0x217e <H_LCD_void_displayHex+0x150>
		break;
	case 14:
		H_LCD_void_sendData('E');
    2170:	85 e4       	ldi	r24, 0x45	; 69
    2172:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
    2176:	03 c0       	rjmp	.+6      	; 0x217e <H_LCD_void_displayHex+0x150>
		break;
	case 15:
		H_LCD_void_sendData('F');
    2178:	86 e4       	ldi	r24, 0x46	; 70
    217a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
		break;
	}
}
    217e:	26 96       	adiw	r28, 0x06	; 6
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <H_LCD_void_displayBinary>:
void H_LCD_void_displayBinary(u8 copy_u8charCode)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	00 d0       	rcall	.+0      	; 0x2196 <H_LCD_void_displayBinary+0x6>
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
    219c:	83 e6       	ldi	r24, 0x63	; 99
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <H_LCD_void_sendString>
	for(i=0;i<8;i++)
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <H_LCD_void_displayBinary+0x48>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	48 2f       	mov	r20, r24
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	87 e0       	ldi	r24, 0x07	; 7
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	82 1b       	sub	r24, r18
    21ba:	93 0b       	sbc	r25, r19
    21bc:	9a 01       	movw	r18, r20
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <H_LCD_void_displayBinary+0x34>
    21c0:	35 95       	asr	r19
    21c2:	27 95       	ror	r18
    21c4:	8a 95       	dec	r24
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <H_LCD_void_displayBinary+0x30>
    21c8:	c9 01       	movw	r24, r18
    21ca:	81 70       	andi	r24, 0x01	; 1
    21cc:	80 5d       	subi	r24, 0xD0	; 208
    21ce:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
{
	unsigned char i;
	/* To be handled to send binary value for the character being input */
	/* print on screen "0b" create u8 digit and store the value of the 1st bit on the left using & with a mask 0x80 then shift the original value in a loop from 0-7 */
	H_LCD_void_sendString("0b");
	for(i=0;i<8;i++)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	8f 5f       	subi	r24, 0xFF	; 255
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	88 30       	cpi	r24, 0x08	; 8
    21dc:	28 f3       	brcs	.-54     	; 0x21a8 <H_LCD_void_displayBinary+0x18>
	{
		H_LCD_void_sendData(((copy_u8charCode>>(8-i-1))&0x01)+'0');
	}

}
    21de:	0f 90       	pop	r0
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <H_LCD_void_displayfloat>:


void H_LCD_void_displayfloat(f32 copy_f32floatValue)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	2a 97       	sbiw	r28, 0x0a	; 10
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	6f 83       	std	Y+7, r22	; 0x07
    21fe:	78 87       	std	Y+8, r23	; 0x08
    2200:	89 87       	std	Y+9, r24	; 0x09
    2202:	9a 87       	std	Y+10, r25	; 0x0a
	 char i=0, dig=0;
    2204:	1e 82       	std	Y+6, r1	; 0x06
    2206:	1d 82       	std	Y+5, r1	; 0x05
	float val=copy_f32floatValue;
    2208:	8f 81       	ldd	r24, Y+7	; 0x07
    220a:	98 85       	ldd	r25, Y+8	; 0x08
    220c:	a9 85       	ldd	r26, Y+9	; 0x09
    220e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	9a 83       	std	Y+2, r25	; 0x02
    2214:	ab 83       	std	Y+3, r26	; 0x03
    2216:	bc 83       	std	Y+4, r27	; 0x04

	// To be handled to send float value for the character being input
	// print the integer part first then the dot char then start to x10 for the float then get the % of it with 10 to print the values after the dot

	H_LCD_void_sendIntNum((int)copy_f32floatValue);
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	aa 27       	eor	r26, r26
    222a:	97 fd       	sbrc	r25, 7
    222c:	a0 95       	com	r26
    222e:	ba 2f       	mov	r27, r26
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('.');
    2238:	8e e2       	ldi	r24, 0x2E	; 46
    223a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
	if(val < 0)
    223e:	69 81       	ldd	r22, Y+1	; 0x01
    2240:	7a 81       	ldd	r23, Y+2	; 0x02
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	4c f4       	brge	.+18     	; 0x2268 <H_LCD_void_displayfloat+0x80>
	{
		val*=-1;
    2256:	89 81       	ldd	r24, Y+1	; 0x01
    2258:	9a 81       	ldd	r25, Y+2	; 0x02
    225a:	ab 81       	ldd	r26, Y+3	; 0x03
    225c:	bc 81       	ldd	r27, Y+4	; 0x04
    225e:	b0 58       	subi	r27, 0x80	; 128
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	9a 83       	std	Y+2, r25	; 0x02
    2264:	ab 83       	std	Y+3, r26	; 0x03
    2266:	bc 83       	std	Y+4, r27	; 0x04
	}
	for(i=0;i<3;i++)
    2268:	1e 82       	std	Y+6, r1	; 0x06
    226a:	2a c0       	rjmp	.+84     	; 0x22c0 <H_LCD_void_displayfloat+0xd8>
	{
		val *=10;
    226c:	69 81       	ldd	r22, Y+1	; 0x01
    226e:	7a 81       	ldd	r23, Y+2	; 0x02
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	9a 83       	std	Y+2, r25	; 0x02
    2288:	ab 83       	std	Y+3, r26	; 0x03
    228a:	bc 83       	std	Y+4, r27	; 0x04
		dig = (unsigned char)(((long)val)%10);
    228c:	69 81       	ldd	r22, Y+1	; 0x01
    228e:	7a 81       	ldd	r23, Y+2	; 0x02
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	2a e0       	ldi	r18, 0x0A	; 10
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	bc 01       	movw	r22, r24
    22a6:	cd 01       	movw	r24, r26
    22a8:	0e 94 3f 12 	call	0x247e	; 0x247e <__divmodsi4>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8d 83       	std	Y+5, r24	; 0x05
		H_LCD_void_sendData(dig+'0');
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	80 5d       	subi	r24, 0xD0	; 208
    22b6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
	H_LCD_void_sendData('.');
	if(val < 0)
	{
		val*=-1;
	}
	for(i=0;i<3;i++)
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	8f 5f       	subi	r24, 0xFF	; 255
    22be:	8e 83       	std	Y+6, r24	; 0x06
    22c0:	8e 81       	ldd	r24, Y+6	; 0x06
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	98 f2       	brcs	.-90     	; 0x226c <H_LCD_void_displayfloat+0x84>
	{
		val *=10;
		dig = (unsigned char)(((long)val)%10);
		H_LCD_void_sendData(dig+'0');
	}
}
    22c6:	2a 96       	adiw	r28, 0x0a	; 10
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_intNum)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	6c 97       	sbiw	r28, 0x1c	; 28
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	69 8f       	std	Y+25, r22	; 0x19
    22ee:	7a 8f       	std	Y+26, r23	; 0x1a
    22f0:	8b 8f       	std	Y+27, r24	; 0x1b
    22f2:	9c 8f       	std	Y+28, r25	; 0x1c
	signed char digit[20]={0}, j, i = 0;
    22f4:	84 e1       	ldi	r24, 0x14	; 20
    22f6:	fe 01       	movw	r30, r28
    22f8:	35 96       	adiw	r30, 0x05	; 5
    22fa:	df 01       	movw	r26, r30
    22fc:	98 2f       	mov	r25, r24
    22fe:	1d 92       	st	X+, r1
    2300:	9a 95       	dec	r25
    2302:	e9 f7       	brne	.-6      	; 0x22fe <H_LCD_void_sendIntNum+0x26>
    2304:	1b 82       	std	Y+3, r1	; 0x03
	int val = copy_intNum;
    2306:	89 8d       	ldd	r24, Y+25	; 0x19
    2308:	9a 8d       	ldd	r25, Y+26	; 0x1a
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01

	if(val!= 0)
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	09 f4       	brne	.+2      	; 0x2318 <H_LCD_void_sendIntNum+0x40>
    2316:	5d c0       	rjmp	.+186    	; 0x23d2 <H_LCD_void_sendIntNum+0xfa>
	{
		if(val < 0)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	9a 81       	ldd	r25, Y+2	; 0x02
    231c:	99 23       	and	r25, r25
    231e:	c4 f4       	brge	.+48     	; 0x2350 <H_LCD_void_sendIntNum+0x78>
		{
			H_LCD_void_sendData('-');
    2320:	8d e2       	ldi	r24, 0x2D	; 45
    2322:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
			val *=-1;
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	9a 81       	ldd	r25, Y+2	; 0x02
    232a:	90 95       	com	r25
    232c:	81 95       	neg	r24
    232e:	9f 4f       	sbci	r25, 0xFF	; 255
    2330:	9a 83       	std	Y+2, r25	; 0x02
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	0d c0       	rjmp	.+26     	; 0x2350 <H_LCD_void_sendIntNum+0x78>
		}
		while(val>=1)
		{
			i++;
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	8f 5f       	subi	r24, 0xFF	; 255
    233a:	8b 83       	std	Y+3, r24	; 0x03
			val /= 10;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	2a e0       	ldi	r18, 0x0A	; 10
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	b9 01       	movw	r22, r18
    2346:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    234a:	cb 01       	movw	r24, r22
    234c:	9a 83       	std	Y+2, r25	; 0x02
    234e:	89 83       	std	Y+1, r24	; 0x01
		if(val < 0)
		{
			H_LCD_void_sendData('-');
			val *=-1;
		}
		while(val>=1)
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	18 16       	cp	r1, r24
    2356:	19 06       	cpc	r1, r25
    2358:	74 f3       	brlt	.-36     	; 0x2336 <H_LCD_void_sendIntNum+0x5e>
		{
			i++;
			val /= 10;
		}
		val = copy_intNum;
    235a:	89 8d       	ldd	r24, Y+25	; 0x19
    235c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
		if(val < 1)
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	18 16       	cp	r1, r24
    2368:	19 06       	cpc	r1, r25
    236a:	3c f0       	brlt	.+14     	; 0x237a <H_LCD_void_sendIntNum+0xa2>
		{
			val *=-1;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	90 95       	com	r25
    2372:	81 95       	neg	r24
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	81 50       	subi	r24, 0x01	; 1
    237e:	8c 83       	std	Y+4, r24	; 0x04
    2380:	20 c0       	rjmp	.+64     	; 0x23c2 <H_LCD_void_sendIntNum+0xea>
		{
			digit[j] =  (char)((val%10)+'0');
    2382:	8c 81       	ldd	r24, Y+4	; 0x04
    2384:	e8 2f       	mov	r30, r24
    2386:	ff 27       	eor	r31, r31
    2388:	e7 fd       	sbrc	r30, 7
    238a:	f0 95       	com	r31
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	2a e0       	ldi	r18, 0x0A	; 10
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	b9 01       	movw	r22, r18
    2396:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    239a:	80 5d       	subi	r24, 0xD0	; 208
    239c:	28 2f       	mov	r18, r24
    239e:	ce 01       	movw	r24, r28
    23a0:	05 96       	adiw	r24, 0x05	; 5
    23a2:	e8 0f       	add	r30, r24
    23a4:	f9 1f       	adc	r31, r25
    23a6:	20 83       	st	Z, r18
			val /= 10;
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	9a 81       	ldd	r25, Y+2	; 0x02
    23ac:	2a e0       	ldi	r18, 0x0A	; 10
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	b9 01       	movw	r22, r18
    23b2:	0e 94 2c 12 	call	0x2458	; 0x2458 <__divmodhi4>
    23b6:	cb 01       	movw	r24, r22
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
		val = copy_intNum;
		if(val < 1)
		{
			val *=-1;
		}
		for(j = (i-1); j>=0 ; j--) //489	i=3
    23bc:	8c 81       	ldd	r24, Y+4	; 0x04
    23be:	81 50       	subi	r24, 0x01	; 1
    23c0:	8c 83       	std	Y+4, r24	; 0x04
    23c2:	8c 81       	ldd	r24, Y+4	; 0x04
    23c4:	88 23       	and	r24, r24
    23c6:	ec f6       	brge	.-70     	; 0x2382 <H_LCD_void_sendIntNum+0xaa>
		{
			digit[j] =  (char)((val%10)+'0');
			val /= 10;
		}
		H_LCD_void_sendString(digit);
    23c8:	ce 01       	movw	r24, r28
    23ca:	05 96       	adiw	r24, 0x05	; 5
    23cc:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <H_LCD_void_sendString>
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <H_LCD_void_sendIntNum+0x100>

	}
	else
	{
		H_LCD_void_sendData('0');
    23d2:	80 e3       	ldi	r24, 0x30	; 48
    23d4:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <H_LCD_void_sendData>
	}

	/*itoa(copy_s32Num,digit,10);*/
}
    23d8:	6c 96       	adiw	r28, 0x1c	; 28
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	de bf       	out	0x3e, r29	; 62
    23e0:	0f be       	out	0x3f, r0	; 63
    23e2:	cd bf       	out	0x3d, r28	; 61
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <main>:
u16 copy_result = 0;

void valueUpdate(u16 val);

int main()
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <main+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <main+0x8>
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62

	u8 voltVal = 0;
    23f8:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidSetPinDirection(pPORTA, Pin0, input);
    23fa:	80 91 7c 00 	lds	r24, 0x007C
    23fe:	90 91 7d 00 	lds	r25, 0x007D
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	0e 94 08 07 	call	0xe10	; 0xe10 <DIO_voidSetPinDirection>

	ADC_INIT_CONFIG config = {ADC_INT_ENABLE, AVCC, DIVISION_FACTOR_8, LEFT_ADJUST};
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	8b 83       	std	Y+3, r24	; 0x03
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	8c 83       	std	Y+4, r24	; 0x04
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	8d 83       	std	Y+5, r24	; 0x05
	GIE_Enable();
    241a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <GIE_Enable>

	H_LCD_void_Init();
    241e:	0e 94 2d 09 	call	0x125a	; 0x125a <H_LCD_void_Init>
	ADC_Init(&config);
    2422:	ce 01       	movw	r24, r28
    2424:	02 96       	adiw	r24, 0x02	; 2
    2426:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_Init>

	H_LCD_void_sendString("Reading: ");
    242a:	86 e6       	ldi	r24, 0x66	; 102
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <H_LCD_void_sendString>
    2432:	ff cf       	rjmp	.-2      	; 0x2432 <main+0x48>

00002434 <valueUpdate>:
*/
	}
}

void valueUpdate(u16 val)
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	00 d0       	rcall	.+0      	; 0x243a <valueUpdate+0x6>
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01

	copy_result = val;
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	9a 81       	ldd	r25, Y+2	; 0x02
    2446:	90 93 9d 00 	sts	0x009D, r25
    244a:	80 93 9c 00 	sts	0x009C, r24
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <__divmodhi4>:
    2458:	97 fb       	bst	r25, 7
    245a:	09 2e       	mov	r0, r25
    245c:	07 26       	eor	r0, r23
    245e:	0a d0       	rcall	.+20     	; 0x2474 <__divmodhi4_neg1>
    2460:	77 fd       	sbrc	r23, 7
    2462:	04 d0       	rcall	.+8      	; 0x246c <__divmodhi4_neg2>
    2464:	27 d0       	rcall	.+78     	; 0x24b4 <__udivmodhi4>
    2466:	06 d0       	rcall	.+12     	; 0x2474 <__divmodhi4_neg1>
    2468:	00 20       	and	r0, r0
    246a:	1a f4       	brpl	.+6      	; 0x2472 <__divmodhi4_exit>

0000246c <__divmodhi4_neg2>:
    246c:	70 95       	com	r23
    246e:	61 95       	neg	r22
    2470:	7f 4f       	sbci	r23, 0xFF	; 255

00002472 <__divmodhi4_exit>:
    2472:	08 95       	ret

00002474 <__divmodhi4_neg1>:
    2474:	f6 f7       	brtc	.-4      	; 0x2472 <__divmodhi4_exit>
    2476:	90 95       	com	r25
    2478:	81 95       	neg	r24
    247a:	9f 4f       	sbci	r25, 0xFF	; 255
    247c:	08 95       	ret

0000247e <__divmodsi4>:
    247e:	97 fb       	bst	r25, 7
    2480:	09 2e       	mov	r0, r25
    2482:	05 26       	eor	r0, r21
    2484:	0e d0       	rcall	.+28     	; 0x24a2 <__divmodsi4_neg1>
    2486:	57 fd       	sbrc	r21, 7
    2488:	04 d0       	rcall	.+8      	; 0x2492 <__divmodsi4_neg2>
    248a:	28 d0       	rcall	.+80     	; 0x24dc <__udivmodsi4>
    248c:	0a d0       	rcall	.+20     	; 0x24a2 <__divmodsi4_neg1>
    248e:	00 1c       	adc	r0, r0
    2490:	38 f4       	brcc	.+14     	; 0x24a0 <__divmodsi4_exit>

00002492 <__divmodsi4_neg2>:
    2492:	50 95       	com	r21
    2494:	40 95       	com	r20
    2496:	30 95       	com	r19
    2498:	21 95       	neg	r18
    249a:	3f 4f       	sbci	r19, 0xFF	; 255
    249c:	4f 4f       	sbci	r20, 0xFF	; 255
    249e:	5f 4f       	sbci	r21, 0xFF	; 255

000024a0 <__divmodsi4_exit>:
    24a0:	08 95       	ret

000024a2 <__divmodsi4_neg1>:
    24a2:	f6 f7       	brtc	.-4      	; 0x24a0 <__divmodsi4_exit>
    24a4:	90 95       	com	r25
    24a6:	80 95       	com	r24
    24a8:	70 95       	com	r23
    24aa:	61 95       	neg	r22
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	08 95       	ret

000024b4 <__udivmodhi4>:
    24b4:	aa 1b       	sub	r26, r26
    24b6:	bb 1b       	sub	r27, r27
    24b8:	51 e1       	ldi	r21, 0x11	; 17
    24ba:	07 c0       	rjmp	.+14     	; 0x24ca <__udivmodhi4_ep>

000024bc <__udivmodhi4_loop>:
    24bc:	aa 1f       	adc	r26, r26
    24be:	bb 1f       	adc	r27, r27
    24c0:	a6 17       	cp	r26, r22
    24c2:	b7 07       	cpc	r27, r23
    24c4:	10 f0       	brcs	.+4      	; 0x24ca <__udivmodhi4_ep>
    24c6:	a6 1b       	sub	r26, r22
    24c8:	b7 0b       	sbc	r27, r23

000024ca <__udivmodhi4_ep>:
    24ca:	88 1f       	adc	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	5a 95       	dec	r21
    24d0:	a9 f7       	brne	.-22     	; 0x24bc <__udivmodhi4_loop>
    24d2:	80 95       	com	r24
    24d4:	90 95       	com	r25
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	08 95       	ret

000024dc <__udivmodsi4>:
    24dc:	a1 e2       	ldi	r26, 0x21	; 33
    24de:	1a 2e       	mov	r1, r26
    24e0:	aa 1b       	sub	r26, r26
    24e2:	bb 1b       	sub	r27, r27
    24e4:	fd 01       	movw	r30, r26
    24e6:	0d c0       	rjmp	.+26     	; 0x2502 <__udivmodsi4_ep>

000024e8 <__udivmodsi4_loop>:
    24e8:	aa 1f       	adc	r26, r26
    24ea:	bb 1f       	adc	r27, r27
    24ec:	ee 1f       	adc	r30, r30
    24ee:	ff 1f       	adc	r31, r31
    24f0:	a2 17       	cp	r26, r18
    24f2:	b3 07       	cpc	r27, r19
    24f4:	e4 07       	cpc	r30, r20
    24f6:	f5 07       	cpc	r31, r21
    24f8:	20 f0       	brcs	.+8      	; 0x2502 <__udivmodsi4_ep>
    24fa:	a2 1b       	sub	r26, r18
    24fc:	b3 0b       	sbc	r27, r19
    24fe:	e4 0b       	sbc	r30, r20
    2500:	f5 0b       	sbc	r31, r21

00002502 <__udivmodsi4_ep>:
    2502:	66 1f       	adc	r22, r22
    2504:	77 1f       	adc	r23, r23
    2506:	88 1f       	adc	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	1a 94       	dec	r1
    250c:	69 f7       	brne	.-38     	; 0x24e8 <__udivmodsi4_loop>
    250e:	60 95       	com	r22
    2510:	70 95       	com	r23
    2512:	80 95       	com	r24
    2514:	90 95       	com	r25
    2516:	9b 01       	movw	r18, r22
    2518:	ac 01       	movw	r20, r24
    251a:	bd 01       	movw	r22, r26
    251c:	cf 01       	movw	r24, r30
    251e:	08 95       	ret

00002520 <__prologue_saves__>:
    2520:	2f 92       	push	r2
    2522:	3f 92       	push	r3
    2524:	4f 92       	push	r4
    2526:	5f 92       	push	r5
    2528:	6f 92       	push	r6
    252a:	7f 92       	push	r7
    252c:	8f 92       	push	r8
    252e:	9f 92       	push	r9
    2530:	af 92       	push	r10
    2532:	bf 92       	push	r11
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	ca 1b       	sub	r28, r26
    254a:	db 0b       	sbc	r29, r27
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	09 94       	ijmp

00002558 <__epilogue_restores__>:
    2558:	2a 88       	ldd	r2, Y+18	; 0x12
    255a:	39 88       	ldd	r3, Y+17	; 0x11
    255c:	48 88       	ldd	r4, Y+16	; 0x10
    255e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2560:	6e 84       	ldd	r6, Y+14	; 0x0e
    2562:	7d 84       	ldd	r7, Y+13	; 0x0d
    2564:	8c 84       	ldd	r8, Y+12	; 0x0c
    2566:	9b 84       	ldd	r9, Y+11	; 0x0b
    2568:	aa 84       	ldd	r10, Y+10	; 0x0a
    256a:	b9 84       	ldd	r11, Y+9	; 0x09
    256c:	c8 84       	ldd	r12, Y+8	; 0x08
    256e:	df 80       	ldd	r13, Y+7	; 0x07
    2570:	ee 80       	ldd	r14, Y+6	; 0x06
    2572:	fd 80       	ldd	r15, Y+5	; 0x05
    2574:	0c 81       	ldd	r16, Y+4	; 0x04
    2576:	1b 81       	ldd	r17, Y+3	; 0x03
    2578:	aa 81       	ldd	r26, Y+2	; 0x02
    257a:	b9 81       	ldd	r27, Y+1	; 0x01
    257c:	ce 0f       	add	r28, r30
    257e:	d1 1d       	adc	r29, r1
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	ed 01       	movw	r28, r26
    258c:	08 95       	ret

0000258e <_exit>:
    258e:	f8 94       	cli

00002590 <__stop_program>:
    2590:	ff cf       	rjmp	.-2      	; 0x2590 <__stop_program>
